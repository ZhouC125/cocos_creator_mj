{"version":3,"sources":["EgretEvent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\hall\\event","sourcesContent":["import { EventPhase } from \"./EventPhase\";\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n//  Copyright (c) 2014-present, Egret Technology.\n//  All rights reserved.\n//  Redistribution and use in source and binary forms, with or without\n//  modification, are permitted provided that the following conditions are met:\n//\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Egret nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n//\n//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,\n//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * @language en_US\n * The EgretEvent class is used as the base class for the creation of EgretEvent objects, which are passed as parameters to event\n * listeners when an event occurs.The properties of the EgretEvent class carry basic information about an event, such as\n * the event's type or whether the event's default behavior can be canceled. For many events, such as the events represented\n * by the EgretEvent class constants, this basic information is sufficient. Other events, however, may require more detailed\n * information. Events associated with a touch tap, for example, need to include additional information about the\n * location of the touch event. You can pass such additional information to event listeners by extending the EgretEvent class,\n * which is what the TouchEvent class does. Egret API defines several EgretEvent subclasses for common events that require\n * additional information. Events associated with each of the EgretEvent subclasses are described in the documentation for\n * each class.The methods of the EgretEvent class can be used in event listener functions to affect the behavior of the event\n * object. Some events have an associated default behavior. Your event listener can cancel this behavior by calling the\n * preventDefault() method. You can also make the current event listener the last one to process an event by calling\n * the stopPropagation() or stopImmediatePropagation() method.\n * @see egret.EventDispatcher\n * @version Egret 2.4\n * @platform Web,Native\n * @includeExample egret/events/EgretEvent.ts\n * @see http://edn.egret.com/cn/docs/page/798 取消触摸事件\n */\n/**\n * @language zh_CN\n * EgretEvent 类作为创建事件实例的基类，当发生事件时，Event 实例将作为参数传递给事件侦听器。Event 类的属性包含有关事件的基本信息，例如事件\n * 的类型或者是否可以取消事件的默认行为。对于许多事件（如由 EgretEvent 类常量表示的事件），此基本信息就足够了。但其他事件可能需要更详细的信息。\n * 例如，与触摸关联的事件需要包括有关触摸事件的位置信息。您可以通过扩展 EgretEvent 类（TouchEvent 类执行的操作）将此类其他信息传递给事件侦听器。\n * Egret API 为需要其他信息的常见事件定义多个 EgretEvent 子类。与每个 EgretEvent 子类关联的事件将在每个类的文档中加以介绍。Event 类的方法可以在\n * 事件侦听器函数中使用以影响事件对象的行为。某些事件有关联的默认行为，通过调用 preventDefault() 方法，您的事件侦听器可以取消此行为。\n * 可以通过调用 stopPropagation() 或 stopImmediatePropagation() 方法，将当前事件侦听器作为处理事件的最后一个事件侦听器。\n * @see egret.EventDispatcher\n * @version Egret 2.4\n * @platform Web,Native\n * @includeExample egret/events/EgretEvent.ts\n * @see http://edn.egret.com/cn/docs/page/798 取消触摸事件\n */\nexport class EgretEvent  {\n    /**\n     * @language en_US\n     * Dispatched when a display object is added to the on stage display list, either directly or through the addition\n     * of a sub tree in which the display object is contained.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 在将显示对象直接添加到舞台显示列表或将包含显示对象的子树添加至舞台显示列表中时调度。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static ADDED_TO_STAGE: string = \"addedToStage\";\n    /**\n     * @language en_US\n     * Dispatched when a display object is about to be removed from the display list, either directly or through the removal\n     * of a sub tree in which the display object is contained.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 在从显示列表中直接删除显示对象或删除包含显示对象的子树时调度。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static REMOVED_FROM_STAGE: string = \"removedFromStage\";\n    /**\n     * @language en_US\n     * Dispatched when a display object is added to the display list.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 将显示对象添加到显示列表中时调度。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static ADDED: string = \"added\";\n    /**\n     * @language en_US\n     * Dispatched when a display object is about to be removed from the display list.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 将要从显示列表中删除显示对象时调度。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static REMOVED: string = \"removed\";\n    /**\n     * @language en_US\n     * [broadcast event] Dispatched when the playhead is entering a new frame.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * [广播事件] 进入新的一帧,监听此事件将会在下一帧开始时触发一次回调。这是一个广播事件，可以在任何一个显示对象上监听，无论它是否在显示列表中。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static ENTER_FRAME: string = \"enterFrame\";\n    /**\n     * @language en_US\n     * Dispatched when the display list is about to be updated and rendered.\n     * Note: Every time you want to receive a render event,you must call the stage.invalidate() method.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 渲染事件，监听此事件将会在本帧末即将开始渲染的前一刻触发回调，这是一个广播事件，可以在任何一个显示对象上监听，无论它是否在显示列表中。\n     * 注意：每次您希望 Egret 发送 EgretEvent.RENDER 事件时，都必须调用 stage.invalidate() 方法，由于每帧只会触发一次屏幕刷新，\n     * 若在 EgretEvent.RENDER 回调函数执行期间再次调用stage.invalidate()，将会被忽略。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static RENDER: string = \"render\";\n    /**\n     * @language en_US\n     * Dispatched when the size of stage or UIComponent is changed.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 舞台尺寸或UI组件尺寸发生改变\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static RESIZE: string = \"resize\";\n\n    /**\n     * @language en_US\n     * Dispatched when the value or selection of a property is chaned.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 属性值或状态发生改变。通常是按钮的选中状态，或者列表的选中项索引改变。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static CHANGE: string = \"change\";\n\n    /**\n     * @language en_US\n     * Dispatched when the value or selection of a property is going to change.you can cancel this by calling the\n     * preventDefault() method.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 属性值或状态即将发生改变,通常是按钮的选中状态，或者列表的选中项索引改变。可以通过调用 preventDefault() 方法阻止索引发生更改。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static CHANGING: string = \"changing\";\n    /**\n     * @language en_US\n     * Dispatched when the net request is complete.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 网络请求加载完成\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static COMPLETE: string = \"complete\";\n\n    /**\n     * @language en_US\n     * Dispatched when loop completed.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 循环完成\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static LOOP_COMPLETE: string = \"loopComplete\";\n\n    /**\n     * @language en_US\n     * Dispatched when the TextInput instance gets focus.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * TextInput实例获得焦点\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static FOCUS_IN: string = \"focusIn\";\n    /**\n     * @language en_US\n     * Dispatched when the TextInput instance loses focus.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * TextInput实例失去焦点\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static FOCUS_OUT: string = \"focusOut\";\n    /**\n     * @language en_US\n     * Dispatched when the playback is ended.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 动画声音等播放完成\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static ENDED: string = \"ended\";\n\n\n    /**\n     * 游戏激活\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static ACTIVATE: string = \"activate\";\n\n    /**\n     * 取消激活\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static DEACTIVATE: string = \"deactivate\";\n\n    /**\n     * EgretEvent.CLOSE 常量定义 close 事件对象的 type 属性的值。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static CLOSE: string = \"close\";\n\n    /**\n     * EgretEvent.CONNECT 常量定义 connect 事件对象的 type 属性的值。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static CONNECT: string = \"connect\";\n\n\n    /**\n     * EgretEvent.LEAVE_STAGE 常量定义 leaveStage 事件对象的 type 属性的值。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static LEAVE_STAGE: string = \"leaveStage\";\n\n    /**\n     * EgretEvent.SOUND_COMPLETE 常量定义 在声音完成播放后调度。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static SOUND_COMPLETE: string = \"soundComplete\";\n\n\n    /**\n     * @language en_US\n     * Creates an EgretEvent object to pass as a parameter to event listeners.\n     * @param type  The type of the event, accessible as EgretEvent.type.\n     * @param bubbles  Determines whether the EgretEvent object participates in the bubbling stage of the event flow. The default value is false.\n     * @param cancelable Determines whether the EgretEvent object can be canceled. The default values is false.\n     * @param data the optional data associated with this event\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 创建一个作为参数传递给事件侦听器的 EgretEvent 对象。\n     * @param type  事件的类型，可以作为 EgretEvent.type 访问。\n     * @param bubbles  确定 EgretEvent 对象是否参与事件流的冒泡阶段。默认值为 false。\n     * @param cancelable 确定是否可以取消 EgretEvent 对象。默认值为 false。\n     * @param data 与此事件对象关联的可选数据。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public constructor(type: string, bubbles?: boolean, cancelable?: boolean, data?: any) {       \n        this.$type = type;\n        this.$bubbles = !!bubbles;\n        this.$cancelable = !!cancelable;\n        this.data = data;\n    }\n\n    /**\n     * @language en_US\n     * the optional data associated with this event\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 与此事件对象关联的可选数据。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public data: any;\n\n    /**\n     * @private\n     */\n    $type: string;\n\n    /**\n     * @language en_US\n     * The type of event. The type is case-sensitive.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 事件的类型。类型区分大小写。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public get type(): string {\n        return this.$type;\n    }\n\n    /**\n     * @private\n     */\n    $bubbles: boolean;\n\n    /**\n     * @language en_US\n     * Indicates whether an event is a bubbling event.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 表示事件是否为冒泡事件。如果事件可以冒泡，则此值为 true；否则为 false。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public get bubbles(): boolean {\n        return this.$bubbles;\n    }\n\n    /**\n     * @private\n     */\n    $cancelable: boolean;\n    /**\n     * @language en_US\n     * Indicates whether the behavior associated with the event can be prevented. If the behavior can be\n     * canceled, this value is true; otherwise it is false.\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 表示是否可以阻止与事件相关联的行为。如果可以取消该行为，则此值为 true；否则为 false。\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public get cancelable(): boolean {\n        return this.$cancelable;\n    }\n\n    /**\n     * @private\n     */\n    $eventPhase: number = 2;\n\n    /**\n     * @language en_US\n     * The current phase in the event flow. This property can contain the following numeric values:\n     * The capture phase (EventPhase.CAPTURING_PHASE).\n     * The target phase (EventPhase.AT_TARGET)\n     * The bubbling phase (EventPhase.BUBBLING_PHASE).\n     * @see egret.EventPhase\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 事件流中的当前阶段。此属性可以包含以下数值：\n     * 捕获阶段 (EventPhase.CAPTURING_PHASE)。\n     * 目标阶段 (EventPhase.AT_TARGET)。\n     * 冒泡阶段 (EventPhase.BUBBLING_PHASE)。\n     * @see egret.EventPhase\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public get eventPhase(): number {\n        return this.$eventPhase;\n    }\n\n    /**\n     * @private\n     */\n    $currentTarget: any = null;\n\n    /**\n     * @language en_US\n     * The object that is actively processing the EgretEvent object with an event listener. For example, if a\n     * user clicks an OK button, the current target could be the node containing that button or one of its ancestors\n     * that has registered an event listener for that event.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 当前正在使用某个事件侦听器处理 EgretEvent 对象的对象。例如，如果用户单击“确定”按钮，\n     * 则当前目标可以是包含该按钮的节点，也可以是它的已为该事件注册了事件侦听器的始祖之一。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public get currentTarget(): any {\n        return this.$currentTarget;\n    }\n\n    /**\n     * @private\n     */\n    $target: any = null;\n\n    /**\n     * @language en_US\n     * The event target. This property contains the target node. For example, if a user clicks an OK button,\n     * the target node is the display list node containing that button.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 事件目标。此属性包含目标节点。例如，如果用户单击“确定”按钮，则目标节点就是包含该按钮的显示列表节点。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public get target(): any {\n        return this.$target;\n    }\n\n    $setTarget(target: any): boolean {\n        this.$target = target;\n        return true;\n    }\n\n    /**\n     * @private\n     */\n    $isDefaultPrevented: boolean = false;\n\n    /**\n     * @language en_US\n     * Checks whether the preventDefault() method has been called on the event. If the preventDefault() method has been\n     * called, returns true; otherwise, returns false.\n     * @returns If preventDefault() has been called, returns true; otherwise, returns false.\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 检查是否已对事件调用 preventDefault() 方法。\n     * @returns 如果已调用 preventDefault() 方法，则返回 true；否则返回 false。\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public isDefaultPrevented(): boolean {\n        return this.$isDefaultPrevented;\n    }\n\n    /**\n     * @language en_US\n     * Cancels an event's default behavior if that behavior can be canceled.Many events have associated behaviors that\n     * are carried out by default. For example, if a user types a character into a text input, the default behavior\n     * is that the character is displayed in the text input. Because the TextEvent.TEXT_INPUT event's default behavior\n     * can be canceled, you can use the preventDefault() method to prevent the character from appearing.\n     * You can use the EgretEvent.cancelable property to check whether you can prevent the default behavior associated with\n     * a particular event. If the value of EgretEvent.cancelable is true, then preventDefault() can be used to cancel the event;\n     * otherwise, preventDefault() has no effect.\n     * @see #cancelable\n     * @see #isDefaultPrevented\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 如果可以取消事件的默认行为，则取消该行为。\n     * 许多事件都有默认执行的关联行为。例如，如果用户在文本字段中键入一个字符，则默认行为就是在文本字段中显示该字符。\n     * 由于可以取消 TextEvent.TEXT_INPUT 事件的默认行为，因此您可以使用 preventDefault() 方法来防止显示该字符。\n     * 您可以使用 EgretEvent.cancelable 属性来检查是否可以防止与特定事件关联的默认行为。如果 EgretEvent.cancelable 的值为 true，\n     * 则可以使用 preventDefault() 来取消事件；否则，preventDefault() 无效。\n     * @see #cancelable\n     * @see #isDefaultPrevented\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public preventDefault(): void {\n        if (this.$cancelable)\n            this.$isDefaultPrevented = true;\n    }\n\n    /**\n     * @private\n     */\n    $isPropagationStopped: boolean = false;\n\n    /**\n     * @language en_US\n     * Prevents processing of any event listeners in nodes subsequent to the current node in the event flow. This method\n     * does not affect any event listeners in the current node (currentTarget). In contrast, the stopImmediatePropagation()\n     * method prevents processing of event listeners in both the current node and subsequent nodes. Additional calls to this\n     * method have no effect. This method can be called in any phase of the event flow.<br/>\n     * Note: This method does not cancel the behavior associated with this event; see preventDefault() for that functionality.\n     * @see #stopImmediatePropagation()\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 防止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 currentTarget 中的任何事件侦听器。\n     * 相比之下，stopImmediatePropagation() 方法可以防止对当前节点中和后续节点中的事件侦听器进行处理。\n     * 对此方法的其它调用没有任何效果。可以在事件流的任何阶段中调用此方法。<br/>\n     * 注意：此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 preventDefault()。\n     * @see #stopImmediatePropagation()\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public stopPropagation(): void {\n        if (this.$bubbles)\n            this.$isPropagationStopped = true;\n    }\n\n    /**\n     * @private\n     */\n    $isPropagationImmediateStopped: boolean = false;\n\n    /**\n     * @language en_US\n     * Prevents processing of any event listeners in the current node and any subsequent nodes in the event flow.\n     * This method takes effect immediately, and it affects event listeners in the current node. In contrast, the\n     * stopPropagation() method doesn't take effect until all the event listeners in the current node finish processing.<br/>\n     * Note: This method does not cancel the behavior associated with this event; see preventDefault() for that functionality.\n     * @see #stopPropagation()\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 防止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。此方法会立即生效，并且会影响当前节点中的事件侦听器。\n     * 相比之下，在当前节点中的所有事件侦听器都完成处理之前，stopPropagation() 方法不会生效。<br/>\n     * 注意：此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 preventDefault()。\n     * @see #stopPropagation()\n     * @see #preventDefault()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public stopImmediatePropagation(): void {\n        if (this.$bubbles)\n            this.$isPropagationImmediateStopped = true;\n    }\n\n    /**\n     * @language en_US\n     * This method will be called automatically when you pass the event object as the parameters to the EgretEvent.release() method.\n     * If your custom event is designed for reusable,you should override this method to make sure all the references to external\n     * objects are cleaned. if not,it may cause memory leaking.\n     * @see egret.EgretEvent.create()\n     * @see egret.EgretEvent.release()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 当事件实例传递给Event.release()静态方法时，实例上的clean()方法将会被自动调用。\n     * 若此自定义事件的实例设计为可以循环复用的，为了避免引起内存泄露，自定义事件需要覆盖此方法来确保实例被缓存前断开对外部对象的一切引用。\n     * @see egret.EgretEvent.create()\n     * @see egret.EgretEvent.release()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    protected clean(): void {\n        this.data = this.$currentTarget = null;\n        this.$setTarget(null);\n    }\n\n\n    /**\n     * @language en_US\n     * EventDispatcher object using the specified event object thrown EgretEvent. Objects thrown objects will be cached in the pool for the next round robin.\n     * @param target the event target\n     * @param type The type of the event. EgretEvent listeners can access this information through the inherited type property.\n     * @param bubbles Determines whether the EgretEvent object bubbles. EgretEvent listeners can access this information through\n     * the inherited bubbles property.\n     * @param data {any} data\n     * @method egret.EgretEvent.dispatchEvent\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 使用指定的 EventDispatcher 对象来抛出 EgretEvent 事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。\n     * @param target {egret.IEventDispatcher} 派发事件目标\n     * @param type {string} 事件类型\n     * @param bubbles {boolean} 确定 EgretEvent 对象是否参与事件流的冒泡阶段。默认值为 false。\n     * @param data {any} 事件data\n     * @method egret.EgretEvent.dispatchEvent\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static dispatchEvent(target: IEventDispatcher, type: string, bubbles: boolean = false, data?: any): boolean {\n        var event: IOErrorEvent = EgretEvent.create(EgretEvent, type, bubbles);\n        var props: any = EgretEvent._getPropertyData(EgretEvent);\n        if (data != undefined) {\n            props.data = data;\n        }\n        var result = target.dispatchEvent(event);\n        EgretEvent.release(event);\n        return result;\n    }\n\n    /**\n     * @private\n     *\n     * @param EventClass\n     * @returns\n     */\n    public static _getPropertyData(EventClass: any): any {\n        var props: any = EventClass._props;\n        if (!props)\n            props = EventClass._props = {};\n        return props;\n    }\n\n    /**\n     * @language en_US\n     * Gets one event instance from the object pool or create a new one. We highly recommend using the EgretEvent.create()\n     * and EgretEvent.release() methods to create and release an event object,it can reduce the number of reallocate objects,\n     * which allows you to get better code execution performance.<br/>\n     * Note: If you want to use this method to initialize your custom event object,you must make sure the constructor\n     * of your custom event is the same as the constructor of egret.EgretEvent.\n     * @param EventClass EgretEvent Class。\n     * @param type  The type of the event, accessible as EgretEvent.type.\n     * @param bubbles  Determines whether the EgretEvent object participates in the bubbling stage of the event flow. The default value is false.\n     * @param cancelable Determines whether the EgretEvent object can be canceled. The default values is false.\n     * @example\n     * <pre>\n     *    var event = EgretEvent.create(EgretEvent,type, bubbles);\n     *    event.data = data;    //optional,initializes custom data here\n     *    this.dispatchEvent(event);\n     *    EgretEvent.release(event);\n     * </pre>\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 从对象池中取出或创建一个新的事件实例。我们建议您尽可能使用Event.create()和Event.release() 这一对方法来创建和释放事件对象，\n     * 这一对方法会将事件实例在内部缓存下来供下次循环使用，减少对象的创建次数,从而获得更高的代码运行性能。<br/>\n     * 注意：若使用此方法来创建自定义事件的实例，自定义的构造函数参数列表必须跟Event类一致。\n     * @param EventClass Event类名。\n     * @param type  事件的类型，可以作为 EgretEvent.type 访问。\n     * @param bubbles  确定 EgretEvent 对象是否参与事件流的冒泡阶段。默认值为 false。\n     * @param cancelable 确定是否可以取消 EgretEvent 对象。默认值为 false。\n     * @example\n     * <pre>\n     *    var event = EgretEvent.create(EgretEvent,type, bubbles);\n     *    event.data = data;  //可选，若指定义事件上需要附加其他参数，可以在获取实例后在此处设置。\n     *    this.dispatchEvent(event);\n     *    EgretEvent.release(event);\n     * </pre>\n     * @see #clean()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static create<T extends EgretEvent>(EventClass: { new(type: string, bubbles?: boolean, cancelable?: boolean): T; eventPool?: EgretEvent[] },\n        type: string, bubbles?: boolean, cancelable?: boolean): T {\n        var eventPool: EgretEvent[] = EventClass.eventPool;\n        if (!eventPool) {\n            eventPool = EventClass.eventPool = [];\n        }\n        if (eventPool.length) {\n            var event: T = <T>eventPool.pop();\n            event.$type = type;\n            event.$bubbles = !!bubbles;\n            event.$cancelable = !!cancelable;\n            event.$isDefaultPrevented = false;\n            event.$isPropagationStopped = false;\n            event.$isPropagationImmediateStopped = false;\n            event.$eventPhase = EventPhase.AT_TARGET;\n            return event;\n        }\n        return new EventClass(type, bubbles, cancelable);\n    }\n\n    /**\n     * @language en_US\n     * Releases an event object and cache it into the object pool.We highly recommend using the EgretEvent.create()\n     * and EgretEvent.release() methods to create and release an event object,it can reduce the number of reallocate objects,\n     * which allows you to get better code execution performance.<br/>\n     * Note: The parameters of this method only accepts an instance created by the EgretEvent.create() method.\n     * if not,it may throw an error.\n     * @example\n     * <pre>\n     *    var event = EgretEvent.create(EgretEvent,type, bubbles);\n     *    event.data = data; //optional,initializes custom data here\n     *    this.dispatchEvent(event);\n     *    EgretEvent.release(event);\n     * </pre>\n     * @see #clean()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 释放一个事件对象，并缓存到对象池。我们建议您尽可能使用Event.create()和Event.release() 这一对方法来创建和释放事件对象，\n     * 这一对方法会将事件实例在内部缓存下来供下次循环使用，减少对象的创建次数,从而获得更高的代码运行性能。<br/>\n     * 注意：此方法只能传入由Event.create()创建的事件实例，传入非法对象实例可能会导致报错。\n     * @example\n     * <pre>\n     *    var event = EgretEvent.create(EgretEvent,type, bubbles);\n     *    event.data = data;   //可选，若指定义事件上需要附加其他参数，可以在获取实例后在此处设置。\n     *    this.dispatchEvent(event);\n     *    EgretEvent.release(event);\n     * </pre>\n     * @see #clean()\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public static release(event: EgretEvent): void {\n        event.clean();\n        var EventClass: any = Object.getPrototypeOf(event).constructor;\n        EventClass.eventPool.push(event);\n    }\n\n}\n\n"]}
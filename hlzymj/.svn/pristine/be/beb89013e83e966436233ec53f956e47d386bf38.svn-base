require = function() {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }
        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function(r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }
      return n[i].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
  }
  return r;
}()({
  ByteArray: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8236dyx+dB6qqTEzxcjk2E", "ByteArray");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Endian = function() {
      function Endian() {}
      Endian.LITTLE_ENDIAN = "littleEndian";
      Endian.BIG_ENDIAN = "bigEndian";
      return Endian;
    }();
    exports.Endian = Endian;
    var ByteArray = function() {
      function ByteArray(buffer) {
        this.BUFFER_EXT_SIZE = 0;
        this.EOF_byte = -1;
        this.EOF_code_point = -1;
        this._setArrayBuffer(buffer || new ArrayBuffer(this.BUFFER_EXT_SIZE));
        this.endian = Endian.LITTLE_ENDIAN;
      }
      ByteArray.prototype._setArrayBuffer = function(buffer) {
        this.write_position = buffer.byteLength;
        this.data = new DataView(buffer);
        this._position = 0;
      };
      ByteArray.prototype.setArrayBuffer = function(buffer) {};
      Object.defineProperty(ByteArray.prototype, "buffer", {
        get: function() {
          return this.data.buffer;
        },
        set: function(value) {
          this.data = new DataView(value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ByteArray.prototype, "dataView", {
        get: function() {
          return this.data;
        },
        set: function(value) {
          this.data = value;
          this.write_position = value.byteLength;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ByteArray.prototype, "bufferOffset", {
        get: function() {
          return this.data.byteOffset;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ByteArray.prototype, "position", {
        get: function() {
          return this._position;
        },
        set: function(value) {
          this._position = value;
          this.write_position = value > this.write_position ? value : this.write_position;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ByteArray.prototype, "length", {
        get: function() {
          return this.write_position;
        },
        set: function(value) {
          this.write_position = value;
          var tmp = new Uint8Array(new ArrayBuffer(value));
          var byteLength = this.data.buffer.byteLength;
          byteLength > value && (this._position = value);
          var length = Math.min(byteLength, value);
          tmp.set(new Uint8Array(this.data.buffer, 0, length));
          this.buffer = tmp.buffer;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ByteArray.prototype, "bytesAvailable", {
        get: function() {
          return this.data.byteLength - this._position;
        },
        enumerable: true,
        configurable: true
      });
      ByteArray.prototype.clear = function() {
        this._setArrayBuffer(new ArrayBuffer(this.BUFFER_EXT_SIZE));
      };
      ByteArray.prototype.readBoolean = function() {
        if (!this.validate(ByteArray.SIZE_OF_BOOLEAN)) return null;
        return 0 != this.data.getUint8(this.position++);
      };
      ByteArray.prototype.readByte = function() {
        if (!this.validate(ByteArray.SIZE_OF_INT8)) return null;
        return this.data.getInt8(this.position++);
      };
      ByteArray.prototype.readBytes = function(bytes, offset, length) {
        void 0 === offset && (offset = 0);
        void 0 === length && (length = 0);
        if (0 == length) length = this.bytesAvailable; else if (!this.validate(length)) return null;
        bytes ? bytes.validateBuffer(offset + length) : bytes = new ByteArray(new ArrayBuffer(offset + length));
        for (var i = 0; i < length; i++) bytes.data.setUint8(i + offset, this.data.getUint8(this.position++));
      };
      ByteArray.prototype.readDouble = function() {
        if (!this.validate(ByteArray.SIZE_OF_FLOAT64)) return null;
        var value = this.data.getFloat64(this.position, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_FLOAT64;
        return value;
      };
      ByteArray.prototype.readFloat = function() {
        if (!this.validate(ByteArray.SIZE_OF_FLOAT32)) return null;
        var value = this.data.getFloat32(this.position, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_FLOAT32;
        return value;
      };
      ByteArray.prototype.readInt = function() {
        if (!this.validate(ByteArray.SIZE_OF_INT32)) return null;
        var value = this.data.getInt32(this.position, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_INT32;
        return value;
      };
      ByteArray.prototype.readShort = function() {
        if (!this.validate(ByteArray.SIZE_OF_INT16)) return null;
        var value = this.data.getInt16(this.position, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_INT16;
        return value;
      };
      ByteArray.prototype.readUnsignedByte = function() {
        if (!this.validate(ByteArray.SIZE_OF_UINT8)) return null;
        return this.data.getUint8(this.position++);
      };
      ByteArray.prototype.readUnsignedInt = function() {
        if (!this.validate(ByteArray.SIZE_OF_UINT32)) return null;
        var value = this.data.getUint32(this.position, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_UINT32;
        return value;
      };
      ByteArray.prototype.readUnsignedShort = function() {
        if (!this.validate(ByteArray.SIZE_OF_UINT16)) return null;
        var value = this.data.getUint16(this.position, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_UINT16;
        return value;
      };
      ByteArray.prototype.readUTF = function() {
        if (!this.validate(ByteArray.SIZE_OF_UINT16)) return null;
        var length = this.data.getUint16(this.position, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_UINT16;
        return length > 0 ? this.readUTFBytes(length) : "";
      };
      ByteArray.prototype.readUTFBytes = function(length) {
        if (!this.validate(length)) return null;
        var bytes = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);
        this.position += length;
        return this.decodeUTF8(bytes);
      };
      ByteArray.prototype.writeBoolean = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_BOOLEAN);
        this.data.setUint8(this.position++, value ? 1 : 0);
      };
      ByteArray.prototype.writeByte = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_INT8);
        this.data.setInt8(this.position++, value);
      };
      ByteArray.prototype.writeBytes = function(bytes, offset, length) {
        void 0 === offset && (offset = 0);
        void 0 === length && (length = 0);
        var writeLength;
        if (offset < 0) return;
        if (length < 0) return;
        writeLength = 0 == length ? bytes.length - offset : Math.min(bytes.length - offset, length);
        if (writeLength > 0) {
          this.validateBuffer(writeLength);
          var tmp_data = new DataView(bytes.buffer);
          var length = writeLength;
          var BYTES_OF_UINT32 = 4;
          for (;length > BYTES_OF_UINT32; length -= BYTES_OF_UINT32) {
            this.data.setUint32(this._position, tmp_data.getUint32(offset));
            this.position += BYTES_OF_UINT32;
            offset += BYTES_OF_UINT32;
          }
          for (;length > 0; length--) this.data.setUint8(this.position++, tmp_data.getUint8(offset++));
        }
      };
      ByteArray.prototype.writeDouble = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_FLOAT64);
        this.data.setFloat64(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_FLOAT64;
      };
      ByteArray.prototype.writeFloat = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_FLOAT32);
        this.data.setFloat32(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_FLOAT32;
      };
      ByteArray.prototype.writeInt = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_INT32);
        this.data.setInt32(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_INT32;
      };
      ByteArray.prototype.writeShort = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_INT16);
        this.data.setInt16(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_INT16;
      };
      ByteArray.prototype.writeUnsignedInt = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_UINT32);
        this.data.setUint32(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_UINT32;
      };
      ByteArray.prototype.writeUnsignedShort = function(value) {
        this.validateBuffer(ByteArray.SIZE_OF_UINT16);
        this.data.setUint16(this.position, value, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_UINT16;
      };
      ByteArray.prototype.writeUTF = function(value) {
        var utf8bytes = this.encodeUTF8(value);
        var length = utf8bytes.length;
        this.validateBuffer(ByteArray.SIZE_OF_UINT16 + length);
        this.data.setUint16(this.position, length, this.endian == Endian.LITTLE_ENDIAN);
        this.position += ByteArray.SIZE_OF_UINT16;
        this._writeUint8Array(utf8bytes, false);
      };
      ByteArray.prototype.writeUTFBytes = function(value) {
        this._writeUint8Array(this.encodeUTF8(value));
      };
      ByteArray.prototype.toString = function() {
        return "[ByteArray] length:" + this.length + ", bytesAvailable:" + this.bytesAvailable;
      };
      ByteArray.prototype._writeUint8Array = function(bytes, validateBuffer) {
        void 0 === validateBuffer && (validateBuffer = true);
        validateBuffer && this.validateBuffer(this.position + bytes.length);
        for (var i = 0; i < bytes.length; i++) this.data.setUint8(this.position++, bytes[i]);
      };
      ByteArray.prototype.validate = function(len) {
        if (this.data.byteLength > 0 && this._position + len <= this.data.byteLength) return true;
        console.log("validate error 1025 data.byteLength = " + this.data.byteLength + ",", this._position + len + " < " + this.data.byteLength);
      };
      ByteArray.prototype.validateBuffer = function(len, needReplace) {
        void 0 === needReplace && (needReplace = false);
        this.write_position = len > this.write_position ? len : this.write_position;
        len += this._position;
        if (this.data.byteLength < len || needReplace) {
          var tmp = new Uint8Array(new ArrayBuffer(len + this.BUFFER_EXT_SIZE));
          var length = Math.min(this.data.buffer.byteLength, len + this.BUFFER_EXT_SIZE);
          tmp.set(new Uint8Array(this.data.buffer, 0, length));
          this.buffer = tmp.buffer;
        }
      };
      ByteArray.prototype.encodeUTF8 = function(str) {
        var pos = 0;
        var codePoints = this.stringToCodePoints(str);
        var outputBytes = [];
        while (codePoints.length > pos) {
          var code_point = codePoints[pos++];
          if (this.inRange(code_point, 55296, 57343)) this.encoderError(code_point); else if (this.inRange(code_point, 0, 127)) outputBytes.push(code_point); else {
            var count, offset;
            if (this.inRange(code_point, 128, 2047)) {
              count = 1;
              offset = 192;
            } else if (this.inRange(code_point, 2048, 65535)) {
              count = 2;
              offset = 224;
            } else if (this.inRange(code_point, 65536, 1114111)) {
              count = 3;
              offset = 240;
            }
            outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);
            while (count > 0) {
              var temp = this.div(code_point, Math.pow(64, count - 1));
              outputBytes.push(128 + temp % 64);
              count -= 1;
            }
          }
        }
        return new Uint8Array(outputBytes);
      };
      ByteArray.prototype.decodeUTF8 = function(data) {
        var fatal = false;
        var pos = 0;
        var result = "";
        var code_point;
        var utf8_code_point = 0;
        var utf8_bytes_needed = 0;
        var utf8_bytes_seen = 0;
        var utf8_lower_boundary = 0;
        while (data.length > pos) {
          var _byte = data[pos++];
          if (_byte == this.EOF_byte) code_point = 0 != utf8_bytes_needed ? this.decoderError(fatal) : this.EOF_code_point; else if (0 == utf8_bytes_needed) if (this.inRange(_byte, 0, 127)) code_point = _byte; else {
            if (this.inRange(_byte, 194, 223)) {
              utf8_bytes_needed = 1;
              utf8_lower_boundary = 128;
              utf8_code_point = _byte - 192;
            } else if (this.inRange(_byte, 224, 239)) {
              utf8_bytes_needed = 2;
              utf8_lower_boundary = 2048;
              utf8_code_point = _byte - 224;
            } else if (this.inRange(_byte, 240, 244)) {
              utf8_bytes_needed = 3;
              utf8_lower_boundary = 65536;
              utf8_code_point = _byte - 240;
            } else this.decoderError(fatal);
            utf8_code_point *= Math.pow(64, utf8_bytes_needed);
            code_point = null;
          } else if (this.inRange(_byte, 128, 191)) {
            utf8_bytes_seen += 1;
            utf8_code_point += (_byte - 128) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
            if (utf8_bytes_seen !== utf8_bytes_needed) code_point = null; else {
              var cp = utf8_code_point;
              var lower_boundary = utf8_lower_boundary;
              utf8_code_point = 0;
              utf8_bytes_needed = 0;
              utf8_bytes_seen = 0;
              utf8_lower_boundary = 0;
              code_point = this.inRange(cp, lower_boundary, 1114111) && !this.inRange(cp, 55296, 57343) ? cp : this.decoderError(fatal, _byte);
            }
          } else {
            utf8_code_point = 0;
            utf8_bytes_needed = 0;
            utf8_bytes_seen = 0;
            utf8_lower_boundary = 0;
            pos--;
            code_point = this.decoderError(fatal, _byte);
          }
          if (null !== code_point && code_point !== this.EOF_code_point) if (code_point <= 65535) code_point > 0 && (result += String.fromCharCode(code_point)); else {
            code_point -= 65536;
            result += String.fromCharCode(55296 + (code_point >> 10 & 1023));
            result += String.fromCharCode(56320 + (1023 & code_point));
          }
        }
        return result;
      };
      ByteArray.prototype.encoderError = function(code_point) {
        console.log("validate error 1026");
      };
      ByteArray.prototype.decoderError = function(fatal, opt_code_point) {
        fatal && console.log("validate error 1027");
        return opt_code_point || 65533;
      };
      ByteArray.prototype.inRange = function(a, min, max) {
        return min <= a && a <= max;
      };
      ByteArray.prototype.div = function(n, d) {
        return Math.floor(n / d);
      };
      ByteArray.prototype.stringToCodePoints = function(string) {
        var cps = [];
        var i = 0, n = string.length;
        while (i < string.length) {
          var c = string.charCodeAt(i);
          if (this.inRange(c, 55296, 57343)) if (this.inRange(c, 56320, 57343)) cps.push(65533); else if (i == n - 1) cps.push(65533); else {
            var d = string.charCodeAt(i + 1);
            if (this.inRange(d, 56320, 57343)) {
              var a = 1023 & c;
              var b = 1023 & d;
              i += 1;
              cps.push(65536 + (a << 10) + b);
            } else cps.push(65533);
          } else cps.push(c);
          i += 1;
        }
        return cps;
      };
      ByteArray.SIZE_OF_BOOLEAN = 1;
      ByteArray.SIZE_OF_INT8 = 1;
      ByteArray.SIZE_OF_INT16 = 2;
      ByteArray.SIZE_OF_INT32 = 4;
      ByteArray.SIZE_OF_UINT8 = 1;
      ByteArray.SIZE_OF_UINT16 = 2;
      ByteArray.SIZE_OF_UINT32 = 4;
      ByteArray.SIZE_OF_FLOAT32 = 4;
      ByteArray.SIZE_OF_FLOAT64 = 8;
      return ByteArray;
    }();
    exports.ByteArray = ByteArray;
    cc._RF.pop();
  }, {} ],
  CCButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8a1a3TykaxFTpvD0kFtywzE", "CCButton");
    "use strict";
    var CCButton = cc.Class({
      extends: cc.Component,
      nodeButton: null,
      _callBack: null,
      _normalUrl: null,
      _pressUrl: null,
      _bIsMove: false,
      objectData: null,
      ctor: function ctor() {},
      properties: {
        buttonLabel: {
          default: null,
          type: cc.Label
        },
        normalSprite: {
          default: null,
          type: cc.Sprite
        },
        pressSprite: {
          default: null,
          type: cc.Sprite
        },
        disSprite: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {
        this.nodeButton = new cc.Node("nodeButton");
        this.node.addChild(this.nodeButton);
        this.normalSprite = this.nodeButton.addComponent("cc.Sprite");
        this.normalSprite.spriteFrame = null;
        var nodePressSp = new cc.Node("nodePressSp");
        this.pressSprite = nodePressSp.addComponent("cc.Sprite");
        this.pressSprite.spriteFrame = null;
        this.nodeButton.addChild(nodePressSp);
        var nodeLabel = new cc.Node("nodeLabel");
        this.buttonLabel = nodeLabel.addComponent("cc.Label");
        this.buttonLabel.string = "Button";
        this.buttonLabel.enabled = false;
        this.nodeButton.addChild(nodeLabel);
        this.addTouchEvent();
      },
      addTouchEvent: function addTouchEvent() {
        var self = this;
        this.nodeButton.on(cc.Node.EventType.TOUCH_START, function(touch, event) {}, this);
        this.nodeButton.on(cc.Node.EventType.TOUCH_MOVE, function(touch, event) {
          self._bIsMove = true;
        }, this);
        this.nodeButton.on(cc.Node.EventType.TOUCH_END, function(touch, event) {
          var poistion = touch.getLocation();
          var locationInNode = this.nodeButton.convertToNodeSpace(poistion);
          var s = this.nodeButton.getBoundingBox();
          var rect = cc.rect(0, 0, s.width, s.height);
          if (cc.rectContainsPoint(rect, locationInNode)) {
            var scaleAction = cc.scaleTo(.05, 1.1, 1.1);
            var scaleActionBack = cc.scaleTo(.05, 1, 1);
            var seqAction = cc.sequence(scaleAction, scaleActionBack, cc.callFunc(function() {}));
            this.nodeButton.runAction(seqAction);
            self._callBack && self._callBack(self);
          }
        }, this);
        this.nodeButton.on(cc.Node.EventType.TOUCH_CANCEL, function(touch, event) {}, this);
      },
      start: function start() {},
      update: function update(dt) {},
      onDestroy: function onDestroy() {},
      setBtnCallBack: function setBtnCallBack(onBtnCallBack) {
        this._callBack = onBtnCallBack;
      },
      setPosition: function setPosition(x, y) {
        this.nodeButton.setPosition(cc.p(x, y));
      },
      setBtnLabelStr: function setBtnLabelStr(str) {
        this.buttonLabel.string = str;
        this.buttonLabel.enabled = true;
      },
      setObjectData: function setObjectData(objectData) {
        this.objectData = objectData;
      },
      getObjectData: function getObjectData() {
        return this.objectData;
      },
      setCCButton: function setCCButton(normalUrl, pressUrl, onClickCallBack) {
        this._normalUrl = normalUrl;
        this._pressUrl = pressUrl;
        this._callBack = onClickCallBack;
        var self = this;
        cc.loader.loadRes(normalUrl, cc.SpriteFrame, function(error, spriteframe) {
          error || (self.normalSprite.spriteFrame = spriteframe);
        });
      }
    });
    cc.CCButton = module.exports = CCButton;
    cc._RF.pop();
  }, {} ],
  CDefaultGameLibSink: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a7ecZ78BtF94wiaEeGGGk4", "CDefaultGameLibSink");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CDefaultGameLibSink = function() {
      function CDefaultGameLibSink() {}
      CDefaultGameLibSink.prototype.onLogonFinished = function() {};
      CDefaultGameLibSink.prototype.onPlazaGoldChanged = function() {};
      CDefaultGameLibSink.prototype.onRefreshUserInfo = function() {};
      CDefaultGameLibSink.prototype.onChargeInfoRefeshRet = function(result) {};
      CDefaultGameLibSink.prototype.onSendSpeakerRet = function(cbRetCode) {};
      CDefaultGameLibSink.prototype.onLogonFailed = function(errorStr, nFaileType) {};
      CDefaultGameLibSink.prototype.onEnteredGameRoom = function(tableCount, chairCount) {};
      CDefaultGameLibSink.prototype.onEnterGameRoomFailed = function(errorStr) {};
      CDefaultGameLibSink.prototype.onRoomConnectClosed = function() {};
      CDefaultGameLibSink.prototype.onEnterGameView = function() {};
      CDefaultGameLibSink.prototype.onLeaveGameView = function() {};
      CDefaultGameLibSink.prototype.onRoomUserEnter = function(userID) {};
      CDefaultGameLibSink.prototype.onRoomUserExit = function(userID) {};
      CDefaultGameLibSink.prototype.onRoomUserInfoUpdated = function(userID) {};
      CDefaultGameLibSink.prototype.onTableInfoChanged = function(tableID) {};
      CDefaultGameLibSink.prototype.onRecvHallChat = function(chat) {};
      CDefaultGameLibSink.prototype.onRecvTableChat = function(chat) {};
      CDefaultGameLibSink.prototype.onShowAlertMsg = function(msg) {};
      CDefaultGameLibSink.prototype.onLogonGameRoomSucceeded = function() {};
      CDefaultGameLibSink.prototype.onChangeUserInfoRet = function(cbRetCode) {};
      CDefaultGameLibSink.prototype.onTaskInfo = function(cbRetCode, pTaskList) {};
      CDefaultGameLibSink.prototype.onTaskGift = function(nTaskID, cbRetCode) {};
      CDefaultGameLibSink.prototype.onNewStatus = function(nNewMissionDone, nNewMail, nNewActivity, nNewFriend, bLoginGift) {};
      CDefaultGameLibSink.prototype.onBankInfo = function(nBankAmount, nBankCapacity) {};
      CDefaultGameLibSink.prototype.onCreatePrivateTableFailed = function(lpszErrorMsg) {};
      CDefaultGameLibSink.prototype.onEnterPrivateTableFailed = function(lpszErrorMsg) {};
      CDefaultGameLibSink.prototype.onGameBankOpeReturn = function(succeeded, gold, bank) {};
      CDefaultGameLibSink.prototype.onShowGameSystemMsg = function(msg) {};
      CDefaultGameLibSink.prototype.onSpeaker = function(msg, priorty) {};
      return CDefaultGameLibSink;
    }();
    exports.CDefaultGameLibSink = CDefaultGameLibSink;
    cc._RF.pop();
  }, {} ],
  CGameLib: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92a02h+o+ZJf5qIZW4pMCCP", "CGameLib");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../TSCommon");
    var GameRoom_1 = require("./room/GameRoom");
    var GamePlace_1 = require("./place/GamePlace");
    var CDefaultGameLibSink_1 = require("./CDefaultGameLibSink");
    var tagClientInfo_1 = require("./tagClientInfo");
    var tagVersionInfo_1 = require("./tagVersionInfo");
    var tagConnectInfo_1 = require("./tagConnectInfo");
    var CGameLib = function() {
      function CGameLib() {
        this.ClientInfo = new tagClientInfo_1.tagClientInfo();
        this.VersionInfo = new tagVersionInfo_1.tagVersionInfo();
        this.ConnectInfo = new tagConnectInfo_1.tagConnectInfo();
      }
      CGameLib.getInstance = function() {
        if (this._instance) return this._instance;
        console.log("创建gamelib .......");
        this._instance = new CGameLib();
        return this._instance;
      };
      CGameLib.prototype.createByHall = function(publicUserInfo, logonIP, logonPort) {
        this._publicUserInfo = publicUserInfo;
        this._gameVersion = 1;
        this._defaultSink = new CDefaultGameLibSink_1.CDefaultGameLibSink();
        this._sink = this._defaultSink;
        this._gamePlace = new GamePlace_1.GamePlace(this, publicUserInfo);
        this._gameRoom = new GameRoom_1.GameRoom(this, publicUserInfo);
        this.setPlazaPort(logonPort);
        this.setPlazaIP(logonIP);
        this._gamePlace.setSink(this._sink);
        this.getGameInfo();
      };
      CGameLib.prototype.createGamelib = function(nGameID, nGameVersion, pGameLibSink, pClientFrameSink, nPartnerID, nClientVersion, logonIP, logonPort, webRoot) {
        pGameLibSink || (pGameLibSink = this._sink);
        this._sink = pGameLibSink;
        this._nGameID = nGameID;
        this._gameVersion = nGameVersion;
        this._gameRoom.setSink(this._sink);
        this._gameRoom.setClientFrameSink(pClientFrameSink);
        this._gamePlace.setSink(pGameLibSink);
        this._gamePlace.setGameID(nGameID);
        this.setWebRoot(webRoot);
        this._gamePlace.loginGame();
      };
      CGameLib.prototype.backToHall = function() {
        this._sink = this._defaultSink;
        this._gameRoom.setSink(this._sink);
        this._gameRoom.setClientFrameSink(null);
        this._gamePlace.setSink(this._sink);
        this._gamePlace.setGameID(0);
      };
      CGameLib.prototype.setPlazaIP = function(plazaIP) {
        this._gamePlace.setServerIP(plazaIP);
      };
      CGameLib.prototype.setPlazaPort = function(port) {
        this._gamePlace.setPort(port);
      };
      CGameLib.prototype.getGameInfo = function() {
        return this._gamePlace.getGameInfo();
      };
      CGameLib.prototype.setWebRoot = function(webRoot) {
        this._gamePlace.setWebRoot(webRoot);
      };
      CGameLib.prototype.getUserLogonInfo = function() {
        return this._gamePlace.getUserLoginInfo();
      };
      CGameLib.prototype.getGameStation = function(stationID) {
        return this._gamePlace.getGameStation(stationID);
      };
      CGameLib.prototype.getGameServer = function(gameserverID) {
        return this._gamePlace.getGameServer(gameserverID);
      };
      CGameLib.prototype.getStationList = function() {
        return this._gamePlace.getStationList();
      };
      CGameLib.prototype.getGameServerList = function(stationID) {
        return this._gamePlace.getGameServerList(stationID);
      };
      CGameLib.prototype.getAllGameServerList = function() {
        return this._gamePlace.getAllGameServerList();
      };
      CGameLib.prototype.enterGameRoom = function(roomID) {
        var gameServer = this.getGameServer(roomID);
        if (null == gameServer) return "";
        if (!this._gameRoom.enterGameRoom(gameServer, this._publicUserInfo.userDBID, this._publicUserInfo.encryptPassword, this._gameVersion)) return "";
        return gameServer.szGameRoomName;
      };
      CGameLib.prototype.autoEnterGameRoom = function(station) {
        var room = this._gamePlace.getAutoEnterRoom(station);
        if (null != room) {
          TSCommon_1.TSCommon.log("autoEnterGameRoom " + room.szGameRoomName);
          this.enterGameRoom(room.dwServerID);
          var pStation = this._gamePlace.getGameStation(room.dwStationID);
          if (pStation) return pStation.szStationName;
          return room.szGameRoomName;
        }
        TSCommon_1.TSCommon.log("autoEnterGameRoom 找不到对应的房间 " + station + ",id = " + this._nGameID);
        return "";
      };
      CGameLib.prototype.enterGameRoomByIP = function(ipaddress, port) {
        return this._gameRoom.enterGameRoomByIP(ipaddress, port, this._publicUserInfo.userDBID, this._publicUserInfo.encryptPassword, this._gameVersion, this._gamePlace.getServerByIPAndPort(ipaddress, port));
      };
      CGameLib.prototype.leaveGameRoom = function() {
        this._gameRoom.leftRoom();
      };
      CGameLib.prototype.getMyself = function() {
        return this._gameRoom.getMyself();
      };
      CGameLib.prototype.getUser = function(wUserID) {
        return this._gameRoom.getUser(wUserID);
      };
      CGameLib.prototype.getUserByDBID = function(dwUserDBID) {
        return this._gameRoom.getUserByDBID(dwUserDBID);
      };
      CGameLib.prototype.sitTable = function(tableID, cbChair) {
        if (125 == this._nGameID) return this._gameRoom.sendWatchMessage(0, 0);
        return this._gameRoom.enterTable(tableID, cbChair);
      };
      CGameLib.prototype.autoSit = function() {
        TSCommon_1.TSCommon.log("autoSit gameid = " + this._nGameID);
        if (88 == this._nGameID) return this._gameRoom.sendWatchMessage(0, 0);
        return this._gameRoom.autoSit();
      };
      CGameLib.prototype.isPlaying = function() {
        var p = this.getMyself();
        if (null == p) return false;
        return p.isPlayer();
      };
      CGameLib.prototype.sendGameCmd = function(cbCmdID, data) {
        return this._gameRoom.sendGameCmd(cbCmdID, data);
      };
      CGameLib.prototype.sendReadyCmd = function() {
        return this._gameRoom.sendReady();
      };
      CGameLib.prototype.sendCancelReadyCmd = function() {
        return this._gameRoom.sendCancelReady();
      };
      CGameLib.prototype.getUserByChair = function(cbChair) {
        return this._gameRoom.getUserByChair(cbChair);
      };
      CGameLib.prototype.sendCommand = function(cbMainCmd, cbSubCmd, data) {
        return this._gameRoom.sendCommand(cbMainCmd, cbSubCmd, 0, data);
      };
      CGameLib.prototype.sendOldCmd = function(cbCmdID, data) {
        return this._gameRoom.sendOldGameCmd(cbCmdID, data);
      };
      CGameLib.prototype.setClientFrameSink = function(sink) {
        this._clientframeSink = sink;
        this._gameRoom.setClientFrameSink(sink);
      };
      CGameLib.prototype.standUp = function() {
        this._gameRoom.standup();
      };
      CGameLib.prototype.getCurrentGameRoom = function() {
        return this._gameRoom.getCurrentGameRoom();
      };
      CGameLib.prototype.isInPrivateRoom = function() {
        if (this._gameRoom.isServicing()) return this._gameRoom.isPrivteRoom();
        return false;
      };
      CGameLib.prototype.watch = function(t, c) {
        this._gameRoom.sendWatchMessage(t, c);
      };
      CGameLib.prototype.sendTableChat = function(lpszMsg) {
        return this._gameRoom.sendTableChat(lpszMsg);
      };
      CGameLib.prototype.getRelativePos = function(cbChair) {
        if (!this._gameRoom.isServicing()) return cbChair;
        return this._gameRoom.getRelativePos(cbChair);
      };
      CGameLib.prototype.getRealChair = function(cbPos) {
        if (!this._gameRoom.isServicing()) return cbPos;
        return this._gameRoom.getRealChair(cbPos);
      };
      CGameLib.prototype.formatMoney = function(lMoney) {
        var ret = null;
        var bNegative = false;
        lMoney < 0 && (bNegative = true);
        var lValue = Math.abs(lMoney);
        if (lValue < 1e4) {
          var lpsz = (bNegative ? "-" : "") + lValue;
          return lpsz;
        }
        if (lValue < 1e8) return bNegative ? "-" : "" + lValue / 1e4 + lValue % 1e4;
        return bNegative ? "-" : "" + lValue / 1e8 + lValue % 1e8 / 1e4 + lValue % 1e4;
      };
      CGameLib.prototype.getNetLag = function() {
        return this._gameRoom.getNetLag();
      };
      CGameLib.prototype.GetTableList = function() {
        return this._gameRoom.getTableList();
      };
      CGameLib.prototype.getTable = function(tableID) {
        return this._gameRoom.getTable(tableID);
      };
      CGameLib.prototype.getUserList = function() {
        return this._gameRoom.getUserList();
      };
      CGameLib.prototype.sendVoice = function(voiceData) {
        this._gameRoom.sendSoundToTableUser(voiceData);
      };
      CGameLib.prototype.isServicing = function() {
        return this._gameRoom.isServicing();
      };
      CGameLib.prototype.refreshGold = function() {
        null != this._gameRoom && this._gameRoom.isServicing() && this._gameRoom.refreshGold();
      };
      CGameLib.prototype.getStationOnlineCount = function(nStationID) {
        return this._gamePlace.getStationOnlineCount(nStationID);
      };
      return CGameLib;
    }();
    exports.CGameLib = CGameLib;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon",
    "./CDefaultGameLibSink": "CDefaultGameLibSink",
    "./place/GamePlace": "GamePlace",
    "./room/GameRoom": "GameRoom",
    "./tagClientInfo": "tagClientInfo",
    "./tagConnectInfo": "tagConnectInfo",
    "./tagVersionInfo": "tagVersionInfo"
  } ],
  CMD_CM_SysteMessage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2732bk4Ex1Nert8RuCLO5g2", "CMD_CM_SysteMessage");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../TSCommon");
    var CMD_CM_SysteMessage = function() {
      function CMD_CM_SysteMessage() {}
      CMD_CM_SysteMessage.prototype.deserialize = function(ba) {
        this.bCloseLine = ba.readUnsignedByte();
        this.bMessageType = ba.readUnsignedByte();
        this.wMessageLen = ba.readUnsignedShort();
        this.wMessageLen > 0 ? this.szMessage = TSCommon_1.TSCommon.readGbkString(ba, this.wMessageLen) : this.szMessage = "";
      };
      return CMD_CM_SysteMessage;
    }();
    exports.CMD_CM_SysteMessage = CMD_CM_SysteMessage;
    var CMD_CM_SysteMessageEx = function() {
      function CMD_CM_SysteMessageEx() {}
      CMD_CM_SysteMessageEx.prototype.deserialize = function(ba) {
        this.bCloseLine = ba.readUnsignedByte();
        this.uButtonType = ba.readUnsignedByte();
        this.wMessageLen = ba.readUnsignedShort();
        this.wMessageLen > 0 ? this.szMessage = TSCommon_1.TSCommon.readGbkString(ba, this.wMessageLen) : this.szMessage = "";
      };
      return CMD_CM_SysteMessageEx;
    }();
    exports.CMD_CM_SysteMessageEx = CMD_CM_SysteMessageEx;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon"
  } ],
  CMD_GP_GetGameInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c0f4tMkS5FsImK3VirJE10", "CMD_GP_GetGameInfo");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../../TSCommon");
    var CMD_GP_GetGameInfo = function() {
      function CMD_GP_GetGameInfo() {}
      CMD_GP_GetGameInfo.prototype.serialize = function(ba) {
        ba.writeInt(this.nUserDBID);
        ba.writeInt(this.nPartnerID);
        ba.writeInt(this.nVersionCode);
        this.ClientInfo.serialize(ba);
        this.VersionInfo.serialize(ba);
        TSCommon_1.TSCommon.log("password = " + this.password);
        TSCommon_1.TSCommon.writeStringWithLength(ba, this.password, 64);
      };
      return CMD_GP_GetGameInfo;
    }();
    exports.CMD_GP_GetGameInfo = CMD_GP_GetGameInfo;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon"
  } ],
  CMD_GP_LogonSuccess_Ex2: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3acda2wfY9NPqxTeEWW8Mbx", "CMD_GP_LogonSuccess_Ex2");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../../TSCommon");
    var CMD_GP_LogonSuccess_Ex2 = function() {
      function CMD_GP_LogonSuccess_Ex2() {}
      CMD_GP_LogonSuccess_Ex2.prototype.deserialize = function(ba) {
        this.nUserDBID = ba.readInt();
        this.dwGold = ba.readInt();
        this.nScore = ba.readInt();
        this.nWin = ba.readInt();
        this.nLose = ba.readInt();
        this.nDraw = ba.readInt();
        this.nFlee = ba.readInt();
        this.szLeaveWord = TSCommon_1.TSCommon.readGbkString(ba, 32);
        this.nVIPLevel = 0;
        this.cbGameTitleLevel = 0;
        this.nGameTitleScore = 0;
        this.nFrag = 0;
        this.lBankAmount = 0;
        this.nWeekWinAmount = 0;
        this.nMaxWinAmount = 0;
        this.nGuessWin = 0;
        this.nGiftVIPLevel = 0;
        this.bIsLoginGift = 0;
      };
      return CMD_GP_LogonSuccess_Ex2;
    }();
    exports.CMD_GP_LogonSuccess_Ex2 = CMD_GP_LogonSuccess_Ex2;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon"
  } ],
  CMD_GR_BroadCast_UserStatus: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "056feodKypKs6/GFeBVvjLj", "CMD_GR_BroadCast_UserStatus");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CMD_GR_BroadCast_UserStatus = function() {
      function CMD_GR_BroadCast_UserStatus() {}
      CMD_GR_BroadCast_UserStatus.prototype.deserialize = function(buf) {
        this.dwUserDBID = buf.readUnsignedInt();
        this.cbUserStatus = buf.readUnsignedByte();
        this.wNetTimelag = buf.readUnsignedShort();
        this.wTableID = buf.readUnsignedShort();
        this.cbChairID = buf.readUnsignedByte();
      };
      return CMD_GR_BroadCast_UserStatus;
    }();
    exports.CMD_GR_BroadCast_UserStatus = CMD_GR_BroadCast_UserStatus;
    cc._RF.pop();
  }, {} ],
  CMD_GR_Logon_ByVnet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb8bcdZ5GNKdoPWBU7h1ps1", "CMD_GR_Logon_ByVnet");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tagConnectInfo_1 = require("../tagConnectInfo");
    var tagClientInfo_1 = require("../tagClientInfo");
    var tagVersionInfo_1 = require("../tagVersionInfo");
    var ByteArray_1 = require("../../common/ByteArray");
    var TSCommon_1 = require("../../TSCommon");
    var CMD_GR_Logon_ByVnet = function() {
      function CMD_GR_Logon_ByVnet() {
        this.ConnectInfo = new tagConnectInfo_1.tagConnectInfo();
        this.ClientInfo = new tagClientInfo_1.tagClientInfo();
        this.VersionInfo = new tagVersionInfo_1.tagVersionInfo();
        this.cbShake = 0;
        this.cbEnterType = 0;
        this.szTablePass = "";
      }
      CMD_GR_Logon_ByVnet.prototype.serialize = function() {
        var ba = new ByteArray_1.ByteArray();
        ba.writeInt(this.lUserDBID);
        TSCommon_1.TSCommon.writeStringWithLength(ba, this.szEncryptPass, 64);
        this.ConnectInfo.serialize(ba);
        this.ClientInfo.serialize(ba);
        this.VersionInfo.serialize(ba);
        ba.writeByte(this.cbShake);
        ba.writeByte(this.cbEnterType);
        TSCommon_1.TSCommon.writeStringWithLength(ba, this.szTablePass, 16);
        return ba;
      };
      return CMD_GR_Logon_ByVnet;
    }();
    exports.CMD_GR_Logon_ByVnet = CMD_GR_Logon_ByVnet;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray",
    "../tagClientInfo": "tagClientInfo",
    "../tagConnectInfo": "tagConnectInfo",
    "../tagVersionInfo": "tagVersionInfo"
  } ],
  Chair: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "583e48eyP9L+p9K/MDmczUc", "Chair");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Chair = function() {
      function Chair() {
        this._userID = 0;
        this._empty = true;
      }
      Chair.prototype.setUserID = function(userID) {
        this._userID = userID;
      };
      Chair.prototype.setEmpty = function(value) {
        this._empty = value;
      };
      Chair.prototype.getUserID = function() {
        return this._userID;
      };
      Chair.prototype.isEmpty = function() {
        return this._empty;
      };
      return Chair;
    }();
    exports.Chair = Chair;
    cc._RF.pop();
  }, {} ],
  ChangeCardAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67794Y2npVCj7habKOeUQzE", "ChangeCardAction");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var ChangeCardAction = cc.Class({
      extends: cc.Component,
      properties: {
        shunRotateSprite: {
          default: null,
          type: cc.Sprite
        },
        niRotateSprite: {
          default: null,
          type: cc.Sprite
        },
        upMoveSprite: {
          default: null,
          type: cc.Sprite
        },
        downMoveSprite: {
          default: null,
          type: cc.Sprite
        },
        huanType: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {},
      removeAllRunAction: function removeAllRunAction() {
        this.shunRotateSprite.node.active = false;
        this.niRotateSprite.node.active = false;
        this.upMoveSprite.node.active = false;
        this.downMoveSprite.node.active = false;
      },
      showShunRotateAction: function showShunRotateAction(func) {
        this.removeAllRunAction();
        var self = this;
        this.shunRotateSprite.node.active = true;
        cc.loader.loadRes("texture/game/swap/shunhuaipai", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.huanType.spriteFrame = spriteFrame);
        });
        var action1 = cc.rotateBy(2, 90);
        var action2 = cc.callFunc(function() {
          func();
        });
        var sequence = cc.sequence(action1, action2);
        this.shunRotateSprite.node.runAction(sequence);
      },
      showNiRotateAction: function showNiRotateAction(func) {
        var self = this;
        this.removeAllRunAction();
        this.niRotateSprite.node.active = true;
        cc.loader.loadRes("texture/game/swap/nihuaipai", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.huanType.spriteFrame = spriteFrame);
        });
        var action1 = cc.rotateBy(2, -90);
        var action2 = cc.callFunc(function() {
          func();
        });
        var sequence = cc.sequence(action1, action2);
        this.niRotateSprite.node.runAction(sequence);
      },
      showUpDownMoveAction: function showUpDownMoveAction(func) {
        var self = this;
        this.removeAllRunAction();
        this.upMoveSprite.node.active = true;
        this.downMoveSprite.node.active = true;
        cc.loader.loadRes("texture/game/swap/duijia", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.huanType.spriteFrame = spriteFrame);
        });
        var action1 = cc.moveBy(.5, 0, -30);
        var action2 = cc.moveBy(.5, 0, 30);
        var sequence = cc.sequence(action1, action2);
        var sequence1 = cc.repeat(sequence, 3);
        var action3 = cc.callFunc(function() {
          func();
        });
        var sequence2 = cc.sequence(sequence1, action3);
        this.downMoveSprite.node.runAction(sequence2);
        var action3 = cc.moveBy(.5, 0, 30);
        var action4 = cc.moveBy(.5, 0, -30);
        var sequence3 = cc.sequence(action3, action4);
        var sequence4 = cc.repeat(sequence3, 3);
        this.upMoveSprite.node.runAction(sequence4);
      }
    });
    module.exports = ChangeCardAction;
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    TSCommon: "TSCommon"
  } ],
  Chatting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe7f6d+EzpNk595x8KIfRaj", "Chatting");
    "use strict";
    var _GameCmds = require("../../gamelib/room/GameCmds");
    var _TSCommon = require("../../TSCommon");
    var Resources = require("Resources");
    var GameCfg = require("GameCfg");
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.init();
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      init: function init() {
        var size = this.bg.getContentSize();
        this.prePos = this.node.getPosition();
        this.node.setPosition(cc.p(this.prePos.x + size.width, this.prePos.y));
      },
      onTouch: function onTouch(event) {
        cc.log("onTouch");
        var point = event.touch.getLocation();
        var convertPoint = this.bg.convertToNodeSpace(point);
        var size = this.bg.getContentSize();
        var rect = cc.rect(0, 0, size.width, size.height);
        cc.rectContainsPoint(rect, convertPoint) || this.hide();
      },
      show: function show() {
        this.node.active = true;
        this.node.stopAllActions();
        var self = this;
        var size = this.bg.getContentSize();
        var destPos = cc.p(this.prePos.x, this.prePos.y);
        var moveTo = cc.moveTo(.2, destPos);
        this.node.runAction(moveTo);
      },
      hide: function hide() {
        this.node.stopAllActions();
        var self = this;
        var size = this.bg.getContentSize();
        var destPos = cc.p(this.prePos.x + size.width, this.prePos.y);
        var moveTo = cc.moveTo(.2, destPos);
        var onMoveEnd = function onMoveEnd() {
          self.node.active = false;
        };
        var callFunc = cc.callFunc(onMoveEnd, this);
        var sequence = cc.sequence(moveTo, callFunc);
        this.node.runAction(sequence);
      },
      sendChat: function sendChat(lpszMsg) {
        var nResult = require("GameLibSink").getInstance().getGameLib().sendTableChat(lpszMsg);
        this.node.active = false;
        nResult == _GameCmds.GameCmds.SEND_TABLE_CHAT_OFFLINE || nResult == _GameCmds.GameCmds.SEND_TABLE_CHAT_NULL_CONTENT || nResult == _GameCmds.GameCmds.SEND_TABLE_CHAT_BUSY || _TSCommon.TSCommon.dispatchEvent(GameCfg.sendChatEnd, null);
        return nResult;
      },
      onSendFaceClicked: function onSendFaceClicked(event, faceID) {
        var msg = "--:" + (faceID - 1);
        this.sendChat(msg);
        this.hide();
      },
      onSendWordsClicked: function onSendWordsClicked(event, wordID) {
        var msg = Resources.QUICK_SEND_CHATS[wordID];
        this.sendChat(msg);
        this.hide();
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../gamelib/room/GameCmds": "GameCmds",
    GameCfg: "GameCfg",
    GameLibSink: "GameLibSink",
    Resources: "Resources"
  } ],
  ClientFrameSink: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5766fPzYKhOCbTarn2NHaN8", "ClientFrameSink");
    "use strict";
    var _ByteArray = require("../common/ByteArray");
    var _CGameLib = require("../gamelib/CGameLib");
    var _TSCommon = require("../TSCommon");
    var ClientFrameSink = cc.Class({
      ctor: function ctor() {
        this.m_dataEventHandler = null;
      },
      onSceneChanged: function onSceneChanged(data) {
        if (this.m_dataEventHandler) this.m_dataEventHandler.emit("onSceneChanged", {
          data: data
        }); else {
          var callback = function callback() {
            this.onSceneChanged(data);
          };
          _TSCommon.TSCommon.performWithDelay(this, callback, ClientFrameSink.N_DELAYTIME);
        }
      },
      onPlayerStateChanged: function onPlayerStateChanged(chair, oldState, newState) {
        if (this.m_dataEventHandler) this.m_dataEventHandler.emit("onPlayerStateChanged", {
          chair: chair,
          nOldState: oldState,
          nNewState: newState
        }); else {
          var callback = function callback() {
            this.onPlayerStateChanged(chair, oldState, newState);
          };
          _TSCommon.TSCommon.performWithDelay(this, callback, ClientFrameSink.N_DELAYTIME);
        }
      },
      onGetMainVersion: function onGetMainVersion() {
        return 1;
      },
      onGetSubVersion: function onGetSubVersion() {
        return 1;
      },
      onGameStart: function onGameStart() {},
      onGameMessage: function onGameMessage(chair, cbCmdID, data) {
        if (this.m_dataEventHandler) this.m_dataEventHandler.emit("onGameMessage", {
          chair: chair,
          cCmdID: cbCmdID,
          data: data
        }); else {
          var callback = function callback() {
            this.onGameMessage(chair, cbCmdID, data);
          };
          _TSCommon.TSCommon.performWithDelay(this, callback, ClientFrameSink.N_DELAYTIME);
        }
      },
      onGameEnd: function onGameEnd(data) {},
      onGameOption: function onGameOption(option) {},
      onUserEnterTable: function onUserEnterTable(chair, wUserID, isPlayer) {
        if (this.m_dataEventHandler) {
          cc.log("onUserEnterTable ========");
          this.m_dataEventHandler.emit("onUserEnterTable", {
            chair: chair,
            wUserID: wUserID,
            isPlayer: isPlayer
          });
        } else {
          var callback = function callback() {
            this.onUserEnterTable(chair, wUserID, isPlayer);
          };
          _TSCommon.TSCommon.performWithDelay(this, callback, ClientFrameSink.N_DELAYTIME);
        }
      },
      onUserExitTable: function onUserExitTable(chair, wUserID, isPlayer) {
        cc.log("onUserExitTable ========");
        if (this.m_dataEventHandler) this.m_dataEventHandler.emit("onUserExitTable", {
          chair: chair,
          wUserID: wUserID,
          isPlayer: isPlayer
        }); else {
          var callback = function callback() {
            this.onUserExitTable(chair, wUserID, isPlayer);
          };
          _TSCommon.TSCommon.performWithDelay(this, callback, ClientFrameSink.N_DELAYTIME);
        }
      },
      onNotEnoughGold: function onNotEnoughGold(nMinGold, nMaxGold) {},
      onTableSound: function onTableSound(nChair, pBuf) {},
      onGameSystemMsg: function onGameSystemMsg(msg) {}
    });
    ClientFrameSink.N_DELAYTIME = 1;
    module.exports = ClientFrameSink;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon",
    "../common/ByteArray": "ByteArray",
    "../gamelib/CGameLib": "CGameLib"
  } ],
  ClientFrame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aee22MsHGJG85qdk8iVTDbO", "ClientFrame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("../../common/ByteArray");
    var TSCommon_1 = require("../../TSCommon");
    var FrameCmds_1 = require("./FrameCmds");
    var GAME_DATA_1 = require("./GAME_DATA");
    var gamelibcommon_1 = require("../gamelibcommon");
    var ClientFrame = function() {
      function ClientFrame(room, gameLib) {
        this.m_sink = null;
        this._mySelf = null;
        this.m_gameRoom = room;
        this.m_pGameLib = gameLib;
        this.m_cachedCmds = new Array();
        this.clear();
      }
      ClientFrame.prototype.clear = function() {
        this._mySelf = null;
        this.m_cachedCmds.splice(0);
        this.m_bDismissed = false;
        this.m_chairCount = 2;
        this.m_nSceneStatus = FrameCmds_1.FrameCmds.SCENE_STATUS_FREE;
      };
      ClientFrame.prototype.setMyself = function(myself) {
        this._mySelf = myself;
      };
      ClientFrame.prototype.setSink = function(sink) {
        this.m_sink = sink;
        this.m_nSceneStatus = FrameCmds_1.FrameCmds.SCENE_STATUS_FREE;
      };
      ClientFrame.prototype.meEnterGame = function(cbChairCount) {
        console.log("meEnterGame");
        this.m_chairCount = cbChairCount;
        var frameVersion = 1310761;
        var ba = new ByteArray_1.ByteArray();
        ba.writeInt(frameVersion);
        this.sendGameCmd(FrameCmds_1.FrameCmds.CLIENTSITE_FRAME_VERSION, ba);
        var version = new ByteArray_1.ByteArray();
        version.writeInt(this.m_sink.onGetMainVersion());
        version.writeInt(this.m_sink.onGetSubVersion());
        version.writeInt(0);
        this.sendGameCmd(FrameCmds_1.FrameCmds.CLIENTSITE_REQUEST_VERIFY_VERSION, version);
        this.m_cachedCmds.splice(0);
      };
      ClientFrame.prototype.sendGameCmd = function(cmdID, buf) {
        this.m_gameRoom.sendGameCmd(cmdID, buf);
      };
      ClientFrame.prototype.recvGameCmd = function(buf) {
        var dataLen = buf.length - 2;
        if (dataLen < 0) return false;
        if (null == this.m_sink) {
          this.m_cachedCmds.push(buf);
          return true;
        }
        var data = new GAME_DATA_1.GAME_DATA(buf);
        if (data.cCmdID >= FrameCmds_1.FrameCmds.SERVERSITE_MSG) {
          this.recvFrameCmd(data.cChairID, data.cCmdID, data.data);
          return true;
        }
        this.m_sink.onGameMessage(data.cChairID, data.cCmdID, data.data);
        return true;
      };
      ClientFrame.prototype.recvFrameCmd = function(chairID, cmdID, lpBuf) {
        var nLen = lpBuf.length;
        if (nLen < 0) return;
        var bt;
        var i;
        switch (cmdID) {
         case FrameCmds_1.FrameCmds.SERVERSITE_PERSONAL_SCENE:
          if (nLen <= 0) {
            console.log("CClientFrame::RecvFrameMsg() error -- SERVERSITE_SCENE nLen <= 0");
            return;
          }
          this.m_nSceneStatus = FrameCmds_1.FrameCmds.SCENE_STATUS_PLAYING;
          this.m_bDismissed = false;
          bt = new ByteArray_1.ByteArray();
          bt.writeBytes(lpBuf, 4, nLen - 4);
          bt.position = 0;
          this.m_sink.onSceneChanged(bt);
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_SCENE:
          if (nLen <= 0) {
            console.log("CClientFrame::RecvFrameMsg() error -- SERVERSITE_SCENE nLen <= 0");
            return;
          }
          this.m_nSceneStatus = FrameCmds_1.FrameCmds.SCENE_STATUS_PLAYING;
          this.m_bDismissed = false;
          bt = new ByteArray_1.ByteArray();
          bt.writeBytes(lpBuf, 4, lpBuf.length - 4);
          bt.position = 0;
          this.m_sink.onSceneChanged(bt);
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_FIRST_SCENE:
          console.log("CClientFrame::RecvFrameMsg() -- SERVERSITE_FIRST_SCENE");
          this.changePlayerStatus(-1, gamelibcommon_1.gamelibcommon.USER_PLAY_GAME, gamelibcommon_1.gamelibcommon.USER_READY_STATUS);
          this.m_nSceneStatus = FrameCmds_1.FrameCmds.SCENE_STATUS_PLAYING;
          this.m_bDismissed = false;
          this._mySelf.isPlayer() && this.sendGameCmd(FrameCmds_1.FrameCmds.CLIENTSITE_CONFIRM_START, null);
          bt = new ByteArray_1.ByteArray();
          bt.writeBytes(lpBuf, 4, nLen - 4);
          bt.position = 0;
          this.m_sink.onSceneChanged(bt);
          this.m_sink.onGameStart();
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_GAME_OVER:
          console.log("--SERVERSITE_GAME_OVER");
          this.m_nSceneStatus = FrameCmds_1.FrameCmds.SCENE_STATUS_FREE;
          this.m_sink.onGameEnd(lpBuf);
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_GAME_DISMISS:
          console.log("SERVERSITE_GAME_DISMISS");
          this.m_nSceneStatus = FrameCmds_1.FrameCmds.SCENE_STATUS_FREE;
          this.m_bDismissed = true;
          this.changePlayerStatus(-1, gamelibcommon_1.gamelibcommon.USER_FREE_STATUS, gamelibcommon_1.gamelibcommon.USER_PLAY_GAME);
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_GAMEOPTION:
          var dwOption = lpBuf.readUnsignedInt();
          this.m_sink.onGameOption(dwOption);
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_SOFT_READY:
          console.log("Recv player soft ready signal");
          if (nLen < 4) {
            console.log("RecvFrameMsg--SERVERSITE_GAMEOPTION error,mismatch length");
            break;
          }
          var nChair = lpBuf.readInt();
          this.changePlayerStatus(nChair, gamelibcommon_1.gamelibcommon.USER_READY_STATUS, gamelibcommon_1.gamelibcommon.USER_SIT_TABLE);
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_SOUND:
          this.m_sink.onTableSound(chairID, lpBuf);
          break;

         case FrameCmds_1.FrameCmds.SERVERSITE_SYSTEMMESSAGE:
          this.m_sink.onGameSystemMsg(TSCommon_1.TSCommon.readGbkString(lpBuf, lpBuf.length));
          break;

         default:
          console.log("--CClient::GameMessage, recieved an unknown msg, id= " + cmdID);
        }
      };
      ClientFrame.prototype.changePlayerStatus = function(chair, newStatus, oldStatus) {
        if (-1 == chair) for (var i = 0; i < this.m_chairCount; i++) this.m_sink.onPlayerStateChanged(i, oldStatus, newStatus); else this.m_sink.onPlayerStateChanged(chair, oldStatus, newStatus);
      };
      return ClientFrame;
    }();
    exports.ClientFrame = ClientFrame;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray",
    "../gamelibcommon": "gamelibcommon",
    "./FrameCmds": "FrameCmds",
    "./GAME_DATA": "GAME_DATA"
  } ],
  ConsecutiveVictoriesItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27434iU5GNDpJ9oYYT9O588", "ConsecutiveVictoriesItem");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var ConsecutiveVictoriesItem = cc.Class({
      extends: cc.Component,
      properties: {
        progressing: {
          default: null,
          type: cc.Sprite
        },
        progressingBg: {
          default: null,
          type: cc.Sprite
        },
        winCount: {
          default: null,
          type: cc.Label
        },
        winReward: {
          default: null,
          type: cc.Label
        },
        canGetRewardBtn: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {},
      setProgressing: function setProgressing(bol) {
        this.progressing.node.active = bol;
        this.progressingBg.node.active = bol;
      },
      initData: function initData(data) {
        1 == data.CanAward && 0 == data.IsGetAward && (this.canGetRewardBtn.node.active = true);
        this.hasCount = data.WinCount;
        this.winCount.string = data.WinCount + "连胜奖励";
        this.winReward.string = "x" + data.AwardAmount;
      },
      onClickRewardBtn: function onClickRewardBtn() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------ContinuityWinGetAward.aspx返回数据----------------------------");
            console.log(jsonObject);
            var backData = jsonObject;
            var retcode = backData.RetCode;
            var awardAmount = backData.AwardAmount;
            if (1 == retcode) {
              var goldData = require("HallControl").getInstance().getPublicUserInfo().nGold;
              require("HallControl").getInstance().getPublicUserInfo().nGold = parseInt(awardAmount) + parseInt(goldData);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onGoldOrDiamondChanged, true);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "+" + awardAmount, "texture/hallRes/roomInfo/gold" ]);
              self.node.parent.parent.parent.parent.getComponent("HallPlatformInfo").updateConsecutiveVictoriesData();
            } else 11 == retcode ? console.log("密码错误") : 12 == retcode ? console.log("未满足连胜条件") : 13 == retcode && console.log("重复领取");
          }
        };
        require("HallWebRequest").getInstance().getContinuityWinGetAward(this.hasCount, callBackFunc);
      }
    });
    module.exports = ConsecutiveVictoriesItem;
    cc._RF.pop();
  }, {
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    TSCommon: "TSCommon"
  } ],
  ConsecutiveVictoriesLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0768czsW4pFp4K0YQrGfbZG", "ConsecutiveVictoriesLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var ConsecutiveVictoriesLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        showWinPrefab: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      initData: function initData(data) {
        this.bg.getChildByName("list").removeAllChildren();
        var nowProgressingIndex = 0;
        for (var i = 0; i < data.length; i++) if (0 == data[i].CanAward) {
          nowProgressingIndex = i;
          break;
        }
        0 == nowProgressingIndex && 1 == data[data.length - 1].CanAward && (nowProgressingIndex = data.length);
        for (var i = 0; i < data.length; i++) {
          var item = cc.instantiate(this.showWinPrefab);
          item.getComponent("ConsecutiveVictoriesItem").initData(data[i]);
          i == nowProgressingIndex && item.getComponent("ConsecutiveVictoriesItem").setProgressing(true);
          item.parent = this.bg.getChildByName("list");
          var offsetY = 100;
          var y = 70 - i * offsetY;
          item.setPosition(0, y);
        }
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      }
    });
    module.exports = ConsecutiveVictoriesLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    TSCommon: "TSCommon"
  } ],
  ConsecutiveVictoriesRewardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b1d9nl5elE+a8ULbDQA7wJ", "ConsecutiveVictoriesRewardLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var _WeixinManager = require("../../../hall/weixin/WeixinManager");
    var HallResources = require("HallResources");
    var ConsecutiveVictoriesRewardLayer = cc.Class({
      extends: cc.Component,
      properties: {
        playerName: {
          default: null,
          type: cc.Label
        },
        playerTime: {
          default: null,
          type: cc.Label
        },
        playerHead: {
          default: null,
          type: cc.Sprite
        },
        winCount: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {},
      initData: function initData(winCount) {
        var self = this;
        this.winAddCount = winCount;
        cc.loader.loadRes("texture/activityRes/consecutiveVictories/winCount_" + winCount, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.winCount.spriteFrame = spriteFrame);
        });
        var weixinUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
        if (weixinUserInfo && weixinUserInfo.avatarUrl) {
          var imgurl = weixinUserInfo.avatarUrl + "?aaa=aa.jpg";
          cc.loader.load(imgurl, function(err, texture) {
            self.playerHead.spriteFrame = new cc.SpriteFrame(texture);
          });
        }
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        this.playerName.string = publicUserInfo.nickName;
        var testDate = new Date();
        var time = testDate.toLocaleString();
        this.playerTime.string = time;
      },
      onClickSharetBtn: function onClickSharetBtn() {
        var self = this;
        var shareLabel = "";
        var winShareImgUrl = "";
        if (3 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_3;
          shareLabel = "这游戏太容易赢了，现在的小姐姐都不思考怎么出牌吗？";
        } else if (5 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_5;
          shareLabel = "厉害了我的哥！";
        } else if (7 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_7;
          shareLabel = "七杀不会必死吧？";
        } else if (8 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_9;
          shareLabel = "道友，你已渡劫成功！";
        }
        wx.shareAppMessage({
          title: shareLabel,
          imageUrl: winShareImgUrl
        });
        self.closeLayer();
      },
      onClickNextBtn: function onClickNextBtn() {
        this.closeLayer();
      },
      closeLayer: function closeLayer() {
        this.node.active = false;
      }
    });
    module.exports = ConsecutiveVictoriesRewardLayer;
    cc._RF.pop();
  }, {
    "../../../hall/weixin/WeixinManager": "WeixinManager",
    HallControl: "HallControl",
    HallResources: "HallResources",
    TSCommon: "TSCommon"
  } ],
  ContinueWinLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c54a5sntoFIhqGgs2VRvWqj", "ContinueWinLayer");
    "use strict";
    var _WeixinManager = require("../../weixin/WeixinManager");
    var Resources = require("Resources");
    var HallResources = require("HallResources");
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: cc.Sprite,
        winCountsIcon: cc.Sprite,
        playerAvator: cc.Sprite,
        playerName: cc.Label,
        time: cc.Label
      },
      onLoad: function onLoad() {
        var self = this;
        require("HallUtils").isIPhoneX() ? cc.loader.loadRes("texture/activityRes/consecutiveVictories/consecutiveVictoriesBg_iphoneX", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.bg.spriteFrame = spriteFrame);
        }) : cc.loader.loadRes("texture/activityRes/consecutiveVictories/consecutiveVictoriesBg", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.bg.spriteFrame = spriteFrame);
        });
      },
      init: function init(winCounts, onEnd) {
        this.m_winCounts = winCounts;
        this.m_onEnd = onEnd;
      },
      onEnable: function onEnable() {
        this.setWinCounts();
        this.setPlayerInfo();
      },
      onDisable: function onDisable() {
        this.m_onEnd && this.m_onEnd();
      },
      setWinCounts: function setWinCounts() {
        var self = this;
        cc.loader.loadRes("texture/activityRes/consecutiveVictories/winCount_" + this.m_winCounts, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.winCountsIcon.spriteFrame = spriteFrame);
        });
      },
      setPlayerInfo: function setPlayerInfo() {
        var self = this;
        var wxUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
        if (wxUserInfo && wxUserInfo.avatarUrl) {
          var imgurl = wxUserInfo.avatarUrl;
          cc.loader.load({
            url: imgurl,
            type: "jpg"
          }, function(err, texture) {
            self.playerAvator.spriteFrame = new cc.SpriteFrame(texture);
          });
        }
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        this.playerName.string = publicUserInfo.nickName;
        var date = new Date();
        var curTime = date.toLocaleString();
        this.time.string = curTime;
      },
      onShareBtnClicked: function onShareBtnClicked() {
        var self = this;
        var shareLabel = "";
        var winShareImgUrl = "";
        if (3 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_3;
          shareLabel = "这游戏太容易赢了，现在的小姐姐都不思考怎么出牌吗？";
        } else if (5 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_5;
          shareLabel = "厉害了我的哥！";
        } else if (7 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_7;
          shareLabel = "七杀不会必死吧？";
        } else if (8 == self.winAddCount) {
          winShareImgUrl = HallResources.shareWin_9;
          shareLabel = "道友，你已渡劫成功！";
        }
        wx.shareAppMessage({
          title: shareLabel,
          imageUrl: winShareImgUrl
        });
        self.node.active = false;
      },
      onResumeBtnClicked: function onResumeBtnClicked() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    "../../weixin/WeixinManager": "WeixinManager",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallUtils: "HallUtils",
    Resources: "Resources"
  } ],
  CupScrollList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa86beuY4tM4pnju0cp6o+u", "CupScrollList");
    "use strict";
    var CupScrollList = cc.Class({
      extends: cc.Component,
      properties: {
        cupItem: cc.Prefab
      },
      onLoad: function onLoad() {
        this.m_coinList = new Array();
        this.initData();
        this.maxHeight = 0;
      },
      start: function start() {},
      initData: function initData() {
        this.content = this.node.getComponent(cc.ScrollView).content;
        this.content.removeAllChildren();
        for (var i = 0; i < 6; i++) {
          var item = cc.instantiate(this.cupItem);
          item.parent = this.content;
          item.getComponent("NewSeasonRankItem").initData(i);
          var y = -55 - 110 * i;
          item.setPosition(0, y);
        }
        var newHeight = 660;
        this.content.height = newHeight;
      }
    });
    module.exports = CupScrollList;
    cc._RF.pop();
  }, {} ],
  DeskScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "983d8MdRjZMAbA+dh7hcA2U", "DeskScene");
    "use strict";
    var _ByteArray = require("../../common/ByteArray");
    var _TSCommon = require("../../TSCommon");
    var _gamelibcommon = require("../../gamelib/gamelibcommon");
    var _WeixinManager = require("../../weixin/WeixinManager");
    var GameCfg = require("GameCfg");
    var GameLibSink = require("GameLibSink");
    var GameDefs = require("GameDefs");
    var Tools = require("Tools");
    var sendCMD = require("sendCMD");
    var Resources = require("Resources");
    var HallResources = require("HallResources");
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        myself: {
          default: null,
          type: cc.Node
        },
        right: {
          default: null,
          type: cc.Node
        },
        top: {
          default: null,
          type: cc.Node
        },
        left: {
          default: null,
          type: cc.Node
        },
        gameOverLayer: {
          default: null,
          type: cc.Node
        },
        matchGameOverLayer: {
          default: null,
          type: cc.Node
        },
        gameResultLayer: {
          default: null,
          type: cc.Node
        },
        moreSettingLayer: {
          default: null,
          type: cc.Node
        },
        levelUpgradeLayer: {
          default: null,
          type: cc.Node
        },
        protectScoreLayer: {
          default: null,
          type: cc.Node
        },
        listenCardLayer: {
          default: null,
          type: cc.Node
        },
        directAtlas: {
          default: null,
          type: cc.SpriteAtlas
        },
        commonTipsPrefab: {
          default: null,
          type: cc.Prefab
        },
        mallLayer: {
          default: null,
          type: cc.Node
        },
        chatAtlas: {
          default: null,
          type: cc.SpriteAtlas
        },
        bgMusic: {
          default: null,
          url: cc.AudioClip
        },
        xuanPaiTipsLayer: {
          default: null,
          type: cc.Node
        },
        huanPaiTipsLayer: {
          default: null,
          type: cc.Node
        },
        queYiMenTipsLayer: {
          default: null,
          type: cc.Node
        },
        queYiMenButtonLayer: {
          default: null,
          type: cc.Node
        },
        xuanPaiTipsTimes: {
          default: null,
          type: cc.Label
        },
        gameTitle: {
          default: null,
          type: cc.Sprite
        },
        continueWinLayer: {
          default: null,
          type: cc.Node
        },
        backToDataMsg: {
          default: null,
          type: cc.Button
        },
        nextGameBtn2: {
          default: null,
          type: cc.Button
        },
        GAMETIMER_COUNT: 10,
        XUANPAI_COUNT: 8
      },
      onLoad: function onLoad() {
        var _this = this;
        cc.audioEngine.stopAll();
        this.openGmae = false;
        var self = this;
        if (require("HallUtils").isIPhoneX()) {
          if (!cc.sys.isNative && cc.sys.isMobile) {
            var canvasFit = this.node.getComponent(cc.Canvas);
            canvasFit.fitHeight = true;
            canvasFit.fitWidth = false;
          }
          this.loadIphoneXBgRes();
        } else this.loadNomalBgRes();
        cc.loader.loadRes("animation/frameAction/mj_action", function(err, clip) {
          err || (self.mj_actionClip = clip);
        });
        cc.loader.loadRes("animation/frameAction/me_action", function(err, clip) {
          err || (self.me_actionClip = clip);
        });
        cc.loader.loadRes("animation/frameAction/left_action", function(err, clip) {
          err || (self.left_actionClip = clip);
        });
        cc.loader.loadRes("animation/frameAction/right_action", function(err, clip) {
          err || (self.right_actionClip = clip);
        });
        cc.loader.loadRes("animation/frameAction/top_action", function(err, clip) {
          err || (self.top_actionClip = clip);
        });
        cc.loader.loadResDir("animation/dragonBones/texiao_hupai", function(err, assets) {
          self.hupaiAssets = assets;
        });
        this.node.on("onUserEnterTable", function(event) {
          _this.onUserEnterTable(event.detail.chair, event.detail.wUserID, event.detail.isPlayer);
        });
        this.node.on("onUserExitTable", function(event) {
          _this.onUserExitTable(event.detail.chair, event.detail.wUserID, event.detail.isPlayer);
        });
        this.node.on("onPlayerStateChanged", function(event) {
          _this.onPlayerStateChanged(event.detail.chair, event.detail.nOldState, event.detail.nNewState);
        });
        this.node.on("onSceneChanged", function(event) {
          _this.onSceneChanged(event.detail.data);
        }, this);
        this.node.on("onGameMessage", function(event) {
          _this.onGameMessage(event.detail.chair, event.detail.cCmdID, event.detail.data);
        }, this);
        this.node.on("onRecvTableChat", function(event) {
          _this.onRecvTableChat(event.detail.chatMsg);
        });
        this.node.on("updateUserInfo", function(event) {
          _this.updateUserInfo(event.detail.user);
        });
        this.init();
        this.initUI();
        _TSCommon.TSCommon.addEvent(GameCfg.changeDeskBg, this.onChangeDeskBg, this);
        _TSCommon.TSCommon.addEvent(GameCfg.GAME_RESTART, this.onGameReStart, this);
        _TSCommon.TSCommon.addEvent(GameCfg.NOTIFICATION_LISTENCARD, this.judgeIsTingCard, this);
        _TSCommon.TSCommon.addEvent(GameCfg.openBgMusic, this.onPlayBgMusic, this);
        _TSCommon.TSCommon.addEvent(GameCfg.closeBgMusic, this.onCloseBgMusic, this);
        _TSCommon.TSCommon.addEvent(GameCfg.NOTIFICATION_ROBOT, this.onRobot, this);
        this.getIsPrivateRoom() ? this.getGameLib().sitTable(this.getGameLibSink().s_nPrivateRoomTableNo, this.getGameLibSink().s_nPrivateRoomChairNo) : this.getGameLib().autoSit();
        this.IsCXZ() && cc.loader.loadRes("texture/game/cxz_title", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.node.getChildByName("game_icon").getComponent(cc.Sprite).spriteFrame = spriteFrame);
        });
        var bgMusicOpen = parseInt(cc.sys.localStorage.getItem("bgMusic") || 0);
        0 != bgMusicOpen && this.onPlayBgMusic();
        G.matchGameReady = false;
        this.moreSettingLayer.getComponent("MoreSettingLayer").setIsPrivateRoom(this.getIsPrivateRoom());
        cc.game.on(cc.game.EVENT_HIDE, function() {
          console.log("cc.audioEngine.pauseAll2");
          cc.audioEngine.stopAll();
        });
        cc.game.on(cc.game.EVENT_SHOW, function() {
          console.log("cc.audioEngine.rePlay2");
          cc.audioEngine.resumeAll();
          cc.audioEngine.play(self.bgMusic, true);
        });
      },
      onDestroy: function onDestroy() {
        var scheduler = cc.director.getScheduler();
        scheduler.unscheduleCallbackForTarget(this, this._signalUpdate);
        scheduler.unscheduleCallbackForTarget(this, this._timerUpdate);
        _TSCommon.TSCommon.removeEvent(GameCfg.GAME_RESTART, this.onGameReStart, this);
        _TSCommon.TSCommon.removeEvent(GameCfg.changeDeskBg, this.onChangeDeskBg, this);
        _TSCommon.TSCommon.removeEvent(GameCfg.NOTIFICATION_LISTENCARD, this.judgeIsTingCard, this);
        _TSCommon.TSCommon.removeEvent(GameCfg.NOTIFICATION_ROBOT, this.onRobot, this);
        this.onCloseBgMusic();
        this.m_stSaveSceneData = null;
        this.getGameLibSink()._clientFrameSink.m_dataEventHandler = null;
        cc.log("exit scene");
      },
      loadNomalBgRes: function loadNomalBgRes() {
        var self = this;
        var index = cc.sys.localStorage.getItem("deskBg") || 0;
        cc.loader.loadRes("texture/game/background1", cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self.m_bg1Frame = spriteFrame;
            self.onChangeDeskBg(null, index);
          }
        });
        cc.loader.loadRes("texture/game/background2", cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self.m_bg2Frame = spriteFrame;
            self.onChangeDeskBg(null, index);
          }
        });
        cc.loader.loadRes("texture/game/background3", cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self.m_bg3Frame = spriteFrame;
            self.onChangeDeskBg(null, index);
          }
        });
      },
      loadIphoneXBgRes: function loadIphoneXBgRes() {
        var self = this;
        var index = cc.sys.localStorage.getItem("deskBg") || 0;
        cc.loader.loadRes("texture/game/background1_x", cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self.m_bg1Frame = spriteFrame;
            self.onChangeDeskBg(null, index);
          }
        });
        cc.loader.loadRes("texture/game/background2_x", cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self.m_bg2Frame = spriteFrame;
            self.onChangeDeskBg(null, index);
          }
        });
        cc.loader.loadRes("texture/game/background3", cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self.m_bg3Frame = spriteFrame;
            self.onChangeDeskBg(null, index);
          }
        });
      },
      init: function init() {
        this.getGameLibSink()._clientFrameSink.m_dataEventHandler = this.node;
        this.m_bIsOffLine = false;
        this.isClick = false;
        this.pochanFlag = false;
      },
      initUI: function initUI() {
        var self = this;
        this.IsXueZhan() && cc.loader.loadRes("texture/game/xuezhan_title", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.gameTitle.spriteFrame = spriteFrame);
        });
        var gameInfoNode = this.node.getChildByName("game_base_info");
        if (this.getIsPrivateRoom()) {
          gameInfoNode.getChildByName("gold_game_info").active = false;
          gameInfoNode.getChildByName("match_game_info").active = true;
        } else {
          gameInfoNode.getChildByName("gold_game_info").active = true;
          gameInfoNode.getChildByName("match_game_info").active = false;
        }
        for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) {
          var node = this.getPlayerByPos(nPos);
          var holdCardsNode = node.getChildByName("holds");
          for (var i = 0; i < holdCardsNode.childrenCount; i++) {
            var cardNode = holdCardsNode.children[i];
            cardNode.active = false;
          }
          var outCardsNode = node.getChildByName("outcards");
          for (var i = 0; i < outCardsNode.childrenCount; i++) outCardsNode.children[i].active = false;
          var outLaiziGangNode = node.getChildByName("zhonglaigang");
          for (var i = 0; i < outLaiziGangNode.childrenCount; i++) outLaiziGangNode.children[i].active = false;
          var penggangNodes = node.getChildByName("penggangs");
          for (var i = 0; i < penggangNodes.childrenCount; i++) penggangNodes.children[i].active = false;
          var Player = node.getComponent("Player");
          Player.stopWinAction();
        }
        var arrow = this.node.getChildByName("arrow");
        var diceBg = arrow.getChildByName("dice_bg");
        var timeLabel = arrow.getChildByName("timeLabel");
        diceBg.active = false;
        timeLabel.active = false;
        var laiziNode = this.node.getChildByName("laizi");
        laiziNode.active = false;
        this.listenCardLayer.active = false;
        this.gameOverLayer.active = false;
        this.matchGameOverLayer.active = false;
        this.gameResultLayer.active = false;
        this.levelUpgradeLayer.active = false;
        this.protectScoreLayer.active = false;
        this.mallLayer.active = false;
        this.continueWinLayer.active = false;
        this.showSignalUI();
      },
      onChangeDeskBg: function onChangeDeskBg(event, setIndex) {
        var index = 0;
        index = event ? event.data : setIndex;
        var spriteFrame;
        0 == index ? spriteFrame = this.m_bg1Frame : 1 == index ? spriteFrame = this.m_bg2Frame : 2 == index ? spriteFrame = this.m_bg3Frame : console.log("not extra");
        if (!spriteFrame) return;
        this.bg.getComponent(cc.Sprite).spriteFrame = spriteFrame;
      },
      onPlayBgMusic: function onPlayBgMusic() {
        this.bgMusic && (this.m_bgMusicAudioID = cc.audioEngine.play(this.bgMusic, true));
      },
      onCloseBgMusic: function onCloseBgMusic() {
        void 0 != this.m_bgMusicAudioID && cc.audioEngine.stop(this.m_bgMusicAudioID);
      },
      onRobot: function onRobot() {
        this.m_stSceneData && this.m_stSceneData.cbPhase != GameDefs.GamePhase.PhaseEnd ? sendCMD.sendCMD_PO_ROBOTPLAYSTART() : Resources.ShowToast("游戏还没有开始不能托管");
      },
      getGameLibSink: function getGameLibSink() {
        return require("GameLibSink").getInstance();
      },
      getGameLib: function getGameLib() {
        return require("GameLibSink").getInstance().getGameLib();
      },
      PosFromChair: function PosFromChair(cbChair) {
        var gamelib = this.getGameLib();
        var nPos = gamelib.getRelativePos(cbChair) + 1;
        4 == this.getGameLibSink().m_chairCount ? 0 == this.m_cbMyChair && this.IsCXZ() && 3 == nPos ? nPos = 4 : 2 == this.m_cbMyChair && this.IsCXZ() && 3 == nPos && (nPos = 2) : 3 == this.getGameLibSink().m_chairCount && 3 == nPos && (nPos = 4);
        return nPos;
      },
      ChairFromPos: function ChairFromPos(nPos) {
        this.IsCXZ() && nPos >= 4 && (nPos = 3);
        var gamelib = this.getGameLib();
        return gamelib.getRealChair(nPos);
      },
      getIsPrivateRoom: function getIsPrivateRoom() {
        return this.getGameLib().isInPrivateRoom();
      },
      sit: function sit() {
        this.getGameLib().autoSit();
      },
      getPlayerByPos: function getPlayerByPos(nPos) {
        if (1 == nPos) return this.myself;
        if (2 == nPos) return this.right;
        if (3 == nPos) return this.top;
        if (4 == nPos) return this.left;
      },
      GetMyInfo: function GetMyInfo() {
        var gamelib = this.getGameLib();
        this.m_pMyself = gamelib.getMyself();
        null != this.m_pMyself && (this.m_cbMyChair = this.m_pMyself.getUserChair());
      },
      IsXueZhan: function IsXueZhan() {
        if (this.getIsPrivateRoom()) return false;
        return 44 == this.getGameLibSink().getGameId();
      },
      IsGuangDong: function IsGuangDong() {
        if (this.getIsPrivateRoom()) return false;
        return 97 == this.getGameLibSink().getGameId();
      },
      IsCXZ: function IsCXZ() {
        var ret = false;
        var curRoom = this.getGameLib().getCurrentGameRoom();
        curRoom ? curRoom.szGameRoomName && curRoom.szGameRoomName.indexOf("三人场") >= 0 && (ret = true) : 3 == this.getGameLibSink().m_nChairCount && (ret = true);
        return ret;
      },
      MyState: function MyState() {
        if (!this.m_pMyself) return _gamelibcommon.gamelibcommon.USER_NO_STATUS;
        return this.m_pMyself.getUserStatus();
      },
      getTotalMjCount: function getTotalMjCount() {
        var total = GameDefs.MAJIANG_COUNT;
        total = this.IsCXZ() ? 72 : 108;
        return total;
      },
      getRestMjCount: function getRestMjCount() {
        if (!this.m_stSceneData || !this.m_stSceneData.cbPhase) return 0;
        return this.getTotalMjCount() - (this.m_stSceneData.cbCurrentIndex + this.m_stSceneData.cbLastIndex);
      },
      onUserEnterTable: function onUserEnterTable(nChair, wUserID, bIsPlayer) {
        if (false == bIsPlayer) {
          cc.log("bIsPlayer == false return");
          return;
        }
        this.GetMyInfo();
        var userInfo = this.getGameLib().getUser(wUserID);
        if (null == userInfo) {
          cc.log("userInfo is null");
          return;
        }
        Resources.playCommonEffect("enter.mp3");
        this.initAddDirection(this.PosFromChair(0) - 1);
        nChair == this.m_cbMyChair && (this.MyState() != _gamelibcommon.gamelibcommon.USER_PLAY_GAME && this.MyState() != _gamelibcommon.gamelibcommon.USER_OFF_LINE || (this.m_bIsOffLine = true));
        var nPos = this.PosFromChair(nChair);
        var node = this.getPlayerByPos(nPos);
        var player = node.getComponent("Player");
        player.Come(nPos, userInfo);
      },
      onUserExitTable: function onUserExitTable(nChair, wUserID, bIsPlayer) {
        if (false == bIsPlayer) return;
        var nPos = this.PosFromChair(nChair);
        var node = this.getPlayerByPos(nPos);
        var player = node.getComponent("Player");
        player.Leave(nPos);
        Resources.playCommonEffect("exit.mp3");
        nChair == this.m_cbMyChair;
      },
      updateUserInfo: function updateUserInfo(user) {
        if (user) {
          this.m_pMyself = this.getGameLib().getMyself();
          if (this.m_pMyself && user.getUserDBID() == this.m_pMyself.getUserDBID()) {
            this.getPlayerByPos(1).getComponent("Player").refreshGold(user.getGold());
            return;
          }
          var cbChair = user.getUserChair();
          GameCfg.Pub_IsValidChair(cbChair) && this.getPlayerByPos(this.PosFromChair(cbChair)).getComponent("Player").refreshGold(user.getGold());
        }
      },
      getIsGameRunning: function getIsGameRunning() {
        if (this.m_stSceneData) return this.m_stSceneData.cbPhase > GameDefs.GamePhase.PhasePlayDingque && this.m_stSceneData.cbPhase < GameDefs.GamePhase.PhaseEnd;
        return false;
      },
      getIsDingQue: function getIsDingQue() {
        if (this.m_stSceneData) return this.m_stSceneData.cbPhase >= GameDefs.GamePhase.PhasePlayDingque;
        return false;
      },
      getIsGameChangeMjing: function getIsGameChangeMjing() {
        if (this.m_stSceneData) return this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseExchange;
        return false;
      },
      initAddDirection: function initAddDirection(nMyChair) {
        var directTable = [ [ [ "dong_down" ], [ "nan_right" ], [ "xi_top" ], [ "bei_left" ] ], [ [ "bei_down" ], [ "dong_right" ], [ "nan_top" ], [ "xi_left" ] ], [ [ "xi_down" ], [ "bei_right" ], [ "dong_top" ], [ "nan_left" ] ], [ [ "nan_down" ], [ "xi_right" ], [ "bei_top" ], [ "dong_left" ] ] ];
        this.directTable = directTable;
        var nListSize = directTable[nMyChair].length;
        var arrowNode = this.node.getChildByName("arrow");
        var directNode = arrowNode.getChildByName("direction");
        for (var i = 0; i < nListSize; i++) {
          var OneTable = directTable[nMyChair][i];
          var strBgImgName = OneTable[0] + "_bg";
          var strForeImgName = OneTable[0];
          var bgFrame = this.directAtlas.getSpriteFrame(strBgImgName);
          var foreImgFrame = this.directAtlas.getSpriteFrame(strForeImgName);
          directNode.children[i].active = true;
          directNode.children[i].getComponent(cc.Sprite).spriteFrame = bgFrame;
          directNode.children[i + 4].getComponent(cc.Sprite).spriteFrame = foreImgFrame;
        }
      },
      onPlayerStateChanged: function onPlayerStateChanged(nChair, nOldState, nNewState) {
        this.GetMyInfo();
        if (nChair >= GameDefs.PLAYER_COUNT) return;
        if (nNewState == _gamelibcommon.gamelibcommon.USER_READY_STATUS) {
          if (this.m_stSaveSceneData) {
            this.m_playerStatus = this.m_playerStatus || new Array();
            var nPos = this.PosFromChair(nChair);
            this.m_playerStatus[nPos] = true;
            if (this.MyState() == _gamelibcommon.gamelibcommon.USER_READY_STATUS) {
              this.getPlayerByPos(this.PosFromChair(nChair)).getComponent("Player").hideLeaveTimer();
              this.getPlayerByPos(this.PosFromChair(nChair)).getComponent("Player").setIsReady(true);
            }
          } else this.getPlayerByPos(this.PosFromChair(nChair)).getComponent("Player").setIsReady(true);
          if (nChair == this.m_cbMyChair) {
            var gamebuttonLayer = this.node.getComponent("GameButtonLayer");
            gamebuttonLayer.setStartBtnVisible(false);
          }
        } else nNewState == _gamelibcommon.gamelibcommon.USER_SIT_TABLE, this.getPlayerByPos(this.PosFromChair(nChair)).getComponent("Player").setIsReady(false);
        nNewState == _gamelibcommon.gamelibcommon.USER_OFF_LINE ? this.getPlayerByPos(this.PosFromChair(nChair)).getComponent("Player").setIsoffLine(true) : this.getPlayerByPos(this.PosFromChair(nChair)).getComponent("Player").setIsoffLine(false);
        if (nNewState == _gamelibcommon.gamelibcommon.USER_PLAY_GAME) {
          var gamebuttonLayer = this.node.getComponent("GameButtonLayer");
          gamebuttonLayer.setStartBtnVisible(false);
          for (var chair = 0; chair < GameDefs.PLAYER_COUNT; chair++) this.getPlayerByPos(this.PosFromChair(chair)).getComponent("Player").setIsReady(false);
        }
      },
      setRestMjCount: function setRestMjCount() {
        var gameSystemNode = this.node.getChildByName("game_system_info");
        var restMjNum = this.getRestMjCount();
        restMjNum < 0 && (restMjNum = 108);
        19 == restMjNum && Resources.ShowToast("当前牌数不足20张啦");
        gameSystemNode.getChildByName("leftMj_label").getComponent(cc.Label).string = restMjNum;
      },
      showSignalUI: function showSignalUI() {
        var scheduler = cc.director.getScheduler();
        scheduler.unscheduleCallbackForTarget(this, this._signalUpdate);
        var gameSystemNode = this.node.getChildByName("game_system_info");
        var timeLabel = gameSystemNode.getChildByName("time_label");
        var signalProgress = gameSystemNode.getChildByName("singal_progress_bar");
        gameSystemNode.getChildByName("leftMj_label").getComponent(cc.Label).string = 0;
        var myDate = new Date();
        var update = function update(dt) {
          var hours = myDate.getHours();
          var minutes = myDate.getMinutes();
          minutes < 10 && (minutes = "0" + minutes);
          var formatTime = hours + ":" + minutes;
          timeLabel.getComponent(cc.Label).string = formatTime;
          var netLagValue = this.getGameLib().getNetLag();
          var nProgress = 1;
          nProgress = netLagValue <= 50 ? 1 : netLagValue > 50 && netLagValue <= 150 ? .8 : netLagValue > 150 && netLagValue <= 250 ? .6 : netLagValue > 250 && netLagValue <= 350 ? .4 : netLagValue > 350 && netLagValue <= 450 ? .2 : 0;
          signalProgress.getComponent(cc.ProgressBar).progress = nProgress;
        };
        this._signalUpdate = update;
        scheduler.scheduleCallbackForTarget(this, update, 1, cc.macro.REPEAT_FOREVER, 0, false);
      },
      setRoomInfo: function setRoomInfo() {
        if (!this.m_roomInfo) return;
        var gameInfoNode = this.node.getChildByName("game_base_info");
        var roomScoreLabel = gameInfoNode.getChildByName("gold_game_info").getChildByName("room_score_label");
        roomScoreLabel.getComponent(cc.Label).string = this.m_roomInfo.nTurnBasicGold + "分";
        var roomLevelLabel = gameInfoNode.getChildByName("gold_game_info").getChildByName("room_level_label");
        var roomLevel = "新手场";
        var curRoom = this.getGameLib().getCurrentGameRoom();
        if (curRoom) {
          var dwRuleID = curRoom.dwRuleID % 10;
          2 == dwRuleID ? roomLevel = "中级场" : 3 == dwRuleID ? roomLevel = "高级场" : 4 == dwRuleID && (roomLevel = "富豪场");
        }
        roomLevelLabel.getComponent(cc.Label).string = roomLevel;
        var baseInfoBg = gameInfoNode.getChildByName("base_info_bg");
        var gameInfo = baseInfoBg.getChildByName("game_play_info");
        var gameInfoStr = "4人场 ";
        3 == this.m_roomInfo.nPlayerCount && (gameInfoStr = "3人场 ");
        gameInfoStr += " 换三张";
        1 == this.m_roomInfo.cbMenQing && (gameInfoStr += " 门清中张");
        1 == this.m_roomInfo.cbWith19 && (gameInfoStr += " 带幺九,将对");
        1 == this.m_roomInfo.cbTianDiHu && (gameInfoStr += " 天地胡");
        gameInfo.getComponent(cc.RichText).string = gameInfoStr;
      },
      addLaiziInfo: function addLaiziInfo() {
        var laizNode = this.node.getChildByName("laizi");
        var laiziInfoNode = laizNode.getChildByName("laizi_info");
        var laiziMj = laiziInfoNode.getChildByName("laizi_mj");
        var mjValue = this.m_stSceneData.cbLaizi;
        laiziMj.getComponent(cc.Sprite).spriteFrame = this.node.getComponent("MjResourceMgr").get_face_li_SpriteFrame("mj1", mjValue);
      },
      addGameWaitStartAction: function addGameWaitStartAction() {
        this.waitStartArary = new Array();
        for (var i = 1; i <= 15; i++) ;
      },
      onSceneChanged: function onSceneChanged(lpData) {
        var _this2 = this;
        this.m_stSaveSceneData = this.m_stSceneData || {};
        var ba = lpData;
        this.m_stSceneData = GameDefs.GameScene(ba);
        this.moreSettingLayer.getComponent("MoreSettingLayer").setLeaveBtnEnabled(false);
        this.moreSettingLayer.getComponent("MoreSettingLayer").setChangedDeskBtnEnabled(false);
        var gamebuttonLayer = this.node.getComponent("GameButtonLayer");
        gamebuttonLayer.setAllOperateButtonIsVis(false);
        var isSetInfo = [];
        for (var cbChair = 0; cbChair < GameDefs.PLAYER_COUNT; cbChair++) {
          var nPos = this.PosFromChair(cbChair);
          if (this.getPlayerByPos(nPos).getComponent("Player").getIsValidPlayer() && !isSetInfo[nPos]) {
            var playerCardLayer = this.getPlayerByPos(nPos).getComponent("PlayerCardLayer");
            playerCardLayer.setPlayerPos(nPos);
            playerCardLayer.setPlayerMj(this.m_stSceneData.players[cbChair]);
            1 == nPos && playerCardLayer.removeEatOrGangMoresCardToast();
            var outCardLayer = this.getPlayerByPos(nPos).getComponent("OutCardLayer");
            outCardLayer.setPlayerPos(nPos);
            outCardLayer.setPlayerMj(this.m_stSceneData.players[cbChair]);
            var huCardLayer = this.getPlayerByPos(nPos).getComponent("HuCardLayer");
            huCardLayer.setPlayerPos(nPos);
            huCardLayer.setPlayerMj(this.m_stSceneData.players[cbChair]);
            if (cbChair == this.m_cbMyChair) {
              var cancelRobotNode = this.node.getChildByName("cancel_robot");
              var isRobot = 1 == this.m_stSceneData.players[cbChair].cbAutoOutCard;
              cancelRobotNode.active = !!isRobot;
              require("HallUtils").isIPhoneX() && cancelRobotNode.setScale(1.2);
              var onCancelRobot = function onCancelRobot() {
                cancelRobotNode.active = false;
              };
              this.node.getComponent("GameButtonLayer").setCancelRobotBtnCallBack(onCancelRobot);
            }
            isSetInfo[nPos] = true;
          }
          if (!this.getIsPrivateRoom()) {
            var nGold = this.getPlayerByPos(nPos).getComponent("Player").getNowScore();
            this.getPlayerByPos(nPos).getComponent("Player").setPoChanVis(nGold <= 300);
          }
        }
        if (this.getIsPrivateRoom()) this.moreSettingLayer.getComponent("MoreSettingLayer").setIsPrivateRoom(true); else {
          var myPos = this.PosFromChair(this.m_cbMyChair);
          var nGold = this.getPlayerByPos(myPos).getComponent("Player").getNowScore();
          var cancelPoChanNode = this.node.getChildByName("cancel_pochan");
          if (nGold <= 300) {
            cancelPoChanNode.active = true;
            this.pochanFlag = true;
            this.moreSettingLayer.getComponent("MoreSettingLayer").setLeaveBtnEnabled(true);
          } else {
            cancelPoChanNode.active = false;
            this.pochanFlag = false;
            this.moreSettingLayer.getComponent("MoreSettingLayer").setLeaveBtnEnabled(false);
          }
        }
        if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseEnd) {
          this.reportResultToWx();
          this.gameOver();
          return;
        }
        var bolHu = 1 == this.m_stSceneData.players[this.m_cbMyChair].cbIsHu;
        this.moreSettingLayer.getComponent("MoreSettingLayer").setLeaveBtnEnabled(bolHu);
        this.moreSettingLayer.getComponent("MoreSettingLayer").setChangedDeskBtnEnabled(bolHu);
        this.m_stSceneData.cbWhosTurn == this.m_cbMyChair && this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseOutCard ? this.getPlayerByPos(1).getComponent("PlayerCardLayer").setCanOutCard(true) : this.getPlayerByPos(1).getComponent("PlayerCardLayer").setCanOutCard(false);
        if (this.m_stSceneData.cbPhase > GameDefs.GamePhase.PhaseStart) {
          this.openGmae = true;
          this.m_playerStatus = new Array();
          var arrowNode = this.node.getChildByName("arrow");
          var diceBg = arrowNode.getChildByName("dice_bg");
          diceBg.active = true;
          this.setRestMjCount();
          Tools.isEmptyObject(this.m_stSaveSceneData) && this.m_bIsOffLine && this.m_stSceneData.LastAction.nAction != GameDefs.PlayerAction.paHu && this.setAllOutData();
        }
        if (this.m_stSceneData.cbPhase > GameDefs.GamePhase.PhasePlayDingque) {
          for (var chair = 0; chair < GameDefs.PLAYER_COUNT; chair++) {
            var nPos = this.PosFromChair(chair);
            var mjPlayerDingque = this.m_stSceneData.players[chair].cbDingque;
            this.getPlayerByPos(nPos).getComponent("Player").setQueWanHeadIconSpIsVis(true, mjPlayerDingque);
          }
          var node = this.getPlayerByPos(1);
          var changeCardsNode = node.getChildByName("changecards");
          changeCardsNode.active = false;
          bolHu || this.dingQueYiMenAniation(true);
        }
        if (this.m_stSceneData.LastAction.nAction == GameDefs.PlayerAction.paOutCard) {
          this.setAllOutData();
          var nPos = this.PosFromChair(this.m_stSceneData.LastAction.nChair);
          this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paOutCard);
          for (var i = 1; i < 5; i++) this.getPlayerByPos(i).getComponent("OutCardLayer").hideOutCard();
          this.getPlayerByPos(nPos).getComponent("OutCardLayer").putOutMj(this.m_stSceneData.LastAction.nParam);
          var nCardValue = this.m_stSceneData.LastAction.nParam;
          Resources.playMjSoundEffect(this.getPlayerByPos(nPos).getComponent("Player").getSex(), nCardValue);
          Resources.playCommonEffect("outcard.mp3");
          this.m_stSceneData.cbWhosTurn == this.m_cbMyChair && (this.m_nClickCardTing = nCardValue);
          this.setTingCardLeftNum(nCardValue, 1);
          this.refreshTingCard();
        } else if (this.m_stSceneData.LastAction.nAction == GameDefs.PlayerAction.paPeng) {
          for (var i = 1; i < 5; i++) this.getPlayerByPos(i).getComponent("OutCardLayer").hideOutCard();
          this.setAllOutData();
          var nPos = this.PosFromChair(this.m_stSceneData.LastAction.nChair);
          this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paPeng);
          this.getPlayerByPos(nPos).getComponent("Player").playOperateEffects(GameCfg.EffectList.No_1pen, nPos);
          Resources.playCommonEffect("effectword.mp3");
          var randIndex = 1;
          Resources.playPengEffect(this.getPlayerByPos(nPos).getComponent("Player").getSex(), randIndex);
          this.setTingCardLeftNum(this.m_stSceneData.cbCurrentCard, 2);
          this.refreshTingCard();
          this.operationChangeData();
        } else if (this.m_stSceneData.LastAction.nAction == GameDefs.PlayerAction.paGang) {
          for (var i = 1; i < 5; i++) this.getPlayerByPos(i).getComponent("OutCardLayer").hideOutCard();
          this.setAllOutData();
          var nPos = this.PosFromChair(this.m_stSceneData.LastAction.nChair);
          this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paGang);
          if (void 0 != this.m_stSaveSceneData.cbLastIndex && this.m_stSceneData.cbLastIndex === this.m_stSaveSceneData.cbLastIndex && this.m_stSceneData.cbPhase != GameDefs.GamePhase.PhaseEnd) {
            var mjPlayer = this.m_stSceneData.players[this.m_stSceneData.LastAction.nChair];
            var nWeaveType = GameDefs.WeaveType.MingGang;
            for (var i = 0; i < GameDefs.MAX_WEAVE; i++) mjPlayer.showCardSuits[i].cbWeaveKind != GameDefs.WeaveType.InvalidType && (nWeaveType = mjPlayer.showCardSuits[i].cbWeaveKind);
            this.getPlayerByPos(nPos).getComponent("Player").playOperateEffects(GameCfg.EffectList.No_2gang, nPos);
            this.getPlayerByPos(nPos).getComponent("Player").playGuaFengEffects(true, nPos);
            Resources.playCommonEffect("effectword.mp3");
            Resources.playGangEffect(this.getPlayerByPos(nPos).getComponent("Player").getSex(), 0);
            for (var i = GameDefs.MAX_WEAVE - 1; i >= 0; i--) {
              var revealSuit = this.m_stSceneData.players[this.ChairFromPos(nPos - 1)].showCardSuits[i];
              var stRevealGang = revealSuit.cbCardData;
              if (revealSuit.cbWeaveKind == GameDefs.WeaveType.MingGang) {
                if (stRevealGang && stRevealGang.length > 0) {
                  this.setTingCardLeftNum(stRevealGang[0], 3);
                  this.refreshTingCard();
                  break;
                }
              } else if (revealSuit.cbWeaveKind == GameDefs.WeaveType.XuGang) {
                if (stRevealGang && stRevealGang.length > 0) {
                  this.setTingCardLeftNum(stRevealGang[0], 1);
                  this.refreshTingCard();
                  break;
                }
              } else if (revealSuit.cbWeaveKind == GameDefs.WeaveType.AnGang && stRevealGang && stRevealGang.length > 0) {
                this.setTingCardLeftNum(stRevealGang[0], 4);
                this.refreshTingCard();
                break;
              }
            }
          }
        } else if (this.m_stSceneData.LastAction.nAction == GameDefs.PlayerAction.paEat) {
          for (var i = 1; i < 5; i++) this.getPlayerByPos(i).getComponent("OutCardLayer").hideOutCard();
          this.setAllOutData();
          var nPos = this.PosFromChair(this.m_stSceneData.LastAction.nChair);
          this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paEat);
          this.getPlayerByPos(nPos).getComponent("Player").playOperateEffects(GameCfg.EffectList.No_2chi, nPos);
        } else if (this.m_stSceneData.LastAction.nAction == GameDefs.PlayerAction.paHu) {
          for (var i = 1; i < 5; i++) this.getPlayerByPos(i).getComponent("OutCardLayer").hideOutCard();
          Resources.playCommonEffect("effectword.mp3");
          var self = this;
          var nGetPos = this.PosFromChair(this.m_stSceneData.LastAction.nChair);
          var nHuCount = this.m_stSceneData.LastAction.nChair % 10;
          var nFangPaoChair = Math.floor(self.m_stSceneData.LastAction.nChair / 10);
          var vHuChair = [];
          var nHuParam = self.m_stSceneData.LastAction.nParam;
          var nFangPaoReal = Math.floor(nHuParam / 1e3);
          var nHuMoreParam = nHuParam % 1e3;
          1 == nHuCount && (vHuChair[0] = nHuMoreParam % 10);
          if (2 == nHuCount) {
            vHuChair[0] = Math.floor(nHuMoreParam / 10);
            vHuChair[1] = nHuMoreParam % 10;
          }
          if (3 == nHuCount) {
            vHuChair[0] = Math.floor(nHuMoreParam / 100);
            vHuChair[1] = nHuMoreParam % 100 % 10;
            vHuChair[2] = Math.floor(nHuMoreParam % 100 / 10);
          }
          this.operationChangeData();
          for (var i = 0; i < vHuChair.length; i++) {
            var nPos = this.PosFromChair(vHuChair[i]);
            this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paHu);
            this.IsXueZhan() && this.getPlayerByPos(nPos).getComponent("Player").setHuSpIsVis(true);
            if (0 == nFangPaoChair) {
              Resources.playHuEffect(this.getPlayerByPos(nPos).getComponent("Player").getSex(), 0);
              this.getPlayerByPos(nPos).getComponent("Player").playOperateEffects(GameCfg.EffectList.No_2hu, nPos);
              this.playHuEffect(vHuChair[i], false, function() {
                _this2.setAllOutData();
              }, nFangPaoReal);
            } else {
              var randIndex = 0;
              Resources.PlayZiMoEffect(this.getPlayerByPos(nPos).getComponent("Player").getSex(), randIndex);
              this.setAllOutData();
              this.getPlayerByPos(nPos).getComponent("Player").playOperateEffects(GameCfg.EffectList.No_2ZiMo, nPos);
              var playerData = this.m_stSceneData.players[vHuChair[i]];
              this.getPlayerByPos(nPos).getComponent("HuCardLayer").putHuMj(true);
            }
            if (vHuChair[i] == this.m_cbMyChair) {
              this.getPlayerByPos(1).getComponent("PlayerCardLayer").setGrayForCannotUpCard(false);
              this.IsXueZhan() && this.moreSettingLayer.getComponent("MoreSettingLayer").setLeaveBtnEnabled(true);
            }
          }
        }
        if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseStart) if (Tools.isEmptyObject(this.m_stSaveSceneData) && this.m_bIsOffLine) ; else {
          var nBankerPos = this.PosFromChair(this.m_stSceneData.cbBanker);
          this.startGameAction(this.m_stSceneData.cbFirstDice, this.m_stSceneData.cbSecondDice, nBankerPos);
        } else if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseOutCard) {
          cc.log("轮到当前的椅子号为" + this.PosFromChair(this.m_stSceneData.cbWhosTurn));
          var nPos = this.PosFromChair(this.m_stSceneData.cbWhosTurn);
          if (this.m_stSceneData.cbCurrentIndex != this.m_stSaveSceneData.cbCurrentIndex) {
            this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paGet1CardFromHeader);
            var bolHu = this.m_cbMyChair == this.m_stSceneData.cbWhosTurn && 1 == this.m_stSceneData.players[this.m_cbMyChair].cbIsHu;
            this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").getOneMj(this.m_stSceneData.cbCurrentCard, bolHu);
          } else if (this.m_stSceneData.cbLastIndex != this.m_stSaveSceneData.cbLastIndex) {
            this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paGet1CardFromTail);
            var bolHu = this.m_cbMyChair == this.m_stSceneData.cbWhosTurn && 1 == this.m_stSceneData.players[this.m_cbMyChair].cbIsHu;
            this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").getOneMj(this.m_stSceneData.cbCurrentCard, bolHu);
          } else {
            this.m_stSceneData.LastAction.nAction != GameDefs.PlayerAction.paEat && this.m_stSceneData.LastAction.nAction != GameDefs.PlayerAction.paGang && this.m_stSceneData.LastAction.nAction != GameDefs.PlayerAction.paPeng && this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").setActionState(GameDefs.PlayerAction.paPatchFlower);
            this.operationChangeData();
          }
          Tools.isEmptyObject(this.m_stSaveSceneData) && this.m_bIsOffLine && this.operationChangeData();
          var nPos = this.PosFromChair(this.m_stSceneData.cbWhosTurn);
          this.setIsDirectionVis(nPos);
          for (var pos = 1; pos <= GameDefs.PLAYER_COUNT; pos++) this.getPlayerByPos(pos).getComponent("Player").turnToOutPlayCardIsVis(false);
          this.getPlayerByPos(nPos).getComponent("Player").turnToOutPlayCardIsVis(true);
          this.startTimer(null, this.GAMETIMER_COUNT);
          this.showChoiceButton();
          this.setRestMjCount();
          if (this.m_stSceneData.cbWhosTurn == this.m_cbMyChair) {
            var mjPlayer = this.m_stSceneData.players[this.m_cbMyChair];
            this.m_nClickCardTing = mjPlayer.cbHoldCards[mjPlayer.cbHoldCardCount - 1];
            this.m_saveTingCardList = this.m_stSceneData.vTingList;
            this.refreshTingCard();
          }
        } else if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseWaitChoice) {
          this.operationChangeData();
          this.setRestMjCount();
          this.setIsDirectionVis(0);
          this.showChoiceButton();
          this.startTimer(null, this.GAMETIMER_COUNT - 5);
        } else if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseExchange) {
          var self = this;
          var callBackFunc = function callBackFunc() {
            self.startTimer(null, self.GAMETIMER_COUNT - 2);
            self.operationChangeData(true);
            self.addThreeSelectCardUI(true, 6, true);
          };
          _TSCommon.TSCommon.performWithDelay(this, callBackFunc, 1);
        } else if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhasePlayExchange) {
          this.stopTimer();
          this.addThreeSelectCardUI(false, 7, false);
          this.changeMjAction();
          this.exchangeCardAniation();
        } else if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhaseDingque) {
          this.startTimer(null, this.XUANPAI_COUNT);
          this.operationChangeData();
          this.addDingQueYiMenUI(true, 4, true);
        } else if (this.m_stSceneData.cbPhase == GameDefs.GamePhase.PhasePlayDingque) {
          this.stopTimer();
          this.addDingQueYiMenUI(false, 5, false);
          this.dingQueYiMenAniation();
          this.operationChangeData(true);
        }
      },
      stopDingQueAnimation: function stopDingQueAnimation() {
        var playerNode1 = this.queYiMenButtonLayer.getChildByName("wan_node");
        var winNode1 = playerNode1.getChildByName("wan_act");
        winNode1.active = false;
        var playerNode2 = this.queYiMenButtonLayer.getChildByName("tiao_node");
        var winNode2 = playerNode2.getChildByName("tiao_act");
        winNode2.active = false;
        var playerNode3 = this.queYiMenButtonLayer.getChildByName("tong_node");
        var winNode3 = playerNode3.getChildByName("tong_act");
        winNode3.active = false;
      },
      onGameMessage: function onGameMessage(chair, cCmdID, lpBuf) {
        var self = this;
        if (cCmdID == GameDefs.MJ_CMD_GANG || cCmdID == GameDefs.MJ_CMD_SHOW_HU_SCORE) {
          self.l_pBuf = lpBuf;
          var gangScoreArray = new Array();
          var callback = function callback() {
            for (nChair = 0; nChair < GameDefs.PLAYER_COUNT; nChair++) if (self.l_pBuf.bytesAvailable > 0) {
              var nGangScore = self.l_pBuf.readInt();
              var nPos = self.PosFromChair(nChair);
              if (0 != nGangScore) {
                self.n_Pos = nPos;
                self.n_GangScore = nGangScore;
                self.getPlayerByPos(self.n_Pos).getComponent("Player").setTempChangeGold(self.n_GangScore, null);
              }
            }
          };
          _TSCommon.TSCommon.performWithDelay(this, callback, 1);
        } else if (cCmdID == GameDefs.MJ_CMD_ROOMINFO) {
          this.m_roomInfo = GameDefs.ST_RoomInfo(lpBuf);
          this.setRoomInfo();
        } else if (cCmdID == GameDefs.MJ_CMD_Set_XueFei) ; else if (cCmdID == GameDefs.MJ_CMD_PoChan) {
          var myPos = this.PosFromChair(this.m_cbMyChair);
          var nGold = this.getPlayerByPos(myPos).getComponent("Player").getNowScore();
          var cancelPoChanNode = this.node.getChildByName("cancel_pochan");
          if (parseInt(nGold) <= 300) {
            cancelPoChanNode.active = true;
            this.pochanFlag = true;
          } else {
            cancelPoChanNode.active = false;
            this.pochanFlag = false;
          }
        } else if (cCmdID == GameDefs.MJ_CMD_AutoOut) {
          var nChair = lpBuf.readUnsignedByte();
          var nPos = this.PosFromChair(nChair);
          this.getPlayerByPos(nPos).getComponent("Player").setIsRobot(true);
          if (nChair == this.m_cbMyChair) {
            var cancelRobotNode = this.node.getChildByName("cancel_robot");
            cancelRobotNode.active = true;
            require("HallUtils").isIPhoneX() && cancelRobotNode.setScale(1.2);
            var onCancelRobot = function onCancelRobot() {
              cancelRobotNode.active = false;
            };
            this.node.getComponent("GameButtonLayer").setCancelRobotBtnCallBack(onCancelRobot);
          }
        } else if (cCmdID == GameDefs.MJ_CMD_Cancel_AutoOut) {
          var nChair = lpBuf.readUnsignedByte();
          var nPos = this.PosFromChair(nChair);
          this.getPlayerByPos(nPos).getComponent("Player").setIsRobot(false);
          if (nChair == this.m_cbMyChair) {
            var cancelRobotNode = this.node.getChildByName("cancel_robot");
            cancelRobotNode.active = false;
          }
        } else if (cCmdID == GameDefs.MSG_ROBOT_ACTIVE) ; else if (cCmdID == GameDefs.MJ_DISSOLVE_ROOM) ; else if (cCmdID == GameDefs.MJ_DISSOLVE_RESULT) ; else if (cCmdID == GameDefs.MJ_CMD_SETINFO) this.m_roomSetInfo = GameDefs.ST_SetInfo(lpBuf); else if (cCmdID == GameDefs.CMD_PROPERTY) {
          console.log("接收到下发的道具消息");
          this.propertyReSultDeal(chair, lpBuf);
        } else if (cCmdID == GameDefs.CMD_Notify_UpGrade) this.m_nNewLevel = lpBuf.readInt(); else if (cCmdID == GameDefs.MJ_CMD_DissINFO) ; else if (cCmdID == GameDefs.MJ_CMD_Exchange) {
          var nPos = this.PosFromChair(chair);
          chair != this.m_cbMyChair && this.getPlayerByPos(nPos).getComponent("Player").setSelectCardSpIsVis(true, 7);
        } else if (cCmdID == GameDefs.MJ_CMD_DingQue) {
          var nQueMen = lpBuf.readUnsignedByte();
          if (chair == this.m_cbMyChair) {
            this.getPlayerByPos(1).getComponent("Player").setQueWanSpIsVis(true, nQueMen);
            this.queYiMenTipsLayer.active = false;
            this.queYiMenButtonLayer.active = false;
            this.stopDingQueAnimation();
          } else {
            var nPos = this.PosFromChair(chair);
            this.getPlayerByPos(nPos).getComponent("Player").setDingqueSpIsVis(true, 5);
          }
        }
      },
      startGameAction: function startGameAction(firstDice, secondDice, nBankerPos) {
        var self = this;
        var gameSystemNode = this.node.getChildByName("game_system_info");
        for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) {
          var node = self.getPlayerByPos(nPos);
          var holdCardsNode = node.getChildByName("holds");
          for (var i = 0; i < holdCardsNode.childrenCount; i++) {
            var cardNode = holdCardsNode.children[i];
            cardNode.getComponent(cc.Sprite).spriteFrame = null;
            cardNode.active = true;
            cardNode.setScale(1);
          }
        }
        var playStartActionEnd = function playStartActionEnd(nPos) {
          var holds = self.getPlayerByPos(nPos).getChildByName("holds");
          if (1 == nPos) for (var i = 0; i < self.m_stSceneData.players[self.m_cbMyChair].cbHoldCardCount; i++) {
            var cardNode = holds.children[i];
            var animation = cardNode.addComponent(cc.Animation);
            animation.addClip(self.mj_actionClip, "mj_action");
            var animState = animation.play("mj_action");
            animState && (animState.speed = .9);
            Resources.playCommonEffect("cleancard.mp3");
            if (i == self.m_stSceneData.players[self.m_cbMyChair].cbHoldCardCount - 1) {
              self.getPlayerByPos(nPos).getComponent("PlayerCardLayer").resetAllHandCardPosWithNoDiff();
              var onEnd = function onEnd() {
                self.getPlayerByPos(nPos).getComponent("PlayerCardLayer").putSelfHandCards();
              };
              animation.on("finished", onEnd, cardNode);
            }
          } else {
            var chair = self.ChairFromPos(nPos - 1);
            var spriteFrame;
            2 == nPos ? spriteFrame = self.node.getComponent("MjResourceMgr").m_mj1_back_right_frame : 3 == nPos ? spriteFrame = self.node.getComponent("MjResourceMgr").m_mj1_back_top_frame : 4 == nPos ? spriteFrame = self.node.getComponent("MjResourceMgr").m_mj1_back_left_frame : console.log("check  the  nPos");
            for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) {
              holds.children[i].active = false;
              holds.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
            }
            var cardCount = 13;
            if (2 != nPos) for (var i = 0; i < cardCount; i++) holds.children[i].active = true; else for (var i = GameDefs.MAX_HOLD_CARD - 1; i >= GameDefs.MAX_HOLD_CARD - cardCount; i--) holds.children[i].active = true;
          }
          var nPlayerCount = 4;
          gameSystemNode.getChildByName("leftMj_label").getComponent(cc.Label).string = self.getTotalMjCount() - 13 * (nPlayerCount - 1) - 14;
        };
        var playStartAction = function playStartAction(nPos) {
          var holds = self.getPlayerByPos(nPos).getChildByName("holds");
          var groupIndex = 0;
          var playGetOneGroupCardAction = function playGetOneGroupCardAction() {
            if (groupIndex >= 3) {
              playStartActionEnd(nPos);
              return;
            }
            var playNextGroup = false;
            for (var j = 0; j < 4; j++) {
              var cardNode;
              cardNode = 2 == nPos ? holds.children[13 - (4 * groupIndex + j)] : holds.children[4 * groupIndex + j];
              if (cardNode) {
                var animation = cardNode.addComponent(cc.Animation);
                if (1 == nPos) {
                  animation.addClip(self.me_actionClip, "me_action");
                  var animState = animation.play("me_action");
                  animState && (animState.speed = 1.5);
                } else if (2 == nPos) {
                  animation.addClip(self.right_actionClip, "right_action");
                  animation.play("right_action");
                } else if (3 == nPos) {
                  animation.addClip(self.top_actionClip, "top_action");
                  animation.play("top_action");
                } else {
                  animation.addClip(self.left_actionClip, "left_action");
                  animation.play("left_action");
                }
                Resources.playCommonEffect("getcard.mp3");
                var onPlayAnimatiEnd = function onPlayAnimatiEnd(event) {
                  if (!playNextGroup) {
                    var strCount = gameSystemNode.getChildByName("leftMj_label").getComponent(cc.Label).string;
                    var restMjNum = strCount <= 0 ? 108 : strCount;
                    restMjNum -= 4;
                    gameSystemNode.getChildByName("leftMj_label").getComponent(cc.Label).string = restMjNum;
                    if (1 == nPos) for (var index = 0; index < 4; index++) {
                      var mjValue = self.m_stSceneData.players[self.m_cbMyChair].cbHoldCards[4 * groupIndex + index];
                      var spriteFrame = self.node.getComponent("MjResourceMgr").get_face_li_SpriteFrame("mj1", mjValue);
                      holds.children[4 * groupIndex + index].getComponent(cc.Sprite).spriteFrame = spriteFrame;
                    }
                    groupIndex += 1;
                    playNextGroup = true;
                    playGetOneGroupCardAction(groupIndex);
                  }
                };
                animation.on("finished", onPlayAnimatiEnd, cardNode);
              }
            }
          };
          playGetOneGroupCardAction(groupIndex);
        };
        var delayCallBackFunc = function delayCallBackFunc() {
          for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) self.getPlayerByPos(nPos).getComponent("Player").getIsValidPlayer() && playStartAction(nPos);
        };
        this.playStartGameAct();
        _TSCommon.TSCommon.performWithDelay(this, delayCallBackFunc, 1.5);
        Resources.playCommonEffect("startgame.mp3");
      },
      playStartGameAct: function playStartGameAct() {
        var self = this;
        var whosTurnNode = this.node.getChildByName("start_game_act");
        var strAniName = "Animation1";
        whosTurnNode.active = true;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        var animState = dragonDisplay.playAnimation(strAniName, 1);
        animState && (animState.timeScale = 1.6);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      playOverGameAct: function playOverGameAct() {
        var self = this;
        var whosTurnNode = this.node.getChildByName("over_game_act");
        var strAniName = "newAnimation";
        whosTurnNode.active = true;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName, 1);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      propertyReSultDeal: function propertyReSultDeal(chair, data) {
        var pProperty = GameDefs.ST_Property.new(data);
        console.log(pProperty);
        if (pProperty.bSuccess) {
          var userInfo = this.getGameLib().getUserByChair(pProperty.cbSendChair);
          if (userInfo) {
            var curPlayer = this.getPlayerByPos(this.PosFromChair(pProperty.cbSendChair));
            var nPos = this.PosFromChair(pProperty.cbToChair);
            var toPlayer = this.getPlayerByPos(nPos);
            var nPropertyID = pProperty.nPropertyID % 10;
            if (curPlayer && toPlayer) {
              console.log("发送道具成功");
              var PropertyAnimationLayer = this.node.getComponent("PropertyAnimationLayer");
              var onEnd = function onEnd() {};
              var curPosNode = curPlayer.getChildByName("playerNode").getChildByName("playerAvatar");
              var toPosNode = toPlayer.getChildByName("playerNode").getChildByName("playerAvatar");
              PropertyAnimationLayer.create(cc.p(curPosNode.x, curPosNode.y), cc.p(toPosNode.x, toPosNode.y), nPropertyID, onEnd);
            }
          }
        } else if (pProperty.cbSendChair == this.m_cbMyChair) {
          console.log("发送道具失败");
          require("Resources").ShowToast("您当前的金币不足啦");
        }
      },
      quedingLaizi: function quedingLaizi() {
        if (this.m_stSceneData) {
          var laiziNode = this.node.getChildByName("laizi");
          laiziNode.active = true;
          var spriteFrame = this.node.getComponent("MjResourceMgr").get_face_li_SpriteFrame("mj1", this.m_stSceneData.cbLaizi);
          laiziNode.getChildByName("laizi_img").getComponent(cc.Sprite).spriteFrame = spriteFrame;
        }
      },
      setIsDirectionVis: function setIsDirectionVis(nPos) {
        this.GetMyInfo();
        if (null == this.m_cbMyChair) return;
        var arrowNode = this.node.getChildByName("arrow");
        var directNode = arrowNode.getChildByName("direction");
        for (var i = 4; i < directNode.childrenCount; i++) {
          directNode.children[i].active = false;
          directNode.children[i].stopAllActions();
        }
        if (0 == nPos) return 0;
        var direct = directNode.children[4 + nPos - 1];
        direct.stopAllActions();
        var act1 = cc.fadeOut(1);
        var act2 = cc.fadeIn(1);
        var seq = cc.sequence(act1, act2);
        direct.active = true;
        direct.runAction(cc.repeatForever(seq));
      },
      showChoiceButton: function showChoiceButton() {
        var choice = this.m_stSceneData.ChoiceAction[this.m_cbMyChair];
        var myMJPlayer = this.m_stSceneData.players[this.m_cbMyChair];
        var vUpCards = new Array();
        var gamebuttonLayer = this.node.getComponent("GameButtonLayer");
        var GameJudge = require("GameJudge");
        if (GameDefs.PlayerAction.paEat == (choice & GameDefs.PlayerAction.paEat)) {
          var nValidLen = 0;
          var pEatCase = new Array();
          var bIsLeft = GameJudge.CanShunLeft(this.m_stSceneData.cbCurrentCard, myMJPlayer.cbHoldCards, myMJPlayer.cbHoldCardCount, this.m_stSceneData.cbLaizi);
          var bIsMiddle = GameJudge.CanShunMid(this.m_stSceneData.cbCurrentCard, myMJPlayer.cbHoldCards, myMJPlayer.cbHoldCardCount, this.m_stSceneData.cbLaizi);
          var bIsRight = GameJudge.CanShunRight(this.m_stSceneData.cbCurrentCard, myMJPlayer.cbHoldCards, myMJPlayer.cbHoldCardCount, this.m_stSceneData.cbLaizi);
          if (bIsLeft) {
            nValidLen += 1;
            var stEat = new Array();
            stEat.push(this.m_stSceneData.cbCurrentCard);
            stEat.push(this.m_stSceneData.cbCurrentCard + 1);
            stEat.push(this.m_stSceneData.cbCurrentCard + 2);
            stEat.push(GameDefs.MJ_CMD_EATLEFT);
            pEatCase.push(stEat);
            vUpCards.push(this.m_stSceneData.cbCurrentCard + 1);
            vUpCards.push(this.m_stSceneData.cbCurrentCard + 2);
          }
          if (bIsMiddle) {
            nValidLen += 1;
            var stEat = new Array();
            stEat.push(this.m_stSceneData.cbCurrentCard - 1);
            stEat.push(this.m_stSceneData.cbCurrentCard);
            stEat.push(this.m_stSceneData.cbCurrentCard + 1);
            stEat.push(GameDefs.MJ_CMD_EATMID);
            pEatCase.push(stEat);
            vUpCards.push(this.m_stSceneData.cbCurrentCard - 1);
            vUpCards.push(this.m_stSceneData.cbCurrentCard + 1);
          }
          if (bIsRight) {
            nValidLen += 1;
            var stEat = new Array();
            stEat.push(this.m_stSceneData.cbCurrentCard - 2);
            stEat.push(this.m_stSceneData.cbCurrentCard - 1);
            stEat.push(this.m_stSceneData.cbCurrentCard);
            stEat.push(GameDefs.MJ_CMD_EATRIGHT);
            pEatCase.push(stEat);
            vUpCards.push(this.m_stSceneData.cbCurrentCard - 2);
            vUpCards.push(this.m_stSceneData.cbCurrentCard - 1);
          }
          var self = this;
          var onChiClickCallBack = function onChiClickCallBack() {
            if (0 == nValidLen) return;
            1 == nValidLen ? sendCMD.sendCMD_PO_EAT(pEatCase[0][3]) : self.getPlayerByPos(1).getComponent("PlayerCardLayer").eatMoresCardToast(nValidLen, pEatCase, self.m_stSceneData.cbCurrentCard);
          };
          gamebuttonLayer.setChiClickBtnCallBack(onChiClickCallBack);
          gamebuttonLayer.setGuoBtnVisible(true);
          gamebuttonLayer.setChiBtnVisible(true);
        }
        if (GameDefs.PlayerAction.paPeng == (choice & GameDefs.PlayerAction.paPeng)) {
          gamebuttonLayer.setGuoBtnVisible(true);
          gamebuttonLayer.setPengBtnVisible(true);
          vUpCards.push(this.m_stSceneData.cbCurrentCard);
        }
        if (GameDefs.PlayerAction.paGang == (choice & GameDefs.PlayerAction.paGang)) {
          var nWeaveType = GameDefs.WeaveType.MingGang;
          var nV = -1;
          var fourSameResult = GameJudge.handCardIsHaveFourSame(myMJPlayer);
          var bIsExistAnGang = fourSameResult.bIsExist;
          var anGangArray = fourSameResult.vCardArray;
          var threeSameResult = GameJudge.handCardIsHaveThreeSame(myMJPlayer, this.m_stSceneData.cbCurrentCard);
          var bIsExistMingGang = threeSameResult.bIsExist;
          var nVCard = threeSameResult.vCardValue;
          var oneSameResult = GameJudge.handCardIsHaveOneSameToWave(myMJPlayer);
          var bIsExistXuGang = oneSameResult.bIsExist;
          var xuGangArray = oneSameResult.vCardArray;
          var gangTable = new Array();
          if (this.m_cbMyChair == this.m_stSceneData.cbWhosTurn) {
            if (bIsExistAnGang) {
              nWeaveType = GameDefs.WeaveType.AnGang;
              nV = anGangArray[0];
              for (var i = 0; i < anGangArray.length; i++) {
                var anGangInfo = {};
                anGangInfo.nGangCard = anGangArray[i];
                anGangInfo.nGangType = nWeaveType;
                gangTable.push(anGangInfo);
              }
            }
            if (bIsExistXuGang) {
              nWeaveType = GameDefs.WeaveType.XuGang;
              nV = xuGangArray[0];
              for (var i = 0; i < xuGangArray.length; i++) {
                var xuGangInfo = {};
                xuGangInfo.nGangCard = xuGangArray[i];
                xuGangInfo.nGangType = nWeaveType;
                gangTable.push(xuGangInfo);
              }
            }
          } else if (bIsExistMingGang) {
            nWeaveType = GameDefs.WeaveType.MingGang;
            nV = nVCard;
          }
          var self = this;
          var onGangClickCallBack = function onGangClickCallBack() {
            bIsExistMingGang && gangTable.length <= 1 ? sendCMD.sendCMD_PO_GANG(nV, nWeaveType) : gangTable.length <= 1 ? sendCMD.sendCMD_PO_GANG(nV, nWeaveType) : self.getPlayerByPos(1).getComponent("PlayerCardLayer").gangMoresCardToast(gangTable);
          };
          var onChaoTianClickCallBack = function onChaoTianClickCallBack() {
            sendCMD.sendCMD_PO_GANG(nV, nWeaveType);
          };
          var onGuoClickCallBack = function onGuoClickCallBack() {
            var mySelectGangNode = self.getPlayerByPos(1).getChildByName("select_penggangs");
            if (mySelectGangNode.childrenCount > 0) self.getPlayerByPos(1).getComponent("PlayerCardLayer").gangMoresCardToast(gangTable); else {
              sendCMD.sendCMD_PO_PASS();
              var gamebuttonLayer = self.node.getComponent("GameButtonLayer");
              gamebuttonLayer.setAllOperateButtonIsVis(false);
            }
          };
          gamebuttonLayer.setGangClickBtnCallBack(onGangClickCallBack);
          gamebuttonLayer.setGuoClickBtnCallBack(onGuoClickCallBack);
          gamebuttonLayer.setChaoTianClickBtnCallBack(onChaoTianClickCallBack);
          gamebuttonLayer.setGuoBtnVisible(true);
          gamebuttonLayer.setGangBtnVisible(true);
          vUpCards.push(nV);
        }
        if (GameDefs.PlayerAction.paHu == (choice & GameDefs.PlayerAction.paHu)) {
          gamebuttonLayer.setGuoBtnVisible(true);
          this.m_stSceneData.cbWhosTurn == this.m_cbMyChair ? gamebuttonLayer.setZiMoBtnVisible(true) : gamebuttonLayer.setHuBtnVisible(true);
        }
        vUpCards.length > 0;
      },
      getIsPoChan: function getIsPoChan() {
        return this.pochanFlag;
      },
      operationChangeData: function operationChangeData(bFreshPutCard) {
        for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) if (this.getPlayerByPos(nPos).getComponent("Player").getIsValidPlayer()) {
          var bolHu = 1 == this.m_stSceneData.players[this.ChairFromPos(nPos - 1)].cbIsHu;
          this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").doCards(bFreshPutCard, bolHu);
        }
      },
      setAllOutData: function setAllOutData() {
        for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) if (this.getPlayerByPos(nPos).getComponent("Player").getIsValidPlayer()) {
          this.getPlayerByPos(nPos).getComponent("OutCardLayer").doCards();
          this.getPlayerByPos(nPos).getComponent("HuCardLayer").doCards();
        }
      },
      startTimer: function startTimer(overTimeFunc, nDowntime) {
        var scheduler = cc.director.getScheduler();
        scheduler.unscheduleCallbackForTarget(this, this._timerUpdate);
        var timeLabel = this.node.getChildByName("arrow").getChildByName("timeLabel");
        timeLabel.getComponent(cc.Label).string = "";
        timeLabel.active = true;
        var strLeftTime = "";
        var update = function update() {
          if (nDowntime < 0) {
            timeLabel.getComponent(cc.Label).string = "";
            overTimeFunc && overTimeFunc();
            scheduler.unscheduleCallbackForTarget(this, update);
            return;
          }
          strLeftTime = strLeftTime = nDowntime;
          nDowntime < 10 && (strLeftTime = "0" + strLeftTime);
          timeLabel.getComponent(cc.Label).string = strLeftTime;
          nDowntime -= 1;
        };
        update();
        this._timerUpdate = update;
        scheduler.scheduleCallbackForTarget(this, update, 1, cc.macro.REPEAT_FOREVER, 0, false);
      },
      stopTimer: function stopTimer() {
        var scheduler = cc.director.getScheduler();
        scheduler.unscheduleCallbackForTarget(this, this._timerUpdate);
        var timeLabel = this.node.getChildByName("arrow").getChildByName("timeLabel");
        timeLabel.getComponent(cc.Label).string = "";
      },
      setTingCardLeftNum: function setTingCardLeftNum(nOutCard, nCount) {
        var vTingList = this.m_saveTingCardList;
        if (!vTingList || 0 == vTingList.length) return;
        for (var i = 0; i < vTingList.length; i++) {
          var nTingCount = vTingList[i].cbTingCount;
          for (var j = 0; j < nTingCount; j++) if (nOutCard == vTingList[i].cbTingCard[j]) {
            vTingList[i].cbLeftCount[j] -= nCount;
            vTingList[i].cbLeftCount[j] <= 0 && (vTingList[i].cbLeftCount[j] = 0);
            break;
          }
        }
      },
      exchangeCardAniation: function exchangeCardAniation() {
        var self = this;
        var swapCardFinshcallBack = function swapCardFinshcallBack() {
          self.huanPaiTipsLayer.active = false;
          self.operationChangeData(true);
          var mjPlayer = self.m_stSceneData.players[self.m_cbMyChair];
          var runActionFun = function runActionFun(nPos) {
            if (nPos > GameDefs.PLAYER_COUNT) return;
            var tb = mjPlayer.cbBeExchange;
            self.getPlayerByPos(nPos).getComponent("PlayerCardLayer").insertThreeCard(mjPlayer.cbBeExchange, nPos);
            runActionFun(1 + nPos);
          };
          runActionFun(1);
        };
        self.huanPaiTipsLayer.active = true;
        1 == this.m_stSceneData.cbSecondDice || 2 == this.m_stSceneData.cbSecondDice ? self.huanPaiTipsLayer.getComponent("ChangeCardAction").showShunRotateAction(swapCardFinshcallBack) : 3 == this.m_stSceneData.cbSecondDice || 4 == this.m_stSceneData.cbSecondDice ? self.huanPaiTipsLayer.getComponent("ChangeCardAction").showUpDownMoveAction(swapCardFinshcallBack) : 5 != this.m_stSceneData.cbSecondDice && 6 != this.m_stSceneData.cbSecondDice || self.huanPaiTipsLayer.getComponent("ChangeCardAction").showNiRotateAction(swapCardFinshcallBack);
      },
      changeMjAction: function changeMjAction() {
        var self = this;
        var PlayerAction = function PlayerAction(nPos) {
          if (nPos > GameDefs.PLAYER_COUNT) return;
          var node = self.getPlayerByPos(nPos);
          var changeCardsNode = node.getChildByName("changecards");
          changeCardsNode.active = true;
          var action = null;
          var action1 = null;
          var action2 = null;
          var action3 = null;
          if (1 == nPos) {
            action1 = cc.spawn(cc.scaleTo(.8, 0, 0), cc.moveBy(.8, 0, 50));
            action2 = cc.spawn(cc.scaleTo(.7, 1, 1), cc.moveBy(.7, 0, -50));
            action3 = cc.callFunc(function() {
              changeCardsNode.active = false;
            });
            action = cc.sequence(cc.delayTime(.2), action1, cc.delayTime(.2), action2, action3);
          } else if (2 == nPos) {
            action1 = cc.spawn(cc.scaleTo(.8, 0, 0), cc.moveBy(.8, -140, 0));
            action2 = cc.spawn(cc.scaleTo(.7, 1, 1), cc.moveBy(.7, 140, 0));
            action3 = cc.callFunc(function() {
              changeCardsNode.active = false;
            });
            action = cc.sequence(cc.delayTime(.2), action1, cc.delayTime(.2), action2, action3);
          } else if (3 == nPos) {
            action1 = cc.spawn(cc.scaleTo(.8, 0, 0), cc.moveBy(.8, 0, -50));
            action2 = cc.spawn(cc.scaleTo(.7, 1, 1), cc.moveBy(.7, 0, 50));
            action3 = cc.callFunc(function() {
              changeCardsNode.active = false;
            });
            action = cc.sequence(cc.delayTime(.2), action1, cc.delayTime(.2), action2, action3);
          } else if (4 == nPos) {
            action1 = cc.spawn(cc.scaleTo(.8, 0, 0), cc.moveBy(.8, 160, 0));
            action2 = cc.spawn(cc.scaleTo(.7, 1, 1), cc.moveBy(.7, -160, 0));
            action3 = cc.callFunc(function() {
              changeCardsNode.active = false;
            });
            action = cc.sequence(cc.delayTime(.2), action1, cc.delayTime(.2), action2, action3);
          }
          changeCardsNode.runAction(action);
          PlayerAction(nPos + 1);
        };
        PlayerAction(1);
      },
      dingQueYiMenAniation: function dingQueYiMenAniation(bolFly) {
        var self = this;
        var mjPlayer = this.m_stSceneData.players[this.m_cbMyChair];
        this.getPlayerByPos(1).getComponent("PlayerCardLayer").setQueYiMenStyleType(mjPlayer.cbDingque);
        this.getPlayerByPos(1).getComponent("PlayerCardLayer").setQueYiMenMjGray();
        var PlayerAction = function PlayerAction(chair) {
          if (chair > GameDefs.PLAYER_COUNT - 1) return;
          var nPos = self.PosFromChair(chair);
          var mjPlayer = self.m_stSceneData.players[chair];
          self.getPlayerByPos(nPos).getComponent("Player").setQueWanSpIsVis(true, mjPlayer.cbDingque, true);
          PlayerAction(chair + 1);
        };
        bolFly || PlayerAction(0);
      },
      addDingQueYiMenUI: function addDingQueYiMenUI(bIsVis, nType, bShow) {
        var self = this;
        var nType = nType || 4;
        for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) if (1 != nPos) this.getPlayerByPos(nPos).getComponent("Player").setDingqueSpIsVis(bShow, nType); else {
          self.queYiMenTipsLayer.active = bIsVis;
          self.queYiMenButtonLayer.active = bIsVis;
          var nQueMen = this.getPlayerByPos(nPos).getComponent("PlayerCardLayer").getChooseMjTypeByCount(true);
          var playerNode;
          var whosTurnNode;
          var strAniName;
          if (0 == nQueMen) {
            playerNode = this.queYiMenButtonLayer.getChildByName("wan_node");
            whosTurnNode = playerNode.getChildByName("wan_act");
            strAniName = "6wan";
          } else if (1 == nQueMen) {
            playerNode = this.queYiMenButtonLayer.getChildByName("tiao_node");
            whosTurnNode = playerNode.getChildByName("tiao_act");
            strAniName = "7tiao";
          } else if (2 == nQueMen) {
            playerNode = this.queYiMenButtonLayer.getChildByName("tong_node");
            whosTurnNode = playerNode.getChildByName("tong_act");
            strAniName = "8tong";
          }
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
          dragonDisplay.playAnimation(strAniName);
          var callback = function callback() {
            dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
          };
          dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        }
      },
      addThreeSelectCardUI: function addThreeSelectCardUI(bIsVis, nType, bShow) {
        var self = this;
        var nType = nType || 7;
        this.waitTimer = this.XUANPAI_COUNT;
        for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) 1 != nPos ? this.getPlayerByPos(nPos).getComponent("Player").setSelectCardSpIsVis(bShow, nType) : self.xuanPaiTipsLayer.active = bIsVis;
        if (!bIsVis) return;
        this.getPlayerByPos(1).getComponent("PlayerCardLayer").upThreeCardByType();
        this.startXuanPaiTime = function() {
          self.waitTimer -= 1;
          if (self.waitTimer >= 0) {
            self.xuanPaiTipsTimes.string = self.waitTimer;
            0 == self.waitTimer && this.onXuanPaiButtonClick(null, 2);
          } else this.isClick || this.getPlayerByPos(1).getComponent("PlayerCardLayer").deleteThreeMjRefresh();
        };
        this.schedule(this.startXuanPaiTime, 1, this.XUANPAI_COUNT, 0);
      },
      onXuanPaiButtonClick: function onXuanPaiButtonClick(event, data) {
        HallResources.getInstance().playButtonEffect();
        var self = this;
        var dealComfirm = function dealComfirm() {
          self.waitTimer <= 0 && self.unschedule(self.startXuanPaiTime);
          self.xuanPaiTipsLayer.active = false;
        };
        var vCardSpList = this.getPlayerByPos(1).getComponent("PlayerCardLayer").getThreeUpCradList();
        2 == data && (vCardSpList = this.getPlayerByPos(1).getComponent("PlayerCardLayer").getUpThreeCardValue());
        console.log("下面是选择的手牌---------------------------------------");
        console.log(vCardSpList);
        if (3 != vCardSpList.length) {
          Resources.ShowToast("必须选择同花色的三张牌");
          return;
        }
        if (GameCfg.getMjColor(vCardSpList[0]) != GameCfg.getMjColor(vCardSpList[1]) || GameCfg.getMjColor(vCardSpList[0]) != GameCfg.getMjColor(vCardSpList[2])) {
          Resources.ShowToast("必须选择同花色的三张牌");
          return;
        }
        this.isClick = true;
        sendCMD.sendCMD_PO_Exchange(vCardSpList);
        dealComfirm();
        this.getPlayerByPos(1).getComponent("PlayerCardLayer").deleteThreeMjRefresh(vCardSpList);
        var node = this.getPlayerByPos(1);
        var changeCardsNode = node.getChildByName("changecards");
        changeCardsNode.y = -200;
        changeCardsNode.active = true;
        changeCardsNode.runAction(cc.moveBy(.5, 0, 195));
      },
      refreshTingCard: function refreshTingCard() {
        var vTingList = this.m_saveTingCardList;
        if (!vTingList || 0 == vTingList.length) return;
        var nTingCount = 0;
        var vTingCard;
        var vTingFan;
        var vTingLeft;
        for (var i = 0; i < vTingList.length; i++) if (this.m_nClickCardTing == vTingList[i].cbOutCard) {
          nTingCount = vTingList[i].cbTingCount;
          vTingCard = vTingList[i].cbTingCard;
          vTingFan = vTingList[i].cbFan;
          vTingLeft = vTingList[i].cbLeftCount;
          break;
        }
        if (nTingCount > 0 && this.listenCardLayer.active) {
          var ListenCardLayer = this.listenCardLayer.getComponent("ListenCardLayer");
          ListenCardLayer.init(vTingCard, vTingFan, vTingLeft);
        }
      },
      judgeIsTingCard: function judgeIsTingCard(event) {
        var vCardList = event.data;
        var vTingList = this.m_stSceneData.vTingList;
        if (!vTingList || 0 == vTingList.length) return;
        if (this.m_cbMyChair != this.m_stSceneData.cbWhosTurn) return;
        var nTingCount = 0;
        var vTingCard = null;
        var vTingFan = null;
        var vTingLeft = null;
        for (var i = 0; i < vTingList.length; i++) if (vTingList[i] && vCardList.cardValue == vTingList[i].cbOutCard) {
          nTingCount = vTingList[i].cbTingCount;
          vTingCard = vTingList[i].cbTingCard;
          vTingFan = vTingList[i].cbFan;
          vTingLeft = vTingList[i].cbLeftCount;
          break;
        }
        if (nTingCount > 0) {
          var ListenCardLayer = this.listenCardLayer.getComponent("ListenCardLayer");
          ListenCardLayer.setlaiziValue(this.m_stSceneData.cbLaizi);
          ListenCardLayer.init(vTingCard, vTingFan, vTingLeft);
          this.listenCardLayer.active = true;
        } else this.listenCardLayer.active = false;
      },
      onRecvTableChat: function onRecvTableChat(chat) {
        var chatChair = -1;
        var gamelib = this.getGameLib();
        var tableUser = gamelib.getUser(chat._dwSpeaker % 65536);
        if (!tableUser) return;
        var iChair = tableUser.getUserChair();
        if (iChair < 0 || iChair >= 4) return;
        var playerNode = this.getPlayerByPos(this.PosFromChair(iChair));
        if (true == playerNode.active) {
          var stChat = {};
          stChat.szNickname = tableUser.getUserName();
          var sysHead = "--:";
          var vipHead = "v--:";
          var speakContent = chat.getChatMsg();
          var szHead = speakContent.substr(0, 3);
          var szHead2 = speakContent.substr(0, 4);
          if (szHead == sysHead) {
            var faceIndex = speakContent.substring(3);
            var face = Number(faceIndex);
            stChat.cbType = 0;
            stChat.cbFace = face;
            face >= 0 && face < require("Resources").FACE_CHAT_MAX_NUM && playerNode.getComponent("Player").showChatFaceInfo(face);
          } else if (szHead2 == vipHead) {
            var faceIndex = speakContent.substring(4);
            var face = Number(faceIndex);
          } else {
            playerNode.getComponent("Player").showChatTextInfo(speakContent);
            stChat.cbType = 2;
            stChat.szChatContent = speakContent;
            var wordIndex = -1;
            for (var i in Resources.QUICK_SEND_CHATS) if (speakContent == Resources.QUICK_SEND_CHATS[i]) {
              wordIndex = i;
              break;
            }
            var index = -1;
            var effectFile = "";
            var posY = [ 326, 280, 214, 234, 192, 118 ];
            var moveTime = [ 1.5, 2.5, 2, 2.5, 1, 2 ];
            for (var i = 0; i < 6; i++) {
              var posX = -1920 * Math.random() - 640;
              this.showScrollWords(posX, posY[i], moveTime[i], i, wordIndex);
            }
          }
        }
      },
      showScrollWords: function showScrollWords(moveToX, moveToY, moveTime, index, wordIndex) {
        wordIndex = parseInt(wordIndex);
        var bgRandom = 10 * Math.random();
        var winSize = cc.director.getWinSize();
        var bgNode = new cc.Node();
        bgNode.active = true;
        var sprite = bgNode.addComponent(cc.Sprite);
        if (bgRandom <= 5) {
          var frame = this.node.getComponent("DeskScene").chatAtlas.getSpriteFrame("deepBg");
          sprite.spriteFrame = frame;
        } else {
          var frame = this.node.getComponent("DeskScene").chatAtlas.getSpriteFrame("shallowBg");
          sprite.spriteFrame = frame;
        }
        this.node.addChild(bgNode, 100);
        bgNode.setScale(.85);
        bgNode.x = winSize.width / 2 + bgNode.getContentSize().width / 2 + 20;
        bgNode.y = moveToY;
        wordIndex += 1;
        var textWord = "text_word" + wordIndex;
        var wordsNode = new cc.Node();
        wordsNode.active = true;
        var wordsSprite = wordsNode.addComponent(cc.Sprite);
        wordsSprite.spriteFrame = this.node.getComponent("DeskScene").chatAtlas.getSpriteFrame(textWord);
        wordsSprite.node.setScale(.7);
        wordsNode.x = 0;
        wordsNode.y = 0;
        bgNode.addChild(wordsNode);
        if (1 == index || 4 == index) bgNode.setScale(.7); else if (5 == index) {
          bgNode.setScale(1);
          moveToX = -280;
        }
        var moveTo = cc.moveTo(moveTime, cc.p(moveToX, moveToY));
        var delayTime = cc.delayTime(.8);
        var clean = cc.removeSelf();
        var sequence = cc.sequence(moveTo, delayTime, clean);
        bgNode.runAction(sequence);
      },
      playHuEffect: function playHuEffect(nChair, bIsZimo, onPlayEnd, nFangPaoChair) {
        if (this.hupaiAssets.length <= 0) return;
        var nPos = this.PosFromChair(nChair);
        var nFangPaoPos = null;
        var mjNode = null;
        if (bIsZimo) ; else {
          nFangPaoPos = this.PosFromChair(nFangPaoChair);
          mjNode = this.getPlayerByPos(nFangPaoPos).getComponent("OutCardLayer").getLastOutCard();
        }
        if (mjNode) {
          var offset = cc.p(0, 0);
          bIsZimo && 1 == nPos && (offset = cc.p(mjNode.getContentSize().width, 0));
          var hupaiNode = new cc.Node();
          this.node.addChild(hupaiNode, 100);
          var convetPos = this.node.convertToNodeSpace(cc.p(mjNode.getPosition()));
          hupaiNode.x = convetPos.x + offset.x / 2;
          hupaiNode.y = convetPos.y + offset.y / 2;
          hupaiNode.active = true;
          var dragonDisplay = hupaiNode.addComponent(dragonBones.ArmatureDisplay);
          for (var i in this.hupaiAssets) {
            this.hupaiAssets[i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = this.hupaiAssets[i]);
            this.hupaiAssets[i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = this.hupaiAssets[i]);
          }
          dragonDisplay.armatureName = "armatureName";
          dragonDisplay.playAnimation("Animation2");
          Resources.playCommonEffect("shandian.mp3");
          this.m_hupaiActionmature = dragonDisplay;
          var self = this;
          var callback = function callback() {
            hupaiNode.removeFromParent(true);
            self.getPlayerByPos(nPos).getComponent("HuCardLayer").putHuMj(true);
            onPlayEnd && onPlayEnd();
          };
          this.m_hupaiActionmature.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        }
      },
      reportResultToWx: function reportResultToWx() {
        var callBackFunc = function callBackFunc(success, data) {
          if (success) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxFriendsScoreRank.aspx返回数据----------------------------");
            console.log(jsonObject);
            var data = jsonObject.table[0];
            var playerRankNum = data.RankNum;
            var playerOpenID = data.OpenID;
            var playerScore = data.Score;
            var kvDataList = new Array();
            kvDataList.push({
              key: "playerScore",
              value: "" + playerScore
            });
            wx.setUserCloudStorage({
              KVDataList: kvDataList
            });
          }
        };
        var wxUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
        if (wxUserInfo) {
          var myOpenId = wxUserInfo.openid;
          require("HallWebRequest").getInstance().getPlayerData(myOpenId, callBackFunc);
        }
      },
      gameOver: function gameOver() {
        this.pochanFlag = false;
        var cancelPoChanNode = this.node.getChildByName("cancel_pochan");
        cancelPoChanNode.active = false;
        this.setIsDirectionVis(0);
        this.stopDingQueAnimation();
        this.stopTimer();
        this.listenCardLayer.active = false;
        this.node.getChildByName("cancel_robot").active = false;
        this.node.getChildByName("laizi").active = false;
        for (var i = 1; i <= GameDefs.PLAYER_COUNT; i++) {
          var stPlayer = this.m_stSceneData.players[i];
          this.getPlayerByPos(i).getComponent("Player").setQueWanHeadIconSpIsVis(false, 0);
        }
        var stWinStruct = this.m_stSceneData.stWinStruct;
        var self = this;
        var playHuEffectEnd = function playHuEffectEnd() {
          var cbHuType = self.m_stSceneData.stWinStruct.cbHuType;
          var laiyouCardValue = null;
          for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) for (var j = 0; j < self.m_stSceneData.players[i].nWeaveCount; j++) {
            var weaveItem = self.m_stSceneData.players[i].showCardSuits[j];
            if (weaveItem.cbWeaveKind == GameDefs.WeaveType.MingGang) {
              var stPlayer = self.m_stSceneData.players[weaveItem.cbChair];
              var tWeaveItem = {};
              tWeaveItem.cbWeaveKind = GameDefs.WeaveType.FangGang;
              stPlayer.showCardSuits.push(tWeaveItem);
            }
          }
          var playersName = new Array();
          var playerPoChan = new Array();
          var playerAvatorUrls = new Array();
          for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) {
            var player = self.getPlayerByPos(self.PosFromChair(i)).getComponent("Player");
            var name = player.getPlayerName();
            var faceUrl = player.getFaceUrl();
            playersName.push(name);
            playerAvatorUrls.push(faceUrl);
            var playerPos = self.PosFromChair(i);
            var nGold = self.getPlayerByPos(playerPos).getComponent("Player").getNowScore();
            playerPoChan[i] = nGold <= 0 ? 1 : 0;
          }
          if (self.getIsPrivateRoom()) {
            var httpCallback = function httpCallback(success, data) {
              require("HallResources").getInstance().removeLoading();
              if (success) {
                var jsonObject = JSON.parse(data);
                var myselfWinOrLoseScore = self.m_stSceneData.stWinStruct.nFinalScore[self.m_cbMyChair];
                console.log("连胜的次数为：" + jsonObject.ContinuityWin);
                console.log("最终的分数为：" + myselfWinOrLoseScore);
                var showMatchResultLayer = function showMatchResultLayer() {
                  var matchGameOverLayer = self.matchGameOverLayer.getComponent("MatchGameOverLayer");
                  var matchLevel = self.m_nNewLevel ? self.m_nNewLevel : self.m_roomSetInfo.cbGradeIndex[self.m_cbMyChair];
                  matchGameOverLayer.init(false, null, null, laiyouCardValue, null, matchLevel, self.m_pMyself.getScore(), myselfWinOrLoseScore, jsonObject.ContinuityWin, self.m_roomSetInfo.szBatchID);
                  if (myselfWinOrLoseScore < 0) {
                    var onProtectScoreLayerClosed = function onProtectScoreLayerClosed() {
                      self.matchGameOverLayer.active = true;
                    };
                    var protectScoreLayer = self.protectScoreLayer.getComponent("ProtectScoreLayer");
                    protectScoreLayer.init(self.m_roomSetInfo.szBatchID, myselfWinOrLoseScore, onProtectScoreLayerClosed, matchLevel, self.m_pMyself.getScore(), myselfWinOrLoseScore);
                    self.protectScoreLayer.active = true;
                  } else if (self.m_nNewLevel) {
                    var showLevelUpgrade = function showLevelUpgrade(onLevelUpgradeClosed) {
                      var upgradelevelLayer = self.levelUpgradeLayer.getComponent("UpgradeLevelLayer");
                      upgradelevelLayer.init(self.m_nNewLevel, self.m_pMyself.getScore(), myselfWinOrLoseScore, onLevelUpgradeClosed);
                      self.levelUpgradeLayer.active = true;
                    };
                    matchGameOverLayer.setShowLevelUpgrade(showLevelUpgrade);
                    self.matchGameOverLayer.active = true;
                  } else self.matchGameOverLayer.active = true;
                };
                if (3 == parseInt(jsonObject.ContinuityWin) || 5 == parseInt(jsonObject.ContinuityWin) || 7 == parseInt(jsonObject.ContinuityWin) || 9 == parseInt(jsonObject.ContinuityWin)) {
                  var continueWinLayer = self.continueWinLayer.getComponent("ContinueWinLayer");
                  continueWinLayer.init(parseInt(jsonObject.ContinuityWin), showMatchResultLayer);
                  self.continueWinLayer.active = true;
                } else showMatchResultLayer();
              }
            };
            var privateRoomGameOverLayerCallFunc = function privateRoomGameOverLayerCallFunc() {
              var gameOverLayer = self.gameOverLayer.getComponent("XueLiuGameOverLayer");
              gameOverLayer.node.active = false;
              require("HallWebRequest").getInstance().getContinuityWinGetInfo(httpCallback);
            };
            var backToDeskCallFunc = function backToDeskCallFunc() {
              var gameOverLayer = self.gameOverLayer.getComponent("XueLiuGameOverLayer");
              gameOverLayer.node.active = false;
              self.backToDataMsg.node.active = true;
              self.nextGameBtn2.node.active = true;
            };
            self.matchGameOverLayer.active = false;
            var gameOverLayer = self.gameOverLayer.getComponent("XueLiuGameOverLayer");
            gameOverLayer.init(self.m_stSceneData.stWinStruct, self.m_stSceneData.players, playersName, playerAvatorUrls, self.m_cbMyChair, null, self.m_roomInfo.nCost, playerPoChan, true);
            self.gameOverLayer.active = true;
            self.gameOverLayer.getComponent("XueLiuGameOverLayer").setIsPrivateRoom(true);
            self.gameOverLayer.getComponent("XueLiuGameOverLayer").setContinueBtn(privateRoomGameOverLayerCallFunc);
            self.gameOverLayer.getComponent("XueLiuGameOverLayer").setBackToDeskBtn(backToDeskCallFunc);
            self.moreSettingLayer.getComponent("MoreSettingLayer").setLeaveBtnEnabled(true);
            self.moreSettingLayer.getComponent("MoreSettingLayer").setChangedDeskBtnEnabled(true);
          } else {
            var gameOverLayer = self.gameOverLayer.getComponent("XueLiuGameOverLayer");
            gameOverLayer.init(self.m_stSceneData.stWinStruct, self.m_stSceneData.players, playersName, playerAvatorUrls, self.m_cbMyChair, null, self.m_roomInfo.nCost, playerPoChan);
            self.gameOverLayer.active = true;
            self.moreSettingLayer.getComponent("MoreSettingLayer").setLeaveBtnEnabled(true);
            self.moreSettingLayer.getComponent("MoreSettingLayer").setChangedDeskBtnEnabled(true);
          }
        };
        var chaDaJiaoAndHuaZhu = function chaDaJiaoAndHuaZhu() {
          for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) {
            var vSinleScore = stWinStruct.stSingleScore[i];
            var nChaDaJiao = 0;
            var nChaHuaZhu = 0;
            var nScore = 0;
            for (var j = 0; j < stWinStruct.cbWriteScoreTimes[i]; j++) {
              var stSinleScore = vSinleScore[j];
              if (stSinleScore.cbScoreType == GameDefs.scoreType.scoreChaDaJiao) {
                nChaDaJiao = 1;
                nScore = stSinleScore.nScore;
                if (nScore >= 0) {
                  nChaDaJiao = 0;
                  break;
                }
              }
              if (stSinleScore.cbScoreType == GameDefs.scoreType.ScoreChaHuaZhu) {
                nChaHuaZhu = 1;
                nScore = stSinleScore.nScore;
                if (nScore >= 0) {
                  nChaHuaZhu = 0;
                  break;
                }
              }
            }
            var player = self.getPlayerByPos(self.PosFromChair(i)).getComponent("Player");
            var nPos = self.PosFromChair(i);
            1 == nChaDaJiao ? this.getPlayerByPos(nPos).getComponent("Player").playOperateEffects(GameCfg.EffectList.No_2ChaDaJiao, nPos) : 1 == nChaHuaZhu && this.getPlayerByPos(nPos).getComponent("Player").playOperateEffects(GameCfg.EffectList.No_2ChaHuaZhu, nPos);
            0 != nScore && player.setTempChangeGold(nScore, null, true);
          }
        };
        var gameOverCallback = function gameOverCallback() {
          var whosTurnNode = self.node.getChildByName("over_game_act");
          whosTurnNode.active = false;
          var isSetting = new Array();
          for (var cbChair = 0; cbChair < GameDefs.PLAYER_COUNT; cbChair++) {
            var nPos = self.PosFromChair(cbChair);
            if (!isSetting[nPos]) {
              if (self.getPlayerByPos(nPos).getComponent("Player").getIsValidPlayer()) {
                self.getPlayerByPos(nPos).getComponent("Player").setIsWinner(false);
                nPos == self.PosFromChair(stWinStruct.cbWinChair) && stWinStruct.cbEndType != GameDefs.EndType.Liuju && self.getPlayerByPos(nPos).getComponent("Player").setIsWinner(true);
                var finalScore = stWinStruct.nFinalScore[cbChair];
                self.getIsPrivateRoom() ? finalScore = stWinStruct.nSrcScore[cbChair] : finalScore += self.m_roomInfo.nCost;
                self.getPlayerByPos(nPos).getComponent("Player").setLastGoldOnGameOver(finalScore);
                self.getPlayerByPos(nPos).getComponent("Player").gameOver();
                self.getPlayerByPos(nPos).getComponent("Player").setTempChangeGold(0, null, false, true);
              }
              isSetting[nPos] = true;
            }
          }
          self.openGmae = false;
          _TSCommon.TSCommon.performWithDelay(this, playHuEffectEnd, 2);
        };
        _TSCommon.TSCommon.performWithDelay(this, chaDaJiaoAndHuaZhu, .1);
        _TSCommon.TSCommon.performWithDelay(this, this.playOverGameAct, 2);
        _TSCommon.TSCommon.performWithDelay(this, gameOverCallback, 3);
      },
      backToDataMsgFunc: function backToDataMsgFunc() {
        var gameOverLayer = this.gameOverLayer.getComponent("XueLiuGameOverLayer");
        gameOverLayer.node.active = true;
        this.backToDataMsg.node.active = false;
        this.nextGameBtn2.node.active = false;
      },
      nextGameFunc: function nextGameFunc() {
        G.matchGameReady = true;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      },
      showResultLayer: function showResultLayer() {},
      onGameReStart: function onGameReStart(event) {
        var data = event.data;
        var bIsReady = data.isReady;
        this.m_nNewLevel = null;
        this.m_playerStatus = this.m_playerStatus || new Array();
        for (var nPos = 1; nPos <= GameDefs.PLAYER_COUNT; nPos++) if (this.getPlayerByPos(nPos).getComponent("Player").getIsValidPlayer()) {
          this.getPlayerByPos(nPos).getComponent("Player").cleanPlayers();
          bIsReady && (this.m_playerStatus[nPos] ? this.getPlayerByPos(nPos).getComponent("Player").setIsReady(true) : 1 != nPos && this.getPlayerByPos(nPos).getComponent("Player").showLeaveTimer());
        }
        this.gameOverLayer.getComponent("XueLiuGameOverLayer").stopLeftTimer();
        this.matchGameOverLayer.getComponent("MatchGameOverLayer").stopLeftTimer();
        this.gameOverLayer.active = false;
        this.matchGameOverLayer.active = false;
        this.gameResultLayer.active = false;
        var nGold = this.m_pMyself.getGold();
        var pCurrentRoom = this.getGameLib().getCurrentGameRoom();
        if (bIsReady) if (pCurrentRoom && nGold >= pCurrentRoom.dwMinGold || this.getIsPrivateRoom()) {
          sendCMD.sendCMD_PO_RESTART();
          this.getPlayerByPos(1).getComponent("Player").stopLeaveTimer();
        } else {
          this.showGoldNotEnoughTips();
          var self = this;
          this.node.getComponent("GameButtonLayer").setStartBtnVisible(true);
          this.getPlayerByPos(1).getComponent("Player").showLeaveTimer();
          var startClickedCallback = function startClickedCallback() {
            if (pCurrentRoom && nGold < pCurrentRoom.dwMinGold) self.showGoldNotEnoughTips(); else {
              self.getPlayerByPos(1).getComponent("Player").stopLeaveTimer();
              self.getPlayerByPos(1).getComponent("Player").hideLeaveTimer();
            }
          };
          this.node.getComponent("GameButtonLayer").setStartClickBtnCallBack(startClickedCallback);
        } else {
          this.getPlayerByPos(1).getComponent("Player").setIsReady(false);
          var gamebuttonLayer = this.node.getComponent("GameButtonLayer");
          gamebuttonLayer.setStartBtnVisible(true);
        }
      },
      showMallLayer: function showMallLayer() {
        this.mallLayer.active = true;
        this.mallLayer.getComponent("MallLayer").showGoldNode();
      },
      showGoldNotEnoughTips: function showGoldNotEnoughTips() {
        var self = this;
        var getReward = function getReward(leftReward) {
          if (leftReward) self.showRuptRewardTips(); else {
            var goldNotEnoughLayer = cc.instantiate(self.commonTipsPrefab);
            var data = {};
            data.titleIcon = "texture/commonRes/frameTips/coinNoEnoughTitle";
            data.msg = "您的金币已不足以继续游戏，请前往商城购买。";
            data.showIcon = "texture/commonRes/frameTips/jinbi";
            data.buttonIcon1 = "texture/commonRes/frameTips/goToMallBtn";
            data.button1Func = function() {
              goldNotEnoughLayer.getComponent("commonTipsLayer").clickCloseBtn();
              self.showMallLayer();
            };
            goldNotEnoughLayer.getComponent("commonTipsLayer").initData(data);
            goldNotEnoughLayer.setPosition(cc.p(0, 0));
            self.node.addChild(goldNotEnoughLayer);
          }
        };
        this.requestRuptRewardInfo(getReward);
      },
      showRuptRewardTips: function showRuptRewardTips() {
        var self = this;
        var ruptRewardLayer = cc.instantiate(this.commonTipsPrefab);
        var data = {};
        data.titleIcon = "texture/commonRes/frameTips/friendHelpTitle";
        data.msg = "不好了！破产了！快点请求好友接济！分享给任意好友，立即领取" + this.bankruptAwardAmount + "金币！";
        data.showIcon = "texture/commonRes/frameTips/jinbi";
        data.showIconLabel = "*" + this.bankruptAwardAmount;
        data.buttonIcon2 = "texture/commonRes/frameTips/mallBuyBtn";
        data.womenThink = "不好了，破产了！快点请求好友接济！\n分享给任意好友，立即领取" + this.bankruptAwardAmount + "金币！";
        data.button2Func = function() {
          ruptRewardLayer.getComponent("commonTipsLayer").clickCloseBtn();
          self.showMallLayer();
        };
        data.buttonIcon3 = "texture/commonRes/frameTips/quickShareBtn";
        data.button3Func = function() {
          ruptRewardLayer.getComponent("commonTipsLayer").clickCloseBtn();
          if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
            self.getRuptReward();
            wx.shareAppMessage({
              title: "不好了！我在人人麻将里裤衩都快输掉了，求接济啊！",
              imageUrl: HallResources.rupShareImgUrl
            });
          }
        };
        data.otherText1 = "今日次数：";
        data.otherText2 = "" + (this.totalAwardTimes - this.curAwardTimes);
        data.otherText3 = "/" + this.totalAwardTimes;
        ruptRewardLayer.getComponent("commonTipsLayer").initData(data);
        ruptRewardLayer.setPosition(cc.p(0, 0));
        this.node.addChild(ruptRewardLayer);
      },
      requestRuptRewardInfo: function requestRuptRewardInfo(onEnd) {
        var self = this;
        var callBackFunc = function callBackFunc(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            self.totalAwardTimes = jsonObject.TotalAwardTimes;
            self.bankruptAwardAmount = jsonObject.AwardAmount;
            self.curAwardTimes = jsonObject.CurAwardTimes;
            onEnd(self.curAwardTimes < self.totalAwardTimes);
          }
        };
        require("HallWebRequest").getInstance().getBankruptInfo(callBackFunc);
      },
      getRuptReward: function getRuptReward() {
        var self = this;
        var callBackFunc = function callBackFunc(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            var backMsg = jsonObject.RetCode;
            0 == backMsg ? Resources.ShowToast("领取失败") : 1 == backMsg ? self.getGameLib().refreshGold() : 11 == backMsg ? Resources.ShowToast("密码错误") : 12 == backMsg && Resources.ShowToast("已达到领取次数上限");
          }
        };
        require("HallWebRequest").getInstance().getBankruptReward(callBackFunc);
      },
      update: function update(dt) {}
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray",
    "../../gamelib/gamelibcommon": "gamelibcommon",
    "../../weixin/WeixinManager": "WeixinManager",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs",
    GameJudge: "GameJudge",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    HallUtils: "HallUtils",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources",
    Tools: "Tools",
    sendCMD: "sendCMD"
  } ],
  Dialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b759xnRytNc7nwdsoT8ozi", "Dialog");
    "use strict";
    var _cc$Class;
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var Dialog = cc.Class((_cc$Class = {
      extends: cc.Component,
      _suerBtnCallBack: null,
      _cancelBtnCallBack: null,
      properties: {
        contentLabel: {
          default: null,
          type: cc.Label
        },
        suerBtn: {
          default: null,
          type: cc.Button
        },
        cancelBtn: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {},
      start: function start() {},
      update: function update(dt) {},
      onDestroy: function onDestroy() {},
      clickSuerBtn: function clickSuerBtn(event) {
        null != this._suerBtnCallBack && this._suerBtnCallBack();
        this.node.removeFromParent(true);
        this.destroy();
      },
      clickCancelBtn: function clickCancelBtn(event) {
        null != this._cancelBtnCallBack && this._cancelBtnCallBack();
        this.node.removeFromParent(true);
        this.destroy();
      },
      setSuerBtnCallBack: function setSuerBtnCallBack(onSuerBtnCallBack) {
        this._suerBtnCallBack = onSuerBtnCallBack;
      }
    }, _defineProperty(_cc$Class, "setSuerBtnCallBack", function setSuerBtnCallBack(onCancelBtnCallBack) {
      this._cancelBtnCallBack = onCancelBtnCallBack;
    }), _defineProperty(_cc$Class, "setContentLabelStr", function setContentLabelStr(strContent) {
      this.contentLabel.string = strContent;
    }), _cc$Class));
    cc._RF.pop();
  }, {} ],
  Domain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc68cOEhlxJuYjobLe7Z5vS", "Domain");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Domain = function() {
      function Domain() {}
      Domain.BolTest = false;
      Domain.WebRoot = "https://h5common.ss2007.com/Platform/";
      Domain.GameWebRoot = "https://h5common.ss2007.com/Platform/";
      Domain.PaiWeiRoot = "https://h5common.ss2007.com/xueliu/";
      Domain.TestWebRoot = "https://netgate.ss2007.com/Platform/";
      Domain.PayRoot = "https://h5common.ss2007.com/NewPayMent/";
      Domain.AliPayRoot = "https://h5common.ss2007.com/AliPay/";
      Domain.Phone = "4006 619 828";
      Domain.QQ = "2351133900";
      Domain.ToReplace = "h5common.ss2007.com";
      Domain.ReplaceTo = "h5common.ss2007.com";
      Domain.ShareRoot = "https://h5common.ss2007.com/shareweb/";
      Domain.Weixin = "sszymj666, sszymj888";
      Domain.defaultHeader = "Host:" + Domain.ToReplace;
      Domain.WEIXIN_APPID = "wxa76408c9d2e6177c";
      Domain.WEIXIN_WEB_APPID = "wx9077e9fe86b5ae1b";
      Domain.WEIXIN_URL = "http://scplatform.ss2007.com";
      Domain.PAY_GENORDER_URL = "http://scplatform.ss2007.com/weixinauth/genorder.aspx";
      Domain.ENV = 0;
      Domain.CURRENCYTYPE = "CNY";
      Domain.Gversion = "Ver:0.1.1114.1";
      return Domain;
    }();
    exports.Domain = Domain;
    if (Domain.BolTest) {
      Domain.WebRoot = "http://edongtest.ss2007.com/Platform/";
      Domain.PaiWeiRoot = "http://edongtest.ss2007.com/xueliu/";
    }
    cc._RF.pop();
  }, {} ],
  EatOrGangSelectLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19cf0AMO49BkanF5obZp6+j", "EatOrGangSelectLayer");
    "use strict";
    var GameDefs = require("GameDefs");
    var Resources = require("Resources");
    cc.Class({
      extends: cc.Component,
      properties: {
        bgNode: {
          default: null,
          type: cc.Sprite
        }
      },
      init: function init(operateKind, operateData, callBack, spriteFrame) {
        this.m_operateKind = operateKind;
        this.m_operateData = operateData;
        this.m_callBack = callBack;
        this.m_spriteFrame = spriteFrame;
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        this.m_operateKind == GameDefs.PlayerAction.paEat ? require("sendCMD").sendCMD_PO_EAT(this.m_operateData[3]) : this.m_operateKind == GameDefs.PlayerAction.paGang ? require("sendCMD").sendCMD_PO_GANG(this.m_operateData.nGangCard, this.m_operateData.nGangType) : cc.log("this.m_operateKind is error");
        null != this.m_callBack && this.m_callBack();
      },
      getFrameNameByValue: function getFrameNameByValue(mjValue) {
        var foreName = "";
        var name = "";
        this.m_operateKind == GameDefs.PlayerAction.paGang ? foreName = "hh_dao_" : this.m_operateKind == GameDefs.PlayerAction.paEat ? foreName = "hh_li_" : cc.log("no other more operate");
        name = Resources.get_frameName(foreName, mjValue);
        mjValue == GameDefs.MAX_MJ_INDEX && this.m_operateKind == GameDefs.PlayerAction.paGang && (name = foreName + "back");
        return name;
      },
      showUI: function showUI() {
        var cardDataArray = new Array();
        var selectBg = this.node.getChildByName("selectBg");
        if (this.m_operateKind == GameDefs.PlayerAction.paGang) {
          for (var i = 0; i < 3; i++) cardDataArray[i] = GameDefs.MAX_MJ_INDEX;
          cardDataArray.push(this.m_operateData.nGangCard);
        } else for (var i = 0; i < 3; i++) cardDataArray[i] = this.m_operateData[i];
        for (var i = 0; i < selectBg.childrenCount; i++) {
          var mjValue = cardDataArray[i];
          selectBg.children[i].getComponent(cc.Sprite).spriteFrame = this.m_spriteFrame.getSpriteFrame(this.getFrameNameByValue(mjValue));
        }
      }
    });
    cc._RF.pop();
  }, {
    GameDefs: "GameDefs",
    Resources: "Resources",
    sendCMD: "sendCMD"
  } ],
  EgretEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff984Yfzx9IXYhj62jM7qJD", "EgretEvent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventPhase_1 = require("./EventPhase");
    var EgretEvent = function() {
      function EgretEvent(type, bubbles, cancelable, data) {
        this.$eventPhase = 2;
        this.$currentTarget = null;
        this.$target = null;
        this.$isDefaultPrevented = false;
        this.$isPropagationStopped = false;
        this.$isPropagationImmediateStopped = false;
        this.$type = type;
        this.$bubbles = !!bubbles;
        this.$cancelable = !!cancelable;
        this.data = data;
      }
      Object.defineProperty(EgretEvent.prototype, "type", {
        get: function() {
          return this.$type;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(EgretEvent.prototype, "bubbles", {
        get: function() {
          return this.$bubbles;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(EgretEvent.prototype, "cancelable", {
        get: function() {
          return this.$cancelable;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(EgretEvent.prototype, "eventPhase", {
        get: function() {
          return this.$eventPhase;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(EgretEvent.prototype, "currentTarget", {
        get: function() {
          return this.$currentTarget;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(EgretEvent.prototype, "target", {
        get: function() {
          return this.$target;
        },
        enumerable: true,
        configurable: true
      });
      EgretEvent.prototype.$setTarget = function(target) {
        this.$target = target;
        return true;
      };
      EgretEvent.prototype.isDefaultPrevented = function() {
        return this.$isDefaultPrevented;
      };
      EgretEvent.prototype.preventDefault = function() {
        this.$cancelable && (this.$isDefaultPrevented = true);
      };
      EgretEvent.prototype.stopPropagation = function() {
        this.$bubbles && (this.$isPropagationStopped = true);
      };
      EgretEvent.prototype.stopImmediatePropagation = function() {
        this.$bubbles && (this.$isPropagationImmediateStopped = true);
      };
      EgretEvent.prototype.clean = function() {
        this.data = this.$currentTarget = null;
        this.$setTarget(null);
      };
      EgretEvent.dispatchEvent = function(target, type, bubbles, data) {
        void 0 === bubbles && (bubbles = false);
        var event = EgretEvent.create(EgretEvent, type, bubbles);
        var props = EgretEvent._getPropertyData(EgretEvent);
        void 0 != data && (props.data = data);
        var result = target.dispatchEvent(event);
        EgretEvent.release(event);
        return result;
      };
      EgretEvent._getPropertyData = function(EventClass) {
        var props = EventClass._props;
        props || (props = EventClass._props = {});
        return props;
      };
      EgretEvent.create = function(EventClass, type, bubbles, cancelable) {
        var eventPool = EventClass.eventPool;
        eventPool || (eventPool = EventClass.eventPool = []);
        if (eventPool.length) {
          var event = eventPool.pop();
          event.$type = type;
          event.$bubbles = !!bubbles;
          event.$cancelable = !!cancelable;
          event.$isDefaultPrevented = false;
          event.$isPropagationStopped = false;
          event.$isPropagationImmediateStopped = false;
          event.$eventPhase = EventPhase_1.EventPhase.AT_TARGET;
          return event;
        }
        return new EventClass(type, bubbles, cancelable);
      };
      EgretEvent.release = function(event) {
        event.clean();
        var EventClass = Object.getPrototypeOf(event).constructor;
        EventClass.eventPool.push(event);
      };
      EgretEvent.ADDED_TO_STAGE = "addedToStage";
      EgretEvent.REMOVED_FROM_STAGE = "removedFromStage";
      EgretEvent.ADDED = "added";
      EgretEvent.REMOVED = "removed";
      EgretEvent.ENTER_FRAME = "enterFrame";
      EgretEvent.RENDER = "render";
      EgretEvent.RESIZE = "resize";
      EgretEvent.CHANGE = "change";
      EgretEvent.CHANGING = "changing";
      EgretEvent.COMPLETE = "complete";
      EgretEvent.LOOP_COMPLETE = "loopComplete";
      EgretEvent.FOCUS_IN = "focusIn";
      EgretEvent.FOCUS_OUT = "focusOut";
      EgretEvent.ENDED = "ended";
      EgretEvent.ACTIVATE = "activate";
      EgretEvent.DEACTIVATE = "deactivate";
      EgretEvent.CLOSE = "close";
      EgretEvent.CONNECT = "connect";
      EgretEvent.LEAVE_STAGE = "leaveStage";
      EgretEvent.SOUND_COMPLETE = "soundComplete";
      return EgretEvent;
    }();
    exports.EgretEvent = EgretEvent;
    cc._RF.pop();
  }, {
    "./EventPhase": "EventPhase"
  } ],
  EventBin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61bc3oyuwtKPqWzK4lO4gsh", "EventBin");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  EventDispatcher: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2098f6hlBNGGb300JJYT0GV", "EventDispatcher");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EgretEvent_1 = require("./EgretEvent");
    var Keys;
    (function(Keys) {
      Keys[Keys["eventTarget"] = 0] = "eventTarget";
      Keys[Keys["eventsMap"] = 1] = "eventsMap";
      Keys[Keys["captureEventsMap"] = 2] = "captureEventsMap";
      Keys[Keys["notifyLevel"] = 3] = "notifyLevel";
    })(Keys || (Keys = {}));
    var ONCE_EVENT_LIST = [];
    var EventDispatcher = function() {
      function EventDispatcher(target) {
        void 0 === target && (target = null);
        this.$EventDispatcher = {
          0: target || this,
          1: {},
          2: {},
          3: 0
        };
      }
      EventDispatcher.prototype.$getEventMap = function(useCapture) {
        var values = this.$EventDispatcher;
        var eventMap = useCapture ? values[Keys.captureEventsMap] : values[Keys.eventsMap];
        return eventMap;
      };
      EventDispatcher.prototype.addEventListener = function(type, listener, thisObject, useCapture, priority) {
        this.$addListener(type, listener, thisObject, useCapture, priority);
      };
      EventDispatcher.prototype.once = function(type, listener, thisObject, useCapture, priority) {
        this.$addListener(type, listener, thisObject, useCapture, priority, true);
      };
      EventDispatcher.prototype.$addListener = function(type, listener, thisObject, useCapture, priority, dispatchOnce) {
        var values = this.$EventDispatcher;
        var eventMap = useCapture ? values[Keys.captureEventsMap] : values[Keys.eventsMap];
        var list = eventMap[type];
        list ? 0 !== values[Keys.notifyLevel] && (eventMap[type] = list = list.concat()) : list = eventMap[type] = [];
        this.$insertEventBin(list, type, listener, thisObject, useCapture, priority, dispatchOnce);
      };
      EventDispatcher.prototype.$insertEventBin = function(list, type, listener, thisObject, useCapture, priority, dispatchOnce) {
        priority = 0 | +priority;
        var insertIndex = -1;
        var length = list.length;
        for (var i = 0; i < length; i++) {
          var bin = list[i];
          if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) return false;
          -1 == insertIndex && bin.priority < priority && (insertIndex = i);
        }
        var eventBin = {
          type: type,
          listener: listener,
          thisObject: thisObject,
          priority: priority,
          target: this,
          useCapture: useCapture,
          dispatchOnce: !!dispatchOnce
        };
        -1 !== insertIndex ? list.splice(insertIndex, 0, eventBin) : list.push(eventBin);
        return true;
      };
      EventDispatcher.prototype.removeEventListener = function(type, listener, thisObject, useCapture) {
        var values = this.$EventDispatcher;
        var eventMap = useCapture ? values[Keys.captureEventsMap] : values[Keys.eventsMap];
        var list = eventMap[type];
        if (!list) return;
        0 !== values[Keys.notifyLevel] && (eventMap[type] = list = list.concat());
        this.$removeEventBin(list, listener, thisObject);
        0 == list.length && (eventMap[type] = null);
      };
      EventDispatcher.prototype.$removeEventBin = function(list, listener, thisObject) {
        var length = list.length;
        for (var i = 0; i < length; i++) {
          var bin = list[i];
          if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {
            list.splice(i, 1);
            return true;
          }
        }
        return false;
      };
      EventDispatcher.prototype.hasEventListener = function(type) {
        var values = this.$EventDispatcher;
        return !!(values[Keys.eventsMap][type] || values[Keys.captureEventsMap][type]);
      };
      EventDispatcher.prototype.willTrigger = function(type) {
        return this.hasEventListener(type);
      };
      EventDispatcher.prototype.dispatchEvent = function(event) {
        event.$currentTarget = this.$EventDispatcher[Keys.eventTarget];
        event.$setTarget(event.$currentTarget);
        return this.$notifyListener(event, false);
      };
      EventDispatcher.prototype.$notifyListener = function(event, capturePhase) {
        var values = this.$EventDispatcher;
        var eventMap = capturePhase ? values[Keys.captureEventsMap] : values[Keys.eventsMap];
        var list = eventMap[event.$type];
        if (!list) return true;
        var length = list.length;
        if (0 == length) return true;
        var onceList = ONCE_EVENT_LIST;
        values[Keys.notifyLevel]++;
        for (var i = 0; i < length; i++) {
          var eventBin = list[i];
          eventBin.listener.call(eventBin.thisObject, event);
          eventBin.dispatchOnce && onceList.push(eventBin);
          if (event.$isPropagationImmediateStopped) break;
        }
        values[Keys.notifyLevel]--;
        while (onceList.length) {
          eventBin = onceList.pop();
          eventBin.target.removeEventListener(eventBin.type, eventBin.listener, eventBin.thisObject, eventBin.useCapture);
        }
        return !event.$isDefaultPrevented;
      };
      EventDispatcher.prototype.dispatchEventWith = function(type, bubbles, data, cancelable) {
        if (bubbles || this.hasEventListener(type)) {
          var event = EgretEvent_1.EgretEvent.create(EgretEvent_1.EgretEvent, type, bubbles, cancelable);
          event.data = data;
          var result = this.dispatchEvent(event);
          EgretEvent_1.EgretEvent.release(event);
          return result;
        }
        return true;
      };
      return EventDispatcher;
    }();
    exports.EventDispatcher = EventDispatcher;
    cc._RF.pop();
  }, {
    "./EgretEvent": "EgretEvent"
  } ],
  EventPhase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "df1fejwLSdBwa1NvHgHY4VO", "EventPhase");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventPhase;
    (function(EventPhase) {
      EventPhase[EventPhase["CAPTURING_PHASE"] = 1] = "CAPTURING_PHASE";
      EventPhase[EventPhase["AT_TARGET"] = 2] = "AT_TARGET";
      EventPhase[EventPhase["BUBBLING_PHASE"] = 3] = "BUBBLING_PHASE";
    })(EventPhase = exports.EventPhase || (exports.EventPhase = {}));
    cc._RF.pop();
  }, {} ],
  FrameCmds: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8abe9PQAONLyKwijaKU2mVg", "FrameCmds");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FrameCmds = function() {
      function FrameCmds() {}
      FrameCmds.FRAME_INVALID_USER_ID = 65535;
      FrameCmds.SERVERSITE_MSG = 128;
      FrameCmds.SERVERSITE_PERSONAL_SCENE = FrameCmds.SERVERSITE_MSG + 1;
      FrameCmds.SERVERSITE_SCENE = FrameCmds.SERVERSITE_MSG + 2;
      FrameCmds.SERVERSITE_FIRST_SCENE = FrameCmds.SERVERSITE_MSG + 3;
      FrameCmds.SERVERSITE_SAVE_STORAGE = FrameCmds.SERVERSITE_MSG + 4;
      FrameCmds.SERVERSITE_SAVE_STORAGE_CONTINUE = FrameCmds.SERVERSITE_MSG + 5;
      FrameCmds.SERVERSITE_SAVE_STORAGE_END = FrameCmds.SERVERSITE_MSG + 6;
      FrameCmds.SERVERSITE_GAME_OVER = FrameCmds.SERVERSITE_MSG + 7;
      FrameCmds.SERVERSITE_GAME_DISMISS = FrameCmds.SERVERSITE_MSG + 8;
      FrameCmds.SERVERSITE_ENABLE_LOOKON = FrameCmds.SERVERSITE_MSG + 9;
      FrameCmds.SERVERSITE_WAITING_START = FrameCmds.SERVERSITE_MSG + 10;
      FrameCmds.SERVERSITE_REQUEST_NEWVERSION = FrameCmds.SERVERSITE_MSG + 11;
      FrameCmds.SERVERSITE_MATCH_PROGRESSING = FrameCmds.SERVERSITE_MSG + 12;
      FrameCmds.SERVERSITE_MATCH_END = FrameCmds.SERVERSITE_MSG + 13;
      FrameCmds.SERVERSITE_ANSWER_TABLEOP = FrameCmds.SERVERSITE_MSG + 14;
      FrameCmds.SERVERSITE_POPUPMESSAGE = FrameCmds.SERVERSITE_MSG + 15;
      FrameCmds.SERVERSITE_NEWVERSION_AVAILABLE = FrameCmds.SERVERSITE_MSG + 16;
      FrameCmds.SERVERSITE_INVALID_VERSION = FrameCmds.SERVERSITE_MSG + 17;
      FrameCmds.SERVERSITE_GAMEOPTION = FrameCmds.SERVERSITE_MSG + 18;
      FrameCmds.SERVERSITE_SOFT_READY = FrameCmds.SERVERSITE_MSG + 19;
      FrameCmds.SERVERSITE_NEGOTIATE_DISMISS = FrameCmds.SERVERSITE_MSG + 20;
      FrameCmds.SERVERSITE_SYSTEMMESSAGE = FrameCmds.SERVERSITE_MSG + 21;
      FrameCmds.SERVERSITE_DEFAULT_LOOKON = FrameCmds.SERVERSITE_MSG + 22;
      FrameCmds.SERVERSITE_DOWNLOAD_FILE = FrameCmds.SERVERSITE_MSG + 23;
      FrameCmds.SERVERSITE_MASTER_KICK = FrameCmds.SERVERSITE_MSG + 24;
      FrameCmds.SERVERSITE_SERVERFRAME_VERSION = FrameCmds.SERVERSITE_MSG + 25;
      FrameCmds.SERVERSITE_INFOS_WHEN_USER_ENTER = FrameCmds.SERVERSITE_MSG + 26;
      FrameCmds.SERVERSITE_SHOW_GLOBAL_MSG = FrameCmds.SERVERSITE_MSG + 27;
      FrameCmds.SERVERSITE_CANCEL_CHANGE_GAMERULE = FrameCmds.SERVERSITE_MSG + 28;
      FrameCmds.SERVERSITE_CHANGE_GAMERULE = FrameCmds.SERVERSITE_MSG + 29;
      FrameCmds.SERVERSITE_DEFAULT_GAMERULE = FrameCmds.SERVERSITE_MSG + 30;
      FrameCmds.SERVERSITE_CAN_READY = FrameCmds.SERVERSITE_MSG + 31;
      FrameCmds.SERVERSITE_FUNCTIONAL_MSGBOX = FrameCmds.SERVERSITE_MSG + 32;
      FrameCmds.SERVERSITE_ACADEMY_SCORESEGMENT = FrameCmds.SERVERSITE_MSG + 33;
      FrameCmds.SERVERSITE_ACADEMY_LEVELSEGMENT = FrameCmds.SERVERSITE_MSG + 34;
      FrameCmds.SERVERSITE_SOUND = FrameCmds.SERVERSITE_MSG + 35;
      FrameCmds.CLIENTSITE_MSG = 192;
      FrameCmds.CLIENTSITE_CONFIRM_START = FrameCmds.CLIENTSITE_MSG + 1;
      FrameCmds.CLIENTSITE_ENABLE_LOOKON = FrameCmds.CLIENTSITE_MSG + 2;
      FrameCmds.CLIENTSITE_REQUEST_STORAGE = FrameCmds.CLIENTSITE_MSG + 3;
      FrameCmds.CLIENTSITE_REQUEST_VERIFY_VERSION = FrameCmds.CLIENTSITE_MSG + 4;
      FrameCmds.CLIENTSITE_ADMINISTRATOR_SENTENCE = FrameCmds.CLIENTSITE_MSG + 5;
      FrameCmds.CLIENTSITE_REQUEST_TABLEOP = FrameCmds.CLIENTSITE_MSG + 6;
      FrameCmds.CLIENTSITE_SOFT_READY = FrameCmds.CLIENTSITE_MSG + 7;
      FrameCmds.CLIENTSITE_NEGOTIATE_DISMISS = FrameCmds.CLIENTSITE_MSG + 8;
      FrameCmds.CLIENTSITE_FRAME_VERSION = FrameCmds.CLIENTSITE_MSG + 9;
      FrameCmds.CLIENTSITE_MASTER_KICK = FrameCmds.CLIENTSITE_MSG + 10;
      FrameCmds.CLIENTSITE_AGREE_GAMERULE = FrameCmds.CLIENTSITE_MSG + 11;
      FrameCmds.CLIENTSITE_CHANGE_GAMERULE = FrameCmds.CLIENTSITE_MSG + 12;
      FrameCmds.CLIENTSITE_CANCEL_CHANGE_GAMERULE = FrameCmds.CLIENTSITE_MSG + 13;
      FrameCmds.CLIENTSITE_SEND_SOUND = FrameCmds.CLIENTSITE_MSG + 14;
      FrameCmds.SCENE_STATUS_PLAYING = 0;
      FrameCmds.SCENE_STATUS_FREE = 1;
      FrameCmds.DISPID_CHANGE_GAMERULE = 1;
      FrameCmds.DISPID_CANCEL_CHANGE_GAMERULE = 2;
      FrameCmds.DISPID_DEFAULT_GAMERULE = 3;
      FrameCmds.DISPID_EVENT_LOGIC_INITIAL_DATA = 4;
      FrameCmds.DISPID_EVENT_LOGIC_CLEAR_DATA = 5;
      FrameCmds.DISPID_IS_SUPPORT_UNITED_READY = 6;
      FrameCmds.DISPID_ON_GAME_DISMISS = 7;
      FrameCmds.DISPID_ON_CREATE_OVER = 8;
      FrameCmds.DISPID_USE_DIRECTSOUND = 9;
      FrameCmds.DISPID_GAME_HELP = 11;
      FrameCmds.DISPID_USER_PROPERTY_RETURN = 13;
      return FrameCmds;
    }();
    exports.FrameCmds = FrameCmds;
    cc._RF.pop();
  }, {} ],
  GAME_DATA: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f895pSwY5AHb3zx33Nq/R2", "GAME_DATA");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("../../common/ByteArray");
    var GAME_DATA = function() {
      function GAME_DATA(buf) {
        this.cChairID = buf.readUnsignedByte();
        this.cCmdID = buf.readUnsignedByte();
        this.data = new ByteArray_1.ByteArray();
        buf.readBytes(this.data);
      }
      return GAME_DATA;
    }();
    exports.GAME_DATA = GAME_DATA;
    cc._RF.pop();
  }, {
    "../../common/ByteArray": "ByteArray"
  } ],
  GameButtonLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a0dbGq8yJH+pPTB80bF5n3", "GameButtonLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameCfg = require("GameCfg");
    var sendCMD = require("sendCMD");
    cc.Class({
      extends: cc.Component,
      properties: {
        moreBtn: {
          default: null,
          type: cc.Button
        },
        chatBtn: {
          default: null,
          type: cc.Button
        },
        autoHuBtn: {
          default: null,
          type: cc.Button
        },
        startGameBtn: {
          default: null,
          type: cc.Button
        },
        gameInfoToggle: {
          default: null,
          type: cc.Node
        },
        laiziInfo: {
          default: null,
          type: cc.Node
        },
        settingLayer: {
          default: null,
          type: cc.Node
        },
        chattingLayer: {
          default: null,
          type: cc.Node
        },
        buttonAtlas: {
          default: null,
          type: cc.SpriteAtlas
        }
      },
      onLoad: function onLoad() {
        this.laiziInfo.active = false;
        _TSCommon.TSCommon.addEvent(GameCfg.sendChatEnd, this.onSendChatEnd, this);
        this.init();
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      init: function init() {
        this.m_autoHuPrePos = this.autoHuBtn.node.getPosition();
        this.autoHuBtn.node.setPosition(cc.p(this.m_autoHuPrePos.x + 350, this.m_autoHuPrePos.y));
      },
      onTouch: function onTouch(event) {
        var pos = event.touch.getLocation();
        var convertPos = this.laiziInfo.getChildByName("info_bg").convertToNodeSpace(pos);
        var size = this.laiziInfo.getChildByName("info_bg").getContentSize();
        var rect = cc.rect(0, 0, size.width, size.height);
        cc.rectContainsPoint(rect, convertPos) || (this.laiziInfo.active = false);
      },
      onDisable: function onDisable() {
        _TSCommon.TSCommon.removeEvent(GameCfg.sendChatEnd, this.onSendChatEnd, this);
      },
      onStartBtnClicked: function onStartBtnClicked() {
        require("sendCMD").sendCMD_PO_RESTART();
        this.m_onStartCallBack && this.m_onStartCallBack();
        var HallResources = require("HallResources");
        HallResources.recordPlayerLogToServer(HallResources.recordList.click_ready);
      },
      onMoreBtnClicked: function onMoreBtnClicked() {
        _TSCommon.TSCommon.dispatchEvent(require("HallResources").onHideSendGiftToPLayer, true);
        var HallResources = require("HallResources");
        HallResources.getInstance().playButtonEffect();
        this.settingLayer.getComponent("MoreSettingLayer").show();
      },
      onChatBtnClicked: function onChatBtnClicked() {
        var HallResources = require("HallResources");
        HallResources.getInstance().playButtonEffect();
        this.chattingLayer.getComponent("Chatting").show();
      },
      onGameInfoBgClicked: function onGameInfoBgClicked(event) {
        this.gameInfoToggle.getComponent(cc.Toggle).isChecked = !this.gameInfoToggle.getComponent(cc.Toggle).isChecked;
        var parent = this.gameInfoToggle.parent;
        var gameInfoLayer = parent.getChildByName("base_info_bg");
        if (this.gameInfoToggle.getComponent(cc.Toggle).isChecked) {
          this.gameInfoToggle.getChildByName("Background").active = false;
          gameInfoLayer.active = true;
        } else {
          this.gameInfoToggle.getChildByName("Background").active = true;
          gameInfoLayer.active = false;
        }
      },
      onShowGameInfoClicked: function onShowGameInfoClicked(event) {
        var parent = this.gameInfoToggle.parent;
        var gameInfoLayer = parent.getChildByName("base_info_bg");
        if (this.gameInfoToggle.getComponent(cc.Toggle).isChecked) {
          this.gameInfoToggle.getChildByName("Background").active = false;
          gameInfoLayer.active = true;
        } else {
          this.gameInfoToggle.getChildByName("Background").active = true;
          gameInfoLayer.active = false;
        }
      },
      onLaiziImgClicked: function onLaiziImgClicked() {
        this.laiziInfo.active = true;
      },
      onCancelRobotClicked: function onCancelRobotClicked() {
        this.m_onCancelRobotCallBack && this.m_onCancelRobotCallBack();
        sendCMD.sendCMD_PO_ROBOTPLAYCANCEL();
      },
      onGuoBtnClicked: function onGuoBtnClicked(event) {
        sendCMD.sendCMD_PO_PASS();
        this.m_onGuoCallBack && this.m_onGuoCallBack();
        this.setAllOperateButtonIsVis(false);
      },
      onChiBtnClicked: function onChiBtnClicked(event) {
        this.m_onChiCallback && this.m_onChiCallback();
        this.setAllOperateButtonIsVis(false);
      },
      onGangBtnClicked: function onGangBtnClicked(event) {
        this.m_onGangCallBack && this.m_onGangCallBack();
        this.setAllOperateButtonIsVis(false);
      },
      onChaoTianBtnClicked: function onChaoTianBtnClicked(event) {
        this.m_onChaotianCallBack && this.m_onChaotianCallBack();
        this.setAllOperateButtonIsVis(false);
      },
      onPengBtnClicked: function onPengBtnClicked(event) {
        sendCMD.sendCMD_PO_PENG();
        this.setAllOperateButtonIsVis(false);
      },
      onHuBtnClicked: function onHuBtnClicked(event) {
        var HallResources = require("HallResources");
        console.log("点击胡牌按钮的系统时间：" + HallResources.getInstance().printNowTimes());
        sendCMD.sendCMD_PO_HU();
        this.setAllOperateButtonIsVis(false);
      },
      onZiMoBtnClicked: function onZiMoBtnClicked(event) {
        this.stopZiMoAct();
        sendCMD.sendCMD_PO_HU();
        this.setAllOperateButtonIsVis(false);
      },
      autoHuBtnShow: function autoHuBtnShow() {
        var moveTo = cc.moveTo(.2, this.m_autoHuPrePos);
        this.autoHuBtn.node.runAction(moveTo);
      },
      onAutoHuClicked: function onAutoHuClicked() {},
      onSendChatEnd: function onSendChatEnd() {
        this.chatBtn.interactable = false;
        var animationComponent = this.chatBtn.getComponent(cc.Animation);
        animationComponent.play("quickChatTimer");
        var self = this;
        var onPlayAnimationEnd = function onPlayAnimationEnd() {
          self.chatBtn.interactable = true;
          cc.log("end");
        };
        animationComponent.on("finished", onPlayAnimationEnd, this);
      },
      setAllOperateButtonIsVis: function setAllOperateButtonIsVis(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        for (var i = 0; i < operateNodes.childrenCount; i++) operateNodes.children[i].active = bIsVisible;
      },
      setGuoBtnVisible: function setGuoBtnVisible(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        operateNodes.getChildByName("operate_guo_btn").active = bIsVisible;
        this.autoAdjustPos();
      },
      setChiBtnVisible: function setChiBtnVisible(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        operateNodes.getChildByName("operate_chi_btn").active = bIsVisible;
        this.autoAdjustPos();
      },
      setPengBtnVisible: function setPengBtnVisible(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        operateNodes.getChildByName("operate_peng_btn").active = bIsVisible;
        this.autoAdjustPos(4);
      },
      setGangBtnVisible: function setGangBtnVisible(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        operateNodes.getChildByName("operate_gang_btn").active = bIsVisible;
        this.autoAdjustPos(3);
      },
      setChaoTianBtnVisible: function setChaoTianBtnVisible(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        operateNodes.getChildByName("operate_chaotian_btn").active = bIsVisible;
        this.autoAdjustPos();
      },
      setHuBtnVisible: function setHuBtnVisible(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        operateNodes.getChildByName("operate_hu_btn").active = bIsVisible;
        this.autoAdjustPos(1);
      },
      startGangAct: function startGangAct(posX) {
        var self = this;
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("gang_act");
        var strAniName = "3gang";
        whosTurnNode.active = true;
        whosTurnNode.x = posX;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      stopGangAct: function stopGangAct() {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("gang_act");
        whosTurnNode.active = false;
      },
      startPengAct: function startPengAct(posX) {
        var self = this;
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("peng_act");
        var strAniName = "1pen";
        whosTurnNode.active = true;
        whosTurnNode.x = posX;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      stopPengAct: function stopPengAct() {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("peng_act");
        whosTurnNode.active = false;
      },
      startHuAct: function startHuAct(posX) {
        var self = this;
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("hu_act");
        var strAniName = "1hu";
        whosTurnNode.active = true;
        whosTurnNode.x = posX;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      stopHuAct: function stopHuAct() {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("hu_act");
        whosTurnNode.active = false;
      },
      startZiMoAct: function startZiMoAct(posX) {
        console.log("播放自摸动画");
        var self = this;
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("zimo_act");
        var strAniName = "8ZhiMo";
        whosTurnNode.active = true;
        whosTurnNode.x = posX;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      stopZiMoAct: function stopZiMoAct() {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var whosTurnNode = operateNodes.getChildByName("zimo_act");
        whosTurnNode.active = false;
      },
      setZiMoBtnVisible: function setZiMoBtnVisible(bIsVisible) {
        var operateNodes = this.node.getChildByName("operate_button_layer");
        operateNodes.getChildByName("operate_zimo_btn").active = bIsVisible;
        this.autoAdjustPos(2);
      },
      setStartBtnVisible: function setStartBtnVisible(bIsVisible) {
        this.startGameBtn.node.active = bIsVisible;
      },
      setStartClickBtnCallBack: function setStartClickBtnCallBack(callback) {
        this.m_onStartCallBack = callback;
      },
      setGuoClickBtnCallBack: function setGuoClickBtnCallBack(callback) {
        this.m_onGuoCallBack = callback;
      },
      setChiClickBtnCallBack: function setChiClickBtnCallBack(callback) {
        this.m_onChiCallback = callback;
      },
      setGangClickBtnCallBack: function setGangClickBtnCallBack(callback) {
        this.m_onGangCallBack = callback;
      },
      setChaoTianClickBtnCallBack: function setChaoTianClickBtnCallBack(callback) {
        this.m_onChaotianCallBack = callback;
      },
      setCancelRobotBtnCallBack: function setCancelRobotBtnCallBack(callback) {
        this.m_onCancelRobotCallBack = callback;
      },
      onClickedDingQue: function onClickedDingQue(event, data) {
        var HallResources = require("HallResources");
        HallResources.getInstance().playButtonEffect();
        sendCMD.sendCMD_PO_DingQue(parseInt(data));
      },
      autoAdjustPos: function autoAdjustPos(flag) {
        this.frontNode = this.frontNode || null;
        var operateNodes = this.node.getChildByName("operate_button_layer");
        var GuoBtn = operateNodes.getChildByName("operate_guo_btn");
        GuoBtn.x = 390;
        this.front = GuoBtn;
        if (true == operateNodes.getChildByName("operate_peng_btn").active) {
          operateNodes.getChildByName("operate_peng_btn").x = this.front.x - 180;
          4 == flag && this.startPengAct(this.front.x - 178);
          this.front = operateNodes.getChildByName("operate_peng_btn");
        }
        if (true == operateNodes.getChildByName("operate_chi_btn").active) {
          operateNodes.getChildByName("operate_chi_btn").x = this.front.x - 180;
          this.front = operateNodes.getChildByName("operate_chi_btn");
        }
        if (true == operateNodes.getChildByName("operate_gang_btn").active) {
          operateNodes.getChildByName("operate_gang_btn").x = this.front.x - 180;
          3 == flag && this.startGangAct(this.front.x - 178);
          this.front = operateNodes.getChildByName("operate_gang_btn");
        }
        if (true == operateNodes.getChildByName("operate_chaotian_btn").active) {
          operateNodes.getChildByName("operate_chaotian_btn").x = this.front.x - 180;
          this.front = operateNodes.getChildByName("operate_chaotian_btn");
        }
        if (true == operateNodes.getChildByName("operate_hu_btn").active) {
          operateNodes.getChildByName("operate_hu_btn").x = this.front.x - 180;
          1 == flag && this.startHuAct(this.front.x - 180);
          this.front = operateNodes.getChildByName("operate_hu_btn");
        }
        if (true == operateNodes.getChildByName("operate_zimo_btn").active) {
          operateNodes.getChildByName("operate_zimo_btn").x = this.front.x - 180;
          2 == flag && this.startZiMoAct(this.front.x - 180);
          this.front = operateNodes.getChildByName("operate_zimo_btn");
        }
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    HallResources: "HallResources",
    sendCMD: "sendCMD"
  } ],
  GameCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1da69q76N5PV5/aqPfv8FdH", "GameCfg");
    "use strict";
    var GameCfg = {};
    GameCfg.GAME_PLAYER = 4;
    GameCfg.EffectList = {
      No_1pen: "No_1pen",
      No_2chi: "No_2chi",
      No_2gang: "No_2gang",
      No_2hu: "No_2hu",
      No_2he: "No_2he",
      No_2CouZhuang: "No_2CouZhuang",
      No_2LiuJu: "No_2LiuJu",
      No_2TianHu: "No_2TianHu",
      No_2TianHe: "No_2TianHe",
      No_2FanPao: "No_2FanPao",
      No_2QianGan: "No_2QianGan",
      No_2QianJin: "No_2QianJin",
      No_2SanYou: "No_2SanYou",
      No_2SanSa: "No_2SanSa",
      No_2SuanYou: "No_2SuanYou",
      No_2YouJin: "No_2YouJin",
      No_2ZiMo: "No_2ZiMo",
      No_2SanJinDao: "No_2SanJinDao",
      No_1zhong: "No_1zhong",
      No_1lai: "No_1lai",
      No_2laiyou: "No_2laiyou",
      No_1tin: "No_1tin",
      No_1liang: "No_1liang",
      No_2caotian: "No_2caotian",
      No_2ChaDaJiao: "No_2ChaDaJiao",
      No_2ChaHuaZhu: "No_2ChaHuaZhu",
      NULL: 25
    };
    GameCfg.Pub_IsValidChair = function(cbChair) {
      var ret = false;
      cbChair < GameCfg.GAME_PLAYER && (ret = true);
      return ret;
    };
    GameCfg.getMjColor = function(nValue) {
      if (nValue >= 0) return Math.floor(nValue / 9);
      return -1;
    };
    GameCfg.getStyleBySort = function(nCardValue, nStyle) {
      if (GameCfg.getMjColor(nCardValue) == nStyle) return nCardValue + 100;
      return nCardValue;
    };
    GameCfg.GAME_RESTART = "game_restart";
    GameCfg.sendChatEnd = "SEND_CHAT_END";
    GameCfg.changeDeskBg = "CHANGE_DESK_BG";
    GameCfg.selectedMj = "SELECTED_MJ";
    GameCfg.unSelectedMj = "UNSELECTED_MJ";
    GameCfg.openBgMusic = "OPEN_BG_MUSIC";
    GameCfg.closeBgMusic = "CLOSE_BG_MUSIC";
    GameCfg.NOTIFICATION_LISTENCARD = "NOTIFICATION_LISTENCARD";
    GameCfg.NOTIFICATION_ROBOT = "NOTIFICATION_ROBOT";
    GameCfg.PROTECT_SCORE_SUCCESS = "PROTECT_SCORE_SUCCESS";
    module.exports = GameCfg;
    cc._RF.pop();
  }, {} ],
  GameCmds: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f2bc0ZCGlP1ohwM0UUcwRk", "GameCmds");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("../../common/ByteArray");
    var TSCommon_1 = require("../../TSCommon");
    var GameCmds = function() {
      function GameCmds() {}
      GameCmds.MAIN_GR_LOGON = 150;
      GameCmds.SUB_GR_LOGON_BY_NAME = 1;
      GameCmds.SUB_GR_LOGON_BY_USERID = 2;
      GameCmds.SUB_GR_LOGON_BY_VNET = 3;
      GameCmds.SUB_GR_LOGON_SUCCESS = 50;
      GameCmds.SUB_GR_LOGON_FINISH = 51;
      GameCmds.MAIN_GR_CONFIG = 151;
      GameCmds.SUB_GR_ROOM_INFO = 1;
      GameCmds.SUB_GR_SCORE_HEADER = 2;
      GameCmds.SUB_GR_COLUMN_INFO = 3;
      GameCmds.SUB_GR_ORDER_INFO = 4;
      GameCmds.SUB_GR_MEMBER_INFO = 5;
      GameCmds.SUB_PREVENT_CHEAT = 6;
      GameCmds.SUB_GR_SUPPORT_TRANSFER = 7;
      GameCmds.SUB_GR_SUPPORT_REQ_CAN_SIT = 8;
      GameCmds.SUB_GR_VOIP_INFO = 9;
      GameCmds.SUB_GR_TABLE_INFO = 52;
      GameCmds.MAIN_GR_USER = 152;
      GameCmds.SUB_GR_BROADCAST_USER_COME = 1;
      GameCmds.SUB_GR_BROADCAST_USER_LEFT = 2;
      GameCmds.SUB_GR_BROADCAST_USER_STATUS = 3;
      GameCmds.SUB_GR_BROADCAST_USER_SCORE = 4;
      GameCmds.SUB_GR_MATCH_ENCASH = 5;
      GameCmds.SUB_GR_BROADCAST_USER_FAME = 6;
      GameCmds.SUB_GR_INVITE_USER = 20;
      GameCmds.SUB_GR_INVITE_PHONE = 21;
      GameCmds.SUB_GR_GLOBAL_FIND_USER = 22;
      GameCmds.SUB_GR_REQ_SIT_TABLE = 50;
      GameCmds.SUB_GR_REQ_LOOK_ON_TABLE = 51;
      GameCmds.SUB_GR_REQ_STAND_UP = 52;
      GameCmds.SUB_GR_REQ_INVITE_USER = 53;
      GameCmds.SUB_GR_REQ_PHONE = 54;
      GameCmds.SUB_GR_INVITE_PHONE_ANSWER = 55;
      GameCmds.SUB_GR_GLOBAL_USER_INFO = 56;
      GameCmds.SUB_GR_MATCH_AGREE_ENCASH = 57;
      GameCmds.SUB_GR_TRANSFER = 58;
      GameCmds.SUB_GR_SAFEBOX = 59;
      GameCmds.SUB_GR_TRANSFER_RESPONSE = 60;
      GameCmds.SUB_GR_SAFEBOX_RESPONSE = 61;
      GameCmds.SUB_GR_GET_SAFE_GUARD = 62;
      GameCmds.SUB_GR_GET_SAFE_GUARD_RESPONSE = 63;
      GameCmds.SUB_GR_GET_CAN_USE_MONEY = 64;
      GameCmds.SUB_GR_GET_CAN_USE_MONEY_RESPONSE = 65;
      GameCmds.SUB_GR_REQ_CAN_SIT_TABLE = 66;
      GameCmds.SUB_GR_CAN_SIT_TABLE_RESPONSE = 67;
      GameCmds.SUB_GR_MANAGER_BMATCH_CUOHE_PLAYER = 68;
      GameCmds.SUB_GR_REQ_VOIP = 69;
      GameCmds.SUB_GR_CANCEL_VOIP = 70;
      GameCmds.SUB_GR_ANSWER_VOIP = 71;
      GameCmds.SUB_GR_READY_VOIP = 72;
      GameCmds.SUB_GR_DROP_VOIP = 73;
      GameCmds.SUB_GR_GLOBAL_FIND_VOIP = 74;
      GameCmds.SUB_GR_GLORY_INFO = 75;
      GameCmds.SUB_GR_BROADCAST_USER_FACEID = 76;
      GameCmds.SUB_GR_VCODE = 77;
      GameCmds.SUB_GR_VCODE_SEND = 78;
      GameCmds.SUB_MGR_CANCEL_GOLDTABLE = 79;
      GameCmds.SUB_GR_GROW_INFO = 80;
      GameCmds.SUB_GR_BANK = 81;
      GameCmds.SUB_GR_BANK_RETURN = 82;
      GameCmds.SUB_GR_BANK_VALUE = 83;
      GameCmds.SUB_GR_MEMBER_END_TIME = 84;
      GameCmds.SUB_GR_CHANGE_PASSWORD = 85;
      GameCmds.SUB_GR_CHANGE_PASSWORD_RETURN = 86;
      GameCmds.SUB_GR_ARRANGE_NOT_ENOUGH_GOLD = 87;
      GameCmds.SUB_GR_CLEAR_NEGATIVE = 88;
      GameCmds.SUB_GR_CLEAR_ESCAPE = 89;
      GameCmds.SUB_GR_ENABLE_LOOKON = 90;
      GameCmds.SUB_GR_ROOM_TRANSFER = 91;
      GameCmds.SUB_GR_GET_USERNAME = 92;
      GameCmds.SUB_GR_VERIFYING_RECEIPT = 93;
      GameCmds.SUB_GR_LOTERY_POOL = 94;
      GameCmds.SUB_GR_LOTERY_PERSET = 95;
      GameCmds.SUB_GR_ADD_POOL_SUCCEEDED = 96;
      GameCmds.SUB_GR_TAX_VALUE = 97;
      GameCmds.SUB_GR_TRANSFER_TAX_NEED = 98;
      GameCmds.SUB_GR_GET_GAME_MONEY = 104;
      GameCmds.SUB_GR_MONEY_TO_GAME = 105;
      GameCmds.SUB_GR_FRAG_COUNT = 106;
      GameCmds.SUB_GR_QUERY_GOLD = 107;
      GameCmds.SUB_GR_SHAKE = 108;
      GameCmds.SUB_GR_CREATETABLE_FAILED = 109;
      GameCmds.SUB_GR_ENTERPRIVATE_FAILED = 110;
      GameCmds.SUB_GR_TOOLCARD_INFO = 111;
      GameCmds.SUB_GR_BROADCAST_USER_FAME_EX = 112;
      GameCmds.MAIN_GR_ROOM_STATUS = 153;
      GameCmds.SUB_GR_BROADCAST_TABLE_STATUS = 1;
      GameCmds.SUB_GR_SHOW_SHORT_MESSAGE = 2;
      GameCmds.SUB_GR_PREVETCHEAT_ROOM_TABLE_COUNT = 3;
      GameCmds.SUB_GR_BROADCAST_GOLD_TABLE = 4;
      GameCmds.MAIN_GR_PROPERTY = 154;
      GameCmds.SUB_GR_PROP_REQ_USE = 1;
      GameCmds.SUB_GR_PROP_REQ_BUY = 2;
      GameCmds.SUB_GR_PROP_REPLY_SUPPORT = 3;
      GameCmds.SUB_GR_CLIENT_PROP_USE = 4;
      GameCmds.SUB_GR_PROP_REQ_BUY_EX = 6;
      GameCmds.SUB_GR_PROP_REQ_PRESENT = 7;
      GameCmds.SUB_GR_PROP_REQ_THROW = 8;
      GameCmds.SUB_GR_PROP_REQ_BUY_V1 = 9;
      GameCmds.SUB_GR_PROP_REQ_UPDATE = 10;
      GameCmds.SUB_GR_PROP_REALIZE = 20;
      GameCmds.SUB_GR_PROP_REQ_SUPPORT = 21;
      GameCmds.SUB_GR_PROP_UPDATE = 22;
      GameCmds.SUB_GR_PROP_ISSHOW_BTBUY = 23;
      GameCmds.SUB_GR_CLIENT_PROP_REALIZE = 24;
      GameCmds.SUB_GR_CLIENT_PROP_PLAY_FLASH = 25;
      GameCmds.SUB_GR_PROP_ASK_BUY = 26;
      GameCmds.MAIN_GR_CLIENT = 155;
      GameCmds.SUB_GR_CHAT_SUPPORT_HTML = 1;
      GameCmds.SUB_CR_MSG_BOX_REQ = 2;
      GameCmds.SUB_CR_MSG_BOX_RET = 3;
      GameCmds.SUB_GR_CLOST_GAME_CLIENT = 4;
      GameCmds.SUB_GR_MSG_AUTO_CLOSE = 5;
      GameCmds.SUB_CR_MSG_BOX_REQ_WITH_TIMER = 6;
      GameCmds.MAIN_GR_MATCH = 156;
      GameCmds.SUB_GR_MATCH_PRIZE = 1;
      GameCmds.SUB_GR_MATCH_WAIT_START = 2;
      GameCmds.SUB_GR_MATCH_ELIMINATE = 3;
      GameCmds.SUB_GR_MATCH_PROMOTE = 4;
      GameCmds.CMD_HTML_HALL_CHAT = 30;
      GameCmds.CMD_HTML_TABLE_CHAT = 31;
      GameCmds.CMD_AD = 18;
      GameCmds.CMD_MANAGER = 21;
      GameCmds.CMD_SERVER_PING = 26;
      GameCmds.IDS_SP_PING_CLIENT = 1;
      GameCmds.IDC_SP_ANWSER_PING = 2;
      GameCmds.IDS_MANAGER_MANAGER_MESSAGE = 10;
      GameCmds.MAIN_CM_SERVICE = 200;
      GameCmds.SUB_CM_MESSAGE = 1;
      GameCmds.SUB_CM_MESSAGE_EX = 2;
      GameCmds.SUB_CM_MESSAGE_EX_2 = 3;
      GameCmds.SUB_CM_SHOW_WEB = 4;
      GameCmds.SUB_CM_YESORNO_REQ = 11;
      GameCmds.SUB_CM_YESORNO_RET = 12;
      GameCmds.SUB_CM_MSG_BOX_REQ = 13;
      GameCmds.SUB_CM_MSG_BOX_RET = 14;
      GameCmds.SUB_CR_MSG_BOX_REQ_TIMER = 15;
      GameCmds.MAIN_CM_DOWN_LOAD = 201;
      GameCmds.SUB_CM_DOWN_LOAD_INSTALL = 1;
      GameCmds.CMD_NONE = 0;
      GameCmds.CMD_LOGIN = 1;
      GameCmds.CMD_FTP = 2;
      GameCmds.CMD_GAME = 3;
      GameCmds.CMD_USER = 4;
      GameCmds.CMD_SQUARE = 5;
      GameCmds.CMD_HALL_CHAT = 6;
      GameCmds.CMD_TABLE_CHAT = 7;
      GameCmds.CMD_JUDGE = 8;
      GameCmds.CMD_WHISPER = 9;
      GameCmds.CMD_SERVER_INFO = 10;
      GameCmds.CMD_GAME_INFO = 11;
      GameCmds.CMD_USER_COUNT = 12;
      GameCmds.CMD_SERVER_CLOSE = 13;
      GameCmds.CMD_SQUARE_IDLE = 14;
      GameCmds.CMD_SQUARE_ACTIVE = 15;
      GameCmds.CMD_REPORT_EVENT = 16;
      GameCmds.CMD_POST_DATA = 17;
      GameCmds.IDC_USER_REQ_SIT_DOWN = 1;
      GameCmds.IDS_USER_ANS_SIT_DOWN = 2;
      GameCmds.IDC_USER_STAND_UP = 3;
      GameCmds.IDC_USER_AGREE_START = 4;
      GameCmds.IDC_USER_GAME_OVER = 6;
      GameCmds.IDC_USER_REQ_LOOK_ON = 7;
      GameCmds.IDS_USER_ANS_LOOK_ON = 8;
      GameCmds.IDS_USER_BROADCAST_USER_INFO = 9;
      GameCmds.IDS_USER_BROADCAST_USER_STATUS = 10;
      GameCmds.IDS_USER_BROADCAST_TALBLE_STATUS = 11;
      GameCmds.IDS_USER_BROADCAST_USER_GAMEOVER = 12;
      GameCmds.IDC_USER_AGREE_LOOKON = 13;
      GameCmds.IDS_USER_USERLIST_END = 14;
      GameCmds.IDC_USER_CANCEL_READY = 22;
      GameCmds.CMD_PING_USER = 22;
      GameCmds.IDC_PING_USER = 1;
      GameCmds.IDS_PING_USER = 2;
      GameCmds.IDC_ANSWER_PING = 3;
      GameCmds.IDS_ANSWER_PING = 4;
      GameCmds.IDC_PING_ME = 5;
      GameCmds.IDS_ANSWER_PING_ME = 6;
      GameCmds.SUB_GR_ROOM_OPTION = 50;
      GameCmds.CMD_CLIENT_VERSION = 129;
      GameCmds.IDC_USER_KICK_OFF_TABLE = 18;
      GameCmds.KICK_ENEMY = 1;
      GameCmds.KICK_MASTER_DENY = 2;
      GameCmds.SEND_TABLE_CHAT_OK = 0;
      GameCmds.SEND_TABLE_CHAT_OFFLINE = 1;
      GameCmds.SEND_TABLE_CHAT_NULL_CONTENT = 2;
      GameCmds.SEND_TABLE_CHAT_BUSY = 3;
      GameCmds.FIELD_DATA_ID = 0;
      GameCmds.FIELD_USER_INDEX = 1;
      GameCmds.FIELD_ROUND_COUNT = 2;
      GameCmds.FIELD_NAME = 3;
      GameCmds.FIELD_USER_DESCRIBE = 4;
      GameCmds.FIELD_USER_NOTE = 5;
      GameCmds.FIELD_ORDER = 6;
      GameCmds.FIELD_GOLD = 7;
      GameCmds.FIELD_POINT = 8;
      GameCmds.FIELD_TABLE_ID = 9;
      GameCmds.FIELD_CHAIR_ID = 10;
      GameCmds.FIELD_USER_STATUS = 11;
      GameCmds.FIELD_WIN_COUNT = 12;
      GameCmds.FIELD_LOST_COUNT = 13;
      GameCmds.FIELD_DRAW_COUNT = 14;
      GameCmds.FIELD_FLEE_COUNT = 15;
      GameCmds.FIELD_FLEE_RATE = 16;
      GameCmds.FIELD_WIN_RATE = 17;
      GameCmds.FIELD_PLAY_COUNT = 18;
      GameCmds.FIELD_NET_TIMELAG = 19;
      GameCmds.FIELD_MEMBER = 20;
      GameCmds.FIELD_USER_LEVEL = 21;
      GameCmds.FIELD_GROUP_ID = 22;
      GameCmds.FIELD_GROUP_NAME = 23;
      GameCmds.FIELD_OFFICE_NAME = 24;
      GameCmds.FIELD_CONNECTION = 25;
      GameCmds.FIELD_USER_SEX = 26;
      GameCmds.FIELD_PROVINCE = 27;
      GameCmds.FIELD_CITY = 28;
      GameCmds.FIELD_AREA = 29;
      GameCmds.FIELD_AVATARURL = 30;
      GameCmds.FIELD_AGE = 31;
      GameCmds.FIELD_AVATAR_NC = 32;
      GameCmds.FIELD_HAVE_MOBILE = 33;
      GameCmds.FIELD_HAVE_PHONECHAT = 34;
      GameCmds.FIELD_PHONE_NUM = 35;
      GameCmds.FIELD_SPECIAL_FLAG = 36;
      GameCmds.FIELD_SPECIAL_GRADE_NAME = 37;
      GameCmds.FIELD_USER_LOGO = 38;
      GameCmds.FIELD_GLORY_SCORE = 39;
      GameCmds.FIELD_GLORY_INFO = 40;
      GameCmds.FIELD_MEMBER_SCORE = 41;
      GameCmds.FITLE_MEMBER_CLASS = 42;
      GameCmds.FITLE_FAME = 43;
      GameCmds.FIELD_QQ = 44;
      GameCmds.FIELD_LOCATION = 45;
      GameCmds.FIELD_FACECHANGEINDEX = 46;
      return GameCmds;
    }();
    exports.GameCmds = GameCmds;
    var CMD_GR_RoomOption = function() {
      function CMD_GR_RoomOption() {
        this.lMinScore = -2147483647;
        this.lMaxScore = 2147483647;
        this.wNetTimelag = 65535;
        this.wEscape = 65535;
        this.cbIPLimmit = 0;
      }
      CMD_GR_RoomOption.prototype.serialize = function() {
        var ret = new ByteArray_1.ByteArray();
        ret.writeInt(this.lMinScore);
        ret.writeInt(this.lMaxScore);
        ret.writeShort(this.wNetTimelag);
        ret.writeShort(this.wEscape);
        ret.writeByte(this.cbIPLimmit);
        return ret;
      };
      return CMD_GR_RoomOption;
    }();
    exports.CMD_GR_RoomOption = CMD_GR_RoomOption;
    var CMD_GR_BroadCast_TableStatus = function() {
      function CMD_GR_BroadCast_TableStatus() {
        this.wTableID = 65535;
        this.cbTableStatus = 255;
      }
      CMD_GR_BroadCast_TableStatus.prototype.deserialize = function(buf) {
        this.wTableID = buf.readUnsignedShort();
        this.cbTableStatus = buf.readUnsignedByte();
      };
      return CMD_GR_BroadCast_TableStatus;
    }();
    exports.CMD_GR_BroadCast_TableStatus = CMD_GR_BroadCast_TableStatus;
    var CMD_GR_GameInfo = function() {
      function CMD_GR_GameInfo() {
        this.bufReserved = new ByteArray_1.ByteArray();
      }
      CMD_GR_GameInfo.prototype.deserialize = function(buf) {
        this.cbGameKindID = buf.readUnsignedByte();
        this.cbEnableLookOn = buf.readUnsignedByte();
        this.uServerID = buf.readUnsignedInt();
        this.wTableCount = buf.readUnsignedShort();
        this.cbTableUser = buf.readUnsignedByte();
        this.bufReserved = new ByteArray_1.ByteArray();
        buf.readBytes(this.bufReserved);
      };
      return CMD_GR_GameInfo;
    }();
    exports.CMD_GR_GameInfo = CMD_GR_GameInfo;
    var CMD_GR_BroadCast_UserScore = function() {
      function CMD_GR_BroadCast_UserScore() {
        this.cbScoreBuf = new ByteArray_1.ByteArray();
      }
      CMD_GR_BroadCast_UserScore.prototype.deserialize = function(buf) {
        this.dwUserDBID = buf.readUnsignedInt();
        this.cbScoreSize = buf.readUnsignedByte();
        buf.readBytes(this.cbScoreBuf);
      };
      return CMD_GR_BroadCast_UserScore;
    }();
    exports.CMD_GR_BroadCast_UserScore = CMD_GR_BroadCast_UserScore;
    var CMD_GR_Req_UserSit = function() {
      function CMD_GR_Req_UserSit() {
        this.wNetSpeed = 0;
        this.wTableID = 0;
        this.cbCreateTable = 0;
        this.szTablePass = "";
      }
      CMD_GR_Req_UserSit.prototype.serialize = function() {
        var ba = new ByteArray_1.ByteArray();
        ba.writeUnsignedShort(this.wNetSpeed);
        ba.writeUnsignedShort(this.wTableID);
        ba.writeByte(this.cbChairID);
        ba.writeByte(this.cbCreateTable);
        TSCommon_1.TSCommon.writeStringWithLength(ba, this.szTablePass, 16);
        return ba;
      };
      return CMD_GR_Req_UserSit;
    }();
    exports.CMD_GR_Req_UserSit = CMD_GR_Req_UserSit;
    var CMD_GR_Req_UserLookOn = function() {
      function CMD_GR_Req_UserLookOn() {
        this.wNetSpeed = 0;
        this.wTableID = 0;
        this.cbPassLen = 0;
        this.szTablePass = "";
      }
      CMD_GR_Req_UserLookOn.prototype.serialize = function() {
        var ba = new ByteArray_1.ByteArray();
        ba.writeUnsignedShort(this.wNetSpeed);
        ba.writeUnsignedShort(this.wTableID);
        ba.writeByte(this.cbChairID);
        ba.writeByte(this.cbPassLen);
        TSCommon_1.TSCommon.writeStringWithLength(ba, this.szTablePass, 16);
        return ba;
      };
      return CMD_GR_Req_UserLookOn;
    }();
    exports.CMD_GR_Req_UserLookOn = CMD_GR_Req_UserLookOn;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray"
  } ],
  GameDefs: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dc4361fjS9LBqsH+NGsYJLn", "GameDefs");
    "use strict";
    var _ByteArray = require("../common/ByteArray");
    var GameDefs = {};
    GameDefs.PLAYER_COUNT = 4;
    GameDefs.MAX_MJ_INDEX = 27;
    GameDefs.MAX_HOLD_CARD = 14;
    GameDefs.MAX_WEAVE = 4;
    GameDefs.MAX_OUT_CARDS = 28;
    GameDefs.MAJIANG_COUNT = 108;
    GameDefs.HONG_ZHONG = 27;
    GameDefs.MAX_SCORE_TIMES = 30;
    GameDefs.INVALID_CARD = GameDefs.MAX_MJ_INDEX;
    GameDefs.INVALID_CHAIR = 5;
    GameDefs.INDEX_REPLACE_CARD = GameDefs.MAX_MJ_INDEX - 1;
    GameDefs.MAX_LEFT_WALL = GameDefs.MAJIANG_COUNT - 52 - 1;
    GameDefs.MJ_CMD_OUT = 1;
    GameDefs.MJ_CMD_GET = 2;
    GameDefs.MJ_CMD_PASS = 3;
    GameDefs.MJ_CMD_EATLEFT = 4;
    GameDefs.MJ_CMD_EATMID = 5;
    GameDefs.MJ_CMD_EATRIGHT = 6;
    GameDefs.MJ_CMD_PENG = 7;
    GameDefs.MJ_CMD_GANG = 8;
    GameDefs.MJ_CMD_HU = 9;
    GameDefs.MJ_CMD_ROOMINFO = 10;
    GameDefs.MJ_DISSOLVE_ROOM = 11;
    GameDefs.MJ_DISSOLVE_RESULT = 12;
    GameDefs.MJ_CMD_SETINFO = 13;
    GameDefs.MJ_CMD_DissINFO = 14;
    GameDefs.MJ_CMD_NOTICE_DISS = 18;
    GameDefs.MJ_CMD_Cancel_AutoOut = 19;
    GameDefs.MJ_CMD_AutoOut = 20;
    GameDefs.MJ_CMD_PoChan = 21;
    GameDefs.MJ_CMD_ERROR = 22;
    GameDefs.CMD_Notify_Diss = 23;
    GameDefs.CMD_Notify_UpGrade = 24;
    GameDefs.MJ_CMD_Exchange = 15;
    GameDefs.MJ_CMD_DingQue = 16;
    GameDefs.CMD_PROPERTY = 25;
    GameDefs.MJ_CMD_SHOW_HU_SCORE = 26;
    GameDefs.CardType = {
      wan: 0,
      tiao: 1,
      tong: 2,
      InvalidCardType: 3
    };
    GameDefs.GetCardType = function(nCard) {
      var nCardType = GameDefs.CardType.InvalidCardType;
      nCardType = nCard / 9;
      return nCardType;
    };
    GameDefs.WeaveType = {
      InvalidType: 0,
      Peng: 1,
      MingGang: 2,
      XuGang: 3,
      AnGang: 4,
      xueliuGang: 5,
      LaiziGang: 6,
      ShunLeft: 7,
      ShunMid: 8,
      ShunRight: 9,
      FangGang: 10
    };
    GameDefs.EndStatus = {
      InvalidHuType: 0,
      PiHu: 1,
      TianHu: 2,
      DiHu: 3,
      With19: 4,
      QingYiSe: 5,
      JiangDui: 6,
      PengPengHu: 7,
      QiDui: 8,
      HaoHuaQiDui: 9,
      QingQiDui: 10,
      QingLongQiDui: 11,
      QingDui: 12,
      HaiDiLao: 13,
      HideMingGang: 14,
      HideAnGang: 15,
      QiangGangHu: 16,
      GangShangKaiHua: 17,
      GangShangPao: 18,
      MenQing: 19,
      ZhongZhang: 20,
      ShouZhuaYi: 21,
      ZimoJiaDi: 22,
      ZimoJiaFan: 23,
      QingJinGouGou: 24,
      JiangJinGouGou: 25,
      ShiBaLuoHan: 26,
      QingShiBaLuoHan: 27
    };
    GameDefs.HUTYPE_STRING = [ "平胡", "天胡", "地胡", "带幺九", "清一色", "将对", "碰碰胡", "七对", "龙七对", "清七对", "清龙七对", "清对", "海底捞", "隐藏明杠", "隐藏暗杠", "抢杠胡", "杠上花", "杠上炮", "门清", "中张", "金钩胡", "自摸加底", "自摸加番", "清金钩钩", "将金钩钩", "十八罗汉", "清十八罗汉" ];
    GameDefs.SCORE_TYPE_STRING = [ "放炮", "自摸", "刮风", "下雨", "下雨", "查大叫", "被查花猪", "空" ];
    GameDefs.OTHER_SCORE_TYPE_STRING = [ "被放炮", "被自摸", "被刮风", "被下雨", "被下雨", "被查大叫", "被查花猪", "空" ];
    GameDefs.scoreType = {
      scoreFangPao: 0,
      scoreZimo: 1,
      scoreAnGang: 2,
      scoreMingGang: 3,
      scoreXuGang: 4,
      scoreChaDaJiao: 5,
      ScoreChaHuaZhu: 6,
      InvalidScoreType: 7
    };
    GameDefs.EndType = {
      Fangpao: 0,
      Zimo: 1,
      Liuju: 2,
      RenShu: 3,
      Jiesan: 4
    };
    GameDefs.GamePhase = {
      PhaseFree: 0,
      PhaseStart: 1,
      PhaseExchange: 2,
      PhasePlayExchange: 3,
      PhaseDingque: 4,
      PhasePlayDingque: 5,
      PhaseOutCard: 6,
      PhaseWaitChoice: 7,
      PhaseEnd: 8,
      PhasePlayHu: 9
    };
    GameDefs.PlayerAction = {
      paNothing: 0,
      paOutCard: 1,
      paGet1CardFromHeader: 2,
      paGet1CardFromTail: 4,
      paPatchFlower: 8,
      paPeng: 16,
      paGang: 32,
      paHu: 64,
      paEat: 128,
      PaExt: 256
    };
    GameDefs.tagWeaveItem = function(ba) {
      var tag = {};
      tag.cbWeaveKind = ba.readUnsignedByte();
      tag.cbChair = ba.readUnsignedByte();
      tag.cbCardData = [];
      tag.cbCardData[0] = ba.readUnsignedByte();
      tag.cbCardData[1] = ba.readUnsignedByte();
      tag.cbCardData[2] = ba.readUnsignedByte();
      tag.cbCardData[3] = ba.readUnsignedByte();
      return tag;
    };
    GameDefs.PlayerInfo = function(ba) {
      var player = {};
      player.cbLastCard = ba.readUnsignedByte();
      player.cbLastOutCard = ba.readUnsignedByte();
      player.cbHoldCardCount = ba.readUnsignedByte();
      player.cbHoldCards = [];
      for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) player.cbHoldCards[i] = ba.readUnsignedByte();
      player.showCardSuits = [];
      player.nWeaveCount = 0;
      for (var i = 0; i < GameDefs.MAX_WEAVE; i++) {
        player.showCardSuits[i] = GameDefs.tagWeaveItem(ba);
        player.showCardSuits[i].cbWeaveKind != GameDefs.WeaveType.InvalidType && (player.nWeaveCount = player.nWeaveCount + 1);
      }
      player.cbOutCards = [];
      for (var i = 0; i < GameDefs.MAX_OUT_CARDS; i++) player.cbOutCards[i] = ba.readUnsignedByte();
      player.cbDingque = ba.readUnsignedByte();
      player.cbAutoOutCard = ba.readUnsignedByte();
      player.cbExchange = {};
      for (var i = 0; i < 3; i++) player.cbExchange[i] = ba.readUnsignedByte();
      player.cbBeExchange = {};
      for (var i = 0; i < 3; i++) player.cbBeExchange[i] = ba.readUnsignedByte();
      player.cbIsHu = ba.readUnsignedByte();
      player.cbHuCount = ba.readUnsignedByte();
      player.cbHuCards = {};
      var nCount = 0;
      for (var i = 0; i < 27; i++) {
        var nMj = ba.readUnsignedByte();
        if (nMj < 27) {
          player.cbHuCards[nCount] = nMj;
          nCount += 1;
        }
      }
      return player;
    };
    GameDefs.PLAYER_ACTION = function(ba) {
      var pAction = {};
      pAction.nAction = ba.readShort();
      pAction.nChair = ba.readByte();
      pAction.nParam = ba.readInt();
      return pAction;
    };
    GameDefs.IsLaiZi = function(cbCard, cbLaizi) {
      if (cbCard == GameDefs.HONG_ZHONG) return true;
      if (cbCard == cbLaizi) return true;
      return false;
    };
    GameDefs.newTing = function(ba) {
      var st_tingInfo = {};
      st_tingInfo.cbOutCard = ba.readByte();
      st_tingInfo.cbTingCount = ba.readByte();
      st_tingInfo.cbTingCard = [];
      for (var i = 0; i < st_tingInfo.cbTingCount; i++) st_tingInfo.cbTingCard[i] = ba.readByte();
      return st_tingInfo;
    };
    GameDefs.newTing_EX = function(ba) {
      var st_tingInfo = {};
      st_tingInfo.cbOutCard = ba.readByte();
      st_tingInfo.cbTingCount = ba.readByte();
      st_tingInfo.cbTingCard = [];
      for (var i = 0; i < st_tingInfo.cbTingCount; i++) st_tingInfo.cbTingCard[i] = ba.readByte();
      st_tingInfo.cbFan = [];
      for (var i = 0; i < st_tingInfo.cbTingCount; i++) st_tingInfo.cbFan[i] = ba.readByte();
      st_tingInfo.cbLeftCount = [];
      for (var i = 0; i < st_tingInfo.cbTingCount; i++) st_tingInfo.cbLeftCount[i] = ba.readByte();
      return st_tingInfo;
    };
    GameDefs.ST_Single_Score = function(ba) {
      var single_Score = {};
      single_Score.cbScoreType = 0;
      single_Score.cbFan = 0;
      single_Score.cbWinChair = 0;
      single_Score.cbFangpaoChair = 0;
      single_Score.cbHuTypeCount = 0;
      single_Score.cbHuType = {};
      single_Score.cbGen = 0;
      single_Score.nScore = 0;
      if (ba.bytesAvailable > 0) {
        single_Score.cbScoreType = ba.readByte();
        single_Score.cbFan = ba.readByte();
        single_Score.cbWinChair = ba.readByte();
        single_Score.cbFangpaoChair = ba.readByte();
        single_Score.cbHuTypeCount = ba.readByte();
        for (var i = 0; i < single_Score.cbHuTypeCount; i++) single_Score.cbHuType[i] = ba.readByte();
        single_Score.cbGen = ba.readByte();
        single_Score.nScore = ba.readInt();
      }
      return single_Score;
    };
    GameDefs.GameEnd = function(ba) {
      var stWinStruct = {};
      stWinStruct.cbWriteScoreTimes = {};
      for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) stWinStruct.cbWriteScoreTimes[i] = ba.readByte();
      stWinStruct.stSingleScore = {};
      for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) {
        stWinStruct.stSingleScore[i] = {};
        for (var j = 0; j < stWinStruct.cbWriteScoreTimes[i]; j++) stWinStruct.stSingleScore[i][j] = GameDefs.ST_Single_Score(ba);
      }
      stWinStruct.nFinalScore = {};
      for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) stWinStruct.nFinalScore[i] = ba.readInt();
      stWinStruct.nSrcScore = {};
      for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) stWinStruct.nSrcScore[i] = ba.readInt();
      stWinStruct.cbWall = {};
      return stWinStruct;
    };
    GameDefs.GameScene = function(ba) {
      var gs = {};
      gs.cbPhase = ba.readByte();
      gs.cbBanker = ba.readByte();
      gs.cbBankerCount = ba.readByte();
      gs.cbWhosTurn = ba.readByte();
      gs.cbFirstDice = ba.readByte();
      gs.cbSecondDice = ba.readByte();
      gs.cbGetCard = ba.readByte();
      gs.cbCurrentIndex = ba.readByte();
      gs.cbLastIndex = ba.readByte();
      gs.cbCurrentCard = ba.readByte();
      gs.players = [];
      for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) gs.players[i] = GameDefs.PlayerInfo(ba);
      gs.LastAction = GameDefs.PLAYER_ACTION(ba);
      gs.CurrentPlayerAction = GameDefs.PLAYER_ACTION(ba);
      gs.ChoiceAction = [];
      for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) gs.ChoiceAction[i] = ba.readShort();
      gs.stWinStruct = {};
      gs.cbPhase == GameDefs.GamePhase.PhaseEnd && (gs.stWinStruct = GameDefs.GameEnd(ba));
      gs.cbTingCardCount = 0;
      gs.vTingList = [];
      if (ba.bytesAvailable > 0) {
        gs.cbTingCardCount = ba.readByte();
        if (gs.cbTingCardCount > 0) for (var i = 0; i < gs.cbTingCardCount; i++) {
          var stTing = GameDefs.newTing(ba);
          gs.vTingList[gs.vTingList.length] = stTing;
        }
      }
      if (ba.bytesAvailable > 0) {
        gs.cbTingCardCount = ba.readByte();
        if (gs.cbTingCardCount > 0) for (var i = 0; i < gs.cbTingCardCount; i++) {
          var stTing = GameDefs.newTing_EX(ba);
          gs.vTingList[gs.vTingList.length] = stTing;
        }
      }
      return gs;
    };
    GameDefs.ST_RoomInfo = function(ba) {
      var roomInfo = {
        nTurnBasicGold: 0,
        nCost: 0,
        nMinRoomGold: 0,
        nMaxRoomGold: 0,
        nRuleID: 0,
        cbLaiType: 0
      };
      if (null != ba) {
        roomInfo.nTurnBasicGold = ba.readInt();
        roomInfo.nCost = ba.readInt();
        roomInfo.nMinRoomGold = ba.readInt();
        roomInfo.nMaxRoomGold = ba.readInt();
        roomInfo.nRuleID = ba.readInt();
        roomInfo.cbLaiType = ba.readUnsignedByte();
        ba.bytesAvailable > 0 && (roomInfo.nPlayerCount = ba.readInt());
      }
      return roomInfo;
    };
    GameDefs.ST_SetInfo = function(ba) {
      var setInfo = {
        nRoomID: 0,
        nCurSet: 0,
        nTotalSet: 0,
        cbBaseScore: 0,
        nRoomOwner: 0,
        nExt: 0,
        cbGradeIndex: Array(),
        szBatchID: String
      };
      if (null != ba) {
        setInfo.nRoomID = ba.readInt();
        setInfo.nCurSet = ba.readInt();
        setInfo.nTotalSet = ba.readInt();
        setInfo.cbBaseScore = ba.readInt();
        setInfo.nRoomOwner = ba.readInt();
        setInfo.nExt = ba.readInt();
        for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) setInfo.cbGradeIndex.push(ba.readUnsignedByte());
        setInfo.szBatchID = ba.readUTFBytes(32);
      }
      return setInfo;
    };
    GameDefs.ST_Property = {};
    GameDefs.ST_Property.new = function(ba) {
      var property = {
        nPropertyID: 0,
        nPayMoney: 0,
        nChairNum: 0,
        cbSendChair: 0,
        cbToChair: 0,
        bSuccess: false
      };
      if (ba) {
        property.nPropertyID = ba.readInt();
        property.nPayMoney = ba.readInt();
        property.nChairNum = ba.readInt();
        property.cbSendChair = ba.readUnsignedByte();
        property.cbToChair = ba.readUnsignedByte();
        property.bSuccess = ba.readBoolean();
      }
      return property;
    };
    module.exports = GameDefs;
    cc._RF.pop();
  }, {
    "../common/ByteArray": "ByteArray"
  } ],
  GameEntrance: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b11eJuUCJFibSQM9jrbpSW", "GameEntrance");
    "use strict";
    var HallResources = require("HallResources");
    var GameEntrance = cc.Class({});
    GameEntrance.start = function(gameID, logonIP, logonPort, webRoot) {
      var gameLibSink = require("GameLibSink").getInstance();
      gameLibSink.run(gameID, logonIP, logonPort, webRoot);
      HallResources.recordPlayerLogToServer(HallResources.recordList.room_res_start);
    };
    cc._RF.pop();
  }, {
    GameLibSink: "GameLibSink",
    HallResources: "HallResources"
  } ],
  GameIDList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a684ecTPyxC47NHCPWL9Eh2", "GameIDList");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameServerList_1 = require("./GameServerList");
    var GameIDList = function() {
      function GameIDList() {
        this.m_list = new Array();
      }
      GameIDList.prototype.clearServerList = function() {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          v.clearServerList();
        }
        this.m_list = new Array();
      };
      GameIDList.prototype.addGameID = function(gameid) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == gameid) return;
        }
        var serverList = new GameServerList_1.GameServerList(gameid);
        this.m_list.push(serverList);
      };
      GameIDList.prototype.addStation = function(pStation) {
        if (null == pStation || null == pStation.dwParentID) return null;
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == pStation.dwParentID) return v.addStation(pStation);
        }
        return null;
      };
      GameIDList.prototype.addGameServer = function(pGameServer) {
        if (null == pGameServer || null == pGameServer.dwKindID) return null;
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == pGameServer.dwKindID) return v.addGameServer(pGameServer);
        }
        return null;
      };
      GameIDList.prototype.getStation = function(stationID) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          var station = v.getStation(stationID);
          if (station) return station;
        }
        return null;
      };
      GameIDList.prototype.getGameServer = function(nServerID) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          var station = v.getGameServer(nServerID);
          if (station) return station;
        }
        return null;
      };
      GameIDList.prototype.getGameStationByName = function(gameID, stationName) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == gameID) return v.getGameStationByName(stationName);
        }
        return null;
      };
      GameIDList.prototype.getStationList = function(gameID) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == gameID) return v.getStatonList();
        }
        return new Array();
      };
      GameIDList.prototype.getGameServerList = function(gameID, stationID) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == gameID) return v.getGameServerList(stationID);
        }
        return new Array();
      };
      GameIDList.prototype.getAllGameServerList = function(gameID) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == gameID) return v.getAllGameServerList();
        }
        return new Array();
      };
      GameIDList.prototype.getOneGameServerInStation = function(gameID, nStationID) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == gameID) return v.getOneGameServerInStation(nStationID);
        }
        return null;
      };
      GameIDList.prototype.getStationOnlineCount = function(gameID, nStationID) {
        for (var key in this.m_list) {
          var v = this.m_list[key];
          if (v.GameID == gameID) return v.getStationOnlineCount(nStationID);
        }
        return 0;
      };
      return GameIDList;
    }();
    exports.GameIDList = GameIDList;
    cc._RF.pop();
  }, {
    "./GameServerList": "GameServerList"
  } ],
  GameInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1dd25+CRBhM+LHI79cUISlr", "GameInfo");
    "use strict";
    var GameInfo = cc.Class({
      ctor: function ctor() {
        this.m_iId = 0;
        this.m_sCn = "";
        this.m_sEn = "";
        this.m_iIv = 0;
        this.m_sServeIp = "";
        this.m_iPort = 0;
        this.m_sVersion = "1.0.1";
        this.m_sDir = "";
        this.m_sWr = "";
      }
    });
    cc.GameInfo = module.exprots = GameInfo;
    cc._RF.pop();
  }, {} ],
  GameJudge: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7e1d9aylv5Go73JyM0zS1We", "GameJudge");
    "use strict";
    var GameDefs = require("GameDefs");
    var gameJudge = {};
    gameJudge.handCardIsHaveFourSame = function(vMjPalyer) {
      var vTableNum = new Array();
      var asNum = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) asNum[i] = 0;
      for (var i = 0; i < vMjPalyer.cbHoldCardCount; i++) {
        var nV = vMjPalyer.cbHoldCards[i];
        nV < GameDefs.MAX_MJ_INDEX && (asNum[nV] = asNum[nV] + 1);
      }
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) 4 == asNum[i] && vTableNum.push(i);
      if (vTableNum.length > 0) return {
        bIsExist: true,
        vCardArray: vTableNum
      };
      return {
        bIsExist: false,
        vCardArray: vTableNum
      };
    };
    gameJudge.handCardIsHaveThreeSame = function(vMjPalyer, nCurrentMjV) {
      var asNum = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) asNum[i] = 0;
      for (var i = 0; i < vMjPalyer.cbHoldCardCount; i++) {
        var nV = vMjPalyer.cbHoldCards[i];
        nV < GameDefs.MAX_MJ_INDEX && (asNum[nV] = asNum[nV] + 1);
      }
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) if (3 == asNum[i] && i == nCurrentMjV) return {
        bIsExist: true,
        vCardValue: i
      };
      return {
        bIsExist: false,
        vCardValue: -1
      };
    };
    gameJudge.handCardIsHaveOneSameToWave = function(vMjPalyer) {
      var vTableNum = new Array();
      var asNum = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) asNum[i] = 0;
      for (var i = 0; i < vMjPalyer.cbHoldCardCount; i++) {
        var nV = vMjPalyer.cbHoldCards[i];
        nV < GameDefs.MAX_MJ_INDEX && (asNum[nV] = asNum[nV] + 1);
      }
      for (var i = 0; i < GameDefs.MAX_WEAVE; i++) {
        var tagWeaveItem = vMjPalyer.showCardSuits[i];
        tagWeaveItem.cbWeaveKind == GameDefs.WeaveType.Peng && 1 == asNum[tagWeaveItem.cbCardData[0]] && vTableNum.push(tagWeaveItem.cbCardData[0]);
      }
      if (vTableNum.length > 0) return {
        bIsExist: true,
        vCardArray: vTableNum
      };
      return {
        bIsExist: false,
        vCardArray: vTableNum
      };
    };
    gameJudge.CanShunLeft = function(cbCard, cbHoldCards, cbHoldCardCount, cbLaizi) {
      if (cbCard >= GameDefs.HONG_ZHONG) return false;
      if (cbCard % 9 > 6) return false;
      var cbCardIndex = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) cbCardIndex[i] = 0;
      for (var i = 0; i < cbHoldCardCount; i++) cbCardIndex[cbHoldCards[i]] = cbCardIndex[cbHoldCards[i]] + 1;
      if (cbCardIndex[cbCard + 1] > 0 && cbCardIndex[cbCard + 2] > 0) return true;
      return false;
    };
    gameJudge.CanShunMid = function(cbCard, cbHoldCards, cbHoldCardCount, cbLaizi) {
      if (cbCard >= GameDefs.HONG_ZHONG) return false;
      if (cbCard % 9 == 8 || cbCard % 9 == 0) return false;
      var cbCardIndex = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) cbCardIndex[i] = 0;
      for (var i = 0; i < cbHoldCardCount; i++) cbCardIndex[cbHoldCards[i]] = cbCardIndex[cbHoldCards[i]] + 1;
      if (cbCardIndex[cbCard + 1] > 0 && cbCardIndex[cbCard - 1] > 0) return true;
      return false;
    };
    gameJudge.CanShunRight = function(cbCard, cbHoldCards, cbHoldCardCount, cbLaizi) {
      if (cbCard >= GameDefs.HONG_ZHONG) return false;
      if (cbCard % 9 < 2) return false;
      var cbCardIndex = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) cbCardIndex[i] = 0;
      for (var i = 0; i < cbHoldCardCount; i++) cbCardIndex[cbHoldCards[i]] = cbCardIndex[cbHoldCards[i]] + 1;
      if (cbCardIndex[cbCard - 1] > 0 && cbCardIndex[cbCard - 2] > 0) return true;
      return false;
    };
    gameJudge.handCardIsHaveThreeLaiZiPi = function(vMjPalyer, laizipiValue) {
      var asNum = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) asNum[i] = 0;
      for (var i = 0; i < vMjPalyer.cbHoldCardCount; i++) {
        var nV = vMjPalyer.cbHoldCards[i];
        nV < GameDefs.MAX_MJ_INDEX && (asNum[nV] = asNum[nV] + 1);
      }
      if (3 == asNum[laizipiValue]) return {
        bIsExist: true,
        vCardValue: laizipiValue
      };
      return {
        bIsExist: false,
        vCardValue: -1
      };
    };
    gameJudge.handCardIsHaveTwoLaiZiPi = function(vMjPalyer, laizipiValue, nCurrentMjV) {
      var asNum = new Array();
      for (var i = 0; i < GameDefs.MAX_MJ_INDEX; i++) asNum[i] = 0;
      for (var i = 0; i < vMjPalyer.cbHoldCardCount; i++) {
        var nV = vMjPalyer.cbHoldCards[i];
        nV < GameDefs.MAX_MJ_INDEX && (asNum[nV] = asNum[nV] + 1);
      }
      if (2 == asNum[laizipiValue] && laizipiValue == nCurrentMjV) return {
        bIsExist: true,
        vCardValue: laizipiValue
      };
      return {
        bIsExist: false,
        vCardValue: -1
      };
    };
    module.exports = gameJudge;
    cc._RF.pop();
  }, {
    GameDefs: "GameDefs"
  } ],
  GameLibSink: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f170b3E6ltA8Ka6gMfm52aP", "GameLibSink");
    "use strict";
    var _CGameLib = require("../gamelib/CGameLib");
    var _TSCommon = require("../TSCommon");
    var _gamelibcommon = require("../gamelib/gamelibcommon");
    var ClientFrameSink = require("ClientFrameSink");
    var HallResources = require("HallResources");
    var GameLibSink = cc.Class({
      statics: {
        instance: null
      },
      m_gameLib: null,
      _clientFrameSink: null,
      ctor: function ctor() {
        this._clientFrameSink = new ClientFrameSink();
        this.m_gameLib = _CGameLib.CGameLib.getInstance();
        this.m_gameId = 0;
      },
      run: function run(gameID, logonIP, logonPort, webRoot) {
        if (gameID) {
          this.m_gameId = gameID;
          _CGameLib.CGameLib.getInstance().createGamelib(gameID, 1, this, this._clientFrameSink, 10001, 10101, logonIP, logonPort, webRoot);
        }
      },
      getGameId: function getGameId() {
        return this.m_gameId;
      },
      getGameLib: function getGameLib() {
        return this.m_gameLib;
      },
      onLogonFinished: function onLogonFinished() {
        cc.log("onLogonFinished");
      },
      onPlazaGoldChanged: function onPlazaGoldChanged() {},
      onRefreshUserInfo: function onRefreshUserInfo() {},
      onChargeInfoRefeshRet: function onChargeInfoRefeshRet(result) {},
      onSendSpeakerRet: function onSendSpeakerRet(cbRetCode) {},
      onLogonFailed: function onLogonFailed(errorStr, nFaileType) {},
      onEnteredGameRoom: function onEnteredGameRoom(tableCount, chairCount) {
        cc.log("GameLibSink:onEnteredGameRoom");
        this.m_chairCount = chairCount;
        cc.director.loadScene("XueLiuGameScene", function() {
          require("HallResources").getInstance().removeLoading();
          HallResources.recordPlayerLogToServer(HallResources.recordList.room_res_end);
        });
        cc.log("onEnteredGameRoom");
      },
      onEnterGameRoomFailed: function onEnterGameRoomFailed(errorStr) {},
      onRoomConnectClosed: function onRoomConnectClosed() {
        console.log(" --------------onRoomConnectClosed--------------");
        cc.director.loadScene("HallPlatformScene");
      },
      onEnterGameView: function onEnterGameView() {},
      onLeaveGameView: function onLeaveGameView() {},
      onRoomUserEnter: function onRoomUserEnter(userID) {
        cc.log("onRoomUserEnter");
      },
      onRoomUserExit: function onRoomUserExit(userID) {},
      onRoomUserInfoUpdated: function onRoomUserInfoUpdated(userID) {
        var pMyself = this.getGameLib().getMyself();
        if (!pMyself) return;
        if (userID == pMyself.getUserID()) {
          var logonInfo = this.getGameLib().getUserLogonInfo();
          logonInfo.dwGold = pMyself.getGold();
          logonInfo.nScore = pMyself.getScoreField(_gamelibcommon.gamelibcommon.enScore_Score);
          logonInfo.nWin = pMyself.getScoreField(_gamelibcommon.gamelibcommon.enScore_Win);
          logonInfo.nLose = pMyself.getScoreField(_gamelibcommon.gamelibcommon.enScore_Loss);
          logonInfo.nFlee = pMyself.getScoreField(_gamelibcommon.gamelibcommon.enScore_Flee);
          logonInfo.nDraw = pMyself.getScoreField(_gamelibcommon.gamelibcommon.enScore_Draw);
          this._clientFrameSink.m_dataEventHandler ? this._clientFrameSink.m_dataEventHandler.emit("updateUserInfo", {
            user: pMyself
          }) : _TSCommon.TSCommon.performWithDelay(this, this.onRoomUserInfoUpdated, .2);
        } else {
          var pUser = this.getGameLib().getUser(userID);
          if (!pUser) return;
          if (pMyself.getUserTableID() != pUser.getUserTableID()) return;
          this._clientFrameSink.m_dataEventHandler ? this._clientFrameSink.m_dataEventHandler.emit("updateUserInfo", {
            user: pUser
          }) : _TSCommon.TSCommon.performWithDelay(this, this.onRoomUserInfoUpdated, .2);
        }
      },
      onTableInfoChanged: function onTableInfoChanged(tableID) {},
      onRecvHallChat: function onRecvHallChat(chat) {},
      onRecvTableChat: function onRecvTableChat(chat) {
        this._clientFrameSink.m_dataEventHandler ? this._clientFrameSink.m_dataEventHandler.emit("onRecvTableChat", {
          chatMsg: chat
        }) : _TSCommon.TSCommon.performWithDelay(this, this.onRecvTableChat, .2);
      },
      onShowAlertMsg: function onShowAlertMsg(msg) {},
      onLogonGameRoomSucceeded: function onLogonGameRoomSucceeded() {},
      onChangeUserInfoRet: function onChangeUserInfoRet(cbRetCode) {},
      onTaskInfo: function onTaskInfo(cbRetCode, pTaskList) {},
      onTaskGift: function onTaskGift(nTaskID, cbRetCode) {},
      onNewStatus: function onNewStatus(nNewMissionDone, nNewMail, nNewActivity, nNewFriend, bLoginGift) {},
      onBankInfo: function onBankInfo(nBankAmount, nBankCapacity) {},
      onCreatePrivateTableFailed: function onCreatePrivateTableFailed(lpszErrorMsg) {},
      onEnterPrivateTableFailed: function onEnterPrivateTableFailed(lpszErrorMsg) {},
      onGameBankOpeReturn: function onGameBankOpeReturn(succeeded, gold, bank) {},
      onShowGameSystemMsg: function onShowGameSystemMsg(msg) {},
      onSpeaker: function onSpeaker(msg, priorty) {}
    });
    GameLibSink.getInstance = function() {
      null == GameLibSink.instance && (GameLibSink.instance = new GameLibSink());
      return GameLibSink.instance;
    };
    module.exports = GameLibSink;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon",
    "../gamelib/CGameLib": "CGameLib",
    "../gamelib/gamelibcommon": "gamelibcommon",
    ClientFrameSink: "ClientFrameSink",
    HallResources: "HallResources"
  } ],
  GameMatchLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac115BENalBiIz02EHynyWD", "GameMatchLayer");
    "use strict";
    var _TSCommon = require("../hall/TSCommon");
    var HallResources = require("HallResources");
    cc.Class({
      extends: cc.Component,
      properties: {
        match_status: {
          default: null,
          type: cc.Sprite
        },
        match_timer: {
          default: null,
          type: cc.Label
        },
        matched_num: {
          default: null,
          type: cc.Label
        },
        match_players: {
          default: null,
          type: cc.Node
        },
        match_success: cc.SpriteFrame,
        player_avator: cc.SpriteFrame,
        unkown_avator: cc.SpriteFrame
      },
      onLoad: function onLoad() {
        this.init();
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        var self = this;
        require("HallUtils").isIPhoneX() && cc.loader.loadRes("texture/hallRes/iphonex_bg", cc.SpriteFrame, function(error, spriteframe) {
          var bgSp = self.node.getChildByName("hall_bg").getComponent(cc.Sprite);
          error || (bgSp.spriteFrame = spriteframe);
        });
      },
      init: function init() {
        this.m_waitTimer = 20;
        this.match_timer.string = this.m_waitTimer;
        this.matched_num.string = 0;
      },
      onEnable: function onEnable() {
        var self = this;
        if (this.m_waitID) {
          this.init();
          this.repeatRequest = function() {
            var callback = function callback(success, data) {
              if (success) {
                var jsonObject = JSON.parse(data);
                console.log("jsonObject ===========");
                console.log(jsonObject);
                self.refreshMatchPlayer(jsonObject.table);
                self.matched_num.string = jsonObject.table.length;
                if (1 == parseInt(jsonObject.RetCode)) {
                  require("HallResources").getInstance().showLoading();
                  self.match_status.spriteFrame = self.match_success;
                  var nRoomNo = jsonObject.RoomNo;
                  var onMathEnd = function onMathEnd(success, data) {
                    self.unschedule(self.repeatRequest);
                    self.unschedule(self.waitTimerCallback);
                    if (success) {
                      HallResources.recordPlayerLogToServer(HallResources.recordList.pipei_end);
                      var jsonObject = JSON.parse(data).table[0];
                      var szServerIP = jsonObject.ServerIP;
                      var nPort = parseInt(jsonObject.Port);
                      var nChairCount = parseInt(jsonObject.ChairNum);
                      var gameLibSink = require("GameLibSink").getInstance();
                      gameLibSink.m_nChairCount = nChairCount;
                      gameLibSink.s_nPrivateRoomTableNo = parseInt(jsonObject.TableNo);
                      gameLibSink.s_nPrivateRoomChairNo = parseInt(jsonObject.ChairNo);
                      gameLibSink.getGameLib().enterGameRoomByIP(szServerIP, nPort);
                    }
                  };
                  require("HallWebRequest").getInstance().enterGameByRoomNo(nRoomNo, onMathEnd);
                } else 11 == parseInt(jsonObject.RetCode) ? _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "还没开始点击匹配" ]) : 12 == parseInt(jsonObject.RetCode) || 13 == parseInt(jsonObject.RetCode) && _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "房间生成失败" ]);
              }
            };
            require("HallWebRequest").getInstance().getMatchResult(self.m_waitID, callback);
          }.bind(self);
          this.repeatRequest();
          this.schedule(this.repeatRequest, 2, cc.macro.REPEAT_FOREVER, 0);
          this.waitTimerCallback = function() {
            self.m_waitTimer -= 1;
            self.m_waitTimer >= 0 ? self.match_timer.string = self.m_waitTimer : self.onMatchCloseClicked();
          };
          this.schedule(this.waitTimerCallback, 1, this.m_waitTimer, 0);
        }
      },
      onDisable: function onDisable() {
        this.unschedule(this.repeatRequest);
        this.unschedule(this.waitTimerCallback);
        for (var i = 0; i < this.match_players.childrenCount; i++) {
          var playerSprite = this.match_players.children[i].getChildByName("player").getComponent(cc.Sprite);
          playerSprite.spriteFrame = this.unkown_avator;
        }
      },
      setWaitID: function setWaitID(waitID) {
        this.m_waitID = waitID;
      },
      refreshMatchPlayer: function refreshMatchPlayer(playersArray) {
        for (var i = playersArray.length; i < this.match_players.childrenCount; i++) {
          var playerSprite = this.match_players.children[i].getChildByName("player").getComponent(cc.Sprite);
          playerSprite.spriteFrame = this.unkown_avator;
        }
        var self = this;
        var showFace = function showFace(i) {
          if (i >= self.match_players.childrenCount || i >= playersArray.length) return;
          var imgUrl = playersArray[i].WxFaceUrl;
          if (imgUrl && "" != imgUrl) {
            var playerSprite = self.match_players.children[i].getChildByName("player").getComponent(cc.Sprite);
            cc.loader.load({
              url: imgUrl,
              type: "jpg"
            }, function(err, texture) {
              if (!err && cc.isValid(playerSprite.node)) {
                playerSprite.spriteFrame = new cc.SpriteFrame(texture);
                showFace(i + 1);
              }
            });
          } else {
            var playerSprite = self.match_players.children[i].getChildByName("player").getComponent(cc.Sprite);
            playerSprite.spriteFrame = self.player_avator;
            showFace(i + 1);
          }
        };
        showFace(0);
      },
      onMatchCloseClicked: function onMatchCloseClicked() {
        var self = this;
        var callback = function callback(success, data) {
          require("HallResources").getInstance().removeLoading();
          var jsonObject = JSON.parse(data);
          if (1 == parseInt(jsonObject.RetCode)) {
            HallResources.recordPlayerLogToServer(HallResources.recordList.pipei_break);
            self.node.active = false;
          }
        };
        require("HallWebRequest").getInstance().exitMatchList(callback);
      }
    });
    cc._RF.pop();
  }, {
    "../hall/TSCommon": "TSCommon",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    HallUtils: "HallUtils",
    HallWebRequest: "HallWebRequest"
  } ],
  GamePlace: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0305NAowlCHojZ5+PZzMrZ", "GamePlace");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CMD_GP_LogonSuccess_Ex2_1 = require("./CMD_GP_LogonSuccess_Ex2");
    var PlazaCmds_1 = require("./PlazaCmds");
    var ByteArray_1 = require("../../common/ByteArray");
    var TSCommon_1 = require("../../TSCommon");
    var CMD_GP_GetGameInfo_1 = require("./CMD_GP_GetGameInfo");
    var tagGameStationEx_1 = require("../tagGameStationEx");
    var tagGameServerEx_1 = require("../tagGameServerEx");
    var GameIDList_1 = require("./GameIDList");
    var tagGameKind_1 = require("./tagGameKind");
    var tagVersionInfo_1 = require("../tagVersionInfo");
    var tagClientInfo_1 = require("../tagClientInfo");
    var CMD_CM_SysteMessage_1 = require("../CMD_CM_SysteMessage");
    var LoginType;
    (function(LoginType) {
      LoginType[LoginType["GetGameInfo"] = 0] = "GetGameInfo";
      LoginType[LoginType["GetServerList"] = 1] = "GetServerList";
    })(LoginType || (LoginType = {}));
    var GamePlace = function() {
      function GamePlace(gameLib, publicUserInfo) {
        this.m_socketType = LoginType.GetGameInfo;
        this.m_pSink = null;
        this.m_gameLib = gameLib;
        this.m_gameIDList = new GameIDList_1.GameIDList();
        this._publicUserInfo = publicUserInfo;
        TSCommon_1.TSCommon.log("password for gameplace = " + publicUserInfo.encryptPassword);
      }
      GamePlace.prototype.getGameLib = function() {
        return this.m_gameLib;
      };
      GamePlace.prototype.setSink = function(sink) {
        this.m_pSink = sink;
      };
      GamePlace.prototype.setGameID = function(gameid) {
        this.m_gameID = gameid;
      };
      GamePlace.prototype.loginGame = function() {
        this.m_pSink.onLogonFinished();
      };
      GamePlace.prototype.setServerIP = function(ip) {
        this.m_plazaIP = ip;
      };
      GamePlace.prototype.setPort = function(port) {
        this.m_plazaPort = port;
      };
      GamePlace.prototype.setWebRoot = function(webRoot) {
        this.m_webRoot = webRoot;
      };
      GamePlace.prototype.getGameInfo = function() {
        this.initWebSocket();
      };
      GamePlace.prototype.changeIP = function(ip) {
        var ba = new ByteArray_1.ByteArray();
        ba.writeUnsignedInt(ip);
        ba.position = 0;
        return ba.readUnsignedByte() + "." + ba.readUnsignedByte() + "." + ba.readUnsignedByte() + "." + ba.readUnsignedByte();
      };
      GamePlace.prototype.initWebSocket = function() {
        this.m_socket = new WebSocket("wss://" + this.m_plazaIP + ":" + this.m_plazaPort);
        this.m_socket.binaryType = "arraybuffer";
        var socket = this.m_socket;
        var self = this;
        this.m_socket.onopen = function(evt) {
          console.log("websocket was opened.");
          self.sendGetGameInfo();
        };
        this.m_socket.onmessage = function(event) {
          self.onReceiveMessage(event.data);
        };
        this.m_socket.onerror = function(event) {
          console.log("Send Text fired an error");
          self.m_socket = null;
          self.m_pSink.onLogonFailed("网络连接失败，请检查网络后重新连接！", 1);
        };
        this.m_socket.onclose = function(event) {
          console.log("onclose");
          self.m_socket = null;
        };
      };
      GamePlace.prototype.closeSocket = function() {
        if (!this.m_socket) return;
        this.m_socket.close();
      };
      GamePlace.prototype.onReceiveMessage = function(arraybuffer) {
        var byte = new ByteArray_1.ByteArray(arraybuffer);
        var nLen = byte.length;
        var cbMainCmd = byte.readUnsignedByte();
        var cbSubCmd = byte.readUnsignedByte();
        var cbHandleCode = byte.readUnsignedByte();
        var nRealDataLen = nLen - 4;
        if (nRealDataLen <= 0) {
          if (nLen < 3) return;
          this.recvData(cbMainCmd, cbSubCmd, cbHandleCode, null);
          return;
        }
        var data = new ByteArray_1.ByteArray();
        byte.readUnsignedByte();
        byte.readBytes(data);
        this.recvData(cbMainCmd, cbSubCmd, cbHandleCode, data);
        TSCommon_1.TSCommon.log("onReceiveMessage main = " + cbMainCmd + ",sub = " + cbSubCmd + ",len = " + data.length);
      };
      GamePlace.prototype.recvData = function(cbMainCmd, cbSubCmd, cbHandleCode, buf) {
        switch (cbMainCmd) {
         case PlazaCmds_1.PlazaCmds.MAIN_GP_LOGON:
          this.onMainLogonMessage(cbSubCmd, cbHandleCode, buf);
          return;

         case PlazaCmds_1.PlazaCmds.MAIN_GP_SERVER_LIST:
          this.onMainServerListMessage(cbSubCmd, cbHandleCode, buf);
          return;

         case PlazaCmds_1.PlazaCmds.MAIN_CM_SERVICE:
          this.onMainSystemMessage(cbSubCmd, cbHandleCode, buf);
          return;

         case PlazaCmds_1.PlazaCmds.MAIN_GP_CONFIG:
          this.onMainConfig(cbSubCmd, cbHandleCode, buf);
          return;

         default:
          this.trace("onrecv main = " + cbMainCmd + ",sub = " + cbSubCmd);
        }
      };
      GamePlace.prototype.onMainLogonMessage = function(cbSubCmd, cbHandleCode, buf) {
        switch (cbSubCmd) {
         case PlazaCmds_1.PlazaCmds.SUB_GP_GAMEINFO:
          this.m_userLoginInfo = new CMD_GP_LogonSuccess_Ex2_1.CMD_GP_LogonSuccess_Ex2();
          this.m_userLoginInfo.deserialize(buf);
          TSCommon_1.TSCommon.log("SUB_GP_GAMEINFO userdbid = " + this.m_userLoginInfo.nUserDBID);
          this.getUserGameInfo();
          return;
        }
        TSCommon_1.TSCommon.log("onMainLogonMessage,sub = " + cbSubCmd);
      };
      GamePlace.prototype.getUserGameInfo = function() {};
      GamePlace.prototype.getUserLoginInfo = function() {
        return this.m_userLoginInfo;
      };
      GamePlace.prototype.clearServerList = function() {
        this.m_gameIDList.clearServerList();
      };
      GamePlace.prototype.getStationOnlineCount = function(nStationID) {
        return this.m_gameIDList.getStationOnlineCount(this._dwGameID, nStationID);
      };
      GamePlace.prototype.onMainServerListMessage = function(cbSubCmd, cbHandleCode, buf) {
        switch (cbSubCmd) {
         case PlazaCmds_1.PlazaCmds.SUB_GP_SERVER_LIST_TYPE_V1:
          var typeCount = buf.length / 21;
          TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_TYPE_V1 typecount = " + typeCount);
          return;

         case PlazaCmds_1.PlazaCmds.SUB_GP_SERVER_LIST_KIND:
          if (null == buf) {
            TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_KIND kindCount = 0");
            return;
          }
          var kindCount = buf.length / tagGameKind_1.tagGameKind.getLen();
          for (var i = 0; i < kindCount; i++) {
            var gameKind = new tagGameKind_1.tagGameKind();
            gameKind.deserialize(buf);
            this.m_gameIDList.addGameID(gameKind.dwKindID);
            TSCommon_1.TSCommon.log("KindID = " + gameKind.dwKindID);
          }
          TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_KIND kindCount = " + kindCount);
          if (0 == cbHandleCode) {
            this.m_bRefreshServerList = false;
            this.sendServerListCmd();
          }
          return;

         case PlazaCmds_1.PlazaCmds.SUB_GP_SERVER_LIST_STATION:
          var stationCount = buf.length / tagGameStationEx_1.tagGameStationEx.getLen();
          TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_STATION count = " + stationCount);
          if (0 == stationCount) return;
          for (var i = 0; i < stationCount; i++) {
            var station = new tagGameStationEx_1.tagGameStationEx();
            station.deserialize(buf);
            this.addGameStation(station);
            TSCommon_1.TSCommon.log("station name = " + station.szStationName + ",id=" + station.dwParentID);
          }
          return;

         case PlazaCmds_1.PlazaCmds.SUB_GP_SERVER_LIST_ROOM:
          if (null == buf) {
            TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_ROOM  buf null");
            return;
          }
          var stationCount = buf.length / tagGameServerEx_1.tagGameServerEx.getLen();
          TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_ROOM count = " + stationCount);
          if (0 == stationCount) return;
          for (var i = 0; i < stationCount; i++) {
            var room = new tagGameServerEx_1.tagGameServerEx();
            room.deserializeEx(buf);
            room = this.addGameServer(room);
            if (room) {
              var station = this.getGameStation(room.dwStationID);
              if (station) {
                station.dwMinGold = room.dwMinGold;
                station.dwRuleID = room.dwRuleID;
              }
              TSCommon_1.TSCommon.log("server name exist = " + room.szGameRoomName);
            }
          }
          return;

         case PlazaCmds_1.PlazaCmds.SUB_GP_SERVER_LIST_ROOM_EX:
          if (null == buf) {
            TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_ROOM_EX  buf null");
            return;
          }
          var stationCount = buf.length / tagGameServerEx_1.tagGameServerEx.getExtraInfoLen();
          TSCommon_1.TSCommon.log("SUB_GP_SERVER_LIST_ROOM_EX count = " + stationCount + ",handleCode = " + cbHandleCode);
          for (var i = 0; i < stationCount; i++) {
            var serverID = buf.readUnsignedInt();
            var room = this.m_gameIDList.getGameServer(serverID);
            if (room) {
              room.deserializeExtraInfo(buf);
              var station = this.getGameStation(room.dwStationID);
              if (station) {
                station.dwMinGold = room.dwMinGold;
                station.dwRuleID = room.dwRuleID;
              }
            }
          }
          0 == cbHandleCode;
          return;
        }
        TSCommon_1.TSCommon.log("onMainServerListMessage,sub = " + cbSubCmd);
      };
      GamePlace.prototype.sendServerListCmd = function() {
        var ba = new ByteArray_1.ByteArray();
        ba.writeInt(1);
        ba.writeInt(this.m_gameID);
        var version = this.getGameLib().VersionInfo;
        version.serialize(ba);
        this.sendData(PlazaCmds_1.PlazaCmds.MAIN_GP_SERVER_LIST, PlazaCmds_1.PlazaCmds.SUB_GP_GET_SERVER_LIST, ba);
      };
      GamePlace.prototype.onMainSystemMessage = function(cbSubCmd, cbHandleCode, buf) {
        switch (cbSubCmd) {
         case PlazaCmds_1.PlazaCmds.SUB_CM_MESSAGE:
          var msg = new CMD_CM_SysteMessage_1.CMD_CM_SysteMessage();
          msg.deserialize(buf);
          TSCommon_1.TSCommon.log("SUB_CM_MESSAGE:" + msg.szMessage);
          msg.bCloseLine > 0 && this.m_socket.close();
          msg.wMessageLen > 0 && this.m_pSink.onLogonFailed(msg.szMessage, 2);
          return;
        }
        TSCommon_1.TSCommon.log("onMainSystemMessage,sub = " + cbSubCmd);
      };
      GamePlace.prototype.onMainConfig = function(cbSubCmd, cbHandleCode, buf) {
        TSCommon_1.TSCommon.log("onMainConfig,sub = " + cbSubCmd);
      };
      GamePlace.prototype.trace = function(msg) {
        TSCommon_1.TSCommon.log(msg);
      };
      GamePlace.prototype.sendGetGameInfo = function() {
        var l = new CMD_GP_GetGameInfo_1.CMD_GP_GetGameInfo();
        l.nUserDBID = this._publicUserInfo.userDBID;
        l.nPartnerID = 1;
        l.nVersionCode = 1;
        l.ClientInfo = new tagClientInfo_1.tagClientInfo();
        l.VersionInfo = new tagVersionInfo_1.tagVersionInfo();
        l.password = this._publicUserInfo.encryptPassword;
        var ba = new ByteArray_1.ByteArray();
        l.serialize(ba);
        this.sendData(PlazaCmds_1.PlazaCmds.MAIN_GP_LOGON, PlazaCmds_1.PlazaCmds.SUB_GP_GET_GAMEINFO_EX, ba);
      };
      GamePlace.prototype.sendData = function(mainCmd, subCmd, ba) {
        var b = new ByteArray_1.ByteArray();
        b.writeByte(mainCmd);
        b.writeByte(subCmd);
        b.writeByte(0);
        b.writeByte(0);
        b.writeBytes(ba);
        if (!this.m_socket) return;
        this.m_socket.readyState === WebSocket.OPEN && this.m_socket.send(b.buffer);
      };
      GamePlace.prototype.getGameStation = function(stationID) {
        return this.m_gameIDList.getStation(stationID);
      };
      GamePlace.prototype.getGameServer = function(gameserverID) {
        return this.m_gameIDList.getGameServer(gameserverID);
      };
      GamePlace.prototype.getServerByIPAndPort = function(ipaddress, port) {
        var gameServerList = this.getAllGameServerList();
        for (var i = 0; i < gameServerList.length; i++) if (this.changeIP(gameServerList[i].dwServerIP) == ipaddress && gameServerList[i].uServerPort == port) return gameServerList[i];
        return null;
      };
      GamePlace.prototype.getStationList = function() {
        var stationList = this.m_gameIDList.getStationList(this.m_gameID);
        0 == stationList.length && this.m_gameIDList.addGameID(this._dwGameID);
        return stationList;
      };
      GamePlace.prototype.getGameServerList = function(stationID) {
        return this.m_gameIDList.getGameServerList(this.m_gameID, stationID);
      };
      GamePlace.prototype.getAllGameServerList = function() {
        return this.m_gameIDList.getAllGameServerList(this.m_gameID);
      };
      GamePlace.prototype.getAutoEnterRoom = function(lpszStation) {
        var server = null;
        var full = 65535;
        var minServer = null;
        var dwFocusStationID = -1;
        var nMinGold = 0;
        var stationList = this.getStationList();
        for (var i = 0; i < stationList.length; i++) {
          var gameStation = stationList[i];
          if (null != lpszStation && lpszStation.length > 0 && gameStation.szStationName.indexOf(lpszStation) >= 0) {
            dwFocusStationID = gameStation.dwStationID;
            break;
          }
        }
        var gameList = this.getAllGameServerList();
        for (var i = 0; i < gameList.length; i++) {
          var room = gameList[i];
          if (-1 != dwFocusStationID && room.dwStationID != dwFocusStationID) continue;
          null == minServer ? minServer = room : minServer.dwMinGold > room.dwMinGold && (minServer = room);
          if (0 != room.dwMaxGold && room.dwMaxGold < this._publicUserInfo.nGold) continue;
          if (0 != room.dwMinGold && room.dwMinGold > this._publicUserInfo.nGold) continue;
          var tempFull = 4 * room.wMaxOnLineCount / 5 - room.wOnLineCount;
          if (tempFull <= 0) continue;
          null == server && (server = room);
          var nTempMinGold = room.dwMinGold;
          if (nTempMinGold > nMinGold) {
            nMinGold = nTempMinGold;
            server = room;
          }
        }
        null == server && (server = minServer);
        return server;
      };
      GamePlace.prototype.addGameStation = function(pStation) {
        return this.m_gameIDList.addStation(pStation);
      };
      GamePlace.prototype.addGameServer = function(pGameServer) {
        return this.m_gameIDList.addGameServer(pGameServer);
      };
      return GamePlace;
    }();
    exports.GamePlace = GamePlace;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray",
    "../CMD_CM_SysteMessage": "CMD_CM_SysteMessage",
    "../tagClientInfo": "tagClientInfo",
    "../tagGameServerEx": "tagGameServerEx",
    "../tagGameStationEx": "tagGameStationEx",
    "../tagVersionInfo": "tagVersionInfo",
    "./CMD_GP_GetGameInfo": "CMD_GP_GetGameInfo",
    "./CMD_GP_LogonSuccess_Ex2": "CMD_GP_LogonSuccess_Ex2",
    "./GameIDList": "GameIDList",
    "./PlazaCmds": "PlazaCmds",
    "./tagGameKind": "tagGameKind"
  } ],
  GameRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "167bcp33W1CBrR6hbsRhopy", "GameRoom");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("../../common/ByteArray");
    var TSCommon_1 = require("../../TSCommon");
    var UserInfo_1 = require("../UserInfo");
    var ClientFrame_1 = require("../frame/ClientFrame");
    var UserManager_1 = require("../room/UserManager");
    var TableManager_1 = require("../room/TableManager");
    var GameCmds_1 = require("../room/GameCmds");
    var ScoreParser_1 = require("./ScoreParser");
    var tagUserInfoBroad_1 = require("./tagUserInfoBroad");
    var gamelibcommon_1 = require("../gamelibcommon");
    var CMD_GR_BroadCast_UserStatus_1 = require("./CMD_GR_BroadCast_UserStatus");
    var HtmlChat_1 = require("./HtmlChat");
    var GameCmds_2 = require("../room/GameCmds");
    var GameCmds_3 = require("../room/GameCmds");
    var GameCmds_4 = require("../room/GameCmds");
    var CMD_CM_SysteMessage_1 = require("../CMD_CM_SysteMessage");
    var CMD_CM_SysteMessage_2 = require("../CMD_CM_SysteMessage");
    var GameCmds_5 = require("../room/GameCmds");
    var GameCmds_6 = require("../room/GameCmds");
    var GameCmds_7 = require("../room/GameCmds");
    var FrameCmds_1 = require("../frame/FrameCmds");
    var Table_1 = require("../Table");
    var CMD_GR_Logon_ByVnet_1 = require("./CMD_GR_Logon_ByVnet");
    var HallUtils = require("../../HallUtils");
    var GameRoom = function() {
      function GameRoom(pGameLib, publicUserInfo) {
        this.LAST_PING_LOST_TIME = 5e3;
        this.m_socket = null;
        this.m_mySelf = null;
        this.m_pGameLib = pGameLib;
        this.m_clientFrame = new ClientFrame_1.ClientFrame(this, pGameLib);
        this.m_dwLastPingTime = 0;
        this.m_lostPingCount = 0;
        this.m_userManager = new UserManager_1.UserManager();
        this._publicUserInfo = publicUserInfo;
      }
      GameRoom.prototype.setSink = function(pSink) {
        this.m_sink = pSink;
      };
      GameRoom.prototype.enterGameRoom = function(gameServer, userID, password, version) {
        if (null == gameServer) return false;
        if (this.isServicing()) {
          this.trace("enterGameRoom close");
          this.m_socket.close();
          this.m_socket = null;
        }
        this.m_dwServerIP = gameServer.dwServerIP;
        this.m_strServerIP = this.changeIP(this.m_dwServerIP);
        this.m_uPort = gameServer.uServerPort;
        this.m_pGameServer = gameServer;
        this.m_dwUserID = userID;
        this.m_szPass = password;
        this.m_gameVersion = version;
        null == this.m_socket && this.initWebSocket(this.m_strServerIP, this.m_uPort);
      };
      GameRoom.prototype.enterGameRoomByIP = function(ipaddress, port, userID, password, version, gameServer) {
        if (this.isServicing()) {
          this.trace("enterGameRoomByIP close");
          this.m_socket.close();
          this.m_socket = null;
        }
        this.m_strServerIP = ipaddress;
        this.m_uPort = port;
        this.m_pGameServer = gameServer;
        this.m_dwUserID = userID;
        this.m_szPass = password;
        this.m_gameVersion = version;
        null == this.m_socket && this.initWebSocket(this.m_strServerIP, this.m_uPort);
      };
      GameRoom.prototype.getCurrentGameRoom = function() {
        if (!this.isServicing()) return;
        return this.m_pGameServer;
      };
      GameRoom.prototype.isServicing = function() {
        if (null == this.m_socket) return false;
        if (this.m_socket.readyState != WebSocket.OPEN) return false;
        return null != this.m_mySelf;
      };
      GameRoom.prototype.changeIP = function(ip) {
        var ba = new ByteArray_1.ByteArray();
        ba.writeUnsignedInt(ip);
        ba.position = 0;
        return ba.readUnsignedByte() + "." + ba.readUnsignedByte() + "." + ba.readUnsignedByte() + "." + ba.readUnsignedByte();
      };
      GameRoom.prototype.initWebSocket = function(serverIP, serverPort) {
        serverIP = HallUtils.getDoMainFromIp(serverIP);
        TSCommon_1.TSCommon.log("connect to " + serverIP + ":" + serverPort);
        this.m_socket = new WebSocket("wss://" + serverIP + ":" + serverPort);
        this.m_socket.binaryType = "arraybuffer";
        var socket = this.m_socket;
        var self = this;
        this.m_socket.onopen = function(evt) {
          self.onSocketOpen();
        };
        this.m_socket.onmessage = function(event) {
          self.onReceiveMessage(event.data);
        };
        this.m_socket.onerror = function(event) {
          self.onSocketError();
          self.m_socket = null;
        };
        this.m_socket.onclose = function(event) {
          self.trace("this.m_socket.onclose");
          self.onSocketClose();
          self.m_socket = null;
        };
      };
      GameRoom.prototype.onSocketOpen = function() {
        this.trace("WebSocketOpen");
        this.sendLoginCmd();
        this.m_dwLastPingTime = new Date().getTime();
        this.startCheckPing();
      };
      GameRoom.prototype.onSocketClose = function() {
        this.trace("WebSocketClose");
        this.m_mySelf = null;
        this.m_pGameServer = null;
        this.m_userManager && this.m_userManager.clearAllUser();
        this.m_clientFrame.clear();
        this.m_socket = null;
        this.m_cbLastChairID = 255;
        this.m_pGameLib.refreshGold();
        this.m_sink.onRoomConnectClosed();
        this.stopCheckPing();
      };
      GameRoom.prototype.onSocketError = function() {
        this.trace("WebSocketError");
      };
      GameRoom.prototype.onReceiveMessage = function(arrayBuffer) {
        var byte = new ByteArray_1.ByteArray(arrayBuffer);
        var nLen = byte.length;
        var cbMainCmd = byte.readUnsignedByte();
        this.trace("onReceiveMessage mainCmd = " + cbMainCmd + ",len = " + nLen);
        if (cbMainCmd < 100) {
          var data = new ByteArray_1.ByteArray();
          byte.readBytes(data);
          this.recvData(cbMainCmd, 0, 0, data);
          return;
        }
        var cbSubCmd = byte.readUnsignedByte();
        var cbHandleCode = byte.readUnsignedByte();
        var nRealDataLen = nLen - 4;
        if (nRealDataLen <= 0) {
          if (nLen < 3) return;
          this.recvData(cbMainCmd, cbSubCmd, cbHandleCode, null);
          return;
        }
        var data = new ByteArray_1.ByteArray();
        byte.readUnsignedByte();
        byte.readBytes(data);
        this.recvData(cbMainCmd, cbSubCmd, cbHandleCode, data);
      };
      GameRoom.prototype.recvData = function(cbMainCmd, cbSubCmd, cbHandleCode, buf) {
        var s = "Recv other MainCmd = " + cbMainCmd + " SubCmd = " + cbSubCmd;
        switch (cbMainCmd) {
         case GameCmds_1.GameCmds.MAIN_GR_LOGON:
          return this.recvLogonMessage(cbSubCmd, cbHandleCode, buf);

         case GameCmds_1.GameCmds.MAIN_GR_ROOM_STATUS:
          return this.recvRoomStatus(cbSubCmd, cbHandleCode, buf);

         case GameCmds_1.GameCmds.MAIN_GR_CONFIG:
          return this.recvConfigMsg(cbSubCmd, cbHandleCode, buf);

         case GameCmds_1.GameCmds.MAIN_GR_USER:
          return this.recvUserMessage(cbSubCmd, cbHandleCode, buf);

         case GameCmds_1.GameCmds.CMD_HTML_HALL_CHAT:
          return;

         case GameCmds_1.GameCmds.CMD_HTML_TABLE_CHAT:
          return this.recvTableChat(buf);

         case GameCmds_1.GameCmds.CMD_MANAGER:
          return true;

         case GameCmds_1.GameCmds.CMD_SERVER_PING:
          var data = new ByteArray_1.ByteArray();
          data.writeInt(0);
          this.sendOldCommand(GameCmds_1.GameCmds.CMD_SERVER_PING, GameCmds_1.GameCmds.IDC_SP_ANWSER_PING, data);
          return true;

         case GameCmds_1.GameCmds.MAIN_CM_SERVICE:
          return this.recvCMMessage(cbSubCmd, buf);

         case GameCmds_1.GameCmds.MAIN_CM_DOWN_LOAD:
          return true;

         case GameCmds_1.GameCmds.CMD_GAME:
          this.m_clientFrame.recvGameCmd(buf);
          return true;

         case GameCmds_1.GameCmds.CMD_USER:
          var cbSubCmd = buf.readUnsignedByte();
          if (cbSubCmd == GameCmds_1.GameCmds.IDS_USER_ANS_SIT_DOWN) {
            var bEnable = 0 != buf.readByte();
            bEnable || this.m_sink.onShowAlertMsg("坐下失败");
          }
          return true;

         case GameCmds_1.GameCmds.CMD_PING_USER:
          this.recvAnswerPing();
          return true;

         default:
          var s = "Recv other MainCmd = " + cbMainCmd + " SubCmd = " + cbSubCmd;
          this.trace(s);
        }
        return true;
      };
      GameRoom.prototype.recvLogonMessage = function(cbSubCmd, cbHandleCode, buf) {
        buf.position = 0;
        switch (cbSubCmd) {
         case GameCmds_1.GameCmds.SUB_GR_LOGON_SUCCESS:
          this.trace("SUB_GR_LOGON_SUCCESS");
          var uUserID = buf.readUnsignedInt();
          this.m_userManager.clearAllUser();
          this.m_userManager.setMyDBID(uUserID);
          this.m_sink.onLogonGameRoomSucceeded();
          break;

         case GameCmds_1.GameCmds.SUB_GR_LOGON_FINISH:
          this.sendOptionsMessage();
          this.m_sink.onEnteredGameRoom(this.m_tableManager.getTableCount(), this.m_tableManager.getChairCount());
          this.m_dwLastSendTableChat = 0;
        }
        return true;
      };
      GameRoom.prototype.recvRoomStatus = function(cbSubCmd, cbHandleCode, buf) {
        switch (cbSubCmd) {
         case GameCmds_1.GameCmds.SUB_GR_BROADCAST_TABLE_STATUS:
          var pTableStatus = new GameCmds_3.CMD_GR_BroadCast_TableStatus();
          pTableStatus.deserialize(buf);
          var table = this.m_tableManager.getTable(pTableStatus.wTableID);
          if (null == table) {
            this.trace("查找桌子失败");
            return false;
          }
          table._isLocked = 0 != (pTableStatus.cbTableStatus & Table_1.Table.TABLE_LOCKED);
          table._isPlaying = 0 != (pTableStatus.cbTableStatus & Table_1.Table.TABLE_PLAYING);
          this.m_sink.onTableInfoChanged(pTableStatus.wTableID);
          return true;

         default:
          return true;
        }
      };
      GameRoom.prototype.recvConfigMsg = function(cbSubCmd, cbHandleCode, buf) {
        switch (cbSubCmd) {
         case GameCmds_1.GameCmds.SUB_GR_ROOM_INFO:
          this.trace("SUB_GR_ROOM_INFO");
          var pGameInfo = new GameCmds_4.CMD_GR_GameInfo();
          pGameInfo.deserialize(buf);
          if (pGameInfo.bufReserved.readUnsignedByte() > 1) {
            pGameInfo.bufReserved.readUnsignedByte();
            var cbPrivate = pGameInfo.bufReserved.readUnsignedByte();
            this.m_bIsPrivateRoom = cbPrivate > 0;
          }
          this.m_tableManager = new TableManager_1.TableManager(pGameInfo.wTableCount, pGameInfo.cbTableUser);
          return true;

         case GameCmds_1.GameCmds.SUB_GR_SCORE_HEADER:
          ScoreParser_1.ScoreParser.getInstance().setScoreHeader(buf);
          return true;

         case GameCmds_1.GameCmds.SUB_GR_TABLE_INFO:
          var tableID = buf.readByte();
          var table = this.m_tableManager.getTable(tableID);
          if (table) {
            var tableBuf = new ByteArray_1.ByteArray();
            buf.readBytes(tableBuf);
            table.setTableBuffer(tableBuf);
          }
          return true;

         case GameCmds_1.GameCmds.SUB_GR_COLUMN_INFO:
          this.trace("SUB_GR_COLUMN_INFO " + buf.length);
          return true;

         default:
          this.trace("UnKnow MAIN_GR_CONFIG Message" + cbSubCmd);
          return true;
        }
      };
      GameRoom.prototype.recvUserMessage = function(cbSubCmd, cbHandleCode, buf) {
        var ret;
        switch (cbSubCmd) {
         case GameCmds_1.GameCmds.SUB_GR_BROADCAST_USER_COME:
          ret = this.onSubUserComeMessage(buf);
          break;

         case GameCmds_1.GameCmds.SUB_GR_BROADCAST_USER_LEFT:
          ret = this.onSubUserLeftMessage(buf);
          break;

         case GameCmds_1.GameCmds.SUB_GR_BROADCAST_USER_STATUS:
          ret = this.onSubUserStatusMessage(buf);
          break;

         case GameCmds_1.GameCmds.SUB_GR_BROADCAST_USER_SCORE:
          ret = this.onSubUserScoreMessage(buf);
          break;

         case GameCmds_1.GameCmds.SUB_GR_CAN_SIT_TABLE_RESPONSE:
          return true;

         case GameCmds_1.GameCmds.SUB_GR_BROADCAST_USER_FAME_EX:
          return false;

         case GameCmds_1.GameCmds.SUB_GR_FRAG_COUNT:
          this._publicUserInfo.nFrag = buf.readUnsignedInt();
          this.m_sink.onRoomUserInfoUpdated(this.m_mySelf.getUserID());
          ret = true;
          break;

         case GameCmds_1.GameCmds.SUB_GR_BANK_VALUE:
          this.m_mySelf._bankValue = buf.readInt();
          ret = true;
          break;

         default:
          this.trace("MAIN_GR_USER Message subid = " + cbSubCmd);
          ret = true;
        }
        return ret;
      };
      GameRoom.prototype.onSubUserComeMessage = function(buf) {
        var user = new tagUserInfoBroad_1.tagUserInfoBroad();
        user.deserialize(buf);
        this.trace(user.szName + "进来了");
        var bExist = true;
        var userItem = this.m_userManager.getUser(user.wUserIndex);
        if (null == userItem) {
          userItem = new UserInfo_1.UserInfo();
          bExist = false;
        }
        userItem._name = user.szName;
        userItem._userIndex = user.wUserIndex;
        userItem._userRountIC = user.wRoundCount;
        userItem._faceID = user.wFaceID;
        userItem._netLag = user.wNetTimelag;
        userItem._tableID = user.wTableID;
        userItem._chairID = user.cbChairID;
        userItem._status = user.cbUserStatus;
        userItem._userDBID = user.lUserDBID;
        userItem._groupID = user.dwGroupID;
        userItem._userLevel = user.dwUserLevel;
        userItem._sex = user.cbSex;
        userItem._scoreBuf = user.szScores;
        userItem._age = user.nAge;
        bExist || this.m_userManager.addUser(userItem);
        if (userItem._userDBID == this.m_userManager.getMyDBID()) {
          this.m_userManager.setMyUserID(userItem._userIndex);
          this.m_mySelf = userItem;
          this.m_clientFrame.setMyself(userItem);
        }
        if (userItem._status > gamelibcommon_1.gamelibcommon.USER_WAIT_SIT && userItem._status < gamelibcommon_1.gamelibcommon.USER_WATCH_GAME) {
          var table = this.m_tableManager.getTable(userItem._tableID);
          if (null != table) {
            var chair = table.getChair(userItem._chairID);
            if (null != chair) {
              chair.setEmpty(false);
              chair.setUserID(userItem._userIndex);
            }
          }
        }
        bExist || this.m_sink.onRoomUserEnter(userItem._userIndex);
        return true;
      };
      GameRoom.prototype.onSubUserLeftMessage = function(buf) {
        var dwUserDBID = buf.readUnsignedInt();
        var user = this.m_userManager.getUserByDBID(dwUserDBID);
        if (null == user) {
          this.trace("用户离开的时候居然没找到！");
          return true;
        }
        this.m_sink.onRoomUserExit(user._userIndex);
        this.m_userManager.removeUser(user._userIndex);
        return true;
      };
      GameRoom.prototype.onSubUserStatusMessage = function(buf) {
        var userstatus = new CMD_GR_BroadCast_UserStatus_1.CMD_GR_BroadCast_UserStatus();
        userstatus.deserialize(buf);
        var user = this.m_userManager.getUserByDBID(userstatus.dwUserDBID);
        if (null == user) {
          this.trace("用户状态改变的时候居然没找到！");
          return true;
        }
        var wNowTableID = userstatus.wTableID;
        var wLastTableID = user._tableID;
        var cbNowChairID = userstatus.cbChairID;
        var cbLastChairID = user._chairID;
        var cbNowStatus = userstatus.cbUserStatus;
        var cbLastStatus = user._status;
        user._tableID = wNowTableID;
        user._chairID = cbNowChairID;
        user._status = cbNowStatus;
        user._netLag = userstatus.wNetTimelag;
        var nowTable = this.m_tableManager.getTable(wNowTableID);
        var oldTable = this.m_tableManager.getTable(wLastTableID);
        var nowChair = null != nowTable ? nowTable.getChair(cbNowChairID) : null;
        var oldChair = null != oldTable ? oldTable.getChair(cbLastChairID) : null;
        var changeTableStatus = false;
        wNowTableID != wLastTableID && (changeTableStatus = true);
        cbNowChairID != cbLastChairID && (changeTableStatus = true);
        gamelibcommon_1.gamelibcommon.isSitTable(cbLastStatus) != gamelibcommon_1.gamelibcommon.isSitTable(cbNowStatus) && (changeTableStatus = true);
        if (null != oldTable && null != oldChair && gamelibcommon_1.gamelibcommon.isSitTable(cbLastStatus) && !oldChair.isEmpty()) {
          oldChair.setEmpty(true);
          this.m_sink.onTableInfoChanged(wLastTableID);
        }
        if (null != nowTable && null != nowChair && gamelibcommon_1.gamelibcommon.isSitTable(cbNowStatus) && !nowChair.isEmpty()) {
          nowChair.setEmpty(false);
          nowChair.setUserID(user._userIndex);
          this.m_sink.onTableInfoChanged(wNowTableID);
        }
        var wMeTableID = this.m_mySelf._tableID;
        this.m_sink.onRoomUserInfoUpdated(user._userIndex);
        if (user._userDBID == this.m_userManager.getMyDBID()) {
          cbLastChairID < this.m_tableManager.getChairCount() && (this.m_cbLastChairID = cbLastChairID);
          cbNowChairID < this.m_tableManager.getChairCount() && (this.m_cbLastChairID = cbNowChairID);
          if (cbNowStatus >= gamelibcommon_1.gamelibcommon.USER_SIT_TABLE) {
            if (cbLastStatus < gamelibcommon_1.gamelibcommon.USER_SIT_TABLE || wNowTableID != wLastTableID || cbLastStatus == gamelibcommon_1.gamelibcommon.USER_OFF_LINE) {
              this.m_clientFrame.meEnterGame(this.m_tableManager.getChairCount());
              this.m_sink.onEnterGameView();
              this.m_clientFrameSink.onUserEnterTable(cbNowChairID, this.m_mySelf._userIndex, this.m_mySelf.isPlayer());
            }
            if (wNowTableID != wLastTableID || cbLastStatus == gamelibcommon_1.gamelibcommon.USER_OFF_LINE) for (var i = 0; i < this.m_userManager.m_userList.length; i++) {
              var userEnter = this.m_userManager.m_userList[i];
              if (userEnter._userIndex == user._userIndex) continue;
              userEnter._tableID == wNowTableID && this.m_clientFrameSink.onUserEnterTable(userEnter._chairID, userEnter._userIndex, userEnter.isPlayer());
            }
            (gamelibcommon_1.gamelibcommon.isSitTable(cbLastStatus) || gamelibcommon_1.gamelibcommon.isSitTable(cbNowStatus)) && this.m_clientFrameSink.onPlayerStateChanged(this.m_mySelf._chairID, cbLastStatus, cbNowStatus);
            cbNowStatus == gamelibcommon_1.gamelibcommon.USER_PLAY_GAME || cbNowStatus == gamelibcommon_1.gamelibcommon.USER_SIT_TABLE || cbNowStatus == gamelibcommon_1.gamelibcommon.USER_FREE_STATUS;
            return true;
          }
          this.sendAllUserExitTableToMe(wLastTableID);
          this.m_sink.onLeaveGameView();
          return true;
        }
        if (wMeTableID == gamelibcommon_1.gamelibcommon.INVALI_TABLE_ID) return true;
        if (wMeTableID == wNowTableID || wMeTableID == wLastTableID) {
          wMeTableID == wNowTableID && wMeTableID != wLastTableID ? this.m_clientFrameSink.onUserEnterTable(user._chairID, user._userIndex, user.isPlayer()) : wMeTableID != wNowTableID && wMeTableID == wLastTableID && this.m_clientFrameSink.onUserExitTable(cbLastChairID, user._userIndex, cbLastStatus >= gamelibcommon_1.gamelibcommon.USER_SIT_TABLE && cbLastStatus < gamelibcommon_1.gamelibcommon.USER_WATCH_GAME);
          (gamelibcommon_1.gamelibcommon.isSitTable(cbLastStatus) || gamelibcommon_1.gamelibcommon.isSitTable(cbNowStatus)) && this.m_clientFrameSink.onPlayerStateChanged(user._chairID, cbLastStatus, cbNowStatus);
        }
        return true;
      };
      GameRoom.prototype.onSubUserScoreMessage = function(buf) {
        var userScore = new GameCmds_2.CMD_GR_BroadCast_UserScore();
        userScore.deserialize(buf);
        var pUserItem = this.m_userManager.getUserByDBID(userScore.dwUserDBID);
        if (null != pUserItem) {
          this.m_userManager.updateUserScore(pUserItem._userIndex, userScore.cbScoreBuf);
          this.m_sink.onRoomUserInfoUpdated(pUserItem._userIndex);
        }
        return true;
      };
      GameRoom.prototype.recvTableChat = function(buf) {
        var chat = new HtmlChat_1.HtmlChat();
        chat.deserialize(buf);
        this.m_sink.onRecvTableChat(chat);
        return true;
      };
      GameRoom.prototype.recvCMMessage = function(cbSubCmd, buf) {
        switch (cbSubCmd) {
         case GameCmds_1.GameCmds.SUB_CM_MESSAGE:
          var pSystemMessage = new CMD_CM_SysteMessage_1.CMD_CM_SysteMessage();
          pSystemMessage.deserialize(buf);
          if (pSystemMessage.bCloseLine) {
            this.trace("SUB_CM_MESSAGE 断开连接");
            this.m_socket.close();
          }
          pSystemMessage.wMessageLen > 0 && this.m_sink.onShowAlertMsg(pSystemMessage.szMessage);
          return true;

         case GameCmds_1.GameCmds.SUB_CM_MESSAGE_EX:
          var sm = new CMD_CM_SysteMessage_2.CMD_CM_SysteMessageEx();
          sm.deserialize(buf);
          if (sm.bCloseLine) {
            this.trace("SUB_CM_MESSAGE_EX 断开连接");
            this.m_socket.close();
          }
          sm.wMessageLen > 0 && this.m_sink.onShowAlertMsg(sm.szMessage);
          return true;

         case GameCmds_1.GameCmds.SUB_CM_YESORNO_REQ:
         case GameCmds_1.GameCmds.SUB_CM_SHOW_WEB:
         case GameCmds_1.GameCmds.SUB_CM_MSG_BOX_REQ:
         case GameCmds_1.GameCmds.SUB_CR_MSG_BOX_REQ_WITH_TIMER:
         case GameCmds_1.GameCmds.SUB_GR_MSG_AUTO_CLOSE:
          return true;

         default:
          this.trace("MAIN_GR_MESSAGE Message subcmd = " + cbSubCmd);
          return true;
        }
      };
      GameRoom.prototype.sendAllUserExitTableToMe = function(tableID) {
        for (var i = 0; i < this.m_userManager.m_userList.length; i++) {
          var user = this.m_userManager.m_userList[i];
          user._tableID == tableID && this.m_clientFrameSink.onUserExitTable(user._chairID, user._userIndex, user.isPlayer());
        }
      };
      GameRoom.prototype.sendOptionsMessage = function() {
        var RoomOption = new GameCmds_5.CMD_GR_RoomOption();
        var buf = RoomOption.serialize();
        this.sendCommand(GameCmds_1.GameCmds.MAIN_GR_CONFIG, GameCmds_1.GameCmds.SUB_GR_ROOM_OPTION, 0, buf);
      };
      GameRoom.prototype.trace = function(msg) {
        TSCommon_1.TSCommon.log(msg);
      };
      GameRoom.prototype.startCheckPing = function() {
        if (this.m_timer_ping <= 0) return;
        this.m_lostPingCount = 0;
        var mcurTimer = new Date().getTime();
        var self = this;
        this.m_timer_ping = window.setInterval(function() {
          if (mcurTimer - this.m_dwLastPingTime >= this.LAST_PING_LOST_TIME) {
            this.m_lostPingCount++;
            if (this.m_lostPingCount >= 2) {
              this.reconnect();
              this.stopCheckPing();
              return;
            }
            this.m_dwLastPingTime = new Date().getTime();
          } else this.m_lostPingCount = 0;
          self.sendPingCmd();
        }, 5e3);
      };
      GameRoom.prototype.stopCheckPing = function() {
        if (this.m_timer_ping <= 0) return;
        window.clearInterval(this.m_timer_ping);
        this.m_timer_ping = 0;
      };
      GameRoom.prototype.reconnect = function() {
        if (null == this.m_uPort) return;
        if (null == this.m_dwServerIP && null == this.m_strServerIP) return;
        if (this.isServicing()) {
          this.trace("reconnect close socket");
          this.m_socket.close();
        }
        if (null == this.m_socket) {
          null == this.m_strServerIP && (this.m_strServerIP = this.changeIP(this.m_dwServerIP));
          this.initWebSocket(this.m_strServerIP, this.m_uPort);
        }
      };
      GameRoom.prototype.sendGameCmd = function(cmdID, buf) {
        if (!this.isServicing()) return false;
        var ba = new ByteArray_1.ByteArray();
        ba.writeByte(cmdID);
        null != buf && ba.writeBytes(buf);
        this.sendOldGameCmd(GameCmds_1.GameCmds.CMD_GAME, ba);
        return true;
      };
      GameRoom.prototype.sendCommand = function(mainCmd, subCmd, handleCode, buf) {
        var b = new ByteArray_1.ByteArray();
        b.writeByte(mainCmd);
        b.writeByte(subCmd);
        b.writeByte(handleCode);
        b.writeByte(0);
        buf && b.writeBytes(buf);
        TSCommon_1.TSCommon.log("sendData len = " + b.length);
        this.m_socket.send(b.buffer);
      };
      GameRoom.prototype.sendOldCommand = function(mainCmd, subCmd, buf) {
        var b = new ByteArray_1.ByteArray();
        b.writeByte(mainCmd);
        b.writeByte(subCmd);
        buf && b.writeBytes(buf);
        TSCommon_1.TSCommon.log("sendData len = " + b.length);
        this.m_socket.send(b.buffer);
      };
      GameRoom.prototype.sendOldGameCmd = function(cmdID, buf) {
        var b = new ByteArray_1.ByteArray();
        b.writeByte(cmdID);
        buf && b.writeBytes(buf);
        TSCommon_1.TSCommon.log("sendData len = " + b.length);
        this.m_socket.send(b.buffer);
      };
      GameRoom.prototype.sendPingCmd = function() {
        if (!this.isServicing()) return;
        var ba = new ByteArray_1.ByteArray();
        ba.writeByte(GameCmds_1.GameCmds.IDC_PING_ME);
        ba.writeUnsignedInt(new Date().getTime());
        this.sendOldGameCmd(GameCmds_1.GameCmds.CMD_PING_USER, ba);
        this.m_nSendPingTime = new Date().getTime();
        this.trace("sendPingCmd---");
      };
      GameRoom.prototype.recvAnswerPing = function() {
        this.m_nNetLag = new Date().getTime() - this.m_nSendPingTime;
        return true;
      };
      GameRoom.prototype.sendLoginCmd = function() {
        var logonByVNET = new CMD_GR_Logon_ByVnet_1.CMD_GR_Logon_ByVnet();
        logonByVNET.lUserDBID = this.m_dwUserID;
        logonByVNET.szEncryptPass = this.m_szPass;
        this.trace("sendLoginCmd pass = " + this.m_szPass);
        logonByVNET.ConnectInfo.wSize = 14;
        logonByVNET.ConnectInfo.dwConnectDelay = 0;
        logonByVNET.ConnectInfo.dwGameInstallVer = this.m_gameVersion;
        logonByVNET.VersionInfo = this.m_pGameLib.VersionInfo;
        logonByVNET.ClientInfo = this.m_pGameLib.ClientInfo;
        var ba = logonByVNET.serialize();
        this.sendCommand(GameCmds_1.GameCmds.MAIN_GR_LOGON, GameCmds_1.GameCmds.SUB_GR_LOGON_BY_VNET, 0, ba);
      };
      GameRoom.prototype.enterTable = function(wTable, cbChair) {
        if (!this.isServicing()) return false;
        var table = this.m_tableManager.getTable(wTable);
        if (null == table) {
          this.trace("桌子号无效");
          return false;
        }
        var chair = table.getChair(cbChair);
        if (null == chair) {
          this.trace("椅子号无效");
          return false;
        }
        if (table._isPlaying) {
          this.sendWatchMessage(wTable, cbChair);
          return true;
        }
        if (!chair.isEmpty()) {
          this.trace("椅子已经有人了，请换一个");
          return false;
        }
        this.sendSitMessage(wTable, cbChair, null);
        return true;
      };
      GameRoom.prototype.leftRoom = function() {
        if (!this.isServicing()) return;
        this.trace("leftRoom");
        this.m_socket.close();
      };
      GameRoom.prototype.standup = function() {
        var buf = new ByteArray_1.ByteArray();
        buf.writeByte(GameCmds_1.GameCmds.IDC_USER_STAND_UP);
        this.sendOldGameCmd(GameCmds_1.GameCmds.CMD_USER, buf);
      };
      GameRoom.prototype.sendSitMessage = function(wTableIndex, cbChairID, szTablePass) {
        if (!this.isServicing()) return false;
        var RegSit = new GameCmds_6.CMD_GR_Req_UserSit();
        RegSit.wNetSpeed = 0;
        RegSit.wTableID = wTableIndex;
        RegSit.cbChairID = cbChairID;
        var buf = RegSit.serialize();
        this.sendCommand(GameCmds_1.GameCmds.MAIN_GR_USER, GameCmds_1.GameCmds.SUB_GR_REQ_SIT_TABLE, 0, buf);
        return true;
      };
      GameRoom.prototype.sendWatchMessage = function(wTableIndex, cbChairID) {
        if (!this.isServicing()) return false;
        var RegLonkOn = new GameCmds_7.CMD_GR_Req_UserLookOn();
        RegLonkOn.wNetSpeed = 0;
        RegLonkOn.wTableID = wTableIndex;
        RegLonkOn.cbChairID = cbChairID;
        RegLonkOn.cbPassLen = 0;
        var buf = RegLonkOn.serialize();
        this.sendCommand(GameCmds_1.GameCmds.MAIN_GR_USER, GameCmds_1.GameCmds.SUB_GR_REQ_LOOK_ON_TABLE, 0, buf);
        return true;
      };
      GameRoom.prototype.sendSoftReady = function() {
        this.sendOldGameCmd(FrameCmds_1.FrameCmds.CLIENTSITE_SOFT_READY, null);
      };
      GameRoom.prototype.sendReady = function() {
        if (!this.isServicing()) return false;
        if (null == this.m_mySelf) return false;
        if (this.m_mySelf._status == gamelibcommon_1.gamelibcommon.USER_PLAY_GAME) {
          this.sendSoftReady();
          return true;
        }
        if (this.m_mySelf._status == gamelibcommon_1.gamelibcommon.USER_SIT_TABLE) {
          this.sendOldCommand(GameCmds_1.GameCmds.CMD_USER, GameCmds_1.GameCmds.IDC_USER_AGREE_START, null);
          return true;
        }
        return false;
      };
      GameRoom.prototype.sendCancelReady = function() {
        if (!this.isServicing()) return false;
        if (null == this.m_mySelf) return false;
        if (this.m_mySelf._status != gamelibcommon_1.gamelibcommon.USER_READY_STATUS) return false;
        this.sendOldCommand(GameCmds_1.GameCmds.CMD_USER, GameCmds_1.GameCmds.IDC_USER_CANCEL_READY, null);
        return true;
      };
      GameRoom.prototype.SendChatMsg = function(objChatContent) {
        var ba = objChatContent.serialize();
        this.sendOldGameCmd(GameCmds_1.GameCmds.CMD_HTML_HALL_CHAT, ba);
      };
      GameRoom.prototype.GetUserName = function(wUserID) {
        var user = this.m_userManager.getUser(wUserID);
        if (null == user) return "";
        return user.getUserName();
      };
      GameRoom.prototype.GetMyID = function() {
        return this.m_userManager.getMyUserID();
      };
      GameRoom.prototype.autoSit = function() {
        if (!this.isServicing()) return false;
        if (!this.m_mySelf) return false;
        var cbUserStatus = this.m_mySelf._status;
        if (cbUserStatus == gamelibcommon_1.gamelibcommon.USER_PLAY_GAME) return false;
        var tableID = 65535;
        var chairID = 254;
        this.sendSitMessage(tableID, chairID, "");
        return true;
      };
      GameRoom.prototype.getTable = function(tableID) {
        if (!this.isServicing()) return null;
        return this.m_tableManager.getTable(tableID);
      };
      GameRoom.prototype.getTableList = function() {
        if (!this.isServicing()) return null;
        return this.m_tableManager.getTableList();
      };
      GameRoom.prototype.getUserByChair = function(chair) {
        if (!this.isServicing()) return null;
        if (chair >= this.m_tableManager.getChairCount()) return null;
        if (this.m_mySelf.getUserTableID() >= this.m_tableManager.getTableCount()) return null;
        for (var i = 0; i < this.m_userManager.m_userList.length; i++) {
          var user = this.m_userManager.m_userList[i];
          if (user._tableID != this.m_mySelf.getUserTableID()) continue;
          if (user.getUserChair() != chair) continue;
          if (user._status >= gamelibcommon_1.gamelibcommon.USER_SIT_TABLE && user._status < gamelibcommon_1.gamelibcommon.USER_WATCH_GAME) return user;
        }
        return null;
      };
      GameRoom.prototype.getMyself = function() {
        if (!this.isServicing()) return null;
        return this.m_mySelf;
      };
      GameRoom.prototype.getUser = function(wUserID) {
        return this.m_userManager.getUser(wUserID);
      };
      GameRoom.prototype.getUserByDBID = function(userDBID) {
        return this.m_userManager.getUserByDBID(userDBID);
      };
      GameRoom.prototype.refreshGold = function() {
        if (!this.isServicing()) return;
        this.sendCommand(GameCmds_1.GameCmds.MAIN_GR_USER, GameCmds_1.GameCmds.SUB_GR_QUERY_GOLD, 0, null);
      };
      GameRoom.prototype.sendTableChat = function(lpszMsg) {
        if (!this.isServicing()) return GameCmds_1.GameCmds.SEND_TABLE_CHAT_OFFLINE;
        if (null == lpszMsg) return GameCmds_1.GameCmds.SEND_TABLE_CHAT_NULL_CONTENT;
        var msg = lpszMsg;
        var nLen = msg.length;
        if (0 == nLen) return GameCmds_1.GameCmds.SEND_TABLE_CHAT_NULL_CONTENT;
        var nMinTime = 2e3;
        var dwNow = new Date().getTime();
        if (0 != this.m_dwLastSendTableChat && dwNow - this.m_dwLastSendTableChat < nMinTime) return GameCmds_1.GameCmds.SEND_TABLE_CHAT_BUSY;
        this.m_dwLastSendTableChat = dwNow;
        var chat = new HtmlChat_1.HtmlChat();
        chat._dwSpeaker = this.m_mySelf.getUserID();
        chat._dwListener = 4294967295;
        chat._dwSubCode = 0;
        chat._dwChannelIDLength = 4;
        chat._szContent = msg;
        var ba = chat.serialize();
        var cmd = GameCmds_1.GameCmds.CMD_HTML_TABLE_CHAT;
        this.sendOldGameCmd(cmd, ba);
        return GameCmds_1.GameCmds.SEND_TABLE_CHAT_OK;
      };
      GameRoom.prototype.getRelativePos = function(cbChair) {
        if (255 == cbChair) return 0;
        if (cbChair >= this.m_tableManager.getChairCount()) return cbChair;
        if (null == this.m_mySelf) return cbChair;
        var cbMyChair = this.m_mySelf.getUserChair();
        cbMyChair >= this.m_tableManager.getChairCount() && (cbMyChair = this.m_cbLastChairID);
        if (cbMyChair < 0 || cbMyChair >= this.m_tableManager.getChairCount()) return cbChair;
        return (cbChair + this.m_tableManager.getChairCount() - cbMyChair) % this.m_tableManager.getChairCount();
      };
      GameRoom.prototype.getRealChair = function(cbPos) {
        if (cbPos >= this.m_tableManager.getChairCount()) return cbPos;
        if (null == this.m_mySelf) return cbPos;
        var cbMyChair = this.m_mySelf.getUserChair();
        cbMyChair >= this.m_tableManager.getChairCount() && (cbMyChair = this.m_cbLastChairID);
        if (cbMyChair < 0 || cbMyChair >= this.m_tableManager.getChairCount()) return cbPos;
        return (cbPos + cbMyChair) % this.m_tableManager.getChairCount();
      };
      GameRoom.prototype.isPrivteRoom = function() {
        return this.m_bIsPrivateRoom;
      };
      GameRoom.prototype.sendSoundToTableUser = function(pBuf) {
        if (!this.isServicing()) return false;
        if (null == this.m_mySelf) return false;
        if (this.m_mySelf.getUserStatus() < gamelibcommon_1.gamelibcommon.USER_SIT_TABLE) return false;
        TSCommon_1.TSCommon.log("sendSoundToTableUser " + pBuf.length);
        if (pBuf.length <= 0) return;
        this.sendOldGameCmd(FrameCmds_1.FrameCmds.CLIENTSITE_SEND_SOUND, pBuf);
      };
      GameRoom.prototype.getNetLag = function() {
        if (!this.isServicing()) return 0;
        return this.m_nNetLag;
      };
      GameRoom.prototype.getUserList = function() {
        if (!this.isServicing()) return null;
        return this.m_userManager.m_userList;
      };
      GameRoom.prototype.setClientFrameSink = function(sink) {
        this.m_clientFrameSink = sink;
        this.m_clientFrame.setSink(sink);
      };
      return GameRoom;
    }();
    exports.GameRoom = GameRoom;
    cc._RF.pop();
  }, {
    "../../HallUtils": "HallUtils",
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray",
    "../CMD_CM_SysteMessage": "CMD_CM_SysteMessage",
    "../Table": "Table",
    "../UserInfo": "UserInfo",
    "../frame/ClientFrame": "ClientFrame",
    "../frame/FrameCmds": "FrameCmds",
    "../gamelibcommon": "gamelibcommon",
    "../room/GameCmds": "GameCmds",
    "../room/TableManager": "TableManager",
    "../room/UserManager": "UserManager",
    "./CMD_GR_BroadCast_UserStatus": "CMD_GR_BroadCast_UserStatus",
    "./CMD_GR_Logon_ByVnet": "CMD_GR_Logon_ByVnet",
    "./HtmlChat": "HtmlChat",
    "./ScoreParser": "ScoreParser",
    "./tagUserInfoBroad": "tagUserInfoBroad"
  } ],
  GameServerList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00c11gz8HpGEZG7Dfh0LugM", "GameServerList");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameServerList = function() {
      function GameServerList(gameID) {
        this.m_gameID = gameID || 0;
        this.m_stationList = new Array();
        this.m_roomList = new Array();
      }
      Object.defineProperty(GameServerList.prototype, "GameID", {
        get: function() {
          return this.m_gameID;
        },
        enumerable: true,
        configurable: true
      });
      GameServerList.prototype.addStation = function(pStation) {
        if (null == pStation) return null;
        var pExist = this.getGameStationByName(pStation.szStationName);
        if (null == pExist) {
          this.m_stationList.push(pStation);
          return pStation;
        }
        pExist = pStation;
        return pStation;
      };
      GameServerList.prototype.getGameStationByName = function(stationName) {
        for (var key in this.m_stationList) {
          var station = this.m_stationList[key];
          if (stationName == station.szStationName) return station;
        }
        return null;
      };
      GameServerList.prototype.addGameServer = function(pGameServer) {
        if (null == pGameServer) return null;
        var pExist = this.getGameServer(pGameServer.dwServerID);
        if (null == pExist) {
          this.m_roomList.push(pGameServer);
          return pGameServer;
        }
        pExist = pGameServer;
        return pGameServer;
      };
      GameServerList.prototype.getGameServer = function(nServerID) {
        for (var key in this.m_roomList) {
          var room = this.m_roomList[key];
          if (nServerID == room.dwServerID) return room;
        }
        return null;
      };
      GameServerList.prototype.getStation = function(nStationID) {
        for (var key in this.m_stationList) {
          var room = this.m_stationList[key];
          if (nStationID == room.dwStationID) return room;
        }
        return null;
      };
      GameServerList.prototype.getStatonList = function() {
        return this.m_stationList;
      };
      GameServerList.prototype.getAllGameServerList = function() {
        return this.m_roomList;
      };
      GameServerList.prototype.getStationOnlineCount = function(nStationID) {
        var ret = 0;
        for (var key in this.m_roomList) {
          var room = this.m_roomList[key];
          -1 != nStationID && nStationID == room.dwStationID && (ret += room.wOnLineCount);
        }
        return ret;
      };
      GameServerList.prototype.getGameServerList = function(stationID) {
        var ret = new Array();
        for (var key in this.m_roomList) {
          var room = this.m_roomList[key];
          -1 != stationID && stationID == room.dwStationID && ret.push(room);
        }
        return ret;
      };
      GameServerList.prototype.getOneGameServerInStation = function(nStationID) {
        var ret = 0;
        for (var key in this.m_roomList) {
          var room = this.m_roomList[key];
          if (nStationID == room.dwStationID) return room;
        }
        return null;
      };
      GameServerList.prototype.clearServerList = function() {
        this.m_roomList = new Array();
        this.m_stationList = new Array();
      };
      return GameServerList;
    }();
    exports.GameServerList = GameServerList;
    cc._RF.pop();
  }, {} ],
  Global: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74a7b5WWBpGlLzS+Y6wlhvQ", "Global");
    "use strict";
    window.G = {
      matchGameReady: null,
      goldGameReady: null
    };
    cc._RF.pop();
  }, {} ],
  HallClickNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f7eb0xX4T9On4+5fe6ajPpa", "HallClickNode");
    "use strict";
    cc.Class({
      extends: cc.Component,
      isPlay: false,
      properties: {
        clickAct: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.isPlay = true;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.node._touchListener.setSwallowTouches(false);
        if (require("HallUtils").isIPhoneX()) {
          var windowSize = cc.view.getVisibleSize();
          this.node.width = windowSize.width;
          this.node.height = windowSize.height;
        }
      },
      start: function start() {
        this.dragonDisplay = this.clickAct.getComponent(dragonBones.ArmatureDisplay);
      },
      callback: function callback() {
        this.dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.callback, this);
        this.isPlay = false;
        this.clickAct.active = false;
      },
      playerAct: function playerAct(touch, actName) {
        true == this.isPlay && this.callback();
        this.clickAct.active = true;
        this.clickAct.x = touch.x;
        this.clickAct.y = touch.y;
        this.dragonDisplay.playAnimation(actName, 1);
        this.dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, this.callback, this);
        this.isPlay = true;
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var randomNumer = Math.ceil(3 * Math.random());
        this.playerAct(poisition, "piao" + randomNumer);
      }
    });
    cc._RF.pop();
  }, {
    HallUtils: "HallUtils"
  } ],
  HallControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11ee8+DX65HzZ5mQRt5/YC2", "HallControl");
    "use strict";
    var _CGameLib = require("./gamelib/CGameLib");
    var _WeixinManager = require("../hall/weixin/WeixinManager");
    var _TSCommon = require("./TSCommon");
    var _Domain = require("./Domain");
    var HallResources = require("HallResources");
    var HallControl = cc.Class({
      publicUserInfo: null,
      m_gameLib: null,
      m_gameList: null,
      statics: {
        instance: null
      },
      ctor: function ctor() {
        var PublicUserInfo = require("PublicUserInfo");
        this.publicUserInfo = new PublicUserInfo();
        this.m_gameList = new Array();
        this.m_goodsList = new Array();
        this.m_chargeInfoList = new Array();
      },
      getPublicUserInfo: function getPublicUserInfo() {
        return this.publicUserInfo;
      },
      getWXUserInfo: function getWXUserInfo() {
        return this.m_wxUserInfo;
      },
      _onLoginDataCallBack: function _onLoginDataCallBack(isSucceed, data) {
        if (true == isSucceed) {
          var jsonObject = JSON.parse(data);
          console.log("-----------------LoginByIMei.aspx返回数据-------------------------data---" + data);
          console.log(jsonObject);
          var item = jsonObject[0];
          if (item.UserID <= 0) {
            console.log("_onLoginDataCallBack fail userDBID <= 0");
            require("HallResources").getInstance().showGoldTips("登录失败", true, false, 150);
            return;
          }
          this.publicUserInfo.userDBID = item.UserID;
          this.publicUserInfo.nDiamond = item.DiamondAmount;
          this.publicUserInfo.email = item.NewEmail;
          this.publicUserInfo.encryptPassword = item.EPassword;
          this.publicUserInfo.faceData = null;
          this.publicUserInfo.nFaceID = item.Face;
          this.publicUserInfo.nickName = item.NewNickName;
          this.publicUserInfo.sex = item.Sex;
          this.publicUserInfo.nGold = item.Money;
          this.publicUserInfo.vipLevel = item.VIPLevel;
          this.publicUserInfo.nFrag = item.FragNum;
          this.publicUserInfo.bankAmount = item.BankAmount;
          this.publicUserInfo.code = item.Code;
          this.publicUserInfo.myCode = item.MyCode;
          this.publicUserInfo.recommandID = item.HigherUserID;
          this.publicUserInfo.recommandName = item.HigherNickName;
          this.publicUserInfo.bindSendDiamond = item.BindSend;
          this.publicUserInfo.paySendDiamond = item.PaySend;
          this.publicUserInfo.agentPop = item.AgentPop;
          this.publicUserInfo.agentAuth = item.AgentAuth;
          this.publicUserInfo.isNewUser = item.IsNewUser;
          this.publicUserInfo.nPlayerQualifyingScore = 0;
          _Domain.Domain.ENV = item.env;
          _Domain.Domain.CURRENCYTYPE = item.currencyType;
          console.log("encryptPassword = " + this.publicUserInfo.encryptPassword);
          require("HallResources").getInstance().removeLoading();
          this.requestGameList();
          this.requestEXchangeList();
          this.requestShoppingList();
          this.requestTableInfo();
          HallResources.recordPlayerLogToServer(HallResources.recordList.register_success);
          require("HallWebRequest").getInstance().checkNewStatus();
          "mqqbrowser" != cc.sys.browserType && "wechatgame" != cc.sys.browserType || this.setMyWxDataToServer();
        } else console.log("_onLoginDataCallBack fail");
      },
      setMyWxDataToServer: function setMyWxDataToServer() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess && bolSuccess) {
            require("HallResources").getInstance().removeLoading();
            console.log("-----------------WxUserInfoSet.aspx成功----------------------------");
          }
        };
        var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
        var wxFaceUrl = _WeixinManager.WeixinManager.getInstance().userInfo.avatarUrl;
        var wxNickName = _WeixinManager.WeixinManager.getInstance().userInfo.nickName;
        self.myOpenId = myOpenId;
        require("HallWebRequest").getInstance().setWxUserInfo(myOpenId, wxFaceUrl, wxNickName, callBackFunc);
      },
      loginFinsh: function loginFinsh() {
        require("HallResources").getInstance().removeLoading();
        var HallResources = require("HallResources");
        _TSCommon.TSCommon.dispatchEvent(HallResources.onLoginFinish, null);
      },
      loginByIMEI: function loginByIMEI(imei, nickname, headUrl, WxAppID, WxOpenID) {
        require("HallResources").getInstance().showLoading();
        var headUrl = null == headUrl ? "" : headUrl;
        var WxAppID = null == WxAppID ? "" : WxAppID;
        var WxOpenID = null == WxOpenID ? "" : WxOpenID;
        var invitePlayerOpenid = "";
        if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
          invitePlayerOpenid = wx.getLaunchOptionsSync().query.inviteOpenId;
          null != invitePlayerOpenid && void 0 != invitePlayerOpenid || (invitePlayerOpenid = "");
          console.log("获得分享玩家的openid" + invitePlayerOpenid);
        }
        var gender = -1;
        if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
          var wxGender = _WeixinManager.WeixinManager.getInstance().userInfo.gender;
          console.log("获得微信的性别：" + wxGender);
          2 == wxGender ? gender = 0 : 1 == wxGender ? gender = 1 : 0 == wxGender && (gender = -1);
        }
        var szData = "IMei=" + imei + "&NickName=" + nickname + "&PartnerID=30001&Version=1&AppID=&OpenID=&AppType=1&InviterOpenID=" + invitePlayerOpenid + "&Gender=" + gender;
        console.log("登录信息szData====" + szData);
        require("HallWebRequest").getInstance().httpRequest("LoginByIMei.aspx", szData, this._onLoginDataCallBack.bind(this));
      },
      getGameList: function getGameList() {
        return this.m_gameList;
      },
      getShoppingList: function getShoppingList() {
        return this.m_goodsList;
      },
      getEXchangeList: function getEXchangeList() {
        return this.m_chargeInfoList;
      },
      exchangeGold: function exchangeGold(nDiamond, handle, gameID) {
        var self = this;
        gameID = gameID || 0;
        if (this.publicUserInfo.nDiamond < nDiamond) {
          handle && handle(11);
          return;
        }
        var szData = "userid=" + this.publicUserInfo.userDBID + "&diamond=" + nDiamond + "&GameID=" + gameID + "&pwd=" + self.publicUserInfo.encryptPassword + "&UseGoods=0&AppType=1";
        var httpCallback = function httpCallback(isSucceed, data) {
          if (!isSucceed) {
            console.loglog("HallControl:exchangeGold() failed");
            return;
          }
          require("HallResources").getInstance().removeLoading();
          var jsonObject = JSON.parse(data);
          console.log("-----------------DiamondExchangeGold.aspx返回数据----------------------------");
          console.log(jsonObject);
          var result = jsonObject.r;
          self.publicUserInfo.nGold = jsonObject.nm;
          self.publicUserInfo.nDiamond = jsonObject.da;
          handle && handle(result);
        };
        console.log("DiamondExchangeGold.aspx------------------------------" + szData);
        require("HallWebRequest").getInstance().httpRequest("DiamondExchangeGold.aspx", szData, httpCallback.bind(this));
      },
      requestShoppingList: function requestShoppingList() {
        var self = this;
        if (null != self.m_goodsList && self.m_goodsList.length > 0) return;
        var szData = "partnerid=0&version=0&AppType=1";
        var httpCallback = function httpCallback(isSucceed, data) {
          if (!isSucceed) {
            console.log("HallControl:getShoppingList() failed");
            return;
          }
          require("HallResources").getInstance().removeLoading();
          var jsonObject = JSON.parse(data);
          console.log("-----------------GetDiamondChargeList.aspx返回数据----------------------------");
          console.log(jsonObject);
          var itemData = jsonObject.table;
          for (var i = 0; i < itemData.length; i++) {
            var item = itemData[i];
            var gameInfo = [];
            gameInfo.gm = item.gm;
            gameInfo.mmgm = item.mmgm;
            gameInfo.ic = item.ic;
            gameInfo.mmp = item.mmp;
            gameInfo.mt = item.mt;
            gameInfo.p = item.p;
            gameInfo.pn = item.pn;
            gameInfo.rmb = item.rmb;
            1 == gameInfo.mt && self.m_goodsList.push(gameInfo);
          }
        };
        console.log("GetDiamondChargeList.aspx------------------------------" + szData);
        require("HallWebRequest").getInstance().httpRequest("GetDiamondChargeList.aspx", szData, httpCallback.bind(this));
      },
      requestEXchangeList: function requestEXchangeList() {
        var self = this;
        var httpCallback = function httpCallback(isSucceed, data) {
          if (!isSucceed) {
            console.log("HallControl:requestEXchangeList() failed");
            return;
          }
          require("HallResources").getInstance().removeLoading();
          var jsonObject = JSON.parse(data);
          console.log("-----------------GetDiamondExchangeList.aspx返回数据----------------------------");
          console.log(jsonObject);
          var itemData = jsonObject.table;
          for (var i = 0; i < itemData.length; i++) {
            var item = itemData[i];
            var gameInfo = [];
            gameInfo.gm = item.GoldMoney;
            gameInfo.da = item.DiamondAmount;
            gameInfo.ic = item.IsCommend;
            gameInfo.sgm = item.SendGoldMoney;
            self.m_chargeInfoList.push(gameInfo);
          }
        };
        require("HallWebRequest").getInstance().httpRequest("GetDiamondExchangeList.aspx", "AppType=1", httpCallback.bind(this));
      },
      requestGameList: function requestGameList() {
        var szData = "PartnerID=10&AppType=1";
        var self = this;
        require("HallWebRequest").getInstance().httpRequest("GetGameList.aspx", szData, function(isSucceed, data) {
          self.loginFinsh();
          if (true == isSucceed) {
            require("HallResources").getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------GetGameList.aspx返回数据----------------------------");
            console.log(jsonObject);
            var itemData = jsonObject.table;
            var firstGame = null;
            for (var i = 0; i < itemData.length; i++) {
              var item = itemData[i];
              var gameInfo = new cc.GameInfo();
              gameInfo.m_iId = item.GameID;
              gameInfo.m_sCn = item.ChineseName;
              gameInfo.m_sEn = item.EnglishName;
              gameInfo.m_iIv = item.IconVersion;
              gameInfo.m_sServeIp = item.ServerIP;
              gameInfo.m_iPort = item.Port;
              gameInfo.m_sVersion = item.Version;
              gameInfo.m_sDir = item.DownloadRoot;
              gameInfo.m_sWr = item.WebRoot;
              if (null == firstGame) {
                firstGame = new cc.GameInfo();
                firstGame = gameInfo;
              }
              self.m_gameList.push(gameInfo);
            }
            if (null != firstGame) {
              console.log("requestAllGameServerList ");
              self.m_gameLib = _CGameLib.CGameLib.getInstance();
              self.m_gameLib.createByHall(self.publicUserInfo, firstGame.m_sServeIp, firstGame.m_iPort);
            }
          } else console.log("requestGameList fail");
        });
      },
      requestTableInfo: function requestTableInfo() {
        var self = this;
        var szData = "UserID=" + this.publicUserInfo.userDBID + "&appType=1";
        var httpCallback = function httpCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            self.publicUserInfo.tableBoardInfo = jsonObject.table;
          }
        };
        require("HallWebRequest").getInstance().httpRequest("GetUserTableBoard.aspx", szData, httpCallback);
      }
    });
    HallControl.getInstance = function() {
      null == HallControl.instance && (HallControl.instance = new HallControl());
      return HallControl.instance;
    };
    cc._RF.pop();
  }, {
    "../hall/weixin/WeixinManager": "WeixinManager",
    "./Domain": "Domain",
    "./TSCommon": "TSCommon",
    "./gamelib/CGameLib": "CGameLib",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    PublicUserInfo: "PublicUserInfo"
  } ],
  HallPlatformInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "584825wTqZHoJ6oL10W49Aj", "HallPlatformInfo");
    "use strict";
    var _CGameLib = require("../hall/gamelib/CGameLib");
    var _WeixinManager = require("../hall/weixin/WeixinManager");
    var _TSCommon = require("TSCommon");
    var _Domain = require("../hall/Domain");
    var HallResources = require("HallResources");
    var Resources = require("Resources");
    var AladinSDK = require("../aladinSDK");
    var HallPlatformInfo = {
      extends: cc.Component,
      properties: {
        m_gameListScrollView: {
          default: null,
          type: cc.ScrollView
        },
        hallNode: {
          default: null,
          type: cc.Node
        },
        gameRoomNode: {
          default: null,
          type: cc.Node
        },
        userInfoLayer: {
          default: null,
          type: cc.Node
        },
        mallLayer: {
          default: null,
          type: cc.Node
        },
        setLayer: {
          default: null,
          type: cc.Node
        },
        kefuLayer: {
          default: null,
          type: cc.Node
        },
        inviteFriendLayer: {
          default: null,
          type: cc.Node
        },
        helpLayer: {
          default: null,
          type: cc.Node
        },
        dailyLayer: {
          default: null,
          type: cc.Node
        },
        getRewardLayer: {
          default: null,
          type: cc.Node
        },
        roomList: {
          default: null,
          type: cc.ScrollView
        },
        rankListNode: {
          default: null,
          type: cc.Sprite
        },
        rankChildrenNode: {
          default: null,
          type: cc.Sprite
        },
        moneyNode: {
          default: null,
          type: cc.Node
        },
        quickSatrtGameBtn: {
          default: null,
          type: cc.Button
        },
        goldCount: {
          default: null,
          type: cc.Label
        },
        diamondCount: {
          default: null,
          type: cc.Label
        },
        playerId: {
          default: null,
          type: cc.Label
        },
        playerName: {
          default: null,
          type: cc.Label
        },
        playerIcon: {
          default: null,
          type: cc.Sprite
        },
        commonTipsPrefab: {
          default: null,
          type: cc.Prefab
        },
        huobaoGameBtnIcon: {
          default: null,
          type: cc.Sprite
        },
        changwanGameBtnIcon: {
          default: null,
          type: cc.Sprite
        },
        huobaoGameBtnLabel: {
          default: null,
          type: cc.Label
        },
        changwanGameBtnLabel: {
          default: null,
          type: cc.Label
        },
        collectBtn: {
          default: null,
          type: cc.Button
        },
        collectNode: {
          default: null,
          type: cc.Node
        },
        dailyLoginRedPoint: {
          default: null,
          type: cc.Node
        },
        collectionLoginRedPoint: {
          default: null,
          type: cc.Node
        },
        loadingNode: {
          default: null,
          type: cc.Node
        },
        commonTipsLabelNode: {
          default: null,
          type: cc.Node
        },
        commonTipsLabel: {
          default: null,
          type: cc.Label
        },
        commonTipsIcon: {
          default: null,
          type: cc.Sprite
        },
        moreGameNode: {
          default: null,
          type: cc.Node
        },
        shrinkRank: {
          default: null,
          type: cc.Node
        },
        extendedRank: {
          default: null,
          type: cc.Node
        },
        groupdRank: {
          default: null,
          type: cc.Node
        },
        bgMusic: {
          default: null,
          url: cc.AudioClip
        },
        gameName: {
          default: null,
          type: cc.Sprite
        },
        yjlyPlayerCount: {
          default: null,
          type: cc.Label
        },
        cxzPlayerCount: {
          default: null,
          type: cc.Label
        },
        shadowNode: {
          default: null,
          type: cc.Node
        },
        adNode: {
          default: null,
          type: cc.Node
        },
        qualifyingBtn: {
          default: null,
          type: cc.Node
        },
        seasonNode: {
          default: null,
          type: cc.Node
        },
        newSeasonNode: {
          default: null,
          type: cc.Node
        },
        consecutiveVictoriesNode: {
          default: null,
          type: cc.Node
        },
        consecutiveVictoriesRewardNode: {
          default: null,
          type: cc.Node
        },
        consecutiveRedPoint: {
          default: null,
          type: cc.Node
        },
        gameMatchLayer: {
          default: null,
          type: cc.Node
        },
        canSeasonLevelRewardBtn: {
          default: null,
          type: cc.Node
        },
        userIconBtn: {
          default: null,
          type: cc.Node
        },
        dailyLoginBtn: {
          default: null,
          type: cc.Node
        },
        inviteOtherBtn: {
          default: null,
          type: cc.Node
        },
        moreBtn: {
          default: null,
          type: cc.Node
        },
        rankNode: {
          default: null,
          type: cc.Node
        },
        getFreeDiamondNode: {
          default: null,
          type: cc.Node
        },
        moreGameListNode: {
          default: null,
          type: cc.Node
        },
        rankExtendNode: {
          default: null,
          type: cc.Node
        },
        getFreeDiamondBtn: {
          default: null,
          type: cc.Node
        },
        goldChooseNode: {
          default: null,
          type: cc.Node
        },
        moreGameUpNode: {
          default: null,
          type: cc.Node
        },
        hallBottomBg: {
          default: null,
          type: cc.Node
        },
        moreGameUpBg: {
          default: null,
          type: cc.Node
        },
        hotGameBtn: {
          default: null,
          type: cc.Button
        },
        cwGameBtn: {
          default: null,
          type: cc.Button
        },
        moreGameBtn: {
          default: null,
          type: cc.Button
        },
        versionLabel: {
          default: null,
          type: cc.Label
        },
        hotGameEnName: "",
        cwGameEnName: ""
      },
      loadAct: function loadAct() {
        var playNode = this.hotGameBtn.node.getChildByName("xueliu_act");
        playNode.active = true;
        var dragonDisplay = playNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("xueliuchenghe");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        var playNode = this.hotGameBtn.node.getChildByName("xueliu1_act");
        playNode.active = true;
        var dragonDisplay = playNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("xueliuchenghe_baiguang");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        var playNode = this.cwGameBtn.node.getChildByName("xuezhan_act");
        playNode.active = true;
        var dragonDisplay = playNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("xuezhandaodi");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        var playNode = this.cwGameBtn.node.getChildByName("xuezhan1_act");
        playNode.active = true;
        var dragonDisplay = playNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("xuezhandaodi_baiguang");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        var playNode = this.qualifyingBtn.getChildByName("qualifying_act");
        playNode.active = true;
        var dragonDisplay = playNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("chuangguanshengji");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        var playNode = this.node.getChildByName("hall_bg").getChildByName("hallBg_act");
        var dragonDisplay = playNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("newAnimation");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      onLoad: function onLoad() {
        cc.audioEngine.stopAll();
        var self = this;
        this.gameMatchLayer.active = false;
        this.clickHideBtnTimes = 0;
        this.versionLabel.string = _Domain.Domain.Gversion;
        if (require("HallUtils").isIPhoneX()) {
          if (!cc.sys.isNative && cc.sys.isMobile) {
            var canvasFit = this.node.getComponent(cc.Canvas);
            canvasFit.fitHeight = true;
            canvasFit.fitWidth = false;
          }
          cc.loader.loadRes("texture/hallRes/iphonex_bg", cc.SpriteFrame, function(error, spriteframe) {
            var bgSp = self.node.getChildByName("hall_bg").getComponent(cc.Sprite);
            error || (bgSp.spriteFrame = spriteframe);
          });
          cc.loader.loadRes("texture/hallRes/iphonex_hallBottomBg", cc.SpriteFrame, function(error, spriteframe) {
            var bgSp = self.hallBottomBg.getChildByName("bgSprite").getComponent(cc.Sprite);
            error || (bgSp.spriteFrame = spriteframe);
          });
          self.shadowNode.width = 2436;
          self.userIconBtn.setPositionX(-350);
          self.dailyLoginBtn.setPositionX(700);
          self.inviteOtherBtn.setPositionX(700);
          self.moreBtn.setPositionX(700);
          self.rankNode.setPositionX(-60);
          self.rankExtendNode.setPositionX(-60);
          self.collectBtn.node.setPositionX(480);
          this.getFreeDiamondBtn.setPositionX(700);
          self.goldChooseNode.setPositionX(-400);
          self.moreGameUpNode.setPositionX(-400);
          self.moreGameUpBg.setPositionX(-600);
          console.log("设定x坐标");
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          this.getFreeDiamondBtn.active = true;
          this.moreBtn.setPositionY(-144);
          console.log("Ios设置更多游戏按钮坐标");
        } else {
          this.moreBtn.setPositionY(-39);
          console.log("Android设置更多游戏按钮坐标");
        }
        this.adNode.active = true;
        this.moreGameNode.active = true;
        if (this.isWeChatPlatform()) {
          var AladinBannerNode = AladinSDK.getBannerNode();
          if (!window.AladinBannerNode) {
            this.adNode.addChild(AladinBannerNode);
            window.AladinBannerNode = AladinBannerNode;
            cc.game.addPersistRootNode(this.adNode);
          }
          var AladinMoreNode = AladinSDK.getMoreNode();
          if (!window.AladinMoreNode) {
            this.moreGameNode.x = require("HallUtils").isIPhoneX() ? 1480 : 1205;
            window.AladinMoreNode = AladinMoreNode;
            this.moreGameNode.addChild(AladinMoreNode);
            cc.game.addPersistRootNode(this.moreGameNode);
          }
          AladinSDK.ShowMore();
          AladinSDK.ShowBanner();
        }
        _TSCommon.TSCommon.addEvent(HallResources.onShowBannerAndMoreGame, this.showBannerAndMoreGame, this);
        _TSCommon.TSCommon.addEvent(HallResources.onHideBannerAndMoreGame, this.hideBannerAndMoreGame, this);
        self.awardAmount = 0;
        self.totalAwardTimes = 0;
        self.bankruptAwardAmount = 0;
        self.curAwardTimes = 0;
        self.bClickCollectionBtn = false;
        self.shareTicket = "";
        var weixinUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
        if (weixinUserInfo && weixinUserInfo.avatarUrl) {
          var imgurl = weixinUserInfo.avatarUrl + "?aaa=aa.jpg";
          cc.loader.load(imgurl, function(err, texture) {
            self.playerIcon.spriteFrame = new cc.SpriteFrame(texture);
          });
        }
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        self.goldCount.string = this.formatGold(publicUserInfo.nGold, true);
        self.isWeChatPlatform() && this.refreshPlayerDiamondCount();
        this.playerId.string = publicUserInfo.userDBID;
        this.playerName.string = publicUserInfo.nickName;
        self.getCollectInfo();
        var onMoneyNotEnough = function onMoneyNotEnough(event) {
          var showNoMoneyTips = function showNoMoneyTips(bolOpenView) {
            if (bolOpenView) {
              var collectLayer = cc.instantiate(self.commonTipsPrefab);
              var data = [];
              data.titleIcon = "texture/commonRes/frameTips/friendHelpTitle";
              data.msg = "不好了！破产了！快点请求好友接济！分享给任意好友，立即领取" + self.bankruptAwardAmount + "金币！";
              data.womenThink = "不好了，破产了！快点请求好友接济！\n分享给任意好友，立即领取" + self.bankruptAwardAmount + "金币！";
              data.showIcon = "texture/commonRes/frameTips/jinbi";
              data.showIconLabel = "*" + self.bankruptAwardAmount;
              data.buttonIcon2 = "texture/commonRes/frameTips/mallBuyBtn";
              data.button2Func = function() {
                collectLayer.getComponent("commonTipsLayer").clickCloseBtn();
                self.onClickMallBtn();
              };
              data.buttonIcon3 = "texture/commonRes/frameTips/quickShareBtn";
              data.button3Func = function() {
                collectLayer.getComponent("commonTipsLayer").clickCloseBtn();
                if (self.isWeChatPlatform()) {
                  self.getBankruptReward();
                  wx.shareAppMessage({
                    title: "救命啊，我是全村人的希望！",
                    imageUrl: HallResources.rupShareImgUrl
                  });
                }
              };
              data.otherText1 = "今日领取数：";
              data.otherText2 = "" + (self.totalAwardTimes - self.curAwardTimes);
              data.otherText3 = "/" + self.totalAwardTimes;
              collectLayer.parent = self.node;
              collectLayer.getComponent("commonTipsLayer").initData(data);
              collectLayer.setPosition(0, 0);
            } else {
              var collectLayer = cc.instantiate(self.commonTipsPrefab);
              var data = [];
              data.titleIcon = "texture/commonRes/frameTips/coinNoEnoughTitle";
              data.msg = "您的金币已不足以继续游戏，请前往商城购买。";
              data.showIcon = "texture/commonRes/frameTips/jinbi";
              data.buttonIcon1 = "texture/commonRes/frameTips/goToMallBtn";
              data.button1Func = function() {
                collectLayer.getComponent("commonTipsLayer").clickCloseBtn();
                self.onClickMallBtn();
              };
              collectLayer.parent = self.node;
              collectLayer.getComponent("commonTipsLayer").initData(data);
              collectLayer.setPosition(0, 0);
            }
          };
          self.getBankruptInfo(showNoMoneyTips);
        };
        this.onMoneyNotEnough = onMoneyNotEnough;
        _TSCommon.TSCommon.addEvent(HallResources.onNoEnoughGold, onMoneyNotEnough, this);
        _TSCommon.TSCommon.addEvent(HallResources.onGoldOrDiamondChanged, this.changMoney, this);
        _TSCommon.TSCommon.addEvent(HallResources.onGetMoreDeskBg, this.onClickInviteBtn, this);
        this.loadAct();
        cc.loader.loadResDir("animation/dragonBones/dh_xueliuchenghe", function(err, assets) {
          self.xueliuchenghe = assets;
        });
        var showLoadingFunc = function showLoadingFunc() {
          self.loadingNode.active = true;
          this.loadingNode.getComponent("Loading").showActive();
        };
        this.showLoadingFunc = showLoadingFunc;
        _TSCommon.TSCommon.addEvent(HallResources.onShowLoadingNode, showLoadingFunc, this);
        var clearLoadingFunc = function clearLoadingFunc() {
          self.loadingNode.active = false;
        };
        this.clearLoadingFunc = clearLoadingFunc;
        _TSCommon.TSCommon.addEvent(HallResources.onClearLoadingNode, clearLoadingFunc, this);
        var clearDailyLoginRedPointFunc = function clearDailyLoginRedPointFunc() {
          self.dailyLoginRedPoint.active = false;
        };
        this.clearDailyLoginRedPointFunc = clearDailyLoginRedPointFunc;
        _TSCommon.TSCommon.addEvent(HallResources.onClearDailyLoginRedPoint, clearDailyLoginRedPointFunc, this);
        var clearConsecutiveRedPointFunc = function clearConsecutiveRedPointFunc() {
          self.consecutiveRedPoint.active = false;
        };
        this.clearConsecutiveRedPointFunc = clearConsecutiveRedPointFunc;
        _TSCommon.TSCommon.addEvent(HallResources.onClearConsecutiveRedPoint, clearConsecutiveRedPointFunc, this);
        var clearCollectionRedPointFunc = function clearCollectionRedPointFunc() {
          self.collectionLoginRedPoint.active = false;
        };
        this.clearCollectionRedPointFunc = clearCollectionRedPointFunc;
        var refreshHallSeasonLevelUp = function refreshHallSeasonLevelUp(event) {
          self.canSeasonLevelRewardBtn.active = event.data;
        };
        this.refreshHallSeasonLevelUp = refreshHallSeasonLevelUp;
        _TSCommon.TSCommon.addEvent(HallResources.onSeasonLevelUp, refreshHallSeasonLevelUp, this);
        _TSCommon.TSCommon.addEvent(HallResources.onClearCollectionLoginRedPoint, clearCollectionRedPointFunc, this);
        _TSCommon.TSCommon.addEvent(HallResources.onRefreshPlayerDiamondCount, this.refreshPlayerDiamondCount, this);
        _TSCommon.TSCommon.addEvent(HallResources.onChangePlayerQualifyingScore, this.refreshPlayerQualifying, this);
        var showMsg = function showMsg(msg) {
          msg.data.length > 1 ? self.showMessage(msg.data[0], msg.data[1]) : self.showMessage(msg.data[0]);
        };
        this.showMsg = showMsg;
        _TSCommon.TSCommon.addEvent(HallResources.onShowFlyMessage, showMsg, this);
        if (self.isWeChatPlatform()) {
          wx.request({
            url: "https://mprogram.boomegg.cn/sprogram/ads/c/ad/get",
            method: "post",
            data: {
              id: "11111"
            },
            header: {
              "content-type": "application/x-www-form-urlencoded"
            },
            success: function success(res) {
              0 == res.data.ret && (self.imgUrl = res.data.data.imgUrl);
            }
          });
          wx.showShareMenu();
          wx.onShareAppMessage(function(res) {
            return {
              title: "带你装逼带你飞，要跟我一起来赚钱吗？",
              imageUrl: HallResources.shareImgUrl,
              success: function success(res) {
                console.log("转发成功!!!");
              },
              fail: function fail(res) {
                console.log("转发失败!!!");
              }
            };
          });
          wx.updateShareMenu({
            withShareTicket: true
          });
        }
        this.sendMsgToWXChildren();
        this.getDailyReward();
        this.getPlayerQualifyingData();
        this.updateConsecutiveVictoriesData();
        this.seasonNode.getComponent("SeasonLayer").updateGetRewardData();
        this.loadingNode.getComponent("Loading").showActive();
        _TSCommon.TSCommon.addEvent(HallResources.openBgMusic, this.onPlayBgMusic, this);
        _TSCommon.TSCommon.addEvent(HallResources.closeBgMusic, this.onCloseBgMusic, this);
        if (!HallResources.ChangeOncePlayMusic) {
          cc.sys.localStorage.setItem("bgMusic", 1);
          cc.sys.localStorage.setItem("voiceEffect", 1);
          HallResources.ChangeOncePlayMusic = true;
        }
        var bgMusicOpen = parseInt(cc.sys.localStorage.getItem("bgMusic") || 0);
        0 != bgMusicOpen && this.onPlayBgMusic();
        this.initGamelinSink();
        this.onSetPlayerCount();
        this.refreshMoreGmaeList();
        this.createBanner();
        require("HallWebRequest").getInstance().getPrivateRoomInfo();
        cc.game.on(cc.game.EVENT_HIDE, function() {
          console.log("cc.audioEngine.pauseAll");
          cc.audioEngine.stopAll();
        });
        cc.game.on(cc.game.EVENT_SHOW, function() {
          console.log("cc.audioEngine.rePlay");
          cc.audioEngine.resumeAll();
          cc.audioEngine.play(self.bgMusic, true);
        });
      },
      start: function start() {
        if (G.matchGameReady) this.onClickMatchGame(); else if (36 == G.goldGameReady) {
          this.rankListNode.node.active = false;
          this.onClickButton("xueliu");
        } else if (44 == G.goldGameReady) {
          this.rankListNode.node.active = false;
          this.onClickButton("xuezhan");
        } else if (97 == G.goldGameReady) {
          this.rankListNode.node.active = false;
          this.onClickButton("gdmj");
        }
      },
      showBannerAndMoreGame: function showBannerAndMoreGame() {
        if (this.isWeChatPlatform()) {
          AladinSDK.ShowMore();
          AladinSDK.ShowBanner();
        }
      },
      hideBannerAndMoreGame: function hideBannerAndMoreGame() {
        if (this.isWeChatPlatform()) {
          AladinSDK.HideMore();
          AladinSDK.HideBanner();
        }
      },
      refreshPlayerQualifying: function refreshPlayerQualifying() {
        this.getPlayerQualifyingData();
      },
      getPlayerQualifyingData: function getPlayerQualifyingData() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------xcxGetUserBalance.aspx返回数据----------------------------");
            console.log(jsonObject);
            var seasonStartTime = jsonObject.SeasonStartTime;
            var seasonEndTime = jsonObject.SeasonEndTime;
            var score = jsonObject.Score;
            var divisionID = jsonObject.DivisionID;
            var qualifyingData = jsonObject.table;
            HallResources.getInstance().setQualifyingData(qualifyingData);
            require("HallControl").getInstance().getPublicUserInfo().nPlayerQualifyingScore = score;
            self.qualifyingBtn.getComponent("HallQualifying").changeRank(score);
            var rankData = HallResources.getInstance().getDivisionData();
            self.seasonNode.getComponent("SeasonLayer").initData(score, rankData, seasonStartTime, seasonEndTime, divisionID);
            self.newSeasonNode.getComponent("NewSeasonLayer").initData(seasonStartTime, seasonEndTime);
          }
        };
        require("HallWebRequest").getInstance().getDivisionGetInfo(callBackFunc);
      },
      createBanner: function createBanner() {
        this.isCanShowAd();
      },
      isCanShowAd: function isCanShowAd() {
        var ret = false;
        if (cc.sys.platform === cc.sys.WECHAT_GAME) {
          var current_version = wx.getSystemInfoSync().SDKVersion;
          -1 === this.compareVersion(current_version, "2.0.4") ? console.log("=====版本不够2.0.4，视频广告不能用") : ret = true;
        }
        return ret;
      },
      refreshMoreGmaeList: function refreshMoreGmaeList() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------GetHotAndLastPlayGame.aspx返回数据----------------------------");
            console.log(jsonObject.table);
            var table = jsonObject.table[0];
            var gameList = require("HallControl").getInstance().getGameList();
            for (var i = 0; i < gameList.length; i++) {
              if (gameList[i].m_iId == table.HotGameID) {
                var s = "texture/hallRes/gameList/" + gameList[i].m_sEn + "_hb_title";
                cc.loader.loadRes("texture/hallRes/gameList/" + gameList[i].m_sEn + "_hb_title", cc.SpriteFrame, function(err, spriteFrame) {
                  err || (self.huobaoGameBtnIcon.spriteFrame = spriteFrame);
                });
                "gdmj" == gameList[i].m_sEn ? self.huobaoGameBtnLabel.string = "鸡平胡" : self.huobaoGameBtnLabel.string = "换三张";
                self.hotGameEnName = gameList[i].m_sEn;
              }
              table.LastPlayGameID = 44;
              if (gameList[i].m_iId == table.LastPlayGameID) {
                var enName = gameList[i].m_sEn;
                97 == gameList[i].m_iId && (enName = "qidai");
                cc.loader.loadRes("texture/hallRes/gameList/" + enName + "_cw_title", cc.SpriteFrame, function(err, spriteFrame) {
                  err || (self.changwanGameBtnIcon.spriteFrame = spriteFrame);
                });
                "gdmj" == gameList[i].m_sEn ? self.changwanGameBtnLabel.string = "" : self.changwanGameBtnLabel.string = "换三张";
                self.cwGameEnName = gameList[i].m_sEn;
              }
            }
            self.moreGameListNode.getComponent("MoreGameListLayer").initData(gameList, table.HotGameID, table.LastPlayGameID);
          }
        };
        require("HallWebRequest").getInstance().getGetHotAndLastPlayGame(callBackFunc);
      },
      onClickMoreGameListBtn: function onClickMoreGameListBtn() {
        HallResources.getInstance().playButtonEffect();
        this.rankListNode.node.active = false;
        this.moreGameListNode.active = true;
        this.hallNode.active = false;
      },
      initGamelinSink: function initGamelinSink() {
        var gameList = require("HallControl").getInstance().getGameList();
        var gameInfo;
        for (var i = 0; i < gameList.length; i++) if (36 === gameList[i].m_iId) {
          gameInfo = gameList[i];
          break;
        }
        require("GameEntrance").start(gameInfo.m_sServeIp, gameInfo.m_iPort, gameInfo.m_sWr);
      },
      onSetPlayerCount: function onSetPlayerCount() {
        var pRoomList1 = HallResources.getInstance().getLianXiChangStation("yjly");
        var pRoomList2 = HallResources.getInstance().getLianXiChangStation("cxz");
        var gameLibSink = require("GameLibSink").getInstance();
        var gameLib = gameLibSink.getGameLib();
        var nPlayerCount1 = 0;
        var nPlayerCount2 = 0;
        for (var i = 0; i < pRoomList1.length; i++) nPlayerCount1 += gameLib.getStationOnlineCount(pRoomList1[i].dwStationID);
        for (var i = 0; i < pRoomList1.length; i++) nPlayerCount2 += gameLib.getStationOnlineCount(pRoomList2[i].dwStationID);
        console.log("一脚癞油玩家人数：" + nPlayerCount1);
        console.log("撮虾子玩家人数：" + nPlayerCount2);
        this.yjlyPlayerCount.string = nPlayerCount1;
        this.cxzPlayerCount.string = nPlayerCount2;
      },
      onPlayBgMusic: function onPlayBgMusic() {
        this.bgMusic && (this.m_bgMusicAudioID = cc.audioEngine.play(this.bgMusic, true));
      },
      onCloseBgMusic: function onCloseBgMusic() {
        void 0 != this.m_bgMusicAudioID && cc.audioEngine.stop(this.m_bgMusicAudioID);
      },
      onDestroy: function onDestroy() {
        this.onCloseBgMusic();
        _TSCommon.TSCommon.removeEvent(HallResources.onGoldOrDiamondChanged, this.changMoney, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onNoEnoughGold, this.onMoneyNotEnough, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onShowLoadingNode, this.showLoadingFunc, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onClearLoadingNode, this.clearLoadingFunc, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onClearDailyLoginRedPoint, this.clearDailyLoginRedPointFunc, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onClearConsecutiveRedPoint, this.clearConsecutiveRedPointFunc, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onClearCollectionLoginRedPoint, this.clearCollectionRedPointFunc, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onShowFlyMessage, this.showMsg, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onGetMoreDeskBg, this.onClickInviteBtn, this);
        _TSCommon.TSCommon.removeEvent(HallResources.openBgMusic, this.onPlayBgMusic, this);
        _TSCommon.TSCommon.removeEvent(HallResources.closeBgMusic, this.onCloseBgMusic, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onRefreshPlayerDiamondCount, this.refreshPlayerDiamondCount, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onChangePlayerQualifyingScore, this.refreshPlayerQualifying, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onSeasonLevelUp, this.refreshHallSeasonLevelUp, this);
      },
      setShadowNodeVis: function setShadowNodeVis(event) {
        var data = event.data;
        var self = this;
        if (data) {
          var action = cc.fadeIn(.01);
          this.shadowNode.active = data;
          this.shadowNode.runAction(action);
        } else {
          var action = cc.fadeOut(.2);
          var action2 = cc.callFunc(function() {
            self.shadowNode.active = data;
          });
          var sequence = cc.sequence(action, action2);
          this.shadowNode.runAction(sequence);
        }
      },
      refreshPlayerDiamondCount: function refreshPlayerDiamondCount() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------xcxGetUserBalance.aspx返回数据----------------------------");
            console.log(jsonObject);
            var RetCode = jsonObject.RetCode;
            var myBalance = jsonObject.myBalance;
            if (1 == RetCode) {
              self.diamondCount.string = myBalance;
              require("HallControl").getInstance().getPublicUserInfo().nDiamond = myBalance;
            } else _TSCommon.TSCommon.dispatchEvent(this.onShowFlyMessage, [ "获取钻石数目失败" ]);
          }
        };
        console.log("告诉服务器，去微信请求获得钻石");
        var myData = _WeixinManager.WeixinManager.getInstance().userInfo;
        console.log(myData);
        var myOpenId = myData.openid;
        require("HallWebRequest").getInstance().getPlayerDiamondCount(myOpenId, callBackFunc);
      },
      getInviteFriendData: function getInviteFriendData() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess && bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxInviteAwardGetActivityInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var activityData = [];
            var startTime = jsonObject.StartTime;
            var endTime = jsonObject.EndTime;
            activityData.awardOne = jsonObject.AwardOne;
            activityData.awardTwo = jsonObject.AwardTwo;
            activityData.awardThree = jsonObject.AwardThree;
            activityData.startTime = self.timeFindMonthAndDay(startTime) + " ~";
            activityData.endTime = self.timeFindMonthAndDay(endTime);
            self.inviteFriendLayer.getComponent("inviteFriendLayer").initData(activityData);
          }
        };
        require("HallWebRequest").getInstance().getWxInviteActivityInfo(callBackFunc);
        if (self.isWeChatPlatform()) {
          var callBackFunc = function callBackFunc(bolSuccess, data) {
            if (bolSuccess && bolSuccess) {
              HallResources.getInstance().removeLoading();
              var jsonObject = JSON.parse(data);
              console.log("-----------------WxInviteAwardGetInfo.aspx返回数据----------------------------");
              console.log(jsonObject);
              var activityData = [];
              var friendData = jsonObject.table;
              var img = self.imgUrl;
              self.inviteFriendLayer.getComponent("inviteFriendLayer").initFriendData(friendData, img);
            }
          };
          if (_WeixinManager.WeixinManager.getInstance().userInfo) {
            var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
            require("HallWebRequest").getInstance().getWxInviteAwardGetInfo(myOpenId, callBackFunc);
          }
        }
      },
      getBankruptReward: function getBankruptReward() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          console.log(bolSuccess + "回调金币" + data);
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxBankruptAwardGetAward.aspx返回数据----------------------------");
            console.log(jsonObject);
            var backMsg = jsonObject.RetCode;
            if (0 == backMsg) console.log("领取失败"); else if (1 == backMsg) {
              console.log("领取成功,获得金币：" + self.bankruptAwardAmount);
              var goldData = require("HallControl").getInstance().getPublicUserInfo().nGold;
              require("HallControl").getInstance().getPublicUserInfo().nGold = parseInt(self.bankruptAwardAmount) + parseInt(goldData);
              self.collectBtn.node.active = false;
              _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "+3000", "texture/hallRes/roomInfo/gold" ]);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onGoldOrDiamondChanged, true);
            } else 11 == backMsg ? console.log("密码错误") : 12 == backMsg && console.log("已达到领取次数上限");
          }
        };
        require("HallWebRequest").getInstance().getBankruptReward(callBackFunc);
      },
      getBankruptInfo: function getBankruptInfo(func) {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxBankruptAwardGetInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            self.totalAwardTimes = jsonObject.TotalAwardTimes;
            self.bankruptAwardAmount = jsonObject.AwardAmount;
            self.curAwardTimes = jsonObject.CurAwardTimes;
            func(self.curAwardTimes < self.totalAwardTimes);
          }
        };
        require("HallWebRequest").getInstance().getBankruptInfo(callBackFunc);
      },
      getCollectInfo: function getCollectInfo() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxFavAwardGetInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var isAward = jsonObject.IsAward;
            self.awardAmount = jsonObject.AwardAmount;
            self.collectBtn.node.active = 0 == isAward;
          }
        };
        require("HallWebRequest").getInstance().getCollectInfo(callBackFunc);
      },
      sendMsgToWXChildren: function sendMsgToWXChildren() {
        var self = this;
        console.log("发送数据到子域");
        if (self.isWeChatPlatform()) {
          var tbData = wx.getLaunchOptionsSync();
          if ("undefined" == tbData.shareTicket || null == tbData.shareTicket || "" == tbData.shareTicket) ; else {
            console.log("这里给tbData.shareTicket赋值了，说明从群分享打开");
            self.shareTicket = tbData.shareTicket;
          }
          this.updateWxRankData();
        }
      },
      updateWxRankData: function updateWxRankData() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxFriendsScoreRank.aspx返回数据----------------------------");
            console.log(jsonObject);
            var data = jsonObject.table[0];
            var playerRankNum = data.RankNum;
            var playerOpenID = data.OpenID;
            var playerScore = data.Score;
            var kvDataList = new Array();
            kvDataList.push({
              key: "playerScore",
              value: "" + playerScore
            });
            wx.setUserCloudStorage({
              KVDataList: kvDataList
            });
            self._updateSubDomainCanvas();
          }
        };
        var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
        require("HallWebRequest").getInstance().getPlayerData(myOpenId, callBackFunc);
      },
      changMoney: function changMoney() {
        var self = this;
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        self.goldCount.string = this.formatGold(publicUserInfo.nGold, true);
      },
      openConsecutiveVictoriesReward: function openConsecutiveVictoriesReward(winCount) {
        this.consecutiveVictoriesRewardNode.active = true;
        this.consecutiveVictoriesRewardNode.getComponent("ConsecutiveVictoriesRewardLayer").initData(winCount);
      },
      openGetReward: function openGetReward(data) {
        this.getRewardLayer.active = true;
        this.getRewardLayer.getComponent("getRewardLayer").initData(data);
      },
      onClickMoreGameBtn: function onClickMoreGameBtn() {
        HallResources.getInstance().playButtonEffect();
        var self = this;
        self.isWeChatPlatform() && wx.request({
          url: "https://mprogram.boomegg.cn/sprogram/ads/c/ad/get",
          method: "post",
          data: {
            id: _Domain.Domain.WEIXIN_APPID
          },
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          success: function success(res) {
            if (0 == res.data.ret) {
              var arr = Array();
              arr.push(res.data.data.imgUrl);
              wx.previewImage({
                current: res.data.data.imgUrl,
                urls: arr
              });
            }
          }
        });
      },
      onClickQuickStartButton: function onClickQuickStartButton() {
        HallResources.getInstance().playButtonEffect();
        var gameLibSink = require("GameLibSink").getInstance();
        var gameLib = gameLibSink.getGameLib();
        var pRoomList = gameLib.getStationList();
        var size = pRoomList.length;
        if (0 == size) return;
        var server = HallResources.getInstance().getEnterBestRoom(this.chooseGameType);
        if (null == server) {
          console.log("没有服务器或者金币不足");
          _TSCommon.TSCommon.dispatchEvent(HallResources.onNoEnoughGold, true);
          return;
        }
        gameLib.autoEnterGameRoom(server.szStationName);
        HallResources.getInstance().showLoading();
      },
      onClickGameBtn: function onClickGameBtn(event, data) {
        var self = this;
        var action1 = cc.moveBy(.25, -30, 0);
        var runCallback = cc.callFunc(function() {
          self.rankListNode.node.active = false;
          self.moreGameListNode.active = false;
          HallResources.recordPlayerLogToServer(HallResources.recordList.choose_method);
          if (0 == data) self.onClickButton("yjly"); else if (36 == data) {
            cc.director.preloadScene("XueLiuGameScene");
            self.onClickButton("xueliu");
            HallResources.recordPlayerLogToServer(HallResources.recordList.click_xueliu);
          } else if (44 == data) {
            cc.director.preloadScene("XueLiuGameScene");
            self.onClickButton("xuezhan");
            HallResources.recordPlayerLogToServer(HallResources.recordList.click_xuezhan);
          } else if (97 == data) self.onClickButton("gdmj"); else if (101 == data) {
            self.onClickButton("xueliu");
            HallResources.recordPlayerLogToServer(HallResources.recordList.click_xueliu);
          } else if (102 == data) {
            cc.director.preloadScene("XueLiuGameScene");
            self.onClickButton("xuezhan");
            HallResources.recordPlayerLogToServer(HallResources.recordList.click_xuezhan);
          }
        });
        var seq = cc.sequence(action1, runCallback);
        this.qualifyingBtn.runAction(seq);
        var action2 = cc.moveBy(.25, 30, 0);
        this.hotGameBtn.node.runAction(action2);
        var action3 = cc.moveBy(.25, 30, 0);
        this.cwGameBtn.node.runAction(action3);
        var action4 = cc.moveBy(.25, 30, 0);
        this.moreGameBtn.node.runAction(action4);
      },
      changeMove: function changeMove() {
        var self = this;
        var runCallback = cc.callFunc(function() {
          self.qualifyingBtn.setPositionX(-271);
        });
        var action1 = cc.moveBy(.25, 30, 0);
        var seq = cc.sequence(runCallback, action1);
        this.qualifyingBtn.runAction(seq);
        var runCallback2 = cc.callFunc(function() {
          self.hotGameBtn.node.setPositionX(271);
        });
        var action2 = cc.moveBy(.25, -30, 0);
        var seq2 = cc.sequence(runCallback2, action2);
        this.hotGameBtn.node.runAction(seq2);
        var action3 = cc.moveBy(.25, -30, 0);
        var runCallback3 = cc.callFunc(function() {
          self.cwGameBtn.node.setPositionX(176);
        });
        var seq3 = cc.sequence(runCallback3, action3);
        this.cwGameBtn.node.runAction(seq3);
        var action4 = cc.moveBy(.25, -30, 0);
        var runCallback4 = cc.callFunc(function() {
          self.moreGameBtn.node.setPositionX(418);
        });
        this.moreGameBtn.node.runAction(cc.sequence(runCallback4, action4));
      },
      onClickButton: function onClickButton(gameName) {
        _TSCommon.TSCommon.dispatchEvent(HallResources.onHideBannerAndMoreGame, null);
        HallResources.getInstance().playButtonEffect();
        this.chooseGameType = gameName;
        var gameList = require("HallControl").getInstance().getGameList();
        console.log("下面是游戏列表");
        console.log(gameList);
        var gameInfo = null;
        for (var i = 0; i < gameList.length; i++) gameList[i].m_sEn == gameName && (gameInfo = gameList[i]);
        G.goldGameReady = gameInfo.m_iId;
        require("GameEntrance").start(gameInfo.m_iId, gameInfo.m_sServeIp, gameInfo.m_iPort, gameInfo.m_sWr);
        var pRoomList = HallResources.getInstance().getLianXiChangStation(gameInfo.m_iId);
        console.log("下面是游戏房间" + gameInfo.m_iId);
        console.log(pRoomList);
        this.showGameRoom(pRoomList);
      },
      openAndChangeScaleAction: function openAndChangeScaleAction(node, node_bg) {
        node.active = true;
        var action = cc.fadeIn(.01);
        var action2 = cc.scaleTo(.1, 1, 1);
        var sequence = cc.sequence(action, action2);
        node_bg.runAction(sequence);
      },
      onClickUserIcon: function onClickUserIcon() {
        HallResources.getInstance().playButtonEffect();
        this.openAndChangeScaleAction(this.userInfoLayer, this.userInfoLayer.getComponent("UserInfoLayer").bg);
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxGetWinStat.aspx返回数据----------------------------");
            console.log(jsonObject);
            var tbData = jsonObject.table[0];
            var totalCount = tbData.TotalCount;
            var continueWinCount = tbData.ContinueWinCount;
            var winRate = tbData.WinRate;
            self.userInfoLayer.getComponent("UserInfoLayer").initData(totalCount, continueWinCount, winRate);
          }
        };
        require("HallWebRequest").getInstance().getPlayerWinState(callBackFunc);
      },
      openIosPlatformShare: function openIosPlatformShare() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxShareDiamondAwardGetInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var totalTimes = jsonObject.TotalTimes;
            var curTimes = jsonObject.CurTimes;
            var awardAmount = jsonObject.AwardAmount;
            self.openAndChangeScaleAction(self.getFreeDiamondNode, self.getFreeDiamondNode.getComponent("freeDiamondLayer").bg);
            self.getFreeDiamondNode.getComponent("freeDiamondLayer").initData(totalTimes, curTimes, awardAmount);
          }
        };
        require("HallWebRequest").getInstance().getWxShareDiamondAwardGetInfo(callBackFunc);
      },
      onClickMallBtn: function onClickMallBtn(event, openType) {
        HallResources.getInstance().playButtonEffect();
        if (openType && 2 == openType) if (cc.sys.os == cc.sys.OS_IOS) this.openIosPlatformShare(); else {
          this.openAndChangeScaleAction(this.mallLayer, this.mallLayer.getComponent("MallLayer").bg);
          this.mallLayer.getComponent("MallLayer").showDiamondNode();
        } else {
          this.openAndChangeScaleAction(this.mallLayer, this.mallLayer.getComponent("MallLayer").bg);
          this.mallLayer.getComponent("MallLayer").showGoldNode();
        }
      },
      getDailyReward: function getDailyReward() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------GetSignInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var itemData = jsonObject.table;
            var bolTodayIsClick = jsonObject.sc;
            var allData = [];
            for (var i = 0; i < itemData.length; i++) {
              var item = itemData[i];
              var gameInfo = [];
              gameInfo.days = item.Days;
              gameInfo.amount = item.Amount;
              gameInfo.hassign = item.HasSign;
              gameInfo.icon = item.Icon;
              allData.push(gameInfo);
            }
            if (1 == bolTodayIsClick) {
              self.openAndChangeScaleAction(self.dailyLayer, self.dailyLayer.getComponent("dailyLoginLayer").bg);
              self.dailyLoginRedPoint.active = true;
              self.dailyLayer.getComponent("dailyLoginLayer").initData(allData, bolTodayIsClick);
            }
          }
        };
        require("HallWebRequest").getInstance().getDailyCheckInfo(callBackFunc);
      },
      onClickDailyBtn: function onClickDailyBtn() {
        HallResources.getInstance().playButtonEffect();
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------GetSignInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var itemData = jsonObject.table;
            var bolTodayIsClick = jsonObject.sc;
            var allData = [];
            for (var i = 0; i < itemData.length; i++) {
              var item = itemData[i];
              var gameInfo = [];
              gameInfo.days = item.Days;
              gameInfo.amount = item.Amount;
              gameInfo.hassign = item.HasSign;
              gameInfo.icon = item.Icon;
              allData.push(gameInfo);
            }
            self.openAndChangeScaleAction(self.dailyLayer, self.dailyLayer.getComponent("dailyLoginLayer").bg);
            self.dailyLayer.getComponent("dailyLoginLayer").initData(allData, bolTodayIsClick);
          }
        };
        require("HallWebRequest").getInstance().getDailyCheckInfo(callBackFunc);
      },
      getCollectReward: function getCollectReward() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxFavAwardGetAward.aspx返回数据----------------------------");
            console.log(jsonObject);
            var backMsg = jsonObject.RetCode;
            if (0 == backMsg) console.log("领取失败"); else if (1 == backMsg) {
              console.log("领取成功");
              var goldData = require("HallControl").getInstance().getPublicUserInfo().nGold;
              require("HallControl").getInstance().getPublicUserInfo().nGold = parseInt(self.awardAmount) + parseInt(goldData);
              self.collectBtn.node.active = false;
              var allData = [];
              allData.moneytype = 7;
              allData.wantamount = self.awardAmount;
              self.openGetReward(allData);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onClearCollectionLoginRedPoint, true);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onGoldOrDiamondChanged, true);
            } else 11 == backMsg ? console.log("密码错误") : 12 == backMsg && console.log("已经领过");
          }
        };
        require("HallWebRequest").getInstance().getCollectReward(callBackFunc);
      },
      showSeasonLayer: function showSeasonLayer() {
        HallResources.getInstance().playButtonEffect();
        this.openAndChangeScaleAction(this.seasonNode, this.seasonNode.getComponent("SeasonLayer").bg);
      },
      showNewSeasonLayer: function showNewSeasonLayer() {
        this.seasonNode.getComponent("SeasonLayer").clickCloseBtn(true);
        var openCallback = function openCallback() {
          HallResources.getInstance().playButtonEffect();
          this.openAndChangeScaleAction(this.newSeasonNode, this.newSeasonNode.getComponent("NewSeasonLayer").bg);
        };
        _TSCommon.TSCommon.performWithDelay(this, openCallback, .5);
      },
      onClickConsecutiveVictoriesBtn: function onClickConsecutiveVictoriesBtn() {
        HallResources.getInstance().playButtonEffect();
        this.openAndChangeScaleAction(this.consecutiveVictoriesNode, this.consecutiveVictoriesNode.getComponent("ConsecutiveVictoriesLayer").bg);
        this.updateConsecutiveVictoriesData();
      },
      updateConsecutiveVictoriesData: function updateConsecutiveVictoriesData() {
        var self = this;
        self.consecutiveRedPoint.active = false;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------ContinuityWinGetInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            self.consecutiveVictoriesNode.getComponent("ConsecutiveVictoriesLayer").initData(jsonObject.table);
            for (var i = 0; i < jsonObject.table.length; i++) 1 == jsonObject.table[i].CanAward && 0 == jsonObject.table[i].IsGetAward && (self.consecutiveRedPoint.active = true);
          }
        };
        require("HallWebRequest").getInstance().getContinuityWinGetInfo(callBackFunc);
      },
      onClickCollectBtn: function onClickCollectBtn() {
        HallResources.getInstance().playButtonEffect();
        var self = this;
        var bolIsIPhoneX = require("HallUtils").isIPhoneX();
        var button1Func;
        button1Func = self.bClickCollectionBtn ? function button1Func() {
          self.bClickCollectionBtn = false;
          self.getCollectReward();
        } : function button1Func() {
          self.bClickCollectionBtn = true;
          self.collectionLoginRedPoint.active = true;
        };
        this.openAndChangeScaleAction(this.collectNode, this.collectNode.getComponent("collectLayer").bg);
        this.collectNode.getComponent("collectLayer").initData(bolIsIPhoneX, button1Func, self.bClickCollectionBtn);
      },
      onClickSetBtn: function onClickSetBtn() {
        HallResources.getInstance().playButtonEffect();
        this.openAndChangeScaleAction(this.setLayer, this.setLayer.getComponent("gameSetting").bg);
      },
      onClickInviteBtn: function onClickInviteBtn() {
        HallResources.getInstance().playButtonEffect();
        this.getInviteFriendData();
        this.openAndChangeScaleAction(this.inviteFriendLayer, this.inviteFriendLayer.getComponent("inviteFriendLayer").bg);
        var tableInfo = require("HallControl").getInstance().getPublicUserInfo().tableBoardInfo;
        for (var i = 0; i < tableInfo.length; i++) 1 == tableInfo[i].TableBoardNo && this.inviteFriendLayer.getComponent("inviteFriendLayer").setHasGetDesk(1 == tableInfo[i].IsGet);
      },
      onClickHelpBtn: function onClickHelpBtn() {
        HallResources.getInstance().playButtonEffect();
        this.openAndChangeScaleAction(this.helpLayer, this.helpLayer.getComponent("gameRuleLayer").bg);
      },
      showGameRoom: function showGameRoom(data) {
        var self = this;
        this.hallNode.active = false;
        this.gameRoomNode.active = true;
        this.roomList.getComponent("RoomTypeList").showRoomList(data);
        var gameNameTexture = "";
        gameNameTexture = "xueliu" == this.chooseGameType ? "texture/hallRes/gameList/xueliuGame" : "xuezhan" == this.chooseGameType ? "texture/hallRes/gameList/xuezhanGame" : "gdmj" == this.chooseGameType ? "texture/hallRes/gameList/gdmjGame" : "texture/hallRes/gameList/yjlyGame";
        cc.loader.loadRes(gameNameTexture, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.gameName.spriteFrame = spriteFrame);
        });
      },
      showMessage: function showMessage(msg, img) {
        var self = this;
        self.commonTipsLabelNode.active = true;
        self.commonTipsLabel.string = msg;
        if (img) {
          cc.loader.loadRes(img, cc.SpriteFrame, function(err, spriteFrame) {
            err || (self.commonTipsIcon.spriteFrame = spriteFrame);
          });
          self.commonTipsIcon.node.active = true;
          self.commonTipsIcon.node.setPositionX(-75 - self.commonTipsLabel.node.width / 2);
        } else self.commonTipsIcon.node.active = false;
        self.commonTipsLabelNode.stopAllActions();
        var moveTo = cc.moveTo(1.2, 0, 150);
        var callback = cc.callFunc(function() {
          self.commonTipsLabelNode.active = false;
          self.commonTipsLabelNode.setPositionY(0);
        });
        var sequence = cc.sequence(moveTo, callback);
        self.commonTipsLabelNode.runAction(sequence);
      },
      backToHall: function backToHall() {
        this.changeMove();
        HallResources.getInstance().playButtonEffect();
        this.hallNode.active = true;
        this.gameRoomNode.active = false;
        this.rankListNode.node.active = true;
        this.moreGameListNode.active = false;
        _TSCommon.TSCommon.dispatchEvent(HallResources.onShowBannerAndMoreGame, null);
      },
      onClickMatchGame: function onClickMatchGame() {
        cc.director.preloadScene("XueLiuGameScene");
        var nExt = "400001111";
        var baseScore = 100;
        var self = this;
        var callback = function callback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            if (1 == parseInt(jsonObject.RetCode)) {
              var gameMatchLayer = self.gameMatchLayer.getComponent("GameMatchLayer");
              gameMatchLayer.setWaitID(jsonObject.RWaitId);
              self.gameMatchLayer.active = true;
              HallResources.recordPlayerLogToServer(HallResources.recordList.pipei_start);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onHideBannerAndMoreGame, null);
            }
          }
        };
        HallResources.recordPlayerLogToServer(HallResources.recordList.click_paiweisai);
        require("HallWebRequest").getInstance().startMatchPlayer(nExt, baseScore, callback);
      },
      onClickExtendedBtn: function onClickExtendedBtn() {
        HallResources.getInstance().playButtonEffect();
        var self = this;
        this.shrinkRank.active = true;
        this.extendedRank.active = false;
        this.groupdRank.active = false;
        if (_WeixinManager.WeixinManager.getInstance().userInfo) {
          var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
          wx.postMessage({
            message: "1",
            ticket: self.shareTicket,
            openid: myOpenId
          });
        }
      },
      onClicShrinkBtn: function onClicShrinkBtn() {
        HallResources.getInstance().playButtonEffect();
        var self = this;
        this.shrinkRank.active = false;
        this.extendedRank.active = true;
        this.groupdRank.active = false;
        if (_WeixinManager.WeixinManager.getInstance().userInfo) {
          var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
          wx.postMessage({
            message: "2",
            ticket: self.shareTicket,
            openid: myOpenId
          });
        }
      },
      onClickOpenGroupBtn: function onClickOpenGroupBtn() {
        HallResources.getInstance().playButtonEffect();
        var self = this;
        self.isWeChatPlatform() && wx.shareAppMessage({
          title: "血流换三张，本群谁能与我一战！快查看你在群里的排行。",
          imageUrl: HallResources.groupShareImgUrl,
          success: function success(res) {
            console.log("转发成功!!!");
            if (null == res.shareTickets || void 0 == res.shareTickets || "" == res.shareTickets) _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "请分享到群聊" ]); else {
              console.log("下面是群消息数据!!!");
              console.log(res);
              if (res.shareTickets.length > 0) {
                self.shrinkRank.active = true;
                self.extendedRank.active = false;
                self.groupdRank.active = true;
                if (_WeixinManager.WeixinManager.getInstance().userInfo) {
                  var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
                  wx.postMessage({
                    message: "3",
                    ticket: res.shareTickets[0],
                    openid: myOpenId
                  });
                }
              }
            }
          },
          fail: function fail(res) {
            console.log("转发失败!!!");
          }
        });
      },
      onClickCustomServiceBtn: function onClickCustomServiceBtn() {
        HallResources.getInstance().playButtonEffect();
        this.openAndChangeScaleAction(this.kefuLayer, this.kefuLayer.getComponent("kefuLayer").bg);
      },
      _updateSubDomainCanvas: function _updateSubDomainCanvas() {
        this.tex = new cc.Texture2D();
        var openDataContext = wx.getOpenDataContext();
        var sharedCanvas = openDataContext.canvas;
        if (sharedCanvas) {
          sharedCanvas.width = 2 * cc.game.canvas.width;
          sharedCanvas.height = 2 * cc.game.canvas.height;
        }
        this.tex.initWithElement(sharedCanvas);
        this.tex.handleLoadedTexture();
        this.rankChildrenNode.spriteFrame = new cc.SpriteFrame(this.tex);
        var self = this;
        if (_WeixinManager.WeixinManager.getInstance().userInfo) {
          var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
          require("HallUtils").isIPhoneX() ? wx.postMessage({
            message: "6",
            ticket: self.shareTicket,
            openid: myOpenId
          }) : wx.postMessage({
            message: "4",
            ticket: self.shareTicket,
            openid: myOpenId
          });
        }
      },
      formatGold: function formatGold(gold, remaindot) {
        if (Math.abs(gold) < 1e5) return gold;
        if (Math.abs(gold) >= 1e5 && Math.abs(gold) < 1e8) {
          if (remaindot) {
            var leftNum = gold % 1e4;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e4) + "万";
              return retGold;
            }
            gold /= 1e4;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e4;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) >= 1e8 && Math.abs(gold) <= 2e9) {
          if (remaindot) {
            var leftNum = gold % 1e8;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e8) + "亿";
              return retGold;
            }
            gold /= 1e8;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e8;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) <= 1e11) var retGold = Math.floor(gold / 1e8) + "亿";
        if (remaindot) return "无限";
      },
      compareVersion: function compareVersion(v1, v2) {
        v1 = v1.split(".");
        v2 = v2.split(".");
        var len = Math.max(v1.length, v2.length);
        while (v1.length < len) v1.push("0");
        while (v2.length < len) v2.push("0");
        for (var i = 0; i < len; i++) {
          var num1 = parseInt(v1[i]);
          var num2 = parseInt(v2[i]);
          if (num1 > num2) return 1;
          if (num1 < num2) return -1;
        }
        return 0;
      },
      isWeChatPlatform: function isWeChatPlatform() {
        var ret = false;
        "mqqbrowser" != cc.sys.browserType && "wechatgame" != cc.sys.browserType || (ret = true);
        return ret;
      },
      timeFindMonthAndDay: function timeFindMonthAndDay(str) {
        var day = "";
        var month = "";
        var firstPos = str.indexOf("-", 0);
        var nextPos = str.indexOf("-", firstPos + 1);
        month = parseInt(str.slice(firstPos + 1, nextPos));
        day = parseInt(str.substr(nextPos + 1, 2));
        return month + "." + day;
      },
      onClickHideVersionBtn: function onClickHideVersionBtn() {
        this.clickHideBtnTimes = this.clickHideBtnTimes + 1;
        this.clickHideBtnTimes > 3 && (this.versionLabel.node.active = true);
      }
    };
    cc.Class(HallPlatformInfo);
    cc._RF.pop();
  }, {
    "../aladinSDK": "aladinSDK",
    "../hall/Domain": "Domain",
    "../hall/gamelib/CGameLib": "CGameLib",
    "../hall/weixin/WeixinManager": "WeixinManager",
    GameEntrance: "GameEntrance",
    GameLibSink: "GameLibSink",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallUtils: "HallUtils",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources",
    TSCommon: "TSCommon"
  } ],
  HallQualifying: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db57e2WBi5AL6wAbvdnIU2e", "HallQualifying");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var HallQualifying = cc.Class({
      extends: cc.Component,
      properties: {
        star1: {
          default: null,
          type: cc.Sprite
        },
        star2: {
          default: null,
          type: cc.Sprite
        },
        star3: {
          default: null,
          type: cc.Sprite
        },
        star4: {
          default: null,
          type: cc.Sprite
        },
        star5: {
          default: null,
          type: cc.Sprite
        },
        cupIcon: {
          default: null,
          type: cc.Sprite
        },
        rankLabel: {
          default: null,
          type: cc.Label
        },
        lightActNode: {
          default: null,
          type: cc.Node
        },
        starActNode: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.showAnimation();
        this.moveCup();
      },
      clickReceiveBtn: function clickReceiveBtn() {
        HallResources.getInstance().playButtonEffect();
      },
      showAnimation: function showAnimation() {
        var whosTurnNode = this.lightActNode.getChildByName("light_act");
        whosTurnNode.active = true;
        var dragonDisplay = whosTurnNode.addComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("beibaiguang");
      },
      showStarAnimation: function showStarAnimation(count) {
        if (count > 2) {
          var whosTurnNode = this.starActNode.getChildByName("light_act_3");
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.addComponent(dragonBones.ArmatureDisplay);
          dragonDisplay.playAnimation("dengjixingxing");
        }
        if (count > 1) {
          var whosTurnNode = this.starActNode.getChildByName("light_act_2");
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.addComponent(dragonBones.ArmatureDisplay);
          dragonDisplay.playAnimation("dengjixingxing");
        }
        if (count > 0) {
          var whosTurnNode = this.starActNode.getChildByName("light_act_1");
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.addComponent(dragonBones.ArmatureDisplay);
          dragonDisplay.playAnimation("dengjixingxing");
        }
      },
      moveCup: function moveCup() {
        var action1 = cc.moveBy(1, 0, 10);
        var action2 = cc.moveBy(1, 0, -10);
        var seq = cc.sequence(action1, action2);
        this.cupIcon.node.runAction(cc.repeatForever(seq));
      },
      clickQuestionBtn: function clickQuestionBtn() {
        this.node.parent.parent.getComponent("HallPlatformInfo").showSeasonLayer();
      },
      changeRank: function changeRank(rankScore) {
        var self = this;
        var data = HallResources.getInstance().getRankAndStarByScore(rankScore);
        data.star > 4 && (this.star5.node.active = true);
        data.star > 3 && (this.star4.node.active = true);
        data.star > 2 && (this.star3.node.active = true);
        data.star > 1 && (this.star2.node.active = true);
        data.star > 0 && (this.star1.node.active = true);
        this.rankLabel.string = data.rankName;
        this.showStarAnimation(data.star);
        cc.loader.loadRes("texture/hallRes/qualifyingCup/cup" + data.cup, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.cupIcon.spriteFrame = spriteFrame);
        });
      }
    });
    module.exports = HallQualifying;
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    TSCommon: "TSCommon"
  } ],
  HallResources: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7949KK9vpAVJvqf04IqWn8", "HallResources");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = cc.Class({
      statics: {
        instance: null,
        Loading_Add_Scene_Tag: 1e3,
        Toast_Add_Scene_Tag: 1001
      },
      showDialog: function showDialog(strMsg) {
        var sceneNode = cc.director.getScene();
        var winSize = cc.director.getWinSize();
        cc.loader.loadRes("/prefabs/publicDialogPrefab", function(error, prefab) {
          if (!error) {
            var dialogPrefab = cc.instantiate(prefab);
            dialogPrefab.x = winSize.width / 2;
            dialogPrefab.y = winSize.height / 2;
            var dialog = dialogPrefab.getComponent("Dialog");
            dialog.setContentLabelStr(strMsg);
            sceneNode.addChild(dialogPrefab);
          }
        });
      },
      showLoading: function showLoading() {
        _TSCommon.TSCommon.dispatchEvent(HallResources.onShowLoadingNode, true);
      },
      removeLoading: function removeLoading() {
        _TSCommon.TSCommon.dispatchEvent(HallResources.onClearLoadingNode, true);
      },
      showToast: function showToast(strMsg) {
        var nodeToast = new cc.Node("nodeToast");
        var toastNode = nodeToast.addComponent(cc.ToastUI);
        toastNode.setMsg(strMsg);
        nodeToast.setTag(HallResources.Toast_Add_Scene_Tag);
        cc.director.getScene().addChild(nodeToast);
      },
      setQualifyingData: function setQualifyingData(rankData) {
        this.rankData = rankData;
        var division = 1;
        var allData = new Array();
        while (division <= 6) {
          var backData = new Array();
          for (var i = 0; i < rankData.length; i++) if (rankData[i].DivisionLevel == division) {
            backData.maxScore = rankData[i].MaxScore;
            backData.minScore = rankData[i].MinScore;
          }
          for (var i = 0; i < rankData.length; i++) if (rankData[i].DivisionLevel == division) {
            backData.diamond = rankData[i].UpgradeAmount;
            backData.rankName = rankData[i].HighName;
            backData.minScore > rankData[i].MinScore && (backData.minScore = rankData[i].MinScore);
            backData.maxScore < rankData[i].MaxScore && (backData.maxScore = rankData[i].MaxScore);
            backData.cupId = division;
          }
          allData.push(backData);
          division += 1;
        }
        this.divisionData = allData;
      },
      getRankDataById: function getRankDataById(id) {
        return this.rankData[id - 1];
      },
      getDivisionData: function getDivisionData() {
        return this.divisionData;
      },
      getRankAndStarByScore: function getRankAndStarByScore(rankScore) {
        var backData = new Array();
        var rankData = this.rankData;
        for (var i = 0; i < rankData.length; i++) {
          if (rankScore >= rankData[i].MinScore && rankScore < rankData[i].MaxScore) {
            var starCount = Math.floor((rankScore - rankData[i].MinScore) / rankData[i].StartStep);
            backData.minScore = rankData[i].MinScore;
            backData.maxScore = rankData[i].MaxScore;
            backData.id = rankData[i].ConfigID;
            backData.cup = rankData[i].DivisionLevel;
            backData.star = starCount;
            backData.lvStarNextScore = rankData[i].MinScore + rankData[i].StartStep * (backData.star + 1);
            backData.rankName = rankData[i].LittleName + "级";
            return backData;
          }
          if (19 == i && rankScore >= rankData[i].minScore) {
            backData.minScore = rankData[i].MinScore;
            backData.maxScore = rankData[i].MaxScore;
            backData.id = rankData[i].ConfigID;
            backData.cup = rankData[i].DivisionLevel;
            backData.star = 0;
            backData.rankName = rankData[i].LittleName;
            return backData;
          }
        }
      },
      getLianXiChangStation: function getLianXiChangStation(gameId) {
        var sortFunction = function sortFunction(stStation1, stStation2) {
          return stStation1.dwRuleID - stStation2.dwRuleID;
        };
        var gameLibSink = require("GameLibSink").getInstance();
        var gameLib = gameLibSink.getGameLib();
        var pStationList = gameLib.getStationList();
        var size = pStationList.length;
        var pLianXiStaionList = [];
        for (var i = 0; i < size; i++) pStationList[i].dwParentID == gameId && pLianXiStaionList.push(pStationList[i]);
        pLianXiStaionList.length > 1 && pLianXiStaionList.sort(sortFunction);
        return pLianXiStaionList;
      },
      enterGameRoomBeanByStaionName: function enterGameRoomBeanByStaionName(stationName, onCallBack) {
        var gameLib = require("GameLibSink").getInstance().getGameLib();
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var pStationList = gameLib.getStationList();
        var size = pStationList.length;
        var room = null;
        for (var i = 0; i < size; i++) {
          var szStationName = pStationList[i].szStationName;
          if (szStationName == stationName) {
            room = pStationList[i];
            break;
          }
        }
        this.removeLoading();
        if (room) {
          if (publicUserInfo.nGold && publicUserInfo.nGold < 0 || room.dwMinGold > publicUserInfo.nGold) {
            if (onCallBack) onCallBack(room.dwMinGold); else {
              console.log("金币不足");
              _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "金币不足" ]);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onNoEnoughGold, true);
            }
            return;
          }
          this.showLoading();
          console.log("成功执行进入游戏");
          gameLib.autoEnterGameRoom(room.szStationName);
        } else console.log("找不到符合的服务器");
      },
      printNowTimes: function printNowTimes() {
        var testDate = new Date();
        var mytime = testDate.toLocaleTimeString();
        return mytime;
      },
      playPropertyEffect: function playPropertyEffect(nIndex) {
        var callback = function callback() {
          var audioUrl = "resources/sound/game/property/" + nIndex + ".mp3";
          cc.audioEngine.play(cc.url.raw(audioUrl));
        };
        _TSCommon.TSCommon.performWithDelay(this, callback, 1);
      },
      playButtonEffect: function playButtonEffect() {
        if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
          var audioUrl = "resources/sound/button.mp3";
          cc.audioEngine.play(cc.url.raw(audioUrl));
        }
      },
      playCloseEffect: function playCloseEffect() {
        if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
          var audioUrl = "resources/sound/close.mp3";
          cc.audioEngine.play(cc.url.raw(audioUrl));
        }
      },
      showGoldTips: function showGoldTips(msg, isFlyUp, isShowIcon, offsetY) {
        offsetY = offsetY || 30;
        var scene = cc.director.getScene();
        if (scene.getChildByTag(HallResources.COMMON_FLY_TIPS)) return;
        var winSize = cc.director.getWinSize();
        var toastNode = new cc.Node();
        var toastSprite = toastNode.addComponent(cc.Sprite);
        cc.loader.loadRes("texture/commonRes/commontipsBg", cc.SpriteFrame, function(err, spriteFrame) {
          err || (toastSprite.spriteFrame = spriteFrame);
        });
        if (isShowIcon) {
          var iconNode = new cc.Node();
          var iconSprite = iconNode.addComponent(cc.Sprite);
          cc.loader.loadRes("texture/commonRes/money/goldCoin", cc.SpriteFrame, function(err, spriteFrame) {
            err || (iconSprite.spriteFrame = spriteFrame);
          });
          iconNode.anchorX = 1;
          iconNode.x = -8;
          toastNode.addChild(iconNode);
        }
        var tipsNode = new cc.Node();
        var tipsLabel = tipsNode.addComponent(cc.Label);
        tipsLabel.string = msg;
        tipsLabel.fontSize = 30;
        if (isShowIcon) {
          tipsNode.anchorX = 0;
          tipsNode.x = 8;
          tipsNode.y = -5;
        } else {
          tipsNode.anchorX = .5;
          tipsNode.x = 0;
          tipsNode.y = -5;
        }
        toastNode.addChild(tipsNode);
        var delayTime = cc.delayTime(1);
        var fadeOut = cc.fadeOut(2);
        var moveBy = cc.moveBy(1, 0, offsetY);
        var onEnd = cc.callFunc(function() {
          toastNode.stopAction();
          toastNode.removeFromParent(true);
        });
        var sequence;
        if (isFlyUp) {
          var spawn = cc.spawn(fadeOut, moveBy);
          sequence = cc.sequence(delayTime, spawn, onEnd);
        } else sequence = cc.sequence(delayTime, fadeOut, onEnd);
        toastNode.runAction(sequence);
        toastNode.x = winSize.width / 2;
        toastNode.y = winSize.height / 2;
        scene.addChild(toastNode, 1, HallResources.COMMON_FLY_TIPS);
      },
      getEnterBestRoom: function getEnterBestRoom(gameName) {
        var server = null;
        var dwFocusStationID = -1;
        var nMinGold = 0;
        var gameLibSink = require("GameLibSink").getInstance();
        var gameLib = gameLibSink.getGameLib();
        var logonInfo = gameLib.getUserLogonInfo();
        if (null == logonInfo) {
          console.log("----------------------logonInfo = null");
          return;
        }
        var pRoomList = gameLib.getStationList();
        var size = pRoomList.length;
        var sortFunction = function sortFunction(stStation1, stStation2) {
          return stStation1.dwMinGold - stStation2.dwMinGold;
        };
        pRoomList.sort(sortFunction);
        for (var i = 0; i < size; i++) {
          var room = pRoomList[i];
          if ("xueliu" == gameName || "xuezhan" == gameName) {
            var bContinues = true;
            -1 != dwFocusStationID && room.dwStationID != dwFocusStationID && (bContinues = false);
            if (true == bContinues) {
              0 != room.dwMinGold && room.dwMinGold > logonInfo.dwGold && (bContinues = false);
              if (true == bContinues) {
                null == server && (server = room);
                var nTempMinGold = room.dwMinGold;
                nTempMinGold > nMinGold && (server = room);
              }
            }
          }
        }
        return server;
      }
    });
    HallResources.recordList = {
      register_success: 10,
      main_res_start: 20,
      main_res_end: 30,
      choose_method: 40,
      enter_room: 50,
      room_res_start: 60,
      click_xueliu: 61,
      click_xuezhan: 62,
      click_paiweisai: 63,
      pipei_start: 64,
      pipei_end: 65,
      pipei_break: 66,
      room_res_end: 70,
      click_ready: 80,
      click_card: 90,
      click_discard: 100,
      count_page: 110
    };
    HallResources.recordPlayerLogToServer = function(recordID) {
      var PublicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
      1 == parseInt(PublicUserInfo.isNewUser) && require("HallWebRequest").getInstance().reportRecordLogToServer(recordID);
    };
    HallResources.ChangeOncePlayMusic = false;
    HallResources.COMMON_FLY_TIPS = 100;
    HallResources.onLoginFinish = "onLoginFinish";
    HallResources.onGoldOrDiamondChanged = "changeMoney";
    HallResources.onNoEnoughGold = "noMoneyEvent";
    HallResources.onShowLoadingNode = "showloadingNode";
    HallResources.onClearLoadingNode = "clearloadingNode";
    HallResources.onClearDailyLoginRedPoint = "clearDailyLoginRedPoint";
    HallResources.onGetMoreDeskBg = "getMoreDeskBg";
    HallResources.onClearCollectionLoginRedPoint = "clearCollectionLoginRedPoint";
    HallResources.onClearConsecutiveRedPoint = "clearConsecutiveRedPoint";
    HallResources.onShowFlyMessage = "showFlyMessage";
    HallResources.openBgMusic = "OPEN_HALL_BG_MUSIC";
    HallResources.closeBgMusic = "CLOSE_HALL_BG_MUSIC";
    HallResources.onRefreshPlayerDiamondCount = "refreshPlayerDiamondCount";
    HallResources.onChangeShadow = "removeShadow";
    HallResources.onChangePlayerQualifyingScore = "changePlayerQualifyingScore";
    HallResources.onSeasonLevelUp = "seasonLevelUp";
    HallResources.onShowBannerAndMoreGame = "SHOW_BANNER_MOREGAME";
    HallResources.onHideBannerAndMoreGame = "HIDE_BANNER_MOREGAME";
    HallResources.onHideSendGiftToPLayer = "sendGiftToPlayer";
    HallResources.groupShareImgUrl = "http://h5cxz.ss2007.com/cxzImg/qun_rank_share.jpg";
    HallResources.shareImgUrl = "http://h5cxz.ss2007.com/cxzImg/deskbg_share.jpg";
    HallResources.rupShareImgUrl = "http://h5cxz.ss2007.com/cxzImg/bankRupt_share.png";
    HallResources.resultShareImgUrl = "http://h5cxz.ss2007.com/cxzImg/game_result_share.jpg";
    HallResources.protectScoreShareImgUrl = "http://h5cxz.ss2007.com/cxzImg/protect_score_share.png";
    HallResources.upgradeShareImgUrl = "http://h5cxz.ss2007.com/cxzImg/match_upgrade_share.png";
    HallResources.shareWin_3 = "http://h5cxz.ss2007.com/cxzImg/shareCount_3.jpg";
    HallResources.shareWin_5 = "http://h5cxz.ss2007.com/cxzImg/shareCount_5.jpg";
    HallResources.shareWin_7 = "http://h5cxz.ss2007.com/cxzImg/shareCount_7.jpg";
    HallResources.shareWin_9 = "http://h5cxz.ss2007.com/cxzImg/shareCount_9.jpg";
    HallResources.getInstance = function() {
      null == HallResources.instance && (HallResources.instance = new HallResources());
      return HallResources.instance;
    };
    module.exports = HallResources;
    cc._RF.pop();
  }, {
    GameLibSink: "GameLibSink",
    HallControl: "HallControl",
    HallWebRequest: "HallWebRequest",
    TSCommon: "TSCommon"
  } ],
  HallUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36df4lYbJ9L8ZZz2SIFrwae", "HallUtils");
    "use strict";
    var _Domain = require("./Domain");
    var HallUtils = cc.Class({
      ctor: function ctor() {}
    });
    HallUtils.judeIsPhoneQQBrowser = function() {
      return "mqqbrowser" == cc.sys.browserType;
    };
    HallUtils.judeIsPhoneWXBrowser = function() {
      return "wechat" == cc.sys.browserType;
    };
    HallUtils.judeIsPhoneWXGameBrowser = function() {
      return "wechatgame" == cc.sys.browserType;
    };
    HallUtils.isIPhoneX = function() {
      if (screen.height / screen.width >= 2) return true;
      if (screen.width / screen.height >= 2) return true;
      return false;
    };
    HallUtils.isRealIphoneX = function() {
      if (cc.sys.os == cc.sys.OS_IOS) {
        if (screen.height / screen.width >= 2) return true;
        if (screen.width / screen.height >= 2) return true;
      }
      return false;
    }, HallUtils.getDoMainFromIp = function(strIp) {
      if (null == strIp || void 0 == strIp) return "";
      var strDoMain = strIp;
      var ipDoMainArray = [];
      _Domain.Domain.BolTest ? ipDoMainArray[0] = [ "139.196.194.248", "h5.ss2007.com" ] : ipDoMainArray[0] = [ "106.14.98.151", "h5.ss2007.com" ];
      for (var i = 0; i < ipDoMainArray.length; i++) {
        var ipDoMainInfo = ipDoMainArray[i];
        if (ipDoMainInfo && strIp == ipDoMainInfo[0]) {
          strDoMain = ipDoMainInfo[1];
          break;
        }
      }
      return strDoMain;
    }, HallUtils.hmac_sha256 = function(key, stringSignTemp) {
      var sig = hmac_sha256(secret, stringSignTemp);
      return sig;
    }, HallUtils.encodeURIComponent = function(urlData) {
      return encodeURIComponent(urlData);
    };
    module.exports = HallUtils;
    cc._RF.pop();
  }, {
    "./Domain": "Domain"
  } ],
  HallWebRequest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3fb5ct3HLVCIKWJ9GocyvQX", "HallWebRequest");
    "use strict";
    var _Domain = require("./Domain");
    var _TSCommon = require("./TSCommon");
    var HallWebRequest = cc.Class({
      extends: cc.Component,
      statics: {
        instance: null
      },
      ctor: function ctor() {
        this.m_checkStatusCount = HallWebRequest.ACTIVE_CHECK_STATUS_COUNT - 1;
      },
      getAddress: function getAddress(url) {
        return _Domain.Domain.WebRoot + url;
      },
      getGameAddress: function getGameAddress(url) {
        return _Domain.Domain.GameWebRoot + url;
      },
      isCheckStatus: function isCheckStatus() {
        this.m_checkStatusCount = this.m_checkStatusCount + 1;
        if (this.m_checkStatusCount < HallWebRequest.ACTIVE_CHECK_STATUS_COUNT) return true;
        return this.m_checkStatusCount % HallWebRequest.ACTIVE_CHECK_STATUS_COUNT == 0;
      },
      refreshCheckStatus: function refreshCheckStatus() {
        this.m_checkStatusCount = 0;
      },
      httpRequest: function httpRequest(file, data, onRetCallBack, post) {
        "CheckNewStatus.aspx" != file && "WxNewUserTrace.aspx" != file && "GetHotAndLastPlayGame.aspx" != file && require("HallResources").getInstance().showLoading();
        null != post && void 0 != post || (post = true);
        var address = this.getAddress(file);
        _TSCommon.TSCommon.log(address);
        var WebRequest = require("WebRequest");
        var webRequest = new WebRequest();
        webRequest.getData(address, data, onRetCallBack, post);
        if ("CheckNewStatus.aspx" == file) return;
        var instance = HallWebRequest.getInstance();
        instance.refreshCheckStatus();
      },
      gameHttpRequest: function gameHttpRequest(file, data, onRetCallBack, post) {
        "WaitGetUserInfo.aspx" != file && require("HallResources").getInstance().showLoading();
        null != post && void 0 != post || (post = true);
        var address = _Domain.Domain.PaiWeiRoot + file;
        _TSCommon.TSCommon.log(address);
        _TSCommon.TSCommon.log(data);
        var WebRequest = require("WebRequest");
        var webRequest = new WebRequest();
        webRequest.getData(address, data, onRetCallBack, post);
      },
      reportRecordLogToServer: function reportRecordLogToServer(traceID) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&TraceID=" + traceID + "&apptype=1";
        var httpCallback = function httpCallback(success, data) {
          var jsonObject = JSON.parse(data);
          var RetCode = jsonObject.RetCode;
          11 == parseInt(RetCode) && console.log("the user is not exist");
        };
        this.httpRequest("WxNewUserTrace.aspx", szData, httpCallback);
      },
      checkNewStatus: function checkNewStatus() {
        var self = this;
        var HallResources = require("HallResources");
        var checkNew = function checkNew() {
          var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
          var szData = "UserID=" + publicUserInfo.userDBID + "&GameID=24&Pay=0&apptype=1";
          var httpCallback = function httpCallback(success, data) {
            cc.log("success ========" + success);
            if (!success) return;
            var jsonObject = JSON.parse(data).table[0];
            var nNewMail = jsonObject.MailTip;
            var nNewFriend = jsonObject.NewFriendTip;
            var nRank = jsonObject.PayRandkTip;
            var nNewPayment = jsonObject.PayTip;
            var nGold = jsonObject.Amount;
            var bankAmount = jsonObject.BankAmount;
            var nDiamond = jsonObject.DiamondAmount;
            var nFrag = jsonObject.FragNum;
            var nServiceTip = jsonObject.ServiceMessageTip;
            var nClubCard = jsonObject.ClubCard;
            var nPlayerQualifyingScore = jsonObject.sc;
            if (nDiamond != publicUserInfo.nDiamond || nGold != publicUserInfo.nGold) {
              publicUserInfo.nDiamond = nDiamond;
              publicUserInfo.nGold = nGold;
              _TSCommon.TSCommon.dispatchEvent(HallResources.onGoldOrDiamondChanged);
            }
            if (nPlayerQualifyingScore != publicUserInfo.nPlayerQualifyingScore) {
              publicUserInfo.nPlayerQualifyingScore = nPlayerQualifyingScore;
              _TSCommon.TSCommon.dispatchEvent(HallResources.onChangePlayerQualifyingScore);
            }
          };
          self.isCheckStatus() && self.httpRequest("CheckNewStatus.aspx", szData, httpCallback);
          var scheduler = cc.director.getScheduler();
          scheduler.unscheduleCallbackForTarget(this, checkNew);
          self.checkNewStatus();
        };
        var scheduler = cc.director.getScheduler();
        scheduler.scheduleCallbackForTarget(this, checkNew, 5, false, 0, false);
      },
      requestNotice: function requestNotice(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID;
        this.httpRequest("GetAgentWord.aspx", szData, onRetCallBack);
      },
      getProperty: function getProperty(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "Gameid=1&AppType=1";
        this.httpRequest("GetToolList.aspx", szData, onRetCallBack);
      },
      getCollectInfo: function getCollectInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&AppType=1";
        this.httpRequest("WxFavAwardGetInfo.aspx", szData, onRetCallBack);
      },
      getCollectReward: function getCollectReward(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&AppType=1";
        this.httpRequest("WxFavAwardGetAward.aspx", szData, onRetCallBack);
      },
      getBankruptInfo: function getBankruptInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&AppType=1";
        this.httpRequest("WxBankruptAwardGetInfo.aspx", szData, onRetCallBack);
      },
      getBankruptReward: function getBankruptReward(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&AppType=1";
        this.httpRequest("WxBankruptAwardGetAward.aspx", szData, onRetCallBack);
      },
      getDailyCheckInfo: function getDailyCheckInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&AppType=1";
        this.httpRequest("GetSignInfo.aspx", szData, onRetCallBack);
      },
      sendDailyCheck: function sendDailyCheck(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&AppType=1";
        this.httpRequest("DailySignInfo.aspx", szData, onRetCallBack);
      },
      requestIsBeReport: function requestIsBeReport(userDBID, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&pwd=" + publicUserInfo.encryptPassword + "&ToUserID=" + userDBID;
        this.httpRequest("CheatInfo.aspx", szData, onRetCallBack);
      },
      requestCheatReport: function requestCheatReport(userDBID, nType, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&pwd=" + publicUserInfo.encryptPassword + "&ToUserID=" + userDBID + "&type=" + nType;
        this.httpRequest("CheatReport.aspx", szData, onRetCallBack);
      },
      getWxInviteActivityInfo: function getWxInviteActivityInfo(onRetCallBack) {
        var szData = "apptype=1";
        this.httpRequest("WxInviteAwardGetActivityInfo.aspx", szData, onRetCallBack);
      },
      getWxInviteAwardGetInfo: function getWxInviteAwardGetInfo(myOpenID, onRetCallBack) {
        var szData = "OpenID=" + myOpenID + "&apptype=1";
        this.httpRequest("WxInviteAwardGetInfo.aspx", szData, onRetCallBack);
      },
      setWxUserInfo: function setWxUserInfo(myOpenID, WxFaceUrl, WxNickName, onRetCallBack) {
        var szData = "OpenID=" + myOpenID + "&WxFaceUrl=" + WxFaceUrl + "&WxNickName=" + WxNickName + "&apptype=1";
        console.log("传参给我们的服务器szData=" + szData);
        this.httpRequest("WxUserInfoSet.aspx", szData, onRetCallBack);
      },
      getWxUserInfo: function getWxUserInfo(playerOpenID, onRetCallBack) {
        var szData = "OpenID=" + playerOpenID + "&apptype=1";
        this.httpRequest("WxUserInfoGet.aspx", szData, onRetCallBack);
      },
      getWxUserInfoByUserID: function getWxUserInfoByUserID(userID, onRetCallBack) {
        var szData = "UserID=" + userID + "&apptype=1";
        this.httpRequest("WxUserInfoGetByUserID.aspx", szData, onRetCallBack, false);
      },
      getWxInviteAwardGetAward: function getWxInviteAwardGetAward(inviterOpenID, inviteeOpenID, onRetCallBack) {
        var szData = "InviterOpenID=" + inviterOpenID + "&InviteeOpenID=" + inviteeOpenID + "&apptype=1";
        this.httpRequest("WxInviteAwardGetAward.aspx", szData, onRetCallBack);
      },
      getPlayerData: function getPlayerData(friendsOpenID, onRetCallBack) {
        var szData = "FriendsOpenID=" + friendsOpenID + "&apptype=1";
        this.httpRequest("WxFriendsScoreRank.aspx", szData, onRetCallBack);
      },
      getPlayerWinState: function getPlayerWinState(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&apptype=1";
        this.httpRequest("WxGetWinStat.aspx", szData, onRetCallBack);
      },
      getPlayerDiamondCount: function getPlayerDiamondCount(myOpenID, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "AppType=1&UserID=" + publicUserInfo.userDBID + "&pwd=" + publicUserInfo.encryptPassword + "&openid=" + myOpenID;
        this.httpRequest("xcxGetUserBalance.aspx", szData, onRetCallBack);
      },
      exchangeMoneyByDiamond: function exchangeMoneyByDiamond(needDiamond, myOpenID, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "AppType=1&UserID=" + publicUserInfo.userDBID + "&pwd=" + publicUserInfo.encryptPassword + "&openid=" + myOpenID + "&wda=" + needDiamond;
        this.httpRequest("xcxDiamondExchangeGold.aspx", szData, onRetCallBack);
      },
      getWxShareDiamondAwardGetInfo: function getWxShareDiamondAwardGetInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&apptype=1";
        this.httpRequest("WxShareDiamondAwardGetInfo.aspx", szData, onRetCallBack);
      },
      getWxShareDiamondAwardGetAward: function getWxShareDiamondAwardGetAward(myOpenID, onRetCallBack) {
        var encryptedData = require("HallUtils").encodeURIComponent(encryptedData);
        var iv = require("HallUtils").encodeURIComponent(iv);
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&OpenID=" + myOpenID + "&apptype=1";
        this.httpRequest("WxShareDiamondAwardGetAward.aspx", szData, onRetCallBack);
      },
      getContinuityWinGetInfo: function getContinuityWinGetInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&apptype=1";
        this.httpRequest("ContinuityWinGetInfo.aspx", szData, onRetCallBack);
      },
      getContinuityWinGetAward: function getContinuityWinGetAward(winCount, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&WinCount=" + winCount + "&apptype=1";
        this.httpRequest("ContinuityWinGetAward.aspx", szData, onRetCallBack);
      },
      startMatchPlayer: function startMatchPlayer(nExt, nBaseScore, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&epw=" + publicUserInfo.encryptPassword + "&Ext=" + nExt + "&BaseScore=" + nBaseScore + "&AppType=1";
        console.log(szData);
        this.gameHttpRequest("WaitUserStart.aspx", szData, onRetCallBack);
      },
      getMatchResult: function getMatchResult(RWaitId, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&RWaitId=" + RWaitId + "&AppType=1";
        this.gameHttpRequest("WaitGetUserInfo.aspx", szData, onRetCallBack);
      },
      exitMatchList: function exitMatchList(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&epw=" + publicUserInfo.encryptPassword + "&AppType=1";
        this.gameHttpRequest("WaitUserQuit.aspx", szData, onRetCallBack);
      },
      getPrivateRoomInfo: function getPrivateRoomInfo() {
        require("HallResources").getInstance().removeLoading();
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&AppType=1";
        var httpCallback = function httpCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data).table[0];
            var nRoomNo = parseInt(jsonObject.RoomNo);
            if (nRoomNo > 0) {
              var onMathEnd = function onMathEnd(success, data) {
                if (success) {
                  var jsonObject = JSON.parse(data).table[0];
                  var szServerIP = jsonObject.ServerIP;
                  var nPort = parseInt(jsonObject.Port);
                  var nChairCount = parseInt(jsonObject.ChairNum);
                  var gameLibSink = require("GameLibSink").getInstance();
                  gameLibSink.m_nChairCount = nChairCount;
                  gameLibSink.s_nPrivateRoomTableNo = parseInt(jsonObject.TableNo);
                  gameLibSink.s_nPrivateRoomChairNo = parseInt(jsonObject.ChairNo);
                  gameLibSink.getGameLib().enterGameRoomByIP(szServerIP, nPort);
                }
              };
              require("HallWebRequest").getInstance().enterGameByRoomNo(nRoomNo, onMathEnd);
            }
          }
        };
        this.gameHttpRequest("GetPrivateRoomInfo.aspx", szData, httpCallback);
      },
      getDivisionGetInfo: function getDivisionGetInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&apptype=1";
        this.httpRequest("DivisionGetInfo.aspx", szData, onRetCallBack);
      },
      enterGameByRoomNo: function enterGameByRoomNo(nRoomNo, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&RoomNo=" + nRoomNo + "&AppType=1";
        this.gameHttpRequest("EnterPrivateRoom.aspx", szData, onRetCallBack);
      },
      getDivisionUpAwardGetInfo: function getDivisionUpAwardGetInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&apptype=1";
        this.httpRequest("DivisionUpAwardGetInfo.aspx", szData, onRetCallBack);
      },
      getDivisionUpAwardGetAward: function getDivisionUpAwardGetAward(levelUpTo, myOpenId, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&LevelUpTo=" + levelUpTo + "&OpenId=" + myOpenId + "&apptype=1";
        this.httpRequest("DivisionUpAwardGetAward.aspx", szData, onRetCallBack);
      },
      getProtectScoreShareReward: function getProtectScoreShareReward(sn, score, OpenId, onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var encryptedData = require("HallUtils").encodeURIComponent(encryptedData);
        var iv = require("HallUtils").encodeURIComponent(iv);
        var szData = "UserID=" + publicUserInfo.userDBID + "&epw=" + publicUserInfo.encryptPassword + "&sn=" + sn + "&ks=" + score + "&OpenId=" + OpenId + "&AppType=1";
        this.gameHttpRequest("GetKeepScoreAward.aspx", szData, onRetCallBack);
      },
      getProtectScoreNum: function getProtectScoreNum(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&AppType=1";
        this.gameHttpRequest("KeepScoreGetInfo.aspx", szData, onRetCallBack);
      },
      getDoubleScoreGetInfo: function getDoubleScoreGetInfo(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&appType=1";
        this.gameHttpRequest("DoubleScoreGetInfo.aspx", szData, onRetCallBack);
      },
      getGetDoubleScoreAward: function getGetDoubleScoreAward(onRetCallBack, sn) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&serialnumber=" + sn + "&appType=1";
        this.gameHttpRequest("GetDoubleScoreAward.aspx", szData, onRetCallBack);
      },
      getUpgradeRewardOnResult: function getUpgradeRewardOnResult(levelUpTo, myOpenId, onRetCallBack) {
        console.log("getUpgradeRewardOnResult ------- levelUpTo ===== " + levelUpTo);
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&LevelUpTo=" + levelUpTo + "&OpenId=" + myOpenId + "&AppType=1";
        this.httpRequest("DivisionUpShareAwardGetAward.aspx", szData, onRetCallBack);
      },
      getGetHotAndLastPlayGame: function getGetHotAndLastPlayGame(onRetCallBack) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "userid=" + publicUserInfo.userDBID + "&apptype=1";
        this.httpRequest("GetHotAndLastPlayGame.aspx", szData, onRetCallBack);
      }
    });
    HallWebRequest.ACTIVE_CHECK_STATUS_COUNT = 6;
    HallWebRequest.getInstance = function() {
      null == HallWebRequest.instance && (HallWebRequest.instance = new HallWebRequest());
      return HallWebRequest.instance;
    };
    cc._RF.pop();
  }, {
    "./Domain": "Domain",
    "./TSCommon": "TSCommon",
    GameLibSink: "GameLibSink",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallUtils: "HallUtils",
    HallWebRequest: "HallWebRequest",
    WebRequest: "WebRequest"
  } ],
  HtmlChat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f36dbM9alFASby36o3csSOm", "HtmlChat");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("../../common/ByteArray");
    var TSCommon_1 = require("../../TSCommon");
    var HtmlChat = function() {
      function HtmlChat() {}
      HtmlChat.prototype.deserialize = function(buf) {
        this._dwSubCode = buf.readUnsignedInt();
        this._dwSpeaker = buf.readUnsignedInt();
        this._dwListener = buf.readUnsignedInt();
        this._dwChannelIDLength = buf.readUnsignedInt();
        buf.position += this._dwChannelIDLength;
        this._szContent = TSCommon_1.TSCommon.readGbkString(buf, buf.length - buf.position);
      };
      HtmlChat.prototype.serialize = function() {
        var ba = new ByteArray_1.ByteArray();
        ba.writeInt(this._dwSubCode);
        ba.writeInt(this._dwSpeaker);
        ba.writeInt(this._dwListener);
        ba.writeInt(this._dwChannelIDLength);
        ba.writeInt(0);
        TSCommon_1.TSCommon.writeUtf8String(ba, this._szContent, 0);
        return ba;
      };
      HtmlChat.prototype.getChatMsg = function() {
        return this._szContent;
      };
      return HtmlChat;
    }();
    exports.HtmlChat = HtmlChat;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray"
  } ],
  HuCardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "442d3BZuyZNQZB+jKsql6BW", "HuCardLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameDefs = require("GameDefs");
    var GameCfg = require("GameCfg");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.init();
      },
      onDestroy: function onDestroy() {},
      init: function init() {
        this.m_outMjs = new Array();
        this.m_playerMj = new Array();
      },
      playFaGuangEffects: function playFaGuangEffects(bIsPlaying) {
        var playerNode = this.node.getChildByName("hupai_eff_node");
        var whosTurnNode = playerNode.getChildByName("hupai_light_act");
        var nCount = this.m_playerMj.cbHuCount;
        if (1 == this.m_nPos) {
          if (1 == nCount) {
            whosTurnNode.x = 241;
            whosTurnNode.y = -221;
          } else if (2 == nCount) {
            whosTurnNode.x = 289;
            whosTurnNode.y = -221;
          } else if (3 == nCount) {
            whosTurnNode.x = 337;
            whosTurnNode.y = -221;
          } else if (4 == nCount) {
            whosTurnNode.x = 381;
            whosTurnNode.y = -221;
          } else if (5 == nCount) {
            whosTurnNode.x = 428;
            whosTurnNode.y = -221;
          } else if (6 == nCount) {
            whosTurnNode.x = 475;
            whosTurnNode.y = -221;
          } else if (7 == nCount) {
            whosTurnNode.x = 241;
            whosTurnNode.y = -199;
          } else if (8 == nCount) {
            whosTurnNode.x = 289;
            whosTurnNode.y = -199;
          } else if (9 == nCount) {
            whosTurnNode.x = 337;
            whosTurnNode.y = -199;
          } else if (10 == nCount) {
            whosTurnNode.x = 381;
            whosTurnNode.y = -199;
          } else if (11 == nCount) {
            whosTurnNode.x = 428;
            whosTurnNode.y = -199;
          } else if (12 == nCount) {
            whosTurnNode.x = 475;
            whosTurnNode.y = -199;
          }
        } else if (2 == this.m_nPos) {
          if (1 == nCount) {
            whosTurnNode.x = 419;
            whosTurnNode.y = 305;
          } else if (2 == nCount) {
            whosTurnNode.x = 421;
            whosTurnNode.y = 283;
          } else if (3 == nCount) {
            whosTurnNode.x = 423;
            whosTurnNode.y = 260;
          } else if (4 == nCount) {
            whosTurnNode.x = 384;
            whosTurnNode.y = 305;
          } else if (5 == nCount) {
            whosTurnNode.x = 386;
            whosTurnNode.y = 283;
          } else if (6 == nCount) {
            whosTurnNode.x = 387;
            whosTurnNode.y = 259;
          } else if (7 == nCount) {
            whosTurnNode.x = 421;
            whosTurnNode.y = 315;
          } else if (8 == nCount) {
            whosTurnNode.x = 423;
            whosTurnNode.y = 292;
          } else if (9 == nCount) {
            whosTurnNode.x = 425;
            whosTurnNode.y = 269;
          } else if (10 == nCount) {
            whosTurnNode.x = 385;
            whosTurnNode.y = 316;
          } else if (11 == nCount) {
            whosTurnNode.x = 387;
            whosTurnNode.y = 293;
          } else if (12 == nCount) {
            whosTurnNode.x = 389;
            whosTurnNode.y = 270;
          }
        } else if (3 == this.m_nPos) {
          if (1 == nCount) {
            whosTurnNode.x = -359;
            whosTurnNode.y = 270;
          } else if (2 == nCount) {
            whosTurnNode.x = -331;
            whosTurnNode.y = 270;
          } else if (3 == nCount) {
            whosTurnNode.x = -302;
            whosTurnNode.y = 270;
          } else if (4 == nCount) {
            whosTurnNode.x = -273;
            whosTurnNode.y = 270;
          } else if (5 == nCount) {
            whosTurnNode.x = -245;
            whosTurnNode.y = 270;
          } else if (6 == nCount) {
            whosTurnNode.x = -217;
            whosTurnNode.y = 270;
          } else if (7 == nCount) {
            whosTurnNode.x = -359;
            whosTurnNode.y = 282;
          } else if (8 == nCount) {
            whosTurnNode.x = -331;
            whosTurnNode.y = 282;
          } else if (9 == nCount) {
            whosTurnNode.x = -302;
            whosTurnNode.y = 282;
          } else if (10 == nCount) {
            whosTurnNode.x = -273;
            whosTurnNode.y = 282;
          } else if (11 == nCount) {
            whosTurnNode.x = -245;
            whosTurnNode.y = 282;
          } else if (12 == nCount) {
            whosTurnNode.x = -217;
            whosTurnNode.y = 282;
          }
        } else if (4 == this.m_nPos) if (1 == nCount) {
          whosTurnNode.x = -448;
          whosTurnNode.y = -142;
        } else if (2 == nCount) {
          whosTurnNode.x = -450;
          whosTurnNode.y = -172;
        } else if (3 == nCount) {
          whosTurnNode.x = -453;
          whosTurnNode.y = -204;
        } else if (4 == nCount) {
          whosTurnNode.x = -399;
          whosTurnNode.y = -142;
        } else if (5 == nCount) {
          whosTurnNode.x = -401;
          whosTurnNode.y = -172;
        } else if (6 == nCount) {
          whosTurnNode.x = -404;
          whosTurnNode.y = -204;
        } else if (7 == nCount) {
          whosTurnNode.x = -452;
          whosTurnNode.y = -126;
        } else if (8 == nCount) {
          whosTurnNode.x = -454;
          whosTurnNode.y = -156;
        } else if (9 == nCount) {
          whosTurnNode.x = -456;
          whosTurnNode.y = -188;
        } else if (10 == nCount) {
          whosTurnNode.x = -403;
          whosTurnNode.y = -126;
        } else if (11 == nCount) {
          whosTurnNode.x = -406;
          whosTurnNode.y = -156;
        } else if (12 == nCount) {
          whosTurnNode.x = -408;
          whosTurnNode.y = -188;
        }
        if (bIsPlaying) {
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
          dragonDisplay.playAnimation("Animation1");
          var Resources = require("Resources");
          Resources.playCommonEffect("huLight.mp3");
          var self = this;
          var callback = function callback() {
            self.playFaGuangEffects(false);
            dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
          };
          dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        } else whosTurnNode.active = false;
      },
      setPlayerMj: function setPlayerMj(playerMj) {
        this.m_playerMj = playerMj;
      },
      setPlayerPos: function setPlayerPos(nPos) {
        this.m_nPos = nPos;
      },
      putHuMj: function putHuMj(outMjValue) {
        1 == this.m_nPos ? this.addSelfHuCard(outMjValue) : 2 == this.m_nPos ? this.addRightHuCard(outMjValue) : 3 == this.m_nPos ? this.addTopHuCard(outMjValue) : 4 == this.m_nPos && this.addLeftHuCard(outMjValue);
      },
      getLastHuCard: function getLastHuCard() {
        var huCardsNode = this.node.getChildByName("hucards");
        return huCardsNode.children[this.m_playerMj.cbHuCount - 1];
      },
      addSelfHuCard: function addSelfHuCard(outMjValue) {
        var outCardCount = this.m_playerMj.cbHuCount;
        var huCardsNode = this.node.getChildByName("hucards");
        for (var i = 0; i < huCardsNode.childrenCount; i++) huCardsNode.children[i].active = false;
        for (var i = 0; i < outCardCount; i++) if (huCardsNode.children[i]) {
          huCardsNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_dao_spriteFrame("mj1", this.m_playerMj.cbHuCards[i]);
          huCardsNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          huCardsNode.children[i].active = true;
          huCardsNode.children[i].cardValue = this.m_playerMj.cbHuCards[i];
          outMjValue && this.playFaGuangEffects(true);
        }
      },
      addLeftHuCard: function addLeftHuCard(outMjValue) {
        var outCardCount = this.m_playerMj.cbHuCount;
        var huCardsNode = this.node.getChildByName("hucards");
        for (var i = 0; i < huCardsNode.childrenCount; i++) huCardsNode.children[i].active = false;
        for (var i = 0; i < outCardCount; i++) if (huCardsNode.children[i]) {
          huCardsNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_z_SpriteFrame("mj1", this.m_playerMj.cbHuCards[i]);
          huCardsNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          huCardsNode.children[i].active = true;
          huCardsNode.children[i].cardValue = this.m_playerMj.cbHuCards[i];
          outMjValue && this.playFaGuangEffects(true);
        }
      },
      addTopHuCard: function addTopHuCard(outMjValue) {
        var outCardCount = this.m_playerMj.cbHuCount;
        var huCardsNode = this.node.getChildByName("hucards");
        for (var i = 0; i < huCardsNode.childrenCount; i++) huCardsNode.children[i].active = false;
        for (var i = 0; i < outCardCount; i++) if (huCardsNode.children[i]) {
          huCardsNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_dao_spriteFrame("mj1", this.m_playerMj.cbHuCards[i]);
          huCardsNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          huCardsNode.children[i].active = true;
          huCardsNode.children[i].cardValue = this.m_playerMj.cbHuCards[i];
          outMjValue && this.playFaGuangEffects(true);
        }
      },
      addRightHuCard: function addRightHuCard(outMjValue) {
        var outCardCount = this.m_playerMj.cbHuCount;
        var huCardsNode = this.node.getChildByName("hucards");
        for (var i = 0; i < huCardsNode.childrenCount; i++) huCardsNode.children[i].active = false;
        for (var i = 0; i < outCardCount; i++) if (huCardsNode.children[i]) {
          huCardsNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_y_SpriteFrame("mj1", this.m_playerMj.cbHuCards[i]);
          huCardsNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          huCardsNode.children[i].active = true;
          huCardsNode.children[i].cardValue = this.m_playerMj.cbHuCards[i];
          outMjValue && this.playFaGuangEffects(true);
        }
      },
      doCards: function doCards() {
        1 == this.m_nPos ? this.addSelfHuCard() : 2 == this.m_nPos ? this.addRightHuCard() : 3 == this.m_nPos ? this.addTopHuCard() : 4 == this.m_nPos && this.addLeftHuCard();
      },
      setAllOutCardIsVis: function setAllOutCardIsVis(bIsVis) {
        var outCardCount = this.m_playerMj.cbHuCount;
        var huCardsNode = this.node.getChildByName("hucards");
        for (var i = 0; i < huCardsNode.childrenCount; i++) huCardsNode.children[i].active = false;
        for (var i = 0; i < outCardCount; i++) huCardsNode.children[i].active = bIsVis;
      },
      gameOver: function gameOver() {
        this.setAllOutCardIsVis();
      },
      cleanAllMjs: function cleanAllMjs() {
        this.setAllOutCardIsVis(false);
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs",
    Resources: "Resources"
  } ],
  IClientFrameSink: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ad780K0euNJJ5MRBXHpogi/", "IClientFrameSink");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  IEventDispatcher: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0060eIhEjFJwYLNK7tnyrGZ", "IEventDispatcher");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  IGameLibSink: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11a1a+ABSNJi5PC2Ig20YeS", "IGameLibSink");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  IOErrorEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87b09AEVZ5Gfp91ZH1tGKPZ", "IOErrorEvent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EgretEvent_1 = require("./EgretEvent");
    var IOErrorEvent = function(_super) {
      __extends(IOErrorEvent, _super);
      function IOErrorEvent(type, bubbles, cancelable) {
        void 0 === bubbles && (bubbles = false);
        void 0 === cancelable && (cancelable = false);
        return _super.call(this, type, bubbles, cancelable) || this;
      }
      IOErrorEvent.dispatchIOErrorEvent = function(target) {
        var event = EgretEvent_1.EgretEvent.create(IOErrorEvent, IOErrorEvent.IO_ERROR);
        var result = target.dispatchEvent(event);
        EgretEvent_1.EgretEvent.release(event);
        return result;
      };
      IOErrorEvent.IO_ERROR = "ioError";
      return IOErrorEvent;
    }(EgretEvent_1.EgretEvent);
    exports.IOErrorEvent = IOErrorEvent;
    cc._RF.pop();
  }, {
    "./EgretEvent": "EgretEvent"
  } ],
  ListenCardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "73505tx6NhLKqeoQkQ1JuDE", "ListenCardLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameCfg = require("GameCfg");
    cc.Class({
      extends: cc.Component,
      properties: {
        listenFont: {
          default: null,
          type: cc.Font
        },
        fanshuFont: {
          default: null,
          type: cc.Font
        }
      },
      onLoad: function onLoad() {},
      init: function init(tingCardList, tingFan, tingLeft) {
        this.m_tingCardList = tingCardList || new Array();
        this.m_tingFan = tingFan;
        this.m_tingLeft = tingLeft;
        this.reloadUI();
      },
      onDestroy: function onDestroy() {},
      setlaiziValue: function setlaiziValue(laiziValue) {
        this.m_laiziValue = laiziValue;
      },
      reloadUI: function reloadUI() {
        var startX = -414;
        var startY = -192;
        var distanceX = 70;
        var tingcardsNode = this.node.getChildByName("ting_cards");
        tingcardsNode.removeAllChildren();
        for (var i = 0; i < this.m_tingCardList.length; i++) {
          var mjNode = new cc.Node();
          mjNode.setScale(.5);
          var sprite = mjNode.addComponent(cc.Sprite);
          sprite.spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_li_SpriteFrame("mj1", this.m_tingCardList[i]);
          mjNode.x = startX + i * distanceX;
          mjNode.y = startY;
          tingcardsNode.addChild(mjNode);
          0 == this.m_tingLeft[i] && (mjNode.color = new cc.Color(137, 137, 137));
          var zhangNode = new cc.Node();
          zhangNode.setAnchorPoint(cc.p(.5, .5));
          var zhangLabel = zhangNode.addComponent(cc.Label);
          zhangLabel.font = this.listenFont;
          zhangLabel.string = this.m_tingLeft[i] + "张";
          zhangNode.x = mjNode.x;
          zhangNode.y = mjNode.y + 35;
          tingcardsNode.addChild(zhangNode);
          var zhangNode2 = new cc.Node();
          zhangNode2.setAnchorPoint(cc.p(.5, .5));
          var fanshuLabel = zhangNode2.addComponent(cc.Label);
          fanshuLabel.font = this.fanshuFont;
          fanshuLabel.string = Math.pow(2, this.m_tingFan[i]) + "倍";
          zhangNode2.x = mjNode.x;
          zhangNode2.y = mjNode.y - 50;
          tingcardsNode.addChild(zhangNode2);
        }
        var bg2Node = this.node.getChildByName("bg_2");
        var width = 66 * this.m_tingCardList.length + 6 * (this.m_tingCardList.length + 1);
        bg2Node.setContentSize(cc.size(width, 109));
        var bg3Node = this.node.getChildByName("bg_3");
        bg3Node.x = bg2Node.x + bg2Node.getContentSize().width;
        bg3Node.y = bg2Node.y;
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg"
  } ],
  LoadingUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d4d21AiVSdAgLWxjtWHkIUo", "LoadingUI");
    "use strict";
    var LoadingUI = cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._RUN_TIMER = 15;
      },
      properties: {
        _loadSp: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {
        var winSize = cc.director.getWinSize();
        var self = this;
        this.node.width = winSize.width;
        this.node.height = winSize.height;
        this.node.x = winSize.width / 2;
        this.node.y = winSize.height / 2;
        self.node.addComponent(cc.BlockInputEvents);
        var nodeSp = new cc.Node("nodeSp");
        this.node.addChild(nodeSp);
        this._loadSp = nodeSp.addComponent(cc.Sprite);
        this._loadSp.spriteFrame = null;
        this._loadSp.node.setPosition(0, 0);
        var rotateTo = cc.rotateTo(2, -720);
        this._loadSp.node.runAction(cc.repeatForever(rotateTo));
        cc.loader.loadRes("hallRes/hall_NetIcon", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self._loadSp.spriteFrame = spriteFrame);
        });
        this.schedule(function() {
          this.node.destroy();
        }, 0, 0, this._RUN_TIMER);
      },
      start: function start() {},
      update: function update(dt) {},
      onDestroy: function onDestroy() {}
    });
    cc.LoadingUI = module.exports = LoadingUI;
    cc._RF.pop();
  }, {} ],
  Loading: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0dfad2izcNLmL4oWKFoQFqb", "Loading");
    "use strict";
    var Loading = cc.Class({
      extends: cc.Component,
      properties: {
        point1: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.initUI();
      },
      initUI: function initUI() {
        var effectNode = this.node.getChildByName("shadow_sp").getChildByName("guang_quan_sp");
        var rotate = cc.rotateBy(2, 360);
        var repeatForever = cc.repeatForever(rotate);
        effectNode.runAction(repeatForever);
      },
      showActive: function showActive() {
        var self = this;
        self.time = 0;
        var func = cc.callFunc(function() {
          self.time = self.time + 1;
          self.time > 99 && (self.time = 99);
          self.point1.getComponent("cc.Label").string = self.time + "%";
          console.log();
        });
        var delayTime = cc.delayTime(.05);
        var sequence = cc.repeatForever(cc.sequence(func, delayTime));
        var repeatForever = cc.repeatForever(sequence);
        this.point1.runAction(repeatForever);
      }
    });
    module.exports = Loading;
    cc._RF.pop();
  }, {} ],
  LoginButtonMenu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "75727M2+MxNtb3WJoIZoNgZ", "LoginButtonMenu");
    "use strict";
    var _ByteArray = require("../hall/common/ByteArray");
    var _Domain = require("../hall/Domain");
    var _WeixinManager = require("../hall/weixin/WeixinManager");
    var _TSCommon = require("../hall/TSCommon");
    var HallResources = require("HallResources");
    var AladinSDK = require("../aladinSDK");
    cc.Class({
      extends: cc.Component,
      m_onWxGameLoginCallBack: null,
      properties: {
        loginLayer: {
          default: null,
          type: cc.Node
        },
        loadingLayer: {
          default: null,
          type: cc.Node
        },
        guestBtn: {
          default: null,
          type: cc.Button
        },
        weixinBtn: {
          default: null,
          type: cc.Button
        },
        loading_label: {
          default: null,
          type: cc.Node
        },
        loading_bar: {
          default: null,
          type: cc.Node
        },
        ver_label: {
          default: null,
          type: cc.Label
        },
        pregress: 0,
        isLoading: false,
        m_timer_ping: 0
      },
      onLoad: function onLoad() {
        _TSCommon.TSCommon.addEvent(HallResources.onLoginFinish, this.onLoginFinished, this);
        this.ver_label.string = _Domain.Domain.Gversion;
        if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
          AladinSDK.reportWithAppId(_Domain.Domain.WEIXIN_APPID, AladinSDK.ReportTypes.LOGIN, null);
          AladinSDK.init(_Domain.Domain.WEIXIN_APPID, "1.0.0", {}, function() {
            AladinSDK.getMoreNode().scaleX = .65;
            AladinSDK.getMoreNode().scaleY = .65;
            AladinSDK.getMoreNode().x = -45;
            cc.sys.os == cc.sys.OS_IOS ? AladinSDK.getMoreNode().y = -105 : AladinSDK.getMoreNode().y = 0;
          });
        }
        this.loading_bar.getComponent(cc.ProgressBar).progress = 0;
        this.loadingLayer.active = false;
        this.loginLayer.active = false;
        var self = this;
        if (require("HallUtils").isIPhoneX()) {
          if (!cc.sys.isNative && cc.sys.isMobile) {
            var canvasFit = this.node.getComponent(cc.Canvas);
            canvasFit.fitHeight = true;
            canvasFit.fitWidth = false;
          }
          cc.loader.loadRes("texture/loginRes/loginbg_x", cc.SpriteFrame, function(error, spriteframe) {
            var bgSp = self.node.getChildByName("login_bg_sp").getComponent(cc.Sprite);
            error || (bgSp.spriteFrame = spriteframe);
          });
        }
        var DEBUG = true;
        this.guestBtn.node.active = false;
        if (DEBUG) {
          this.guestBtn.node.active = true;
          this.loginLayer.active = true;
        } else this.weixinBtn.node.x = 0;
        _TSCommon.TSCommon.log("LoginButtonMenu.onLoad");
        if (!cc.sys.isNative && require("HallUtils").judeIsPhoneWXGameBrowser()) {
          this.loginLayer.active = false;
          this.node.getChildByName("tips_laebl").active = true;
          var onWxGameLoginCallBack = function onWxGameLoginCallBack() {
            var weixinUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
            if (!weixinUserInfo) return;
            require("HallControl").getInstance().loginByIMEI(weixinUserInfo.openid, weixinUserInfo.nickName, weixinUserInfo.avatarUrl, _Domain.Domain.WEIXIN_APPID, weixinUserInfo.openid);
          };
          this.m_onWxGameLoginCallBack = onWxGameLoginCallBack;
          _TSCommon.TSCommon.addEvent(_TSCommon.TSCommon.onGeWXtUserInfoLogin, onWxGameLoginCallBack, this);
          _WeixinManager.WeixinManager.getInstance().checkLogin(false);
          var weixinUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
          if (!weixinUserInfo) return;
          require("HallControl").getInstance().loginByIMEI(weixinUserInfo.unionid, weixinUserInfo.nickname, weixinUserInfo.avatarUrl, "", "");
        } else {
          this.loginLayer.active = true;
          var self = this;
          var imei = null;
          if (!imei) {
            var lastNumber = "";
            for (var i = 0; i < 6; i++) lastNumber += Math.floor(10 * Math.random());
            imei = "ofneS1YkaPCAf3zOMqtLhcPGIUm45";
            imei += lastNumber;
            cc.sys.localStorage.setItem("imei", imei);
          }
          require("HallControl").getInstance().loginByIMEI(imei, "Ok", "", "", "");
        }
      },
      onLoginFinished: function onLoginFinished() {
        this.node.getChildByName("tips_laebl").active = false;
        this.loginLayer.active = false;
        this.loadingLayer.active = true;
        this.startPreloading();
      },
      startPreloading: function startPreloading() {
        this.isLoading = true;
        HallResources.recordPlayerLogToServer(HallResources.recordList.main_res_start);
        var self = this;
        cc.loader.loadResDir("texture", function(completedCount, totalCount, item) {
          self.isLoading && (self.pregress = completedCount / totalCount);
        }, function(err, assets) {
          self.onLoadComplete();
          cc.loader.onComplete = null;
          self.isLoading = false;
        });
      },
      onLoadComplete: function onLoadComplete() {
        cc.director.loadScene("HallPlatformScene");
        HallResources.recordPlayerLogToServer(HallResources.recordList.main_res_end);
      },
      onDestroy: function onDestroy() {
        this.m_onWxGameLoginCallBack && _TSCommon.TSCommon.removeEvent(_TSCommon.TSCommon.onGeWXtUserInfoLogin, this.m_onWxGameLoginCallBack, this);
        _TSCommon.TSCommon.removeEvent(HallResources.onLoginFinish, this.onLoginFinished, this);
      },
      update: function update(dt) {
        if (this.isLoading) {
          this.loading_bar.getComponent(cc.ProgressBar).progress = this.pregress;
          this.loading_label.getComponent(cc.Label).string = Math.floor(100 * this.pregress) + "%";
        }
      },
      guestButton: function guestButton(event) {},
      weiXinButton: function weiXinButton(event) {
        if (!_WeixinManager.WeixinManager.getInstance().checkLogin(true)) return;
      }
    });
    cc._RF.pop();
  }, {
    "../aladinSDK": "aladinSDK",
    "../hall/Domain": "Domain",
    "../hall/TSCommon": "TSCommon",
    "../hall/common/ByteArray": "ByteArray",
    "../hall/weixin/WeixinManager": "WeixinManager",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallUtils: "HallUtils"
  } ],
  MallLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2e42ndTDhDMIgcKq5rHG0U", "MallLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var MallLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        goldToggle: {
          default: null,
          type: cc.Toggle
        },
        diamondToggle: {
          default: null,
          type: cc.Toggle
        },
        mallList: {
          default: null,
          type: cc.ScrollView
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.goldToggle.node.on("toggle", this.showGoldNode, this);
        this.diamondToggle.node.on("toggle", this.showDiamondNode, this);
        cc.sys.os == cc.sys.OS_IOS && (this.diamondToggle.node.active = false);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      start: function start() {},
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      },
      showGoldNode: function showGoldNode() {
        this.goldToggle.isChecked = true;
        this.diamondToggle.isChecked = false;
        this.mallList.getComponent("MallScrollList").initData(1);
      },
      showDiamondNode: function showDiamondNode() {
        if (cc.sys.os == cc.sys.OS_IOS) {
          this.closeAndChangeScaleAction();
          this.node.parent.getComponent("HallPlatformInfo").openIosPlatformShare();
        } else {
          this.goldToggle.isChecked = false;
          this.diamondToggle.isChecked = true;
          this.mallList.getComponent("MallScrollList").initData(2);
        }
      }
    });
    module.exports = MallLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    TSCommon: "TSCommon"
  } ],
  MallScrollListItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c76fJgh+dKx5L8u+6pmEwV", "MallScrollListItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        getCount: {
          default: null,
          type: cc.Label
        },
        getIcon: {
          default: null,
          type: cc.Sprite
        },
        needIcon: {
          default: null,
          type: cc.Sprite
        },
        needCount: {
          default: null,
          type: cc.Label
        },
        bgBtn: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        this.bgBtn.node.on("click", this.btnClickFunc, this);
      },
      btnClickFunc: function btnClickFunc() {
        var self = this;
        self.clickFunc(self.needCount.string, self.getCount.string, self.wxRmb);
      },
      initView: function initView(data) {
        var self = this;
        this.getCount.string = data.count;
        this.needCount.string = data.need;
        this.clickFunc = data.clickFunc;
        this.wxRmb = data.wxRmb;
        cc.loader.loadRes(data.getIcon, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.getIcon.spriteFrame = spriteFrame);
        });
        if ("" == data.needIcon) {
          self.needIcon.node.active = false;
          this.needCount.string = "¥ " + this.needCount.string;
        } else cc.loader.loadRes(data.needIcon, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.needIcon.spriteFrame = spriteFrame);
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  MallScrollList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "009c6512H5KmZiK/yD/59T1", "MallScrollList");
    "use strict";
    var _TSCommon = require("../TSCommon");
    var _WeixinManager = require("../weixin/WeixinManager");
    var MallScrollList = cc.Class({
      extends: cc.Component,
      properties: {
        mallItem: cc.Prefab,
        clickTips: cc.Prefab
      },
      onLoad: function onLoad() {
        this.m_coinList = new Array();
        this.content = this.node.getComponent(cc.ScrollView).content;
        this.initData();
        this.maxHeight = 0;
      },
      start: function start() {},
      initData: function initData(type) {
        var self = this;
        self.maxHeight = this.content.height;
        this.content.removeAllChildren();
        var listData = [];
        if (null == type || 1 == type) {
          self.m_coinList = require("HallControl").getInstance().getEXchangeList();
          for (var i = 0; i < self.m_coinList.length; i++) {
            var item = {
              index: i + 1,
              count: self.m_coinList[i].gm + "金币",
              getIcon: "texture/hallRes/mallInfo/mallGold" + (i + 1) + ".png",
              needIcon: "texture/commonRes/money/diamondCoin.png",
              need: self.m_coinList[i].da
            };
            item.clickFunc = function(useCount, getCount) {
              var clickLayer = cc.instantiate(self.clickTips);
              var data = [];
              data.titleIcon = "texture/hallRes/mallInfo/mallBuyTitle";
              data.msg = "确定使用" + useCount + "钻石来兑换" + getCount + "数量的金币么？";
              data.showIcon = "texture/hallRes/mallInfo/mallGold" + (i + 1) + ".png";
              data.showIconLabel = "*" + getCount;
              data.buttonIcon2 = "texture/commonRes/button/sureBtn";
              data.button2Func = function() {
                clickLayer.getComponent("commonTipsLayer").clickCloseBtn();
                var onExchange = function onExchange(bolSuccess, data) {
                  if (bolSuccess && bolSuccess) {
                    require("HallResources").getInstance().removeLoading();
                    var HallResources = require("HallResources");
                    var jsonObject = JSON.parse(data);
                    console.log("-----------------xcxGetUserBalance.aspx返回数据----------------------------");
                    console.log(jsonObject);
                    var RetCode = jsonObject.RetCode;
                    var myBalance = jsonObject.myBalance;
                    var myMoney = jsonObject.myMoney;
                    if (1 == RetCode) {
                      console.log("兑换成功");
                      require("HallControl").getInstance().getPublicUserInfo().nDiamond = myBalance;
                      require("HallControl").getInstance().getPublicUserInfo().nGold = myMoney;
                      _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "+" + getCount, "texture/hallRes/roomInfo/gold" ]);
                      _TSCommon.TSCommon.dispatchEvent(HallResources.onGoldOrDiamondChanged, true);
                      _TSCommon.TSCommon.dispatchEvent(HallResources.onRefreshPlayerDiamondCount, this);
                    } else 90013 == RetCode ? _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "亲，钻石太少了，请去商店获取钻石" ]) : _TSCommon.TSCommon.dispatchEvent(this.onShowFlyMessage, [ "兑换失败" ]);
                  }
                };
                if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
                  var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
                  require("HallWebRequest").getInstance().exchangeMoneyByDiamond(useCount, myOpenId, onExchange);
                }
              };
              data.buttonIcon3 = "texture/commonRes/button/cancelBtn";
              data.button3Func = function() {
                clickLayer.getComponent("commonTipsLayer").clickCloseBtn();
              };
              clickLayer.parent = this.node.parent.parent.parent.parent;
              clickLayer.getComponent("commonTipsLayer").initData(data);
              clickLayer.setPosition(0, 0);
            };
            listData.push(item);
          }
        } else {
          self.m_coinList = require("HallControl").getInstance().getShoppingList();
          for (var i = 0; i < self.m_coinList.length; i++) {
            var item = {
              index: i + 1,
              count: self.m_coinList[i].gm + "钻石",
              getIcon: "texture/hallRes/mallInfo/mallDiamond" + (i + 1) + ".png",
              needIcon: "",
              need: self.m_coinList[i].rmb / 100 + "元",
              wxRmb: self.m_coinList[i].rmb / 100
            };
            item.clickFunc = function(useCount, getCount, wxRmb) {
              console.log(wxRmb + "使用" + useCount + "来购买" + getCount + "数量的钻石");
              _WeixinManager.WeixinManager.getInstance().wxBuyDiamond(wxRmb);
            };
            listData.push(item);
          }
        }
        for (var i = 0; i < listData.length; i++) {
          var item = cc.instantiate(this.mallItem);
          item.parent = this.content;
          item.getComponent("MallScrollListItem").initView(listData[i]);
          var x = 140 + i % 3 * (item.width + 10);
          var y = -110 - Math.floor(i / 3) * (item.height + 5);
          item.setPosition(x, y);
        }
        var newHeight = (this.mallItem.data.height + 5) * Math.ceil(listData.length / 3);
        this.content.height = newHeight > self.maxHeight ? self.maxHeight : newHeight;
      }
    });
    module.exports = MallScrollList;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon",
    "../weixin/WeixinManager": "WeixinManager",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest"
  } ],
  MatchGameOverLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b36c3tqCaNDjapQylcaZQ6r", "MatchGameOverLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameDefs = require("GameDefs");
    var Resources = require("Resources");
    var HallResources = require("HallResources");
    var GameCfg = require("GameCfg");
    cc.Class({
      extends: cc.Component,
      properties: {
        match_title: {
          default: null,
          type: cc.Node
        },
        match_cup: {
          default: null,
          type: cc.Node
        },
        match_level: {
          default: null,
          type: cc.Node
        },
        match_level_star_bg: {
          default: null,
          type: cc.Node
        },
        match_level_star: {
          default: null,
          type: cc.Node
        },
        level_progressBar: {
          default: null,
          type: cc.ProgressBar
        },
        back_Btn: {
          default: null,
          type: cc.Button
        },
        richProgressTips: {
          default: null,
          type: cc.Sprite
        },
        richProgress: {
          default: null,
          type: cc.RichText
        },
        protect_score_icon: cc.Node,
        cur_score: cc.Label,
        changeScore: cc.Label,
        lose_score_font: cc.Font,
        win_score_font: cc.Font,
        continue_win_counts: cc.Label,
        richTips: cc.RichText,
        share_btn: cc.Button,
        next_btn: cc.Button,
        share_tips2: cc.Sprite
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.getChildByName("mask_bg") && this.node.getChildByName("mask_bg").setContentSize(windowSize);
        this.bolShareDouble = true;
        this.getShareDoubleTimes();
      },
      getShareDoubleTimes: function getShareDoubleTimes() {
        var self = this;
        var onRetCallback = function onRetCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            var hasTimes = jsonObject.TotalTimes - jsonObject.CurTimes;
            self.richTips.string = "<color=#ffffff>您目前还有</color><color=#e72c07>" + hasTimes + "</color><color=#ffffff>次积分翻倍的机会</color>";
            if (parseInt(jsonObject.CurTimes) >= parseInt(jsonObject.TotalTimes)) {
              self.bolShareDouble = false;
              cc.loader.loadRes("texture/game/gameOver/shareToGroup", cc.SpriteFrame, function(error, spriteframe) {
                error || (self.share_btn.node.getComponent(cc.Sprite).spriteFrame = spriteframe);
              });
            }
          }
        };
        require("HallWebRequest").getInstance().getDoubleScoreGetInfo(onRetCallback);
      },
      init: function init(bIsLiuju, huType, fanNum, laiyouValue, showDetailResult, nMatchLevel, nMatchScore, myselfWinOrLoseScore, winCount, sn) {
        this.m_sn = sn;
        this.m_bIsLiuju = bIsLiuju;
        this.m_huType = huType;
        this.m_fanNum = fanNum;
        this.m_laiyouValue = laiyouValue;
        this.m_showDetailResult = showDetailResult;
        this.m_matchLevel = nMatchLevel;
        this.m_matchScore = nMatchScore;
        this.m_myselfWinOrLoseScore = myselfWinOrLoseScore;
        this.m_winCount = winCount;
        this.m_leftTimerStop = false;
        this.m_thisViewClosed = false;
        this.m_leftTime = 60;
        _TSCommon.TSCommon.addEvent(GameCfg.PROTECT_SCORE_SUCCESS, this.onProtectScoreSucceed, this);
      },
      onEnable: function onEnable() {
        this.continue_win_counts.node.active = false;
        this.continue_win_counts.node.parent.active = false;
        this.protect_score_icon.active = false;
        this.continue_win_counts.string = this.m_winCount;
        this.startLeftTimer();
        var winSize = cc.director.getWinSize();
        var self = this;
        var playDropAction = function playDropAction() {
          var preX = self.match_title.x;
          var preY = self.match_title.y;
          self.match_title.x = preX;
          self.match_title.y = winSize.height / 2 + self.match_title.height / 2 + 20;
          var drop = cc.moveTo(.1, cc.p(preX, preY - 30));
          var up = cc.moveTo(.2, cc.p(preX, preY + 30));
          var moveToDes = cc.moveTo(.3, cc.p(preX, preY));
          var seq = cc.sequence(drop, up);
          self.match_title.runAction(seq);
        };
        if (this.m_bIsLiuju) this.loadTitleRes("result_liuju_title", playDropAction); else if (this.m_myselfWinOrLoseScore <= 0) {
          this.loadTitleRes("result_lose_title", playDropAction);
          cc.loader.loadRes("texture/game/gameOver/shareToGroup", cc.SpriteFrame, function(error, spriteframe) {
            error || (self.share_btn.node.getComponent(cc.Sprite).spriteFrame = spriteframe);
          });
        } else this.loadTitleRes("result_win_title", playDropAction);
        this.setLevelInfo();
        var HallResources = require("HallResources");
        HallResources.recordPlayerLogToServer(HallResources.recordList.count_page);
      },
      onDestroy: function onDestroy() {
        this.m_protectedScoreSucceed = false;
        this.m_thisViewClosed = true;
        this.stopLeftTimer();
        this.unschedule(this.setProgress);
        this.unschedule(this.scoreChangeTimer);
        _TSCommon.TSCommon.removeEvent(GameCfg.PROTECT_SCORE_SUCCESS, this.onProtectScoreSucceed, this);
        this.m_jiaxingdragonDisplay && this.m_jiaxingdragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.onPlayJiaxingFinished, this);
        this.m_diaoxingdragonDisplay && this.m_diaoxingdragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.onPlayDiaoxingFinished, this);
      },
      setShowLevelUpgrade: function setShowLevelUpgrade(showLevelUpgrade) {
        console.log("设定段位升级显示");
        this.m_showLevelUpgrade = showLevelUpgrade;
      },
      loadTitleRes: function loadTitleRes(titleResName, onEnd) {
        var self = this;
        cc.loader.loadRes("texture/game/matchResult/" + titleResName, cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self.match_title.getComponent(cc.Sprite).spriteFrame = spriteFrame;
            onEnd && onEnd();
          }
        });
      },
      shareToGroup: function shareToGroup() {
        "mqqbrowser" != cc.sys.browserType && "wechatgame" != cc.sys.browserType || wx.shareAppMessage({
          title: "血流换三张，本群谁能与我一战！",
          imageUrl: HallResources.groupShareImgUrl
        });
        var self = this;
        var onRetCallback = function onRetCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            var retcode = jsonObject.RetCode;
            if (1 == retcode) {
              Resources.showRewardTips("分享双倍成功", true, true, true);
              self.share_btn.node.active = false;
              self.richTips.node.active = false;
              self.share_tips2.node.active = false;
              var newRankData = HallResources.getInstance().getRankAndStarByScore(jsonObject.NowScore);
              self.init(false, null, null, null, null, self.m_matchLevel, jsonObject.NowScore, self.m_myselfWinOrLoseScore, self.m_winCount, self.m_sn);
              self.m_showLevelUpgrade = function(onLevelUpgradeClosed) {
                var upgradelevelLayer = self.node.parent.getComponent("DeskScene").levelUpgradeLayer.getComponent("UpgradeLevelLayer");
                upgradelevelLayer.init(newRankData.id, jsonObject.NowScore, self.myselfWinOrLoseScore, onLevelUpgradeClosed);
                self.node.parent.getComponent("DeskScene").levelUpgradeLayer.active = true;
              };
              self.setLevelInfo();
            } else if (11 == retcode) {
              console.log("次数不足");
              Resources.showRewardTips("您分享双倍的机会已经用尽", true, true, true);
            } else 12 == retcode ? console.log("参数错误") : 13 == retcode && console.log("分数不为正");
            self.getShareDoubleTimes();
          }
        };
        if (this.bolShareDouble) {
          console.log("进入分享翻倍功能");
          require("HallWebRequest").getInstance().getGetDoubleScoreAward(onRetCallback, this.m_sn);
        } else Resources.showRewardTips("您分享双倍的机会已经用尽", true, true, true);
      },
      setLevelInfo: function setLevelInfo() {
        console.log("设定段位信息");
        var divisionID = this.m_matchLevel;
        var curLevelData = HallResources.getInstance().getRankDataById(divisionID);
        var curMaxScore = curLevelData.MaxScore;
        var curMinScore = curLevelData.MinScore;
        var offsetScore = curMaxScore - curMinScore;
        console.log("段位的分数区间为：" + offsetScore);
        var curLevelScore = this.m_matchScore - curMinScore;
        var curPercent = curLevelScore / offsetScore;
        console.log("当前分数的比率为：" + curPercent);
        var starNum = Math.floor(curLevelScore / offsetScore * 3);
        console.log("当前的星数为：" + starNum);
        var preScore = this.m_matchScore - this.m_myselfWinOrLoseScore;
        console.log("之前的段位分数为: " + preScore);
        var preLevelScore = preScore - curMinScore;
        var preRankData = HallResources.getInstance().getRankAndStarByScore(preScore);
        var preStarNum = Math.floor(preLevelScore / offsetScore * 3);
        var prePercent = preLevelScore / offsetScore;
        console.log("之前分数的比率为：" + prePercent);
        console.log("之前的星数为：" + preStarNum);
        var formatNumber = require("Tools").getFormatNumber(preScore);
        formatNumber = formatNumber;
        this.cur_score.string = formatNumber;
        if (this.m_myselfWinOrLoseScore > 0) this.changeScore.string = "+" + this.m_myselfWinOrLoseScore; else {
          this.richTips.node.active = false;
          this.share_tips2.node.active = false;
          this.changeScore.string = this.m_myselfWinOrLoseScore;
        }
        var self = this;
        for (var i = 0; i < this.match_level_star.childrenCount; i++) this.match_level_star.children[i].active = false;
        if (preRankData.id == divisionID) {
          self.setCupAndLevelInfo(self.m_matchScore);
          if (starNum > preStarNum) {
            for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
            self.level_progressBar.progress = prePercent;
          } else if (starNum < preStarNum) if (self.m_protectedScoreSucceed) {
            for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
            self.level_progressBar.progress = prePercent;
          } else {
            for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
            self.level_progressBar.progress = prePercent;
          } else {
            for (var i = 0; i < starNum; i++) self.match_level_star.children[i].active = true;
            self.m_protectedScoreSucceed, self.level_progressBar.progress = prePercent;
          }
        } else {
          self.setCupAndLevelInfo(preScore);
          var preLevelData = HallResources.getInstance().getRankDataById(preRankData.id);
          var preMaxScore = preLevelData.MaxScore;
          var preMinScore = preLevelData.MinScore;
          var preOffsetScore = preMaxScore - preMinScore;
          preLevelScore = preScore - preMinScore;
          preStarNum = Math.floor(preLevelScore / preOffsetScore * 3);
          prePercent = preLevelScore / preOffsetScore;
          for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
          self.level_progressBar.progress = prePercent;
        }
        var showResultProgress = function showResultProgress() {
          console.log("之前的段位id为:" + preRankData.id);
          console.log("现在的段位id为：" + divisionID);
          if (self.m_thisViewClosed) return;
          if (preRankData.id == divisionID) if (starNum > preStarNum) {
            var onScrollEnded = function onScrollEnded() {
              self.playJiaxingAction(preStarNum, starNum);
            };
            self.scrollToPercent(prePercent, curPercent, .5, onScrollEnded);
          } else if (starNum < preStarNum) if (self.m_protectedScoreSucceed) self.scrollToPercent(curPercent, prePercent, .5); else {
            var onScrollEnded = function onScrollEnded() {
              self.playDiaoxingAction(preStarNum, starNum);
            };
            self.scrollToPercent(prePercent, curPercent, .5, onScrollEnded);
          } else self.m_protectedScoreSucceed ? self.scrollToPercent(curPercent, prePercent, .5) : self.scrollToPercent(prePercent, curPercent, .5); else {
            var preLevelData = HallResources.getInstance().getRankDataById(preRankData.id);
            var preMaxScore = preLevelData.MaxScore;
            var preMinScore = preLevelData.MinScore;
            var preOffsetScore = preMaxScore - preMinScore;
            preLevelScore = preScore - preMinScore;
            preStarNum = Math.floor(preLevelScore / preOffsetScore * 3);
            prePercent = preLevelScore / preOffsetScore;
            var onScrollEnded = function onScrollEnded() {
              var onPlayActionEnded = function onPlayActionEnded() {
                console.log("加星动画播放完毕");
                if (self.m_showLevelUpgrade) {
                  var onLevelUpgradeViewClose = function onLevelUpgradeViewClose() {
                    self.setCupAndLevelInfo(self.m_matchScore);
                    for (var i = 0; i < self.match_level_star.childrenCount; i++) self.match_level_star.children[i].active = false;
                    self.level_progressBar.progress = 0;
                  };
                  console.log("展示段位升级界面");
                  self.m_showLevelUpgrade(onLevelUpgradeViewClose);
                }
              };
              self.playJiaxingAction(preStarNum, 3, onPlayActionEnded);
            };
            self.scrollToPercent(prePercent, 1, .5, onScrollEnded, true);
          }
        };
        var playWinsAction = function playWinsAction() {
          var winsIconNode = self.continue_win_counts.node.parent;
          winsIconNode.active = true;
          self.continue_win_counts.node.active = true;
          winsIconNode.setScale(5);
          var preX = winsIconNode.x;
          var preY = winsIconNode.y;
          winsIconNode.x = winsIconNode.x + 50;
          winsIconNode.y = winsIconNode.y + 50;
          var delay = cc.delayTime(.2);
          var moveTo = cc.moveTo(.1, cc.p(preX, preY));
          var scaleTo = cc.scaleTo(.1, 1);
          var spawn = cc.spawn(moveTo, scaleTo);
          var seq = cc.sequence(delay, spawn);
          winsIconNode.runAction(seq);
        };
        var playProtectScoreAction = function playProtectScoreAction() {
          self.protect_score_icon.active = true;
          self.protect_score_icon.setScale(5);
          var preX = self.protect_score_icon.x;
          var preY = self.protect_score_icon.y;
          self.protect_score_icon.x = self.protect_score_icon.x + 50;
          self.protect_score_icon.y = self.protect_score_icon.y + 50;
          var delay = cc.delayTime(.2);
          var moveTo = cc.moveTo(.1, cc.p(preX, preY));
          var scaleTo = cc.scaleTo(.1, 1);
          var spawn = cc.spawn(moveTo, scaleTo);
          var seq = cc.sequence(delay, spawn);
          self.protect_score_icon.runAction(seq);
        };
        var playChangeScoreAction = function playChangeScoreAction() {
          if (self.m_thisViewClosed) return;
          if (0 == self.m_myselfWinOrLoseScore) {
            self.changeScore.string = "";
            return;
          }
          var playActionTime = .5;
          var deltaScore = Math.abs(self.m_myselfWinOrLoseScore);
          var changed = Math.floor(85 / 2400 * deltaScore);
          self.m_myselfWinOrLoseScore <= 0 && (changed *= -1);
          var deltaTime = playActionTime / (deltaScore / Math.abs(changed));
          var calcScore = preScore;
          var calcChangeScore = self.m_myselfWinOrLoseScore;
          self.scoreChangeTimer = function() {
            if (self.m_thisViewClosed) return;
            calcScore += changed;
            calcChangeScore -= changed;
            if (changed > 0 && calcScore > self.m_matchScore || changed < 0 && calcScore < self.m_matchScore) {
              self.cur_score.string = require("Tools").getFormatNumber(self.m_matchScore);
              self.changeScore.string = 0;
              _TSCommon.TSCommon.performWithDelay(self, function() {
                self.changeScore.node.active = false;
                self.m_winCount > 1 && playWinsAction();
              }, .1);
              self.unschedule(self.scoreChangeTimer);
              return;
            }
            self.cur_score.string = calcScore;
            self.changeScore.string = calcChangeScore;
          }.bind(self);
          self.schedule(self.scoreChangeTimer, deltaTime, cc.macro.REPEAT_FOREVER, 0);
        };
        if (this.m_myselfWinOrLoseScore <= 0) {
          this.changeScore.font = this.lose_score_font;
          if (self.m_protectedScoreSucceed) {
            playProtectScoreAction();
            self.changeScore.node.active = false;
          } else _TSCommon.TSCommon.performWithDelay(this, function() {
            playChangeScoreAction();
            showResultProgress();
          }.bind(this), 1);
        } else {
          this.changeScore.font = this.win_score_font;
          1 == this.m_winCount || 0 == this.m_winCount ? _TSCommon.TSCommon.performWithDelay(this, function() {
            playChangeScoreAction();
            showResultProgress();
          }.bind(this), 1) : this.m_winCount > 1 && _TSCommon.TSCommon.performWithDelay(this, function() {
            playChangeScoreAction();
            showResultProgress();
          }.bind(this), 1);
        }
        _TSCommon.TSCommon.performWithDelay(this, function() {
          self.back_Btn && (self.back_Btn.node.active = true);
          self.richProgressTips && (self.richProgressTips.node.active = true);
          self.next_btn && (self.next_btn.node.active = true);
        }.bind(this), 2.5);
      },
      setCupAndLevelInfo: function setCupAndLevelInfo(score) {
        var self = this;
        var data = HallResources.getInstance().getRankAndStarByScore(score);
        cc.loader.loadRes("texture/hallRes/qualifyingCup/cup" + data.cup, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.match_cup.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        });
        var nextName = data.rankName;
        this.match_level.getComponent(cc.Label).string = nextName;
      },
      scrollToPercent: function scrollToPercent(prePercent, curPercent, scrollTime, onEnd, bolLeaveUp) {
        console.log("滑动时之前比率为：" + prePercent);
        console.log("滑动时当前比率为：" + curPercent);
        var deltaScroll = (curPercent - prePercent) / (100 * scrollTime);
        var self = this;
        Resources.playCommonEffect("moveProgress.mp3");
        var nextLevel = self.m_matchLevel;
        var toNextPercent = 1 - curPercent;
        if (bolLeaveUp) {
          nextLevel = self.m_matchLevel + 1;
          toNextPercent = 1;
        }
        if (nextLevel <= 20) {
          var preLevelData = HallResources.getInstance().getRankDataById(nextLevel);
          var preMaxScore = preLevelData.MaxScore;
          var preMinScore = preLevelData.MinScore;
          var preOffsetScore = preMaxScore - preMinScore;
          var needProgress = parseInt(preOffsetScore * toNextPercent);
          self.richProgress.string = "<color=#42130a>您当前还差</color><color=#e72c07>" + needProgress + "</color><color=#42130a>积分晋级</color>";
        }
        this.setProgress = function() {
          if (self.m_thisViewClosed) return;
          if (deltaScroll > 0 && prePercent > curPercent || deltaScroll < 0 && prePercent < curPercent) {
            onEnd && onEnd();
            self.unschedule(self.setProgress);
            return;
          }
          prePercent += deltaScroll;
          self.level_progressBar.progress = prePercent;
        }.bind(this);
        this.schedule(this.setProgress, scrollTime / (100 * scrollTime), cc.macro.REPEAT_FOREVER, 0);
      },
      playJiaxingAction: function playJiaxingAction(preStarNum, starNum, onEnd) {
        if (starNum <= preStarNum) return;
        var self = this;
        cc.loader.loadResDir("animation/dragonBones/dh_jiaxing", function(err, assets) {
          if (!err) {
            self.jiaxingAssets = assets;
            var tmpStarNum = preStarNum;
            var playStarAction = function playStarAction(stars) {
              var actNode = new cc.Node();
              var dragonDisplay = actNode.addComponent(dragonBones.ArmatureDisplay);
              for (var i in self.jiaxingAssets) {
                self.jiaxingAssets[i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = self.jiaxingAssets[i]);
                self.jiaxingAssets[i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = self.jiaxingAssets[i]);
              }
              dragonDisplay.armatureName = "armatureName";
              dragonDisplay.playAnimation("shengxing");
              self.onPlayJiaxingFinished = function() {
                Resources.playCommonEffect("addStar.mp3");
                self.match_level_star.children[stars].active = true;
                actNode.destroy();
                stars + 1 < starNum ? playStarAction(stars + 1) : onEnd && onEnd();
              };
              dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, self.onPlayJiaxingFinished, self);
              self.m_jiaxingdragonDisplay = dragonDisplay;
              self.match_level_star_bg.children[stars].addChild(actNode);
            };
            playStarAction(tmpStarNum);
          }
        });
      },
      playDiaoxingAction: function playDiaoxingAction(preStarNum, starNum, onEnd) {
        if (starNum >= preStarNum) return;
        var self = this;
        cc.loader.loadResDir("animation/dragonBones/dh_diaoxing", function(err, assets) {
          if (!err) {
            self.diaoxingAssets = assets;
            var tmpStarNum = preStarNum;
            var playStarAction = function playStarAction(stars) {
              var actNode = new cc.Node();
              var dragonDisplay = actNode.addComponent(dragonBones.ArmatureDisplay);
              for (var i in self.diaoxingAssets) {
                self.diaoxingAssets[i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = self.diaoxingAssets[i]);
                self.diaoxingAssets[i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = self.diaoxingAssets[i]);
              }
              dragonDisplay.armatureName = "armatureName";
              dragonDisplay.playAnimation("diaoxing");
              self.onPlayDiaoxingFinished = function() {
                Resources.playCommonEffect("removeStar.mp3");
                self.match_level_star.children[stars - 1].active = false;
                actNode.destroy();
                stars - 1 > starNum ? playStarAction(stars - 1) : onEnd && onEnd();
              };
              dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, self.onPlayDiaoxingFinished, self);
              self.m_diaoxingdragonDisplay = dragonDisplay;
              self.match_level_star.children[stars - 1].addChild(actNode);
            };
            playStarAction(tmpStarNum);
          }
        });
      },
      onProtectScoreSucceed: function onProtectScoreSucceed() {
        console.log("监听到保分成功");
        this.m_protectedScoreSucceed = true;
      },
      setProtectScoreSuccess: function setProtectScoreSuccess() {
        this.m_protectedScoreSucceed = true;
      },
      getLeftLeaveTime: function getLeftLeaveTime() {
        return this.m_leftTime;
      },
      startLeftTimer: function startLeftTimer() {
        var self = this;
        var callback = function callback() {
          if (self.m_leftTimerStop) return;
          self.m_leftTime -= 1;
          self.m_leftTime > 0 ? _TSCommon.TSCommon.performWithDelay(self, callback, 1) : require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
        };
        _TSCommon.TSCommon.performWithDelay(this, callback, 1);
      },
      stopLeftTimer: function stopLeftTimer() {
        this.m_leftTimerStop = true;
      },
      onLeaveGameClicked: function onLeaveGameClicked() {
        G.goldGameReady = null;
        G.matchGameReady = null;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      },
      onDetailResultClicked: function onDetailResultClicked() {
        this.m_showDetailResult && this.m_showDetailResult();
      },
      onPrepareClicked: function onPrepareClicked() {
        G.matchGameReady = true;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources",
    Tools: "Tools"
  } ],
  MjResourceMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84554nnyhxJvJDkf11/SN9I", "MjResourceMgr");
    "use strict";
    var Resources = require("Resources");
    cc.Class({
      extends: cc.Component,
      properties: {
        mj1_face_dao: {
          default: null,
          type: cc.SpriteAtlas
        },
        mj1_face_li: {
          default: null,
          type: cc.SpriteAtlas
        },
        mj1_face_suit_y: {
          default: null,
          type: cc.SpriteAtlas
        },
        mj1_face_suit_z: {
          default: null,
          type: cc.SpriteAtlas
        },
        mj1_face_y: {
          default: null,
          type: cc.SpriteAtlas
        },
        mj1_face_z: {
          default: null,
          type: cc.SpriteAtlas
        }
      },
      onLoad: function onLoad() {
        var self = this;
        cc.loader.loadRes("texture/game/mj1/back_left", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj1_back_left_frame = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/back_right", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj1_back_right_frame = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/back_top", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj1_back_top_frame = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/hh_li_laizi", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_hh_li_laizi = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/metop_cao", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_metop_cao = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/left_lai", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_left_lai = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/left_cao", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_left_cao = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/left_gang_lai", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_left_gang_lai = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/left_gang_cao", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_left_gang_cao = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/metop_lai", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_metop_lai = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/metop_gang_lai", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_metop_gang_lai = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/metop_gang_cao", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_metop_gang_cao = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/right_lai", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_right_lai = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/right_cao", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_right_cao = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/right_gang_lai", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_right_gang_lai = spriteFrame;
        });
        cc.loader.loadRes("texture/game/mj1/right_gang_cao", cc.SpriteFrame, function(err, spriteFrame) {
          self.m_mj_right_gang_cao = spriteFrame;
        });
      },
      get_frameName: function get_frameName(foreName, mjValue) {
        return Resources.get_frameName(foreName, mjValue);
      },
      get_face_dao_frameName: function get_face_dao_frameName(mjValue) {
        return this.get_frameName("hh_dao_", mjValue);
      },
      get_face_dao_spriteFrame: function get_face_dao_spriteFrame(mjType, mjValue) {
        var frameName = this.get_face_dao_frameName(mjValue);
        if (frameName) {
          if ("mj1" == mjType) return this.mj1_face_dao.getSpriteFrame(frameName);
          if ("mj2" == mjType) return this.mj2_face_dao.getSpriteFrame(frameName);
          if ("mj3" == mjType) return this.mj3_face_dao.getSpriteFrame(frameName);
          console.log("no other mj type");
        } else console.log("mjType ========" + mjType + "  mjValue ===========" + mjValue);
      },
      get_face_li_frameName: function get_face_li_frameName(mjValue) {
        return this.get_frameName("hh_li_", mjValue);
      },
      get_face_li_SpriteFrame: function get_face_li_SpriteFrame(mjType, mjValue) {
        var frameName = this.get_face_li_frameName(mjValue);
        if (frameName) {
          if ("mj1" == mjType) return this.mj1_face_li.getSpriteFrame(frameName);
          if ("mj2" == mjType) return this.mj2_face_li.getSpriteFrame(frameName);
          if ("mj3" == mjType) return this.mj3_face_li.getSpriteFrame(frameName);
          console.log("no other mj type");
        } else console.log("mjType ========" + mjType + "  mjValue ===========" + mjValue);
      },
      get_face_suit_y_frameName: function get_face_suit_y_frameName(mjValue) {
        return this.get_frameName("hh_suit_y_", mjValue);
      },
      get_face_suit_y_SpriteFrame: function get_face_suit_y_SpriteFrame(mjType, mjValue) {
        var frameName = this.get_face_suit_y_frameName(mjValue);
        if (frameName) {
          if ("mj1" == mjType) return this.mj1_face_suit_y.getSpriteFrame(frameName);
          if ("mj2" == mjType) return this.mj2_face_suit_y.getSpriteFrame(frameName);
          if ("mj3" == mjType) return this.mj3_face_suit_y.getSpriteFrame(frameName);
          console.log("no other mj type");
        } else console.log("mjType ========" + mjType + "  mjValue ===========" + mjValue);
      },
      get_face_suit_z_frameName: function get_face_suit_z_frameName(mjValue) {
        return this.get_frameName("hh_suit_z_", mjValue);
      },
      get_face_suit_z_SpriteFrame: function get_face_suit_z_SpriteFrame(mjType, mjValue) {
        var frameName = this.get_face_suit_z_frameName(mjValue);
        if (frameName) {
          if ("mj1" == mjType) return this.mj1_face_suit_z.getSpriteFrame(frameName);
          if ("mj2" == mjType) return this.mj2_face_suit_z.getSpriteFrame(frameName);
          if ("mj3" == mjType) return this.mj3_face_suit_z.getSpriteFrame(frameName);
          console.log("no other mj type");
        } else console.log("mjType ========" + mjType + "  mjValue ===========" + mjValue);
      },
      get_face_y_frameName: function get_face_y_frameName(mjValue) {
        return this.get_frameName("hh_y_", mjValue);
      },
      get_face_y_SpriteFrame: function get_face_y_SpriteFrame(mjType, mjValue) {
        var frameName = this.get_face_y_frameName(mjValue);
        if (frameName) {
          if ("mj1" == mjType) return this.mj1_face_y.getSpriteFrame(frameName);
          if ("mj2" == mjType) return this.mj2_face_y.getSpriteFrame(frameName);
          if ("mj3" == mjType) return this.mj3_face_y.getSpriteFrame(frameName);
          console.log("no other mj type");
        } else console.log("mjType ========" + mjType + "  mjValue ===========" + mjValue);
      },
      get_face_z_frameName: function get_face_z_frameName(mjValue) {
        return this.get_frameName("hh_z_", mjValue);
      },
      get_face_z_SpriteFrame: function get_face_z_SpriteFrame(mjType, mjValue) {
        var frameName = this.get_face_z_frameName(mjValue);
        if (frameName) {
          if ("mj1" == mjType) return this.mj1_face_z.getSpriteFrame(frameName);
          if ("mj2" == mjType) return this.mj2_face_z.getSpriteFrame(frameName);
          if ("mj3" == mjType) return this.mj3_face_z.getSpriteFrame(frameName);
          console.log("no other mj type");
        } else console.log("mjType ========" + mjType + "  mjValue ===========" + mjValue);
      }
    });
    cc._RF.pop();
  }, {
    Resources: "Resources"
  } ],
  MoreGameLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "009b1CfWNRFSYQl6MBrbatz", "MoreGameLayer");
    "use strict";
    var MoreGameLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || (this.node.active = false);
      },
      initData: function initData(data) {
        var self = this;
        cc.loader.load(data, function(err, texture) {
          self.bg.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
          var scale = texture.height / 720;
          self.bg.getComponent(cc.Sprite).node.height = texture.height > 720 ? 720 : texture.height;
          self.bg.getComponent(cc.Sprite).node.width = texture.width * scale;
        });
      }
    });
    module.exports = MoreGameLayer;
    cc._RF.pop();
  }, {} ],
  MoreGameListItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11d5aN1NX9K6J1ggmQkW67w", "MoreGameListItem");
    "use strict";
    var HallResources = require("HallResources");
    var Resources = require("Resources");
    var MoreGameListItem = cc.Class({
      extends: cc.Component,
      properties: {
        playerCount: {
          default: null,
          type: cc.Label
        },
        gameMsg: {
          default: null,
          type: cc.Label
        },
        gameIcon: {
          default: null,
          type: cc.Sprite
        },
        gameHotTag: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {},
      onClickButton: function onClickButton(event, index) {
        this.gameId ? this.node.parent.parent.parent.parent.parent.parent.getComponent("HallPlatformInfo").onClickGameBtn(null, this.gameId) : Resources.ShowToast("敬请期待");
      },
      initData: function initData(gameData, hot, changwan) {
        var self = this;
        var gamePlayer = 0;
        var gameMsgLabel = "";
        var gameTagSp = null;
        var gameIconSp = "texture/hallRes/gameList/jqqdIcon";
        this.gameId = gameData.m_iId;
        if (null != gameData) {
          if (36 == gameData.m_iId) {
            gameMsgLabel = "换三张";
            gameIconSp = "texture/hallRes/gameList/xlchIcon";
          } else if (97 == gameData.m_iId) {
            gameMsgLabel = "鸡平胡";
            gameIconSp = "texture/hallRes/gameList/gdmjIcon";
          } else if (44 == gameData.m_iId) {
            gameMsgLabel = "换三张";
            gameIconSp = "texture/hallRes/gameList/xzddIcon";
          }
          hot == gameData.m_iId && (gameTagSp = "texture/hallRes/gameList/famousTag");
          changwan == gameData.m_iId && (gameTagSp = "texture/hallRes/gameList/hotTag");
        }
        cc.loader.loadRes(gameIconSp, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.gameIcon.spriteFrame = spriteFrame);
        });
        null == gameTagSp ? self.gameHotTag.node.active = false : cc.loader.loadRes(gameTagSp, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.gameHotTag.spriteFrame = spriteFrame);
        });
        this.gameMsg.string = gameMsgLabel;
        this.playerCount.string = gamePlayer;
      }
    });
    module.exports = MoreGameListItem;
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    Resources: "Resources"
  } ],
  MoreGameListLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "befe2KW9Y1DXa0bqys4DbNZ", "MoreGameListLayer");
    "use strict";
    var HallResources = require("HallResources");
    var MoreGameListLayer = cc.Class({
      extends: cc.Component,
      properties: {
        gameList: {
          default: null,
          type: cc.ScrollView
        }
      },
      onLoad: function onLoad() {},
      initData: function initData(data, hot, changwan) {
        this.gameList.getComponent("MoreGameList").initData(data, hot, changwan);
      }
    });
    module.exports = MoreGameListLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources"
  } ],
  MoreGameList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3da8dnONCJKkZclmDEsRjko", "MoreGameList");
    "use strict";
    var HallResources = require("HallResources");
    var MoreGameList = cc.Class({
      extends: cc.Component,
      properties: {
        moreItem: cc.Prefab
      },
      onLoad: function onLoad() {},
      initData: function initData(gameList, hot, changwan) {
        this.content = this.node.getComponent(cc.ScrollView).content;
        this.content.removeAllChildren();
        this.maxHeight = this.content.height;
        this.newWidth = this.content.width;
        console.log("下面是游戏列表：-----------------------------");
        console.log(gameList);
        for (var i = 0; i < gameList.length; i++) {
          var item = cc.instantiate(this.moreItem);
          item.parent = this.content;
          item.getComponent("MoreGameListItem").initData(gameList[i], hot, changwan);
          var x = i % 3 * 335 - 500;
          var y = -140 - 250 * Math.floor(i / 3);
          console.log("x ==========" + x + "y============" + y);
          item.setPosition(x, y);
        }
        var newHeight = (this.moreItem.data.height + 5) * Math.ceil(gameList.length / 3);
        this.content.height = newHeight > this.maxHeight ? this.maxHeight : newHeight;
        var newWidth = (this.moreItem.data.width + 5) * (gameList.length % 3);
        this.content.width = newWidth > this.maxHeight ? this.maxHeight : newWidth;
      }
    });
    module.exports = MoreGameList;
    cc._RF.pop();
  }, {
    HallResources: "HallResources"
  } ],
  MoreSettingLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32f2a9BukJBepUwnVRv8e0S", "MoreSettingLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameCfg = require("GameCfg");
    var HallResources = require("HallResources");
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        settingLayer: {
          default: null,
          type: cc.Node
        },
        helperLayer: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.init();
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      init: function init() {
        var size = this.bg.getContentSize();
        this.prePos = this.node.getPosition();
        this.node.setPosition(cc.p(this.prePos.x - size.width, this.prePos.y));
        this.settingLayer.active = false;
        this.helperLayer.active = false;
      },
      onTouch: function onTouch(event) {
        var point = event.touch.getLocation();
        var convertPoint = this.bg.convertToNodeSpace(point);
        var size = this.bg.getContentSize();
        var rect = cc.rect(0, 0, size.width, size.height);
        cc.rectContainsPoint(rect, convertPoint) || this.hide();
      },
      start: function start() {},
      show: function show() {
        this.node.active = true;
        this.node.stopAllActions();
        var self = this;
        var size = this.bg.getContentSize();
        var destPos = cc.p(this.prePos.x, this.prePos.y);
        var moveTo = cc.moveTo(.2, destPos);
        this.node.runAction(moveTo);
      },
      hide: function hide() {
        this.node.stopAllActions();
        var self = this;
        var size = this.bg.getContentSize();
        var destPos = cc.p(this.prePos.x - size.width, this.prePos.y);
        var moveTo = cc.moveTo(.2, destPos);
        var onMoveEnd = function onMoveEnd() {
          self.node.active = false;
        };
        var callFunc = cc.callFunc(onMoveEnd, this);
        var sequence = cc.sequence(moveTo, callFunc);
        this.node.runAction(sequence);
      },
      onLeaveClicked: function onLeaveClicked() {
        HallResources.getInstance().playButtonEffect();
        var DeskScene = this.node.parent.getComponent("DeskScene");
        if (DeskScene.getIsPrivateRoom()) {
          G.matchGameReady = true;
          G.goldGameReady = null;
        } else G.matchGameReady = false;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
        this.hide();
      },
      onChangedDeskClicked: function onChangedDeskClicked() {
        HallResources.getInstance().playButtonEffect();
        this.hide();
        require("GameLibSink").getInstance().getGameLib().autoSit();
        _TSCommon.TSCommon.dispatchEvent(GameCfg.GAME_RESTART, {
          isReady: false
        });
      },
      onHelpClicekd: function onHelpClicekd() {
        HallResources.getInstance().playButtonEffect();
        this.helperLayer.active = true;
        this.hide();
      },
      onRobotClicked: function onRobotClicked() {
        HallResources.getInstance().playButtonEffect();
        _TSCommon.TSCommon.dispatchEvent(GameCfg.NOTIFICATION_ROBOT, null);
        this.hide();
      },
      onSettingClicked: function onSettingClicked() {
        HallResources.getInstance().playButtonEffect();
        this.settingLayer.active = true;
        var action = cc.fadeIn(.01);
        var action2 = cc.scaleTo(.2, 1, 1);
        var sequence = cc.sequence(action, action2);
        this.settingLayer.getComponent("gameSetting").bg.runAction(sequence);
        this.hide();
      },
      setLeaveBtnEnabled: function setLeaveBtnEnabled(bEnabled) {
        this.node.getChildByName("leave_game_btn").getComponent(cc.Button).interactable = bEnabled;
      },
      setChangedDeskBtnEnabled: function setChangedDeskBtnEnabled(bEnabled) {
        this.node.getChildByName("change_desk_btn").getComponent(cc.Button).interactable = bEnabled;
      },
      setIsPrivateRoom: function setIsPrivateRoom(bEnabled) {
        this.node.getChildByName("leave_game_btn").getComponent(cc.Button).node.active = !bEnabled;
        this.node.getChildByName("change_desk_btn").getComponent(cc.Button).node.active = !bEnabled;
        if (bEnabled) {
          this.bg.setScaleY(.4);
          this.node.getChildByName("robot_btn").getComponent(cc.Button).node.y = 213;
          this.node.getChildByName("set_btn").getComponent(cc.Button).node.y = 128;
        } else this.bg.setScaleY(.8);
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources"
  } ],
  MyTimer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1962bHY1dLkaA01I/jhEt+", "MyTimer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MyTimer = function(_super) {
      __extends(MyTimer, _super);
      function MyTimer() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MyTimer.startTimer = function(target, callback, delay) {
        var timer = new MyTimer();
        timer.openTimer(target, callback, delay);
      };
      MyTimer.prototype.timCallBack = function() {
        this.m_target && this.m_callback ? this.m_callback.call(this.m_target) : cc.log("new timer timCallBack no callback");
      };
      MyTimer.prototype.openTimer = function(target, callback, delay) {
        this.m_target = target;
        this.m_callback = callback;
        this.m_delay = delay;
        cc.director.getScheduler().scheduleCallbackForTarget(this, this.timCallBack, delay, 0, delay, false, false);
      };
      return MyTimer;
    }(cc.Node);
    exports.MyTimer = MyTimer;
    cc._RF.pop();
  }, {} ],
  NativeManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31b2fj4AztOD4/xVtOxKdAe", "NativeManager");
    "use strict";
    var NativeManager = cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      copyToClipBoard: function copyToClipBoard(str) {
        if (null != str) {
          if (this.isWeChatPlatform()) wx.setClipboardData({
            data: str,
            success: function success(res) {
              wx.getClipboardData({
                success: function success(res) {
                  console.log("复制成功：", res.data);
                }
              });
            }
          }); else {
            var save = function save(e) {
              e.clipboardData.setData("text/plain", str);
              e.preventDefault();
              console.log("复制成功：", str);
            };
            document.addEventListener("copy", save);
            document.execCommand("copy");
            document.removeEventListener("copy", save);
          }
          return true;
        }
        return false;
      },
      isWeChatPlatform: function isWeChatPlatform() {
        var ret = false;
        "mqqbrowser" != cc.sys.browserType && "wechatgame" != cc.sys.browserType || (ret = true);
        return ret;
      }
    });
    NativeManager.getInstance = function() {
      null == NativeManager.instance && (NativeManager.instance = new NativeManager());
      return NativeManager.instance;
    };
    module.exports = NativeManager;
    cc._RF.pop();
  }, {} ],
  NewSeasonLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef505WIZflCi6tOAjtyFcnV", "NewSeasonLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var _WeixinManager = require("../weixin/WeixinManager");
    var HallResources = require("HallResources");
    var Tools = require("Tools");
    var NewSeasonLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        cupScrollList: {
          default: null,
          type: cc.ScrollView
        },
        timeLabel: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      initData: function initData(seasonStartTime, seasonEndTime) {
        this.timeLabel.string = "赛季时间：" + seasonStartTime + "至" + seasonEndTime;
        this.cupScrollList.getComponent("CupScrollList").initData();
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      }
    });
    module.exports = NewSeasonLayer;
    cc._RF.pop();
  }, {
    "../weixin/WeixinManager": "WeixinManager",
    HallResources: "HallResources",
    TSCommon: "TSCommon",
    Tools: "Tools"
  } ],
  NewSeasonRankItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7e765kB8f5CsJKgVwtgfXKw", "NewSeasonRankItem");
    "use strict";
    var NewSeasonRankItem = cc.Class({
      extends: cc.Component,
      properties: {
        cupIcon: {
          default: null,
          type: cc.Sprite
        },
        cupName: {
          default: null,
          type: cc.Label
        },
        cupMessage: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {},
      initData: function initData(cupLv) {
        var HallResources = require("HallResources");
        var self = this;
        cc.loader.loadRes("texture/hallRes/qualifyingCup/cup" + (cupLv + 1), cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.cupIcon.spriteFrame = spriteFrame);
        });
        var strMsg = "";
        0 == cupLv ? strMsg = "麻将初学者，懂基础规则，知道麻将大致怎么玩。" : 1 == cupLv ? strMsg = "普通大众的麻将水平，业余玩家C级，对牌型有一定的认识。知道怎么胡牌。" : 2 == cupLv ? strMsg = "领先50%业余玩家的水平，为业余玩家B即，会有技巧性地胡牌。" : 3 == cupLv ? strMsg = "业余玩家A级水平，打牌有章法。懂得如何选择听牌，放铳少，能做到下风期少输，上风期多赢。" : 4 == cupLv ? strMsg = "地区性冠军选手，技术领先95%的麻将玩家，牌桌上的常胜将军，极少放铳，也会有效地阻断其他玩家听牌、胡牌，乃真正意义上的麻将大师。" : 5 == cupLv && (strMsg = "职业选手，超一流的特级大师，世界冠军竞争者，技术炉火纯青，出牌毫无破绽，通常还会有一些主角光环以及难以置信的运气。");
        this.cupMessage.string = strMsg;
        var strName = "";
        var rankData = HallResources.getInstance().getDivisionData();
        strName = strName + rankData[cupLv].rankName + "(" + this.formatGold(rankData[cupLv].minScore) + "-" + this.formatGold(rankData[cupLv].maxScore) + ")";
        this.cupName.string = strName;
      },
      formatGold: function formatGold(gold, remaindot) {
        if (Math.abs(gold) < 1e5) return gold;
        if (Math.abs(gold) >= 1e5 && Math.abs(gold) < 1e8) {
          if (remaindot) {
            var leftNum = gold % 1e4;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e4) + "万";
              return retGold;
            }
            gold /= 1e4;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e4;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) >= 1e8 && Math.abs(gold) <= 2e9) {
          if (remaindot) {
            var leftNum = gold % 1e8;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e8) + "亿";
              return retGold;
            }
            gold /= 1e8;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e8;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) <= 1e11) var retGold = Math.floor(gold / 1e8) + "亿";
        if (remaindot) return "无限";
      }
    });
    module.exports = NewSeasonRankItem;
    cc._RF.pop();
  }, {
    HallResources: "HallResources"
  } ],
  NowRankLevelItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19d9bu5evBNQY2pQRkQpw1r", "NowRankLevelItem");
    "use strict";
    var NowRankLevelItem = cc.Class({
      extends: cc.Component,
      properties: {
        star1: {
          default: null,
          type: cc.Sprite
        },
        star2: {
          default: null,
          type: cc.Sprite
        },
        star3: {
          default: null,
          type: cc.Sprite
        },
        star4: {
          default: null,
          type: cc.Sprite
        },
        star5: {
          default: null,
          type: cc.Sprite
        },
        nextRankArrow: {
          default: null,
          type: cc.Sprite
        },
        rankLevel: {
          default: null,
          type: cc.Sprite
        },
        cupIcon: {
          default: null,
          type: cc.Sprite
        },
        needScore: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {},
      setArrowShow: function setArrowShow(bol) {
        this.nextRankArrow.node.active = bol;
      },
      initData: function initData(data, myScoreData, divisionID) {
        var self = this;
        this.needScore.string = this.formatGold(myScoreData.minScore) + "-" + this.formatGold(myScoreData.maxScore) + "分";
        cc.loader.loadRes("texture/hallRes/qualifyingCup/cup" + myScoreData.cup, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.cupIcon.spriteFrame = spriteFrame);
        });
        myScoreData.star > 4 && (this.star5.node.active = true);
        myScoreData.star > 3 && (this.star4.node.active = true);
        myScoreData.star > 2 && (this.star3.node.active = true);
        myScoreData.star > 1 && (this.star2.node.active = true);
        myScoreData.star > 0 && (this.star1.node.active = true);
        cc.loader.loadRes("texture/hallRes/qualifyingCup/rank_level_" + divisionID, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.rankLevel.spriteFrame = spriteFrame);
        });
      },
      formatGold: function formatGold(gold, remaindot) {
        if (Math.abs(gold) < 1e5) return gold;
        if (Math.abs(gold) >= 1e5 && Math.abs(gold) < 1e8) {
          if (remaindot) {
            var leftNum = gold % 1e4;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e4) + "万";
              return retGold;
            }
            gold /= 1e4;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e4;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) >= 1e8 && Math.abs(gold) <= 2e9) {
          if (remaindot) {
            var leftNum = gold % 1e8;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e8) + "亿";
              return retGold;
            }
            gold /= 1e8;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e8;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) <= 1e11) var retGold = Math.floor(gold / 1e8) + "亿";
        if (remaindot) return "无限";
      }
    });
    module.exports = NowRankLevelItem;
    cc._RF.pop();
  }, {} ],
  OtherRankLevelItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b31553BxdFBD4t8MHAajdzF", "OtherRankLevelItem");
    "use strict";
    var OtherRankLevelItem = cc.Class({
      extends: cc.Component,
      properties: {
        nextRankArrow: {
          default: null,
          type: cc.Sprite
        },
        rankName: {
          default: null,
          type: cc.Sprite
        },
        cupIcon: {
          default: null,
          type: cc.Sprite
        },
        needScore: {
          default: null,
          type: cc.Label
        },
        rewardLabel: {
          default: null,
          type: cc.Label
        },
        rewardDiamond: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {},
      setArrowShow: function setArrowShow(bol) {
        this.nextRankArrow.node.active = bol;
      },
      initData: function initData(data) {
        var self = this;
        this.rewardLabel.string = "x " + data.diamond;
        this.needScore.string = this.formatGold(data.minScore) + "-" + this.formatGold(data.maxScore) + "分";
        cc.loader.loadRes("texture/hallRes/qualifyingCup/cup" + data.cupId, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.cupIcon.spriteFrame = spriteFrame);
        });
        cc.loader.loadRes("texture/hallRes/qualifyingCup/rank_name_" + data.cupId, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.rankName.spriteFrame = spriteFrame);
        });
      },
      formatGold: function formatGold(gold, remaindot) {
        if (Math.abs(gold) < 1e5) return gold;
        if (Math.abs(gold) >= 1e5 && Math.abs(gold) < 1e8) {
          if (remaindot) {
            var leftNum = gold % 1e4;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e4) + "万";
              return retGold;
            }
            gold /= 1e4;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e4;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) >= 1e8 && Math.abs(gold) <= 2e9) {
          if (remaindot) {
            var leftNum = gold % 1e8;
            if (0 == leftNum) {
              var retGold = Math.floor(gold / 1e8) + "亿";
              return retGold;
            }
            gold /= 1e8;
            var retGold = Math.floor(10 * gold) / 10 + "万";
            return retGold;
          }
          gold /= 1e8;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        if (Math.abs(gold) <= 1e11) var retGold = Math.floor(gold / 1e8) + "亿";
        if (remaindot) return "无限";
      }
    });
    module.exports = OtherRankLevelItem;
    cc._RF.pop();
  }, {} ],
  OutCardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67e1bomjgZE5JVH1o/yYUQp", "OutCardLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameDefs = require("GameDefs");
    var GameCfg = require("GameCfg");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        _TSCommon.TSCommon.addEvent(GameCfg.selectedMj, this.onSelectedMj, this);
        _TSCommon.TSCommon.addEvent(GameCfg.unSelectedMj, this.onUnSelectedMj, this);
        this.init();
        this.loadRes();
        this.showNode = null;
      },
      onDestroy: function onDestroy() {
        _TSCommon.TSCommon.removeEvent(GameCfg.selectedMj, this.onSelectedMj, this);
        _TSCommon.TSCommon.removeEvent(GameCfg.unSelectedMj, this.onUnSelectedMj, this);
      },
      onSelectedMj: function onSelectedMj(event) {
        var mjValue = event.data;
        var outCardsNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardsNode.childrenCount; i++) outCardsNode.children[i].active && outCardsNode.children[i].cardValue == mjValue && (outCardsNode.children[i].color = new cc.Color(150, 150, 227));
      },
      onUnSelectedMj: function onUnSelectedMj() {
        var outCardsNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardsNode.childrenCount; i++) outCardsNode.children[i].active && (outCardsNode.children[i].color = new cc.Color(255, 255, 255));
      },
      init: function init() {
        this.LINE_MAX = 6;
        this.m_outMjs = new Array();
        this.m_lastOutCardNode = new Array();
        this.m_playerMj = new Array();
      },
      initUI: function initUI() {
        var outCardsNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardsNode.childrenCount; i++) outCardsNode.children[i].active = false;
        var laiziNode = this.node.getChildByName("zhonglaigang");
        for (var i = 0; i < laiziNode.childrenCount; i++) laiziNode.children[i].active = false;
      },
      loadRes: function loadRes() {
        var self = this;
        cc.loader.loadResDir("animation/dragonBones/zuanshi", function(err, assets) {
          err || (self.zuanshiAssets = assets);
        });
      },
      setmjLaiziValue: function setmjLaiziValue(laiziValue) {
        this.m_laiziValue = laiziValue;
      },
      setmjLaizipiValue: function setmjLaizipiValue(laizipiValue) {
        this.m_laizipiValue = laizipiValue;
      },
      setPlayerMj: function setPlayerMj(playerMj) {
        this.m_playerMj = playerMj;
      },
      setPlayerPos: function setPlayerPos(nPos) {
        this.m_nPos = nPos;
      },
      putOutMj: function putOutMj(outMjValue) {
        if (1 == this.m_nPos) this.addSelfOutCard(outMjValue); else if (2 == this.m_nPos) {
          this.addRightOutCard(outMjValue);
          this.showOutCard(outMjValue);
        } else if (3 == this.m_nPos) {
          this.addTopOutCard(outMjValue);
          this.showOutCard(outMjValue);
        } else if (4 == this.m_nPos) {
          this.addLeftOutCard(outMjValue);
          this.showOutCard(outMjValue);
        }
      },
      showOutCard: function showOutCard(outMjValue) {
        var outMjNode = new cc.Node();
        this.node.addChild(outMjNode, 100);
        var pos;
        2 == this.m_nPos ? pos = cc.p(356, 40) : 3 == this.m_nPos ? pos = cc.p(0, 258) : 4 == this.m_nPos && (pos = cc.p(-356, 40));
        outMjNode.x = pos.x;
        outMjNode.y = pos.y;
        var sprite = outMjNode.addComponent(cc.Sprite);
        sprite.spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_li_SpriteFrame("mj1", outMjValue);
        outMjNode.active = true;
        this.showNode = outMjNode;
      },
      hideOutCard: function hideOutCard() {
        if (this.showNode) {
          this.showNode.removeAllChildren();
          this.showNode.active = false;
          this.showNode = null;
        }
      },
      getLastOutCard: function getLastOutCard() {
        if (this.m_lastOutCardNode && this.m_lastOutCardNode[this.m_nPos]) return this.m_lastOutCardNode[this.m_nPos];
      },
      addZuanShiTexiao: function addZuanShiTexiao(node) {
        var zuanshiNode = new cc.Node();
        zuanshiNode.active = true;
        zuanshiNode.x = 0;
        zuanshiNode.y = 0;
        1 == this.m_nPos || 3 == this.m_nPos ? zuanshiNode.y = 10 : 2 == this.m_nPos ? zuanshiNode.y = 13 : 4 == this.m_nPos && (zuanshiNode.y = 13);
        var dragonDisplay = zuanshiNode.addComponent(dragonBones.ArmatureDisplay);
        for (var i in this.zuanshiAssets) {
          this.zuanshiAssets[i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = this.zuanshiAssets[i]);
          this.zuanshiAssets[i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = this.zuanshiAssets[i]);
        }
        dragonDisplay.armatureName = "armatureName";
        dragonDisplay.playAnimation("Animation1");
        node.addChild(zuanshiNode);
      },
      addSelfOutCard: function addSelfOutCard(outMjValue) {
        var outCardCount = 0;
        var nStartX = -125;
        var nStartY = -43;
        var distanceX = 47;
        var outCardNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardNode.childrenCount; i++) {
          outCardNode.children[i].active = false;
          outCardNode.children[i].cardValue = GameDefs.MAX_MJ_INDEX;
        }
        for (var i = 0; i < this.m_playerMj.cbOutCards.length; i++) this.m_playerMj.cbOutCards[i] < GameDefs.MAX_MJ_INDEX && (outCardCount += 1);
        for (var i = 0; i < outCardCount; i++) if (outCardNode.children[i]) {
          outCardNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_dao_spriteFrame("mj1", this.m_playerMj.cbOutCards[i]);
          outCardNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          outCardNode.children[i].active = true;
          outCardNode.children[i].cardValue = this.m_playerMj.cbOutCards[i];
          if (null == outCardNode.children[i]) break;
          if (i < this.LINE_MAX) {
            outCardNode.children[i].x = nStartX + i * distanceX;
            outCardNode.children[i].y = nStartY;
          } else if (i >= this.LINE_MAX && i < 2 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX + (i - this.LINE_MAX) * distanceX;
            outCardNode.children[i].y = nStartY - 50;
          } else if (i >= 2 * this.LINE_MAX && i < 3 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX + (i - 2 * this.LINE_MAX) * distanceX;
            outCardNode.children[i].y = nStartY - 100;
          }
          outMjValue && i == outCardCount - 1 && this.m_playerMj.cbOutCards[i] == outMjValue && this.addZuanShiTexiao(outCardNode.children[i]);
          i == outCardCount - 1 && (this.m_lastOutCardNode[this.m_nPos] = outCardNode.children[i]);
        }
      },
      addLeftOutCard: function addLeftOutCard(outMjValue) {
        var outCardCount = 0;
        var nStartX = -168;
        var nStartY = 154;
        var distanceX = 55;
        var distanceY = 36;
        var outCardNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardNode.childrenCount; i++) {
          outCardNode.children[i].active = false;
          outCardNode.children[i].cardValue = GameDefs.MAX_MJ_INDEX;
          outCardNode.children[i].setLocalZOrder(outCardNode.childrenCount);
        }
        for (var i = 0; i < this.m_playerMj.cbOutCards.length; i++) this.m_playerMj.cbOutCards[i] < GameDefs.MAX_MJ_INDEX && (outCardCount += 1);
        for (var i = 0; i < outCardCount; i++) if (outCardNode.children[i]) {
          outCardNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_z_SpriteFrame("mj1", this.m_playerMj.cbOutCards[i]);
          outCardNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          outCardNode.children[i].active = true;
          outCardNode.children[i].cardValue = this.m_playerMj.cbOutCards[i];
          if (null == outCardNode.children[i]) break;
          var lineNum = 0;
          if (i < this.LINE_MAX) {
            outCardNode.children[i].x = nStartX - 3 * i;
            outCardNode.children[i].y = nStartY - i * distanceY;
            lineNum = 1;
          } else if (i >= this.LINE_MAX && i < 2 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX - distanceX - 3 * (i - this.LINE_MAX);
            outCardNode.children[i].y = nStartY - (i - this.LINE_MAX) * distanceY;
            lineNum = 2;
          } else if (i >= 2 * this.LINE_MAX && i < 3 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX - 2 * distanceX - 3 * (i - 2 * this.LINE_MAX);
            outCardNode.children[i].y = nStartY - (i - 2 * this.LINE_MAX) * distanceY;
            lineNum = 3;
          }
          outMjValue && i == outCardCount - 1 && this.m_playerMj.cbOutCards[i] == outMjValue && this.addZuanShiTexiao(outCardNode.children[i]);
          outCardNode.children[i].setLocalZOrder(outCardNode.childrenCount - lineNum * this.LINE_MAX + i % this.LINE_MAX);
          i == outCardCount - 1 && (this.m_lastOutCardNode[this.m_nPos] = outCardNode.children[i]);
        }
      },
      addTopOutCard: function addTopOutCard(outMjValue) {
        var outCardCount = 0;
        var nStartX = 83;
        var nStartY = 157;
        var distanceX = 36;
        var outCardNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardNode.childrenCount; i++) {
          outCardNode.children[i].active = false;
          outCardNode.children[i].cardValue = GameDefs.MAX_MJ_INDEX;
        }
        for (var i = 0; i < this.m_playerMj.cbOutCards.length; i++) this.m_playerMj.cbOutCards[i] < GameDefs.MAX_MJ_INDEX && (outCardCount += 1);
        for (var i = 0; i < outCardCount; i++) if (outCardNode.children[i]) {
          outCardNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_dao_spriteFrame("mj1", this.m_playerMj.cbOutCards[i]);
          outCardNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          outCardNode.children[i].active = true;
          outCardNode.children[i].cardValue = this.m_playerMj.cbOutCards[i];
          if (null == outCardNode.children[i]) break;
          if (i < this.LINE_MAX) {
            outCardNode.children[i].x = nStartX - i * distanceX;
            outCardNode.children[i].y = nStartY;
          } else if (i >= this.LINE_MAX && i < 2 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX - (i - this.LINE_MAX) * distanceX;
            outCardNode.children[i].y = nStartY + 42;
          } else if (i >= 2 * this.LINE_MAX && i < 3 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX - (i - 2 * this.LINE_MAX) * distanceX;
            outCardNode.children[i].y = nStartY + 84;
          }
          outMjValue && i == outCardCount - 1 && this.m_playerMj.cbOutCards[i] == outMjValue && this.addZuanShiTexiao(outCardNode.children[i]);
          outCardNode.children[i].setScale(.77);
          outCardNode.children[i].setLocalZOrder(outCardNode.childrenCount - i);
          i == outCardCount - 1 && (this.m_lastOutCardNode[this.m_nPos] = outCardNode.children[i]);
        }
      },
      addRightOutCard: function addRightOutCard(outMjValue) {
        var outCardCount = 0;
        var nStartX = 173;
        var nStartY = -26;
        var distanceX = 55;
        var distanceY = 36;
        var outCardNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardNode.childrenCount; i++) {
          outCardNode.children[i].active = false;
          outCardNode.children[i].cardValue = GameDefs.MAX_MJ_INDEX;
        }
        for (var i = 0; i < this.m_playerMj.cbOutCards.length; i++) this.m_playerMj.cbOutCards[i] < GameDefs.MAX_MJ_INDEX && (outCardCount += 1);
        for (var i = 0; i < outCardCount; i++) if (outCardNode.children[i]) {
          outCardNode.children[i].removeAllChildren();
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_y_SpriteFrame("mj1", this.m_playerMj.cbOutCards[i]);
          outCardNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          outCardNode.children[i].active = true;
          outCardNode.children[i].cardValue = this.m_playerMj.cbOutCards[i];
          if (null == outCardNode.children[i]) break;
          if (i < this.LINE_MAX) {
            outCardNode.children[i].x = nStartX - 3 * i;
            outCardNode.children[i].y = nStartY + i * distanceY;
          } else if (i >= this.LINE_MAX && i < 2 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX + distanceX - 3 * (i - this.LINE_MAX);
            outCardNode.children[i].y = nStartY + (i - this.LINE_MAX) * distanceY;
          } else if (i >= 2 * this.LINE_MAX && i < 3 * this.LINE_MAX) {
            outCardNode.children[i].x = nStartX + 2 * distanceX - (i - 2 * this.LINE_MAX) * distanceX;
            outCardNode.children[i].y = nStartY + (i - 2 * this.LINE_MAX) * distanceY;
          }
          outMjValue && i == outCardCount - 1 && this.m_playerMj.cbOutCards[i] == outMjValue && this.addZuanShiTexiao(outCardNode.children[i]);
          outCardNode.children[i].setLocalZOrder(outCardNode.childrenCount - i);
          i == outCardCount - 1 && (this.m_lastOutCardNode[this.m_nPos] = outCardNode.children[i]);
        }
      },
      doCards: function doCards() {
        1 == this.m_nPos ? this.addSelfOutCard() : 2 == this.m_nPos ? this.addRightOutCard() : 3 == this.m_nPos ? this.addTopOutCard() : 4 == this.m_nPos && this.addLeftOutCard();
      },
      addOutLaiZi: function addOutLaiZi(nLaiZiNum, nLaiZiMjValue) {
        var laiziNode = this.node.getChildByName("zhonglaigang");
        var MjResourceMgr = this.node.parent.getComponent("MjResourceMgr");
        var spriteFrame;
        1 == this.m_nPos ? spriteFrame = MjResourceMgr.get_face_dao_spriteFrame("mj1", nLaiZiMjValue) : 2 == this.m_nPos ? spriteFrame = MjResourceMgr.get_face_y_SpriteFrame("mj1", nLaiZiMjValue) : 3 == this.m_nPos ? spriteFrame = MjResourceMgr.get_face_dao_spriteFrame("mj1", nLaiZiMjValue) : 4 == this.m_nPos && (spriteFrame = MjResourceMgr.get_face_z_SpriteFrame("mj1", nLaiZiMjValue));
        for (var i = 0; i < nLaiZiNum; i++) if (spriteFrame) {
          laiziNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
          laiziNode.children[i].active = true;
        }
      },
      setAllOutCardIsVis: function setAllOutCardIsVis(bIsVis) {
        var outCardCount = 0;
        var outCardNode = this.node.getChildByName("outcards");
        for (var i = 0; i < outCardNode.childrenCount; i++) outCardNode.children[i].active = false;
        if (this.m_playerMj && this.m_playerMj.cbOutCards) for (var i = 0; i < this.m_playerMj.cbOutCards.length; i++) this.m_playerMj.cbOutCards[i] < GameDefs.MAX_MJ_INDEX && (outCardCount += 1);
        for (var i = 0; i < outCardCount; i++) outCardNode.children[i].active = bIsVis;
        var laiziNode = this.node.getChildByName("zhonglaigang");
        for (var i = 0; i < laiziNode.childrenCount; i++) laiziNode.children[i].active = false;
        this.hideOutCard();
      },
      gameOver: function gameOver() {
        this.setAllOutCardIsVis();
      },
      cleanAllMjs: function cleanAllMjs() {
        this.setAllOutCardIsVis(false);
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs"
  } ],
  PersonInfoPreView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "40ed0SUAdpIKpWHyr7jJxJd", "PersonInfoPreView");
    "use strict";
    var _ByteArray = require("../common/ByteArray");
    var _TSCommon = require("../TSCommon");
    var GameDefs = require("GameDefs");
    var PersonInfoPreView = {
      extends: cc.Component,
      properties: {
        perInfoFrame: {
          default: null,
          type: cc.Node
        },
        progressBar1: {
          default: null,
          type: cc.Sprite
        },
        progressBar2: {
          default: null,
          type: cc.Sprite
        },
        progressBar3: {
          default: null,
          type: cc.Sprite
        },
        progressBar4: {
          default: null,
          type: cc.Sprite
        },
        progressBar5: {
          default: null,
          type: cc.Sprite
        },
        progressBar6: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {
        this.bolSend = true;
        this.bolSend2 = true;
        this.m_leftTime = 0;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poistion = event.touch.getLocation();
        var locationInNode = this.node.getChildByName("bg").convertToNodeSpace(poistion);
        var s = this.node.getChildByName("bg").getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || (this.node.active = false);
      },
      onPersonInfoClicked: function onPersonInfoClicked(event) {
        var HallResources = require("HallResources");
        HallResources.getInstance().playButtonEffect();
        this.perInfoFrame.active = true;
        this.node.active = false;
      },
      sendProperty: function sendProperty(event, IndexID) {
        if (this.m_vPropertyInfos.length < 0) return;
        if (!this.bolSend) {
          require("Resources").ShowToast("道具正在冷却中，请稍等");
          return;
        }
        if (!this.bolSend2) {
          require("Resources").ShowToast("道具正在冷却中，请稍等");
          return;
        }
        this.bolSend = false;
        this.m_leftTime = 3;
        this.addSendGiftTime();
        this.updateTime();
        var toolID = Number(this.m_vPropertyInfos[IndexID].ToolID);
        var freeCount = Number(this.m_vPropertyInfos[IndexID].FreeCount);
        var price = Number(this.m_vPropertyInfos[IndexID].Price);
        var self = this;
        var selfChair = self.m_pMyself.getUserChair();
        var otherChair = self.m_pUserInfo.getUserChair();
        var send = function send(propertyID, payNum, charmNum) {
          var ba = new _ByteArray.ByteArray();
          ba.writeInt(propertyID);
          ba.writeInt(payNum);
          ba.writeInt(charmNum);
          ba.writeByte(Number(self.m_pMyself.getUserChair()));
          ba.writeByte(Number(self.m_pUserInfo.getUserChair()));
          ba.writeBoolean(false);
          require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.CMD_PROPERTY, ba);
        };
        if (this.checkIsYuanBaoEnough(price)) {
          console.log("元宝足够，扣钱发特效");
          send(toolID, price, 0);
        } else require("Resources").ShowToast("您当前的金币不足啦");
      }
    };
    PersonInfoPreView.create = function(wUserID, position) {
      this.init(wUserID, position);
    };
    PersonInfoPreView.init = function(wUserID, position) {
      this.m_wUserID = wUserID;
      this.m_position = position;
      this.node.setPosition(this.m_position);
      this.m_pMyself = require("GameLibSink").getInstance().getGameLib().getMyself();
      this.m_pUserInfo = require("GameLibSink").getInstance().getGameLib().getUser(this.m_wUserID);
      this.refresh();
    };
    PersonInfoPreView.refresh = function() {
      this.refreshProperty();
    };
    PersonInfoPreView.requestProperty = function() {
      var vPropertyList = new Array();
      var self = this;
      var onResponse = function onResponse(success, data) {
        if (!success) {
          console.log("HallWebRequest.getProperty load xml data fail！");
          return;
        }
        var jsonObject = JSON.parse(data).table;
        for (var i = 0; i < jsonObject.length; i++) {
          var property = {};
          property.ToolID = jsonObject[i].ToolType;
          property.ToolName = jsonObject[i].ToolName;
          property.Price = jsonObject[i].Amount;
          property.FreeCount = 0;
          property.Remark = jsonObject[i].Remark;
          vPropertyList.push(property);
        }
        self.m_vPropertyInfos = vPropertyList;
        console.log(vPropertyList);
        self.m_vPropertyInfos.length > 0 && self.dealPeroPertyInfo();
      };
      require("HallWebRequest").getInstance().getProperty(onResponse);
    };
    PersonInfoPreView.dealPeroPertyInfo = function() {
      if (this.m_vPropertyInfos.length < 0) return;
      var propertyListNode = this.node.getChildByName("property_list");
      var contentNode = propertyListNode.getChildByName("view").getChildByName("content");
      for (var i = 0; i < contentNode.childrenCount; i++) {
        if (!this.m_vPropertyInfos[i]) {
          console.log("the property list data is Loss ");
          break;
        }
        contentNode.children[i].getChildByName("property_consu_item").active = true;
        contentNode.children[i].getChildByName("property_price").getComponent(cc.Label).string = this.m_vPropertyInfos[i].Price;
        contentNode.children[i].getChildByName("property_price").color = new cc.Color(230, 195, 41);
        contentNode.children[i].getChildByName("property_price").anchorX = 0;
        contentNode.children[i].getChildByName("property_price").x = 0;
      }
    };
    PersonInfoPreView.refreshProperty = function() {
      this.requestProperty();
    };
    PersonInfoPreView.checkIsYuanBaoEnough = function(price) {
      var GameSceneCanvas = cc.find("Canvas");
      var DeskScene = GameSceneCanvas.getComponent("DeskScene");
      var roomInfo = DeskScene.m_roomInfo;
      if (!roomInfo) return false;
      var isEnoughMoney = false;
      var myGoldNum = require("GameLibSink").getInstance().getGameLib().getMyself().getGold();
      2 == roomInfo.cbRoomType ? myGoldNum > price + roomInfo.nMinRoomGold && (isEnoughMoney = true) : myGoldNum >= price && (isEnoughMoney = true);
      return isEnoughMoney;
    };
    PersonInfoPreView.refreshCharm = function(propertyID, charmNum) {
      var IndexID = propertyID % 10 - 1;
      var toolID = Number(this.m_vPropertyInfos[IndexID].ToolID);
      var freeCount = Number(this.m_vPropertyInfos[IndexID].FreeCount);
      var price = Number(this.m_vPropertyInfos[IndexID].Price);
      var propertyListNode = this.node.getChildByName("property_list");
      var contentNode = propertyListNode.getChildByName("view").getChildByName("content");
      contentNode.children[IndexID].getChildByName("property_consu_item").active = true;
      contentNode.children[IndexID].getChildByName("property_price").getComponent(cc.Label).string = this.m_vPropertyInfos[i].Price;
      contentNode.children[IndexID].getChildByName("property_price").color = new cc.Color(230, 195, 41);
      contentNode.children[IndexID].getChildByName("property_price").anchorX = 0;
      contentNode.children[IndexID].getChildByName("property_price").x = 0;
    };
    PersonInfoPreView.refreshStateBtn = function() {
      this.requestIsBeReport();
    };
    PersonInfoPreView.addSendGiftTime = function() {
      var self = this;
      var callback = function callback() {
        self.m_leftTime -= 1;
        if (self.m_leftTime > 0) {
          self.bolSend = false;
          _TSCommon.TSCommon.performWithDelay(self, callback, 1);
        } else {
          self.bolSend = true;
          self.m_leftTime = 3;
        }
      };
      _TSCommon.TSCommon.performWithDelay(this, callback, 1);
    };
    PersonInfoPreView.updateTime = function() {
      if (this.progressBar1.node.active) {
        if (!this.bolSend) return;
        if (!this.bolSend2) return;
      }
      var self = this;
      self.bolSend2 = false;
      self.progressBar1.node.active = true;
      self.progressBar2.node.active = true;
      self.progressBar3.node.active = true;
      self.progressBar4.node.active = true;
      self.progressBar5.node.active = true;
      self.progressBar6.node.active = true;
      self.m_RightTime = 0;
      var callback = function callback() {
        if (!self.progressBar1) return;
        if (self.m_RightTime < 3) {
          self.progressBar1.fillRange = 1 - self.m_RightTime / 3;
          self.progressBar2.fillRange = 1 - self.m_RightTime / 3;
          self.progressBar3.fillRange = 1 - self.m_RightTime / 3;
          self.progressBar4.fillRange = 1 - self.m_RightTime / 3;
          self.progressBar5.fillRange = 1 - self.m_RightTime / 3;
          self.progressBar6.fillRange = 1 - self.m_RightTime / 3;
          self.bolSend2 = false;
          _TSCommon.TSCommon.performWithDelay(self, callback, .05);
        } else {
          self.progressBar1.node.active = false;
          self.progressBar2.node.active = false;
          self.progressBar3.node.active = false;
          self.progressBar4.node.active = false;
          self.progressBar5.node.active = false;
          self.progressBar6.node.active = false;
          self.bolSend2 = true;
        }
        self.m_RightTime += .05;
      };
      callback();
    };
    PersonInfoPreView.requestIsBeReport = function() {
      var vBeReportList = new Array();
      var self = this;
      var onResponse = function onResponse(success, data) {
        if (!success) {
          console.log("HallWebRequest.requestIsBeReport load xml data fail！");
          return;
        }
        var XmlToJson = require("XmlToJson");
        var xmlToJson = new XmlToJson();
        var jsonData = JSON.stringify(xmlToJson.parse(data));
        var jsonObject = JSON.parse(jsonData);
        var root = jsonObject;
        var property = {};
        property.RetCode = root.retcode;
        property.JuBao = 0;
        property.LaHei = 0;
        if (1 == property.RetCode) {
          property.JuBao = root.ischeat;
          property.LaHei = root.isblack;
        }
        vBeReportList.push(property);
        self.m_vBeReportInfos = vBeReportList;
      };
      require("HallWebRequest").getInstance().requestIsBeReport(this.m_pUserInfo.getUserDBID(), onResponse);
    };
    cc.Class(PersonInfoPreView);
    module.exports = PersonInfoPreView;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon",
    "../common/ByteArray": "ByteArray",
    GameDefs: "GameDefs",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources",
    XmlToJson: "XmlToJson"
  } ],
  PersonalInfoFrame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6de1ecLSNBD6KI6YWr+o1uP", "PersonalInfoFrame");
    "use strict";
    var _gamelibcommon = require("../../gamelib/gamelibcommon");
    var GameLibSink = require("GameLibSink");
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        face_icon: {
          default: null,
          type: cc.Node
        },
        sex: {
          default: null,
          type: cc.Node
        },
        name_label: {
          default: null,
          type: cc.Node
        },
        id_label: {
          default: null,
          type: cc.Node
        },
        ip_label: {
          default: null,
          type: cc.Node
        },
        diamond_label: {
          default: null,
          type: cc.Label
        },
        gold_label: {
          default: null,
          type: cc.Label
        },
        gold_node: {
          default: null,
          type: cc.Node
        },
        local_info_label: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.local_info_label.active = false;
      },
      setGold: function setGold(gold) {
        this.gold_label.string = gold;
      },
      onTouch: function onTouch(event) {
        var point = event.touch.getLocation();
        var convertPoint = this.bg.convertToNodeSpace(point);
        var size = this.bg.getContentSize();
        var rect = cc.rect(0, 0, size.width, size.height);
        cc.rectContainsPoint(rect, convertPoint) || (this.node.active = false);
      },
      onDestroy: function onDestroy() {
        this.node.off(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      init: function init(playerInfo) {
        this.m_playerInfo = playerInfo;
        this.setUserInfo();
      },
      setUserInfo: function setUserInfo() {
        var userSex = this.m_playerInfo.getSex();
        var name = this.m_playerInfo.getUserName();
        var userID = this.m_playerInfo.getUserDBID();
        var ip = this.m_playerInfo.getLocation();
        var imgurl = this.m_playerInfo.imgurl;
        var self = this;
        imgurl && cc.loader.load({
          url: imgurl,
          type: "jpg"
        }, function(err, texture) {
          self.face_icon.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
        });
        var sexFame;
        userSex == _gamelibcommon.gamelibcommon.SX_BOY ? cc.loader.loadRes("texture/game/player/male", cc.SpriteFrame, function(err, spriteFrame) {
          self.sex.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        }) : cc.loader.loadRes("texture/game/player/female", cc.SpriteFrame, function(err, spriteFrame) {
          self.sex.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        });
        sexFame && (this.sex.getComponent(cc.Sprite).spriteFrame = sexFame);
        this.name_label.getComponent(cc.Label).string = name;
        this.id_label.getComponent(cc.Label).string = userID;
        this.ip_label.getComponent(cc.Label).string = ip;
      }
    });
    cc._RF.pop();
  }, {
    "../../gamelib/gamelibcommon": "gamelibcommon",
    GameLibSink: "GameLibSink"
  } ],
  PlayerCardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d53bGfB3dJsY+2g+4zWLVA", "PlayerCardLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameDefs = require("GameDefs");
    var Resources = require("Resources");
    var GameCfg = require("GameCfg");
    cc.Class({
      extends: cc.Component,
      properties: {
        PengGangPrefab: {
          default: null,
          type: cc.Prefab
        },
        gangMoreSelectPrefab: {
          default: null,
          type: cc.Prefab
        },
        arrowSpriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        ArrowTag: 1e3,
        m_nQueYiMenStyleType: -1
      },
      onLoad: function onLoad() {
        this.setTouchMjEnable = true;
        this.setTouchMjEnable2 = true;
        this.init();
        this.colorGray = new cc.Color(137, 137, 137);
        this.colorWhite = new cc.Color(255, 255, 255);
        var holdCardRootNode = this.node.getChildByName("holds");
      },
      init: function init() {
        this.threeMjValueList = new Array();
        this.firstThreeMjValue = new Array();
        this.m_saveMjGroupCard = new Array();
        this.m_actionState = GameDefs.PlayerAction.paNothing;
        var holdCardRootNode = this.node.getChildByName("holds");
        this.m_selfOriginalPosY = holdCardRootNode.children[0].y;
        this.m_selfOriginalPosX = holdCardRootNode.children[0].x;
        this.node.parent.on(cc.Node.EventType.TOUCH_START, this.onTouchBegan, this);
        this.node.parent.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
        this.node.parent.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
        this.node.parent.on(cc.Node.EventType.TOUCH_CANCEL, this.onCancel, this);
        this.otherMovePos = 0;
      },
      onTouchBegan: function onTouchBegan(event) {
        if (1 != this.m_nPos) return;
        if (!this.setTouchMjEnable2) return;
        var pos = event.touch.getLocation();
        var holdCardRootNode = this.node.getChildByName("holds");
        this.m_touchMoved = false;
        this.m_touchPoint = pos;
        var touchIndex = -1;
        for (var i = 0; i < holdCardRootNode.childrenCount; i++) {
          var convertPos = holdCardRootNode.children[i].convertToNodeSpace(pos);
          var size = holdCardRootNode.children[i].getContentSize();
          var rect = cc.rect(0, 0, size.width, size.height);
          if (rect.contains(convertPos) && true == holdCardRootNode.children[i].active) {
            touchIndex = i;
            break;
          }
        }
        this.m_TouchIndex = touchIndex;
      },
      onTouchMove: function onTouchMove(event) {
        if (1 != this.m_nPos) return;
        var pos = event.touch.getLocation();
        var prePos = event.touch.getPreviousLocation();
        var holdCardRootNode = this.node.getChildByName("holds");
        if (-1 != this.m_TouchIndex) {
          var touchMj = holdCardRootNode.children[this.m_TouchIndex];
          var touchMjPos = cc.p(touchMj.getPosition());
          cc.pDistanceSQ(pos, this.m_touchPoint) > 100 ? this.m_touchMoved = true : this.m_touchMoved = false;
          var offsetVec = cc.p(pos.x - prePos.x, pos.y - prePos.y);
          if (this.m_touchMoved) {
            if (this.m_moveMj) {
              var sprite = this.m_moveMj.getComponent(cc.Sprite);
              this.m_moveMj.x += offsetVec.x;
              this.m_moveMj.y += offsetVec.y;
            } else {
              this.m_moveMj = new cc.Node();
              var desPos = this.node.parent.convertToNodeSpace(touchMjPos);
              var sprite = this.m_moveMj.addComponent(cc.Sprite);
              sprite.spriteFrame = touchMj.getComponent(cc.Sprite).spriteFrame;
              this.m_moveMj.x = desPos.x;
              this.m_moveMj.y = desPos.y;
              this.m_moveMj.setAnchorPoint(cc.p(0, .5));
              this.node.parent.addChild(this.m_moveMj, 5);
            }
            (Math.abs(this.m_moveMj.x - touchMjPos.x) > 30 || Math.abs(this.m_moveMj.y - touchMjPos.y) > 30) && this.m_moveMj.y > touchMjPos.y + 30 && (this.m_moveMj.cardValue = touchMj.cardValue);
          }
        }
      },
      onTouchEnd: function onTouchEnd(event) {
        if (1 != this.m_nPos) return;
        var holdCardRootNode = this.node.getChildByName("holds");
        var cardValue;
        if (this.m_moveMj) {
          cardValue = this.m_moveMj.cardValue;
          this.m_moveMj.removeFromParent();
          this.m_moveMj = null;
        }
        if (this.node.parent.getComponent("DeskScene").getIsGameChangeMjing()) ; else if (!this.node.parent.getComponent("DeskScene").getIsGameRunning()) return;
        _TSCommon.TSCommon.dispatchEvent(GameCfg.unSelectedMj, null);
        if (-1 == this.m_TouchIndex) if (this.node.parent.getComponent("DeskScene").getIsGameChangeMjing()) ; else {
          this.threeMjValueList.length = 0;
          this.retsetAllHandCardPos();
        } else {
          _TSCommon.TSCommon.dispatchEvent(require("HallResources").onHideSendGiftToPLayer, true);
          if (this.node.parent.getComponent("DeskScene").getIsGameChangeMjing()) {
            this.onChooseMjClicked(this.m_TouchIndex);
            this.m_TouchIndex = -1;
            return;
          }
          if (this.m_touchMoved) {
            if (this.canOutCard && void 0 != cardValue) {
              require("sendCMD").sendCMD_PO_OUTCARD(cardValue);
              this.removeAllCardArrow();
              this.isFirstOutCard() && this.recordFirstOutCardToServer();
              var vCardList = {};
              vCardList.cardValue = cardValue;
              _TSCommon.TSCommon.dispatchEvent(GameCfg.NOTIFICATION_LISTENCARD, vCardList);
              holdCardRootNode.children[this.m_TouchIndex].setScale(1);
              holdCardRootNode.children[this.m_TouchIndex].y = this.m_selfOriginalPosY;
            }
          } else this.onMjClicked(this.m_TouchIndex);
        }
        this.m_TouchIndex = -1;
      },
      onCancel: function onCancel(event) {
        if (1 != this.m_nPos) return;
        this.onTouchEnd();
      },
      resetAllHandCardPosWithNoDiff: function resetAllHandCardPosWithNoDiff() {
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardsNode.childrenCount; i++) {
          holdCardsNode.children[i].x = 79 * i + this.m_selfOriginalPosX;
          holdCardsNode.children[i].y = this.m_selfOriginalPosY;
          holdCardsNode.children[i].setScale(1);
        }
      },
      retsetAllHandCardPos: function retsetAllHandCardPos() {
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardsNode.childrenCount; i++) if (this.canOutCard && i == this.m_playerMjs.cbHoldCardCount - 1) {
          holdCardsNode.children[i].x = holdCardsNode.children[i - 1].x + 110;
          holdCardsNode.children[i].setScale(1);
          holdCardsNode.children[i].y = this.m_selfOriginalPosY;
        } else {
          holdCardsNode.children[i].x = 79 * i + this.m_selfOriginalPosX + this.otherMovePos;
          holdCardsNode.children[i].y = this.m_selfOriginalPosY;
          holdCardsNode.children[i].setScale(1);
        }
        this.node.parent.getComponent("DeskScene").getIsGameChangeMjing() && this.getCanUpCardBySelectCount() && this.setGrayForCannotUpCard(true);
      },
      setCanOutCard: function setCanOutCard(canOutCard) {
        this.canOutCard = canOutCard;
      },
      setPlayerMj: function setPlayerMj(PlayerMj) {
        this.m_playerMjs = PlayerMj;
      },
      setmjLaiziValue: function setmjLaiziValue(laiziValue) {
        this.m_laiziValue = laiziValue;
      },
      setmjLaizipiValue: function setmjLaizipiValue(laizipiValue) {
        this.m_laizipiValue = laizipiValue;
      },
      setPlayerPos: function setPlayerPos(nPos) {
        this.m_nPos = nPos;
      },
      setActionState: function setActionState(actionState) {
        this.m_actionState = actionState;
      },
      setPlayerMjFrameByNode: function setPlayerMjFrameByNode(node, spriteFrame, cardValue) {
        node.active = true;
        node.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        node.cardValue = cardValue;
        node.bolMove = false;
      },
      getLastHandCard: function getLastHandCard() {
        var cbHoldCardCount;
        if (this.m_playerMjs) {
          cbHoldCardCount = this.m_playerMjs.cbHoldCardCount;
          var holdCardsNode = this.node.getChildByName("holds");
          return 2 != this.m_nPos ? holdCardsNode.children[cbHoldCardCount - 1] : holdCardsNode.children[GameDefs.MAX_HOLD_CARD - cbHoldCardCount];
        }
        return null;
      },
      doCards: function doCards(bFreshPutCard, bolHu) {
        this.setTouchMjEnable2 = !bolHu;
        if (null == this.m_playerMjs) return;
        this.putPairsAndEatMj();
        if (!bFreshPutCard && !this.isHandCardNeedRefresh()) return;
        1 == this.m_nPos ? this.putSelfHandCards() : 2 == this.m_nPos ? this.putRightHandCards() : 3 == this.m_nPos ? this.putTopHandCards() : 4 == this.m_nPos && this.putLeftHandCards();
        this.setEndCardPosByPosAndStated(true);
        this.saveHandCards();
        if (bolHu) {
          this.setGrayForCannotUpCard(false);
          this.removeAllCardArrow();
        }
        if (this.node.parent.getComponent("DeskScene").getIsPoChan()) {
          this.removeAllCardArrow();
          this.setGrayForCannotUpCard(false);
        }
      },
      getOneMj: function getOneMj(mjCardValue, bolHu) {
        this.setTouchMjEnable2 = !bolHu;
        var preCount = this.m_saveMjGroupCard.length;
        if (preCount <= 0) return;
        var mjCardValue = this.m_playerMjs.cbHoldCards[this.m_playerMjs.cbHoldCardCount - 1];
        var holdCardsNode = this.node.getChildByName("holds");
        if (1 == this.m_nPos) {
          if (holdCardsNode.children[preCount]) {
            holdCardsNode.children[preCount].active = true;
            var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_li_SpriteFrame("mj1", mjCardValue);
            this.setPlayerMjFrameByNode(holdCardsNode.children[preCount], spriteFrame, mjCardValue);
            holdCardsNode.children[preCount].y = this.m_selfOriginalPosY;
            holdCardsNode.children[preCount].setScale(1);
            Resources.playCommonEffect("getcard.mp3");
            var vOutCardList = this.node.parent.getComponent("DeskScene").m_stSceneData.vTingList;
            for (var j = 0; j <= preCount; j++) for (var index = 0; index < vOutCardList.length; index++) if (vOutCardList[index].cbOutCard == holdCardsNode.children[j].cardValue) {
              var arrowNode = new cc.Node();
              arrowNode.active = true;
              var arrowSprite = arrowNode.addComponent(cc.Sprite);
              arrowSprite.spriteFrame = this.arrowSpriteFrame;
              var size = holdCardsNode.children[j].getContentSize();
              arrowNode.x = size.width / 2;
              arrowNode.y = size.height / 2 + arrowNode.getContentSize().height / 2 + 10;
              holdCardsNode.children[j].addChild(arrowNode, 0, this.ArrowTag + j);
            }
          }
        } else 2 == this.m_nPos ? holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount - 1] && (holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount - 1].active = true) : holdCardsNode.children[preCount] && (holdCardsNode.children[preCount].active = true);
        if (1 == this.m_nPos) holdCardsNode.children[preCount] && holdCardsNode.children[preCount - 1] && (holdCardsNode.children[preCount].x = holdCardsNode.children[preCount - 1].x + 110); else if (2 == this.m_nPos) {
          if (holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount - 1] && holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount]) {
            holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount - 1].x = holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount].x - 15;
            holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount - 1].y = holdCardsNode.children[GameDefs.MAX_HOLD_CARD - preCount].y + 40;
          }
        } else if (3 == this.m_nPos) holdCardsNode.children[preCount] && holdCardsNode.children[preCount - 1] && (holdCardsNode.children[preCount].x = holdCardsNode.children[preCount - 1].x - 50); else if (4 == this.m_nPos && holdCardsNode.children[preCount] && holdCardsNode.children[preCount - 1]) {
          holdCardsNode.children[preCount].x = holdCardsNode.children[preCount - 1].x - 10;
          holdCardsNode.children[preCount].y = holdCardsNode.children[preCount - 1].y - 60;
        }
        this.m_saveMjGroupCard.push(mjCardValue);
        this.setQueYiMenMjGray();
        if (bolHu) {
          this.removeAllCardArrow();
          this.setGrayForCannotUpCard(false);
        }
        if (this.node.parent.getComponent("DeskScene").getIsPoChan()) {
          this.removeAllCardArrow();
          this.setGrayForCannotUpCard(false);
        }
      },
      setEndCardPosByPosAndStated: function setEndCardPosByPosAndStated(bIsSetPos) {
        if (!bIsSetPos) return;
        var addPos = [ [ 110, 0 ], [ -8, 30 ], [ -30, 0 ], [ -8, -40 ] ];
        if (this.m_actionState == GameDefs.PlayerAction.paNothing || this.m_actionState == GameDefs.PlayerAction.paGang || this.m_actionState == GameDefs.PlayerAction.paOutCard) return;
        var cardCount = this.m_playerMjs.cbHoldCardCount;
        var holdCards = this.node.getChildByName("holds");
        if (1 == this.m_nPos) {
          for (var i = 0; i < holdCards.childrenCount; i++) {
            holdCards.children[i].x = 79 * i + this.m_selfOriginalPosX + this.otherMovePos;
            holdCards.children[i].y = this.m_selfOriginalPosY;
            holdCards.children[i].setScale(1);
          }
          holdCards.children[cardCount - 1].x = holdCards.children[cardCount - 2].x + addPos[this.m_nPos - 1][0];
          holdCards.children[cardCount - 1].y = holdCards.children[cardCount - 2].y + addPos[this.m_nPos - 1][1];
        } else if (2 == this.m_nPos) {
          holdCards.children[GameDefs.MAX_HOLD_CARD - cardCount].x = holdCards.children[GameDefs.MAX_HOLD_CARD - cardCount].x + addPos[this.m_nPos - 1][0];
          holdCards.children[GameDefs.MAX_HOLD_CARD - cardCount].y = holdCards.children[GameDefs.MAX_HOLD_CARD - cardCount].y + addPos[this.m_nPos - 1][1];
        } else {
          holdCards.children[cardCount - 1].x = holdCards.children[cardCount - 1].x + addPos[this.m_nPos - 1][0];
          holdCards.children[cardCount - 1].y = holdCards.children[cardCount - 1].y + addPos[this.m_nPos - 1][1];
        }
      },
      isHandCardNeedRefresh: function isHandCardNeedRefresh() {
        var bRefresh = false;
        if (this.m_saveMjGroupCard.length != this.m_playerMjs.cbHoldCardCount || this.actionState == GameDefs.PlayerAction.paPeng || this.actionState == GameDefs.PlayerAction.paEat) bRefresh = true; else {
          var bFind = false;
          for (var i = 0; i < this.m_playerMjs.cbHoldCardCount; i++) {
            bFind = false;
            for (var j = 0; j < this.m_saveMjGroupCard.length; j++) if (this.m_playerMjs.cbHoldCards[i] == this.m_saveMjGroupCard[j]) {
              bFind = true;
              break;
            }
            if (!bFind) {
              bRefresh = true;
              break;
            }
          }
        }
        return bRefresh;
      },
      saveHandCards: function saveHandCards() {
        this.m_saveMjGroupCard = [];
        if (this.m_playerMjs.cbHoldCardCount > 0) for (var i = 0; i < this.m_playerMjs.cbHoldCardCount; i++) this.m_saveMjGroupCard[i] = this.m_playerMjs.cbHoldCards[i];
      },
      putSelfHandCards: function putSelfHandCards() {
        var holdCards = new Array();
        var holdCardCount = this.m_playerMjs.cbHoldCardCount;
        for (var i = 0; i < holdCardCount; i++) holdCards[i] = GameCfg.getStyleBySort(this.m_playerMjs.cbHoldCards[i], this.m_nQueYiMenStyleType);
        var self = this;
        holdCards.sort(function(a, b) {
          if (a != b) return a - b;
          return 0;
        });
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardCount; i++) holdCards[i] = holdCards[i] % 100;
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) holdCardsNode.children[i].active = false;
        var startX = this.otherMovePos + this.m_selfOriginalPosX;
        var distanceX = 79;
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) if (i < holdCardCount && holdCards[i] < GameDefs.MAX_MJ_INDEX) {
          var spriteFrame = this.node.parent.getComponent("MjResourceMgr").get_face_li_SpriteFrame("mj1", holdCards[i]);
          this.setPlayerMjFrameByNode(holdCardsNode.children[i], spriteFrame, holdCards[i]);
          holdCardsNode.children[i].x = startX + i * distanceX;
          holdCardsNode.children[i].y = this.m_selfOriginalPosY;
          holdCardsNode.children[i].setScale(1);
          var vOutCardList = this.node.parent.getComponent("DeskScene").m_stSceneData.vTingList;
          for (var index = 0; index < vOutCardList.length; index++) if (vOutCardList[index].cbOutCard == holdCards[i]) {
            var arrowNode = new cc.Node();
            arrowNode.active = true;
            var arrowSprite = arrowNode.addComponent(cc.Sprite);
            arrowSprite.spriteFrame = this.arrowSpriteFrame;
            var size = holdCardsNode.children[i].getContentSize();
            arrowNode.x = size.width / 2;
            arrowNode.y = size.height / 2 + arrowNode.getContentSize().height / 2 + 10;
            holdCardsNode.children[i].addChild(arrowNode, 0, this.ArrowTag + i);
          }
        } else holdCardsNode.children[i].active = false;
        this.setQueYiMenMjGray();
      },
      putRightHandCards: function putRightHandCards() {
        var holdCardCount = this.m_playerMjs.cbHoldCardCount;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) holdCardsNode.children[i].active = false;
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) {
          holdCardsNode.children[i].x = 415 + 7 * i;
          holdCardsNode.children[i].y = 228 - 27 * i;
          i >= GameDefs.MAX_HOLD_CARD - holdCardCount ? holdCardsNode.children[i].active = true : holdCardsNode.children[i].active = false;
        }
      },
      putTopHandCards: function putTopHandCards() {
        var holdCardCount = this.m_playerMjs.cbHoldCardCount;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) holdCardsNode.children[i].active = false;
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) if (i < holdCardCount) {
          holdCardsNode.children[i].active = true;
          holdCardsNode.children[i].x = 215 - 33 * i;
        } else holdCardsNode.children[i].active = false;
      },
      putLeftHandCards: function putLeftHandCards() {
        var holdCardCount = this.m_playerMjs.cbHoldCardCount;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) holdCardsNode.children[i].active = false;
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) {
          holdCardsNode.children[i].x = -415 - 7 * i;
          holdCardsNode.children[i].y = 228 - 27 * i;
          holdCardsNode.children[i].active = i < holdCardCount;
        }
      },
      removeAllCardArrow: function removeAllCardArrow() {
        if (1 != this.m_nPos) return;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) {
          var node = holdCardsNode.children[i].getChildByTag(this.ArrowTag + i);
          node && node.removeFromParent(true);
        }
      },
      onMjClicked: function onMjClicked(clickIndex) {
        var holds = this.node.getChildByName("holds");
        var node = holds.children[clickIndex];
        var cardValue = node.cardValue;
        var index = clickIndex;
        _TSCommon.TSCommon.dispatchEvent(GameCfg.unSelectedMj, null);
        var vCardList = {};
        vCardList.cardValue = cardValue;
        _TSCommon.TSCommon.dispatchEvent(GameCfg.NOTIFICATION_LISTENCARD, vCardList);
        if (node.y == this.m_selfOriginalPosY) {
          if (this.getCanUpCardBySelectCount()) for (var i = 0; i < holds.childrenCount; i++) if (this.canOutCard && i == this.m_playerMjs.cbHoldCardCount - 1) {
            holds.children[i].x = holds.children[i - 1].x + 110;
            holds.children[i].y = this.m_selfOriginalPosY;
            holds.children[i].setScale(1);
          } else {
            holds.children[i].x = 79 * i + this.m_selfOriginalPosX + this.otherMovePos;
            holds.children[i].y = this.m_selfOriginalPosY;
            holds.children[i].setScale(1);
          }
          node.y = node.y + 30;
          node.setScale(1.2);
          _TSCommon.TSCommon.dispatchEvent(GameCfg.selectedMj, cardValue);
          Resources.playCommonEffect("selectmahjong.mp3");
          this.isFirstOutCard() && this.recordFirstClickCardToServer();
          for (var i = 0; i < holds.childrenCount; i++) if (node == holds.children[i]) {
            index = i;
            break;
          }
          if (-1 != index) for (var i = index + 1; i < holds.childrenCount; i++) holds.children[i].x += 15;
        } else if (this.canOutCard) {
          require("sendCMD").sendCMD_PO_OUTCARD(cardValue);
          node.setScale(1);
          node.y = node.y - 30;
          this.removeAllCardArrow();
          this.isFirstOutCard() && this.recordFirstOutCardToServer();
        } else for (var i = 0; i < holds.childrenCount; i++) {
          holds.children[i].x = 79 * i + this.m_selfOriginalPosX + this.otherMovePos;
          holds.children[i].y = this.m_selfOriginalPosY;
          holds.children[i].setScale(1);
        }
      },
      isFirstOutCard: function isFirstOutCard() {
        var isFirst = true;
        for (var i = 0; i < this.m_playerMjs.cbOutCards.length; i++) if (this.m_playerMjs.cbOutCards[i] < GameDefs.MAX_MJ_INDEX && this.m_playerMjs.cbOutCards[i] >= 0) {
          isFirst = false;
          break;
        }
        return isFirst;
      },
      recordFirstClickCardToServer: function recordFirstClickCardToServer() {
        var HallResources = require("HallResources");
        HallResources.recordPlayerLogToServer(HallResources.recordList.click_card);
      },
      recordFirstOutCardToServer: function recordFirstOutCardToServer() {
        var HallResources = require("HallResources");
        HallResources.recordPlayerLogToServer(HallResources.recordList.click_discard);
      },
      gangMoresCardToast: function gangMoresCardToast(gangInfoArray) {
        var selectEatNode = this.node.getChildByName("select_penggangs");
        selectEatNode.removeAllChildren();
        var onGangSelectFinish = function onGangSelectFinish() {
          selectEatNode.removeAllChildren();
        };
        var startX = -125;
        var startY = 200;
        var distanceX = 250;
        for (var i = 0; i < gangInfoArray.length; i++) {
          var gangMoreSelectItem = cc.instantiate(this.gangMoreSelectPrefab);
          var gangMoreSelectItemView = gangMoreSelectItem.getComponent("EatOrGangSelectLayer");
          var spriteAtlas = this.node.parent.getComponent("MjResourceMgr").mj1_face_dao;
          gangMoreSelectItemView.init(GameDefs.PlayerAction.paGang, gangInfoArray[i], onGangSelectFinish, spriteAtlas);
          gangMoreSelectItemView.showUI();
          selectEatNode.addChild(gangMoreSelectItem);
          gangMoreSelectItem.x = startX + i * distanceX;
          gangMoreSelectItem.y = startY;
        }
      },
      removeEatOrGangMoresCardToast: function removeEatOrGangMoresCardToast() {
        var selectEatNode = this.node.getChildByName("select_penggangs");
        selectEatNode.removeAllChildren();
      },
      getRangeSpriteFrameByPos: function getRangeSpriteFrameByPos() {
        if (1 == this.m_nPos || 3 == this.m_nPos) return this.node.parent.getComponent("MjResourceMgr").mj1_face_dao;
        if (2 == this.m_nPos) return this.node.parent.getComponent("MjResourceMgr").mj1_face_suit_y;
        if (4 == this.m_nPos) return this.node.parent.getComponent("MjResourceMgr").mj1_face_suit_z;
        cc.log("the this.m_nPos is error!");
      },
      getCardSpriteFrame: function getCardSpriteFrame() {
        return this.mjFrame;
      },
      putPairsAndEatMj: function putPairsAndEatMj() {
        null == this.m_pengGangArray && (this.m_pengGangArray = new Array());
        var pengGangRootNode = this.node.getChildByName("penggangs");
        var pairsItem = null;
        var cardSuit = null;
        var startX = null;
        var startY = null;
        var distanceX = null;
        var distanceY = null;
        var scale = 1;
        if (1 == this.m_nPos) {
          startX = -450;
          startY = -297;
          distanceX = 200;
          distanceY = 0;
          this.otherMovePos = 203 * this.m_playerMjs.nWeaveCount;
        } else if (2 == this.m_nPos) {
          startX = 570;
          startY = -120;
          distanceX = -35;
          distanceY = 115;
          scale = .9;
        } else if (3 == this.m_nPos) {
          startX = -230;
          startY = 330;
          distanceX = 120;
          distanceY = 0;
          scale = .6;
        } else if (4 == this.m_nPos) {
          startX = -570;
          startY = -79;
          distanceX = 35;
          distanceY = 115;
          scale = .9;
        }
        for (var i = 0; i < this.m_playerMjs.nWeaveCount; i++) {
          cardSuit = this.m_playerMjs.showCardSuits[i];
          cardSuit.cbWeaveKind == GameDefs.WeaveType.AnGang || cardSuit.cbWeaveKind == GameDefs.WeaveType.XuGang || cardSuit.cbWeaveKind == GameDefs.WeaveType.MingGang;
          if (null == this.m_pengGangArray[i]) {
            pairsItem = cc.instantiate(this.PengGangPrefab);
            var RangeCardLayer = pairsItem.getComponent("RangeCardLayer");
            RangeCardLayer.init(cardSuit.cbWeaveKind, cardSuit.cbCardData, this.m_nPos, this.getRangeSpriteFrameByPos());
            pengGangRootNode.addChild(pairsItem);
            pairsItem.setScale(scale);
            pairsItem.x = startX + i * distanceX;
            pairsItem.y = startY + i * distanceY;
            this.m_pengGangArray[i] = pairsItem;
          } else {
            var RangeCardLayer = this.m_pengGangArray[i].getComponent("RangeCardLayer");
            RangeCardLayer.init(cardSuit.cbWeaveKind, cardSuit.cbCardData, this.m_nPos, this.getRangeSpriteFrameByPos());
          }
        }
      },
      gameOver: function gameOver() {
        this.threeMjValueList.length = 0;
        this.firstThreeMjValue.length = 0;
        this.setTouchMjEnable = true;
        this.setTouchMjEnable2 = true;
        this.setQueYiMenStyleType(-1);
        this.showHandCardOnGameOver();
      },
      showHandCardOnGameOver: function showHandCardOnGameOver() {
        var holdCardCount = this.m_playerMjs.cbHoldCardCount;
        var holdCardRootNode = this.node.getChildByName("holds");
        var startX = holdCardRootNode.children[0].x;
        var startY = holdCardRootNode.children[0].y;
        var distanceX = 40;
        var distanceY = 40;
        var foreName = "";
        var scale = 1;
        if (1 == this.m_nPos) {
          foreName = "hh_dao_";
          distanceX = 48;
          distanceY = 0;
          startX = 82 * this.m_pengGangArray.length - 300 + 79 * (this.m_pengGangArray.length - 1);
        } else if (2 == this.m_nPos) {
          foreName = "hh_suit_y_";
          scale = .8;
          distanceX = -8;
          distanceY = 27;
          var startX = holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1].x;
          var startY = holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1].y;
        } else if (3 == this.m_nPos) {
          foreName = "hh_dao_";
          scale = .8;
          distanceX = -38;
          distanceY = 0;
        } else if (4 == this.m_nPos) {
          foreName = "hh_suit_z_";
          scale = .8;
          distanceX = -8;
          distanceY = -27;
        }
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) holdCardRootNode.children[i].active = false;
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) if (i < this.m_playerMjs.cbHoldCardCount) {
          var name = Resources.get_frameName(foreName, this.m_playerMjs.cbHoldCards[i]);
          var spriteFrame = null;
          1 == this.m_nPos || 3 == this.m_nPos ? spriteFrame = this.node.parent.getComponent("MjResourceMgr").mj1_face_dao.getSpriteFrame(name) : 2 == this.m_nPos ? spriteFrame = this.node.parent.getComponent("MjResourceMgr").mj1_face_suit_y.getSpriteFrame(name) : 4 == this.m_nPos && (spriteFrame = this.node.parent.getComponent("MjResourceMgr").mj1_face_suit_z.getSpriteFrame(name));
          if (2 != this.m_nPos) if (i == this.m_playerMjs.cbHoldCardCount - 1 && this.node.getComponent("Player").getIsWinner()) {
            holdCardRootNode.children[i].active = true;
            holdCardRootNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
            holdCardRootNode.children[i].setScale(scale);
            holdCardRootNode.children[i].x = startX + i * distanceX;
            holdCardRootNode.children[i].y = startY + i * distanceY;
          } else {
            holdCardRootNode.children[i].active = true;
            holdCardRootNode.children[i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
            holdCardRootNode.children[i].setScale(scale);
            holdCardRootNode.children[i].x = startX + (i - 1) * distanceX;
            holdCardRootNode.children[i].y = startY + (i - 1) * distanceY;
          } else if (i == this.m_playerMjs.cbHoldCardCount - 1 && this.node.getComponent("Player").getIsWinner()) {
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].active = true;
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].setScale(scale);
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].x = startX + i * distanceX;
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].y = startY + i * distanceY;
          } else {
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].active = true;
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].getComponent(cc.Sprite).spriteFrame = spriteFrame;
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].setScale(scale);
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].x = startX + (i - 1) * distanceX;
            holdCardRootNode.children[GameDefs.MAX_HOLD_CARD - 1 - i].y = startY + (i - 1) * distanceY;
          }
          1 == this.m_nPos && (holdCardRootNode.children[i].getChildByName("shadow").active = false);
        }
      },
      cleanAllMjs: function cleanAllMjs() {
        var offset = [ [ 78, 0 ], [ 7, -27 ], [ -34, 0 ], [ -7, -27 ] ];
        var holdCardRootNode = this.node.getChildByName("holds");
        for (var i = 0; i < GameDefs.MAX_HOLD_CARD; i++) {
          holdCardRootNode.children[i].active = false;
          holdCardRootNode.children[i].setScale(1);
          if (offset[this.m_nPos - 1]) {
            holdCardRootNode.children[i].x = this.m_selfOriginalPosX + i * offset[this.m_nPos - 1][0];
            holdCardRootNode.children[i].y = this.m_selfOriginalPosY + i * offset[this.m_nPos - 1][1];
          }
        }
        if (this.m_pengGangArray) {
          for (var i = 0; i < this.m_pengGangArray.length; i++) {
            this.m_pengGangArray[i].removeFromParent(true);
            this.m_pengGangArray[i] = null;
          }
          this.m_pengGangArray = [];
        }
      },
      getWanTiaoTongCount: function getWanTiaoTongCount() {
        var typeCountList = [];
        var wanCount = 0;
        var tiaoCount = 0;
        var tongCount = 0;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardsNode.childrenCount; i++) {
          var nType = GameCfg.getMjColor(holdCardsNode.children[i].cardValue);
          0 == nType ? wanCount += 1 : 1 == nType ? tiaoCount += 1 : 2 == nType && (tongCount += 1);
        }
        typeCountList[0] = wanCount;
        typeCountList[1] = tiaoCount;
        typeCountList[2] = tongCount;
        return typeCountList;
      },
      getChooseMjTypeByCount: function getChooseMjTypeByCount(bolChooseDingQue) {
        var typeCountList = this.getWanTiaoTongCount();
        if (bolChooseDingQue) {
          var nType = 0;
          nType = typeCountList[0] < typeCountList[1] ? 0 : 1;
          nType = typeCountList[nType] < typeCountList[2] ? nType : 2;
          return nType;
        }
        var nType = 0;
        nType = typeCountList[0] < 3 ? -1 : 0;
        -1 === nType ? nType = typeCountList[1] < 3 ? -1 : 1 : typeCountList[1] >= 3 && (nType = typeCountList[0] < typeCountList[1] ? 0 : 1);
        -1 === nType ? nType = 2 : typeCountList[2] >= 3 && (nType = typeCountList[nType] < typeCountList[2] ? nType : 2);
        return nType;
      },
      upThreeCardByType: function upThreeCardByType() {
        this.firstThreeMjValue = new Array();
        var tipUpType = this.getChooseMjTypeByCount();
        var upCount = 0;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardsNode.childrenCount; i++) {
          var nType = GameCfg.getMjColor(holdCardsNode.children[i].cardValue);
          if (tipUpType === nType) {
            upCount += 1;
            this.firstThreeMjValue[this.firstThreeMjValue.length] = holdCardsNode.children[i].cardValue;
            this.onChooseMjClicked(i);
          }
          if (3 === upCount) break;
        }
      },
      getUpThreeCardValue: function getUpThreeCardValue() {
        return this.firstThreeMjValue;
      },
      insertThreeCard: function insertThreeCard(cbList, nPos) {
        var holdCardsNode = this.node.getChildByName("holds");
        var nTempList = [];
        var moveHeight = 10;
        1 == nPos ? moveHeight = 40 : 2 != nPos && 4 != nPos || (moveHeight = 30);
        var bFind = false;
        if (1 != nPos) {
          while (true) {
            var nRandom = Resources.getOneRandom(holdCardsNode.childrenCount);
            bFind = false;
            for (var i = 0; i < nTempList.length; i++) nTempList[i] == nRandom && (bFind = true);
            if (!bFind) {
              nTempList[nTempList.length] = nRandom;
              if (3 == nTempList.length) break;
            }
          }
          for (var i = 0; i < nTempList.length; i++) for (var j = 0; j < holdCardsNode.childrenCount; j++) if (nTempList[i] == j) {
            var pMjOrginPosY = holdCardsNode.children[j].y;
            holdCardsNode.children[j].y = pMjOrginPosY + moveHeight;
            holdCardsNode.children[j].bolMove = true;
            break;
          }
        } else for (var i = 0; i < 3; i++) for (var j = 0; j < holdCardsNode.childrenCount; j++) if (cbList[i] == holdCardsNode.children[j].cardValue) {
          var pMjOrginPosY = holdCardsNode.children[j].y;
          holdCardsNode.children[j].y = pMjOrginPosY + moveHeight;
          break;
        }
        var self = this;
        var action = cc.delayTime(1);
        var action2 = cc.callFunc(function() {
          for (var i = 0; i < holdCardsNode.childrenCount; i++) {
            var sp = holdCardsNode.children[i];
            1 != nPos ? holdCardsNode.children[i].bolMove && sp.runAction(cc.moveTo(.3, cc.p(sp.x, sp.y - moveHeight))) : sp.y > self.m_selfOriginalPosY && sp.runAction(cc.moveTo(.3, cc.p(sp.x, self.m_selfOriginalPosY)));
          }
        });
        var sequence = cc.sequence(action, action2);
        holdCardsNode.runAction(sequence);
      },
      deleteThreeMjRefresh: function deleteThreeMjRefresh(list) {
        var leg = this.m_playerMjs.cbHoldCardCount;
        var targetKeys = this.getThreeUpCradList();
        list && list.length > 0 && (targetKeys = list);
        for (var j = 0; j < targetKeys.length; j++) for (var i = 0; i < leg; i++) if (this.m_playerMjs.cbHoldCards[i] == targetKeys[j]) {
          this.m_playerMjs.cbHoldCards.splice(i, 1);
          leg -= 1;
          break;
        }
        this.m_playerMjs.cbHoldCardCount = this.m_playerMjs.cbHoldCardCount - 3;
        this.putSelfHandCards();
      },
      getThreeUpCradList: function getThreeUpCradList() {
        return this.threeMjValueList;
      },
      getCanUpCardBySelectCount: function getCanUpCardBySelectCount() {
        var count = 0;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardsNode.childrenCount; i++) holdCardsNode.children[i].y > this.m_selfOriginalPosY && (count += 1);
        return count < 3;
      },
      setQueYiMenStyleType: function setQueYiMenStyleType(nStyleType) {
        this.m_nQueYiMenStyleType = nStyleType;
      },
      setQueYiMenMjGray: function setQueYiMenMjGray() {
        if (1 != this.m_nPos) return;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardsNode.childrenCount; i++) {
          var nType = GameCfg.getMjColor(holdCardsNode.children[i].cardValue);
          nType == this.m_nQueYiMenStyleType ? holdCardsNode.children[i].getChildByName("shadow").active = true : holdCardsNode.children[i].getChildByName("shadow").active = false;
        }
      },
      setGrayForCannotUpCard: function setGrayForCannotUpCard(bol) {
        if (1 != this.m_nPos) return;
        var holdCardsNode = this.node.getChildByName("holds");
        for (var i = 0; i < holdCardsNode.childrenCount; i++) holdCardsNode.children[i].y == this.m_selfOriginalPosY && (holdCardsNode.children[i].getChildByName("shadow").active = !bol);
        this.setTouchMjEnable = bol;
      },
      onChooseMjClicked: function onChooseMjClicked(clickIndex) {
        var holds = this.node.getChildByName("holds");
        var node = holds.children[clickIndex];
        var cardValue = node.cardValue;
        var index = clickIndex;
        if (node.y == this.m_selfOriginalPosY) {
          if (!this.setTouchMjEnable) return;
          this.threeMjValueList[this.threeMjValueList.length] = cardValue;
          node.y = node.y + 30;
          node.setScale(1.2);
          Resources.playCommonEffect("selectmahjong.mp3");
          for (var i = 0; i < holds.childrenCount; i++) if (node == holds.children[i]) {
            index = i;
            break;
          }
          if (-1 != index) for (var i = index + 1; i < holds.childrenCount; i++) holds.children[i].x += 15;
          this.getCanUpCardBySelectCount() || (this.setTouchMjEnable = false);
        } else {
          var index = this.threeMjValueList.indexOf(cardValue);
          index > -1 && this.threeMjValueList.splice(index, 1);
          node.y = node.y - 30;
          node.setScale(1);
          for (var i = 0; i < holds.childrenCount; i++) if (node == holds.children[i]) {
            index = i;
            break;
          }
          if (-1 != index) for (var i = index + 1; i < holds.childrenCount; i++) holds.children[i].x -= 15;
          this.getCanUpCardBySelectCount() && this.setGrayForCannotUpCard(true);
        }
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs",
    HallResources: "HallResources",
    Resources: "Resources",
    sendCMD: "sendCMD"
  } ],
  Player: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a163wUo11MJJ961eJdrxXM", "Player");
    "use strict";
    var _gamelibcommon = require("../../gamelib/gamelibcommon");
    var _TSCommon = require("../../TSCommon");
    var _WeixinManager = require("../../weixin/WeixinManager");
    var HallResources = require("HallResources");
    var Resources = require("Resources");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerName: {
          default: null,
          type: cc.Node
        },
        playerFace: {
          default: null,
          type: cc.Node
        },
        playerScore: {
          default: null,
          type: cc.Node
        },
        offLine: {
          default: null,
          type: cc.Node
        },
        ready: {
          default: null,
          type: cc.Node
        },
        robot: {
          default: null,
          type: cc.Node
        },
        playerInfoLayer: {
          default: null,
          type: cc.Node
        },
        personInfoPreView: {
          default: null,
          type: cc.Node
        },
        winResultFont: {
          default: null,
          type: cc.Font
        },
        loseResultFont: {
          default: null,
          type: cc.Font
        },
        selectCardSp: {
          default: null,
          type: cc.Sprite
        },
        dingqueSp: {
          default: null,
          type: cc.Sprite
        },
        queWanHeadIconSp: {
          default: null,
          type: cc.Sprite
        },
        queWanSp: {
          default: null,
          type: cc.Sprite
        },
        chaDaJiaoSp: {
          default: null,
          type: cc.Sprite
        },
        huSp: {
          default: null,
          type: cc.Sprite
        },
        WAN: 0,
        TIAO: 1,
        TONG: 2,
        INVA: 3,
        DINGQUEZHONG: 4,
        YIDINGQUE: 5,
        XUANPAIZHONG: 6,
        YIXUANPAI: 7,
        CHADAJIAO: 8,
        CHAHUAZHU: 9
      },
      onLoad: function onLoad() {
        var self = this;
        cc.loader.loadResDir("animation/dragonBones/biaoqin", function(err, assets) {
          self.biaoqinAssets = assets;
        });
        this.node.parent.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.m_leaveTimerStop = false;
        this.isMoveGold = false;
        this.initUI();
        _TSCommon.TSCommon.addEvent(HallResources.onHideSendGiftToPLayer, this.hideSendGiftToPLayer, this);
      },
      onDestroy: function onDestroy() {
        _TSCommon.TSCommon.removeEvent(HallResources.onHideSendGiftToPLayer, this.hideSendGiftToPLayer, this);
        this.stopLeaveTimer();
        this.unscheduleAllCallbacks();
      },
      initUI: function initUI() {
        this.nDingqueType = -1;
        this.setIsReady(false);
        this.setIsoffLine(false);
        this.setIsRobot(false);
        this.turnToOutPlayCardIsVis(false);
        var playerNode = this.node.getChildByName("playerNode");
        var chat = playerNode.getChildByName("chat_bg");
        chat.active = false;
        "myself" == this.node.name ? this.prePos = cc.p(-300, 0) : "right" == this.node.name ? this.prePos = cc.p(300, 0) : "top" == this.node.name ? this.prePos = cc.p(0, 300) : "left" == this.node.name ? this.prePos = cc.p(-300, 0) : cc.log("no other player");
        if (this.prePos) {
          this.node.getChildByName("playerNode").x = this.prePos.x;
          this.node.getChildByName("playerNode").y = this.prePos.y;
        }
        this.node.getChildByName("flyScoreBg").active = false;
        this.playerInfoLayer.active = false;
        this.personInfoPreView.active = false;
        this.hideLeaveTimer();
      },
      hideSendGiftToPLayer: function hideSendGiftToPLayer() {
        this.personInfoPreView.active = false;
      },
      onTouch: function onTouch(event) {
        var pos = event.touch.getLocation();
        var convertPos = this.node.getChildByName("playerNode").getChildByName("player_bg").convertToNodeSpace(pos);
        var size = this.node.getChildByName("playerNode").getChildByName("player_bg").getContentSize();
        var rect = cc.rect(0, 0, size.width, size.height);
        if (cc.rectContainsPoint(rect, convertPos)) {
          HallResources.getInstance().playButtonEffect();
          var isSelf = 1 == this.node.getChildByName("playerNode").nPos;
          var winSize = cc.director.getWinSize();
          var PersonalInfoFrame = this.playerInfoLayer.getComponent("PersonalInfoFrame");
          PersonalInfoFrame.init(this.userInfo);
          PersonalInfoFrame.setGold(this.userInfo.getGold());
          if (isSelf) {
            this.playerInfoLayer.active = true;
            _TSCommon.TSCommon.dispatchEvent(require("HallResources").onHideSendGiftToPLayer, true);
          } else {
            this.personInfoPreView.active = true;
            var PersonInfoPreView = this.personInfoPreView.getComponent("PersonInfoPreView");
            var nPos = this.node.getChildByName("playerNode").nPos;
            var positionX = 0;
            var positionY = 0;
            var position = cc.Vec2(0, 0);
            if (2 == nPos) {
              position = cc.v2(945 - winSize.width / 2, 400 - winSize.height / 2);
              require("HallUtils").isIPhoneX() && (position = cc.v2(1125 - winSize.width / 2, 400 - winSize.height / 2));
            } else if (3 == nPos) {
              position = cc.v2(745 - winSize.width / 2, 545 - winSize.height / 2);
              require("HallUtils").isIPhoneX() && (position = cc.v2(865 - winSize.width / 2, 545 - winSize.height / 2));
            } else if (4 == nPos) {
              position = cc.v2(335 - winSize.width / 2, 400 - winSize.height / 2);
              require("HallUtils").isIPhoneX() && (position = cc.v2(395 - winSize.width / 2, 400 - winSize.height / 2));
            }
            PersonInfoPreView.create(this.userInfo.getUserID(), position);
          }
        }
      },
      Come: function Come(nPos, userInfo) {
        cc.log("call user come  function  nPos = ", nPos);
        this.userInfo = userInfo;
        this.m_nPos = nPos;
        this.node.getComponent("PlayerCardLayer").setPlayerPos(nPos);
        this.node.getComponent("OutCardLayer").setPlayerPos(nPos);
        this.Enter(nPos);
      },
      Leave: function Leave(nPos) {
        this.playerInfoLayer.active = false;
        this.setIsReady(false);
        this.hideLeaveTimer();
        this.node.getComponent("OutCardLayer").cleanAllMjs();
        this.Exit(nPos);
      },
      refreshGold: function refreshGold(nGold) {
        var isPrivateRoom = this.node.parent.getComponent("DeskScene").getIsPrivateRoom();
        if (isPrivateRoom) {
          if (this.userInfo) {
            this.m_lGold = this.userInfo.getScore();
            var result = require("HallResources").getInstance().getRankAndStarByScore(this.m_lGold);
            this.playerScore.getComponent(cc.Label).string = result.rankName;
          }
        } else {
          this.m_lGold = nGold;
          var szGold = Resources.formatGold(this.m_lGold, true);
          this.playerScore.getComponent(cc.Label).string = szGold;
        }
      },
      getAvatarUrl: function getAvatarUrl(userID, onEnd) {
        var httpCallback = function httpCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data).table[0];
            onEnd && "" != jsonObject.FaceUrl && onEnd(jsonObject.FaceUrl, jsonObject.NickName);
          }
        };
        require("HallWebRequest").getInstance().getWxUserInfoByUserID(userID, httpCallback);
      },
      getNowScore: function getNowScore() {
        return this.playerScore.getComponent(cc.Label).string;
      },
      setSelectCardSpIsVis: function setSelectCardSpIsVis(bIsVis, nType) {
        var self = this;
        self.selectCardSp.node.active = bIsVis;
        if (bIsVis) {
          var strImg = "texture/game/xuanpai";
          nType == this.XUANPAIZHONG ? strImg = "texture/game/xuanpai" : nType == this.YIXUANPAI && (strImg = "texture/game/yixuanpai");
          cc.loader.loadRes(strImg, cc.SpriteFrame, function(err, spriteFrame) {
            err || (self.selectCardSp.spriteFrame = spriteFrame);
          });
        }
      },
      setPoChanVis: function setPoChanVis(bVis) {
        this.node.getChildByName("playerNode").getChildByName("pochan_node").active = bVis;
      },
      setHuSpIsVis: function setHuSpIsVis(bIsVis) {
        this.huSp.node.active = bIsVis;
      },
      setDingqueSpIsVis: function setDingqueSpIsVis(bIsVis, nType) {
        var self = this;
        self.dingqueSp.node.active = bIsVis;
        if (bIsVis) {
          var strImg = "texture/game/dingque";
          nType == this.DINGQUEZHONG ? strImg = "texture/game/dingque" : nType == this.YIDINGQUE && (strImg = "texture/game/yidingque");
          cc.loader.loadRes(strImg, cc.SpriteFrame, function(err, spriteFrame) {
            err || (self.dingqueSp.spriteFrame = spriteFrame);
          });
        }
      },
      setQueWanHeadIconSpIsVis: function setQueWanHeadIconSpIsVis(bIsVis, nType) {
        var self = this;
        self.nDingqueType = nType;
        self.queWanHeadIconSp.node.active = bIsVis;
        if (bIsVis) {
          var strImg = "texture/game/swap/wan2";
          nType == this.WAN ? strImg = "texture/game/swap/wan2" : nType == this.TIAO ? strImg = "texture/game/swap/tiao2" : nType == this.TONG && (strImg = "texture/game/swap/tong2");
          cc.loader.loadRes(strImg, cc.SpriteFrame, function(err, spriteFrame) {
            err || (self.queWanHeadIconSp.spriteFrame = spriteFrame);
          });
        }
      },
      setQueWanSpIsVis: function setQueWanSpIsVis(bIsVis, nType, bolRun) {
        var self = this;
        self.nDingqueType = nType;
        var pPos = self.queWanSp.node.getPosition();
        self.queWanSp.node.active = bIsVis;
        if (bIsVis) {
          var strImg = "texture/game/swap/wan1";
          nType == this.WAN ? strImg = "texture/game/swap/wan1" : nType == this.TIAO ? strImg = "texture/game/swap/tiao1" : nType == this.TONG && (strImg = "texture/game/swap/tong1");
          cc.loader.loadRes(strImg, cc.SpriteFrame, function(err, spriteFrame) {
            err || (self.queWanSp.spriteFrame = spriteFrame);
          });
          var action = cc.delayTime(.5);
          var TempPoint = self.queWanHeadIconSp.node.getPosition();
          var action1 = cc.scaleTo(.2, 1.5, 1.5);
          var action2 = cc.scaleTo(.2, 1, 1);
          var action3 = cc.moveTo(.1, TempPoint.x, TempPoint.y + 30);
          var action4 = cc.scaleTo(.5, .3, .3);
          var spawn = cc.spawn(action1, action2, action3, action4);
          var callBcak = cc.callFunc(function() {
            self.queWanSp.node.active = false;
            self.queWanSp.node.setScale(1);
            self.queWanSp.node.setPosition(pPos);
            self.setQueWanHeadIconSpIsVis(bIsVis, nType);
            self.dingQueFlyFinishIsVis(true);
          });
          var sequence = cc.sequence(action, spawn, callBcak);
          bolRun && this.queWanSp.node.runAction(sequence);
        }
      },
      Enter: function Enter(nPos) {
        cc.log("nPos ==========" + nPos);
        this.node.getChildByName("playerNode").getNumberOfRunningActions() > 0 && this.node.getChildByName("playerNode").stopAllActions();
        var winSize = cc.director.getWinSize();
        this.node.getChildByName("playerNode").nPos = nPos;
        var Tools = require("Tools");
        var result = Tools.cutString(this.userInfo.getUserName(), 80, 17, this.node.getChildByName("playerNode"));
        this.playerName.getComponent(cc.Label).string = result;
        this.refreshGold(this.userInfo.getGold());
        if (1 == nPos) {
          this.node.getChildByName("playerNode").x = this.prePos.x;
          this.node.getChildByName("playerNode").y = this.prePos.y;
          var posX = 0;
          var posY = this.node.getChildByName("playerNode").y;
          var isPrivateRoom = this.node.parent.getComponent("DeskScene").getIsPrivateRoom();
          var self = this;
          var moveEnd = function moveEnd() {
            if (self.userInfo.getUserStatus() == _gamelibcommon.gamelibcommon.USER_READY_STATUS) self.setIsReady(true); else if (isPrivateRoom) {
              var sendCMD = require("sendCMD");
              sendCMD.sendCMD_PO_RESTART();
            }
          };
          var wxUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
          if (wxUserInfo && wxUserInfo.avatarUrl) {
            var imgurl = wxUserInfo.avatarUrl;
            this.userInfo.imgurl = imgurl;
            cc.loader.load({
              url: imgurl,
              type: "jpg"
            }, function(err, texture) {
              self.playerFace.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            });
          } else {
            var onEnd = function onEnd(faceUrl, nickName) {
              var imgurl = faceUrl;
              self.userInfo.imgurl = imgurl;
              cc.loader.load({
                url: imgurl,
                type: "jpg"
              }, function(err, texture) {
                self.playerFace.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
              });
            };
            this.getAvatarUrl(this.userInfo.getUserDBID(), onEnd);
          }
          var moveTo = cc.moveTo(.4, posX, posY);
          var callback = cc.callFunc(moveEnd);
          var sequence = cc.sequence(moveTo, callback);
          this.node.getChildByName("playerNode").runAction(sequence);
        } else if (4 == nPos) {
          this.node.getChildByName("playerNode").x = this.prePos.x;
          this.node.getChildByName("playerNode").y = this.prePos.y;
          var posX = 0;
          var posY = this.node.getChildByName("playerNode").y;
          var self = this;
          var moveEnd = function moveEnd() {
            self.userInfo.getUserStatus() == _gamelibcommon.gamelibcommon.USER_READY_STATUS && self.setIsReady(true);
          };
          var onEnd = function onEnd(faceUrl, nickName) {
            var imgurl = faceUrl;
            self.userInfo.imgurl = imgurl;
            cc.loader.load({
              url: imgurl,
              type: "jpg"
            }, function(err, texture) {
              self.playerFace.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            });
          };
          this.getAvatarUrl(this.userInfo.getUserDBID(), onEnd);
          var moveTo = cc.moveTo(.4, posX, posY);
          var callback = cc.callFunc(moveEnd);
          var sequence = cc.sequence(moveTo, callback);
          this.node.getChildByName("playerNode").runAction(sequence);
        } else if (3 == nPos) {
          this.node.getChildByName("playerNode").x = this.prePos.x;
          this.node.getChildByName("playerNode").y = this.prePos.y;
          var posX = this.node.getChildByName("playerNode").x;
          var posY = 0;
          var self = this;
          var moveEnd = function moveEnd() {
            self.userInfo.getUserStatus() == _gamelibcommon.gamelibcommon.USER_READY_STATUS && self.setIsReady(true);
          };
          var onEnd = function onEnd(faceUrl, nickName) {
            var imgurl = faceUrl;
            self.userInfo.imgurl = imgurl;
            cc.loader.load({
              url: imgurl,
              type: "jpg"
            }, function(err, texture) {
              self.playerFace.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            });
          };
          this.getAvatarUrl(this.userInfo.getUserDBID(), onEnd);
          var moveTo = cc.moveTo(.4, posX, posY);
          var callback = cc.callFunc(moveEnd);
          var sequence = cc.sequence(moveTo, callback);
          this.node.getChildByName("playerNode").runAction(sequence);
        } else if (2 == nPos) {
          this.node.getChildByName("playerNode").x = this.prePos.x;
          this.node.getChildByName("playerNode").y = this.prePos.y;
          var posX = 0;
          var posY = this.node.getChildByName("playerNode").y;
          var self = this;
          var moveEnd = function moveEnd() {
            self.userInfo.getUserStatus() == _gamelibcommon.gamelibcommon.USER_READY_STATUS && self.setIsReady(true);
          };
          var onEnd = function onEnd(faceUrl, nickName) {
            var imgurl = faceUrl;
            self.userInfo.imgurl = imgurl;
            cc.loader.load({
              url: imgurl,
              type: "jpg"
            }, function(err, texture) {
              self.playerFace.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);
            });
          };
          this.getAvatarUrl(this.userInfo.getUserDBID(), onEnd);
          var moveTo = cc.moveTo(.4, posX, posY);
          var callback = cc.callFunc(moveEnd);
          var sequence = cc.sequence(moveTo, callback);
          this.node.getChildByName("playerNode").runAction(sequence);
        }
      },
      Exit: function Exit(nPos) {
        var isPrivateRoom = this.node.parent.getComponent("DeskScene").getIsPrivateRoom();
        if (isPrivateRoom) return;
        if (1 == nPos) {
          var act = cc.moveTo(.4, this.prePos.x, this.prePos.y);
          this.node.getChildByName("playerNode").runAction(act);
        } else if (2 == nPos) {
          var act = cc.moveTo(.4, this.prePos.x, this.prePos.y);
          this.node.getChildByName("playerNode").runAction(act);
        } else if (3 == nPos) {
          var act = cc.moveTo(.4, this.prePos.x, this.prePos.y);
          this.node.getChildByName("playerNode").runAction(act);
        } else if (4 == nPos) {
          var act = cc.moveTo(.4, this.prePos.x, this.prePos.y);
          this.node.getChildByName("playerNode").runAction(act);
        }
      },
      getPlayerName: function getPlayerName() {
        return this.playerName.getComponent(cc.Label).string;
      },
      getSex: function getSex() {
        return this.userInfo ? this.userInfo.getSex() : _gamelibcommon.gamelibcommon.SX_BOY;
      },
      getGold: function getGold() {
        return this.m_lGold;
      },
      setIsReady: function setIsReady(bIsReady) {
        this.ready.active = bIsReady;
      },
      setIsoffLine: function setIsoffLine(bIsOffline) {
        this.offLine.active = bIsOffline;
      },
      setIsRobot: function setIsRobot(bIsRobot) {
        this.robot.active = bIsRobot;
      },
      setIsWinner: function setIsWinner(bIsWinner) {
        this.m_isWinner = bIsWinner;
      },
      getIsValidPlayer: function getIsValidPlayer() {
        if (this.userInfo) return true;
        return false;
      },
      getIsWinner: function getIsWinner() {
        return this.m_isWinner;
      },
      getFaceUrl: function getFaceUrl() {
        if (this.userInfo) return this.userInfo.imgurl;
        return "";
      },
      setLastGoldOnGameOver: function setLastGoldOnGameOver(nGold) {
        this.m_nLastGold = nGold;
      },
      turnToOutPlayCardIsVis: function turnToOutPlayCardIsVis(bIsPlaying) {
        var playerNode = this.node.getChildByName("playerNode");
        var whosTurnNode = playerNode.getChildByName("whosturn_act");
        if (bIsPlaying) {
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.addComponent(dragonBones.ArmatureDisplay);
          dragonDisplay.playAnimation("Animation2");
        } else whosTurnNode.active = false;
      },
      dingQueFlyFinishIsVis: function dingQueFlyFinishIsVis(bIsPlaying) {
        var playerNode = this.node.getChildByName("playerNode");
        var whosTurnNode = playerNode.getChildByName("queyimen_act");
        if (bIsPlaying) {
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.addComponent(dragonBones.ArmatureDisplay);
          var animState = dragonDisplay.playAnimation("Animation1");
          Resources.playCommonEffect("qingQue.mp3");
          var self = this;
          var callback = function callback() {
            self.dingQueFlyFinishIsVis(false);
            dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
          };
          dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        } else whosTurnNode.active = false;
      },
      texiaoIsVis: function texiaoIsVis(bIsPlaying, texiaoName) {
        var whosTurnNode = this.node.getChildByName("texiao_act");
        if (bIsPlaying) {
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
          var animState = dragonDisplay.playAnimation(texiaoName, 1);
          animState && (animState.timeScale = 1.5);
          var self = this;
          var callback = function callback() {
            self.texiaoIsVis(false);
            dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
          };
          dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        } else whosTurnNode.active = false;
      },
      stopWinAction: function stopWinAction() {
        var playerNode = this.node.getChildByName("playerNode");
        var winNode = playerNode.getChildByName("win_act");
        winNode.active = false;
      },
      playWinAction: function playWinAction() {
        var playerNode = this.node.getChildByName("playerNode");
        var winNode = playerNode.getChildByName("win_act");
        winNode.active = true;
        var dragonDisplay = winNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("Animation2");
        var self = this;
        var callback = function callback() {
          self.stopWinAction();
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      setTempChangeGold: function setTempChangeGold(nGold, callback, bolChaDaJiao, bolGameOver) {
        var self = this;
        if (this.isMoveGold) {
          var delayTime = cc.delayTime(1.5);
          this.node.runAction(delayTime);
        }
        this.m_lGold += nGold;
        this.m_lGold < 0 && (this.m_lGold = 0);
        this.refreshGold(this.m_lGold);
        var resultScoreBg = this.node.getChildByName("flyScoreBg");
        var resultScoreNode = resultScoreBg.getChildByName("result_score");
        resultScoreBg.active = true;
        resultScoreNode.getComponent(cc.Label).isSystemFontUsed = false;
        if (nGold > 0) {
          resultScoreNode.getComponent(cc.Label).font = this.winResultFont;
          resultScoreNode.getComponent(cc.Label).string = "+" + nGold;
        } else {
          resultScoreNode.getComponent(cc.Label).font = this.loseResultFont;
          resultScoreNode.getComponent(cc.Label).string = nGold;
        }
        var prePos = cc.p(resultScoreBg.getPosition());
        this.isMoveGold = true;
        var moveTo = cc.moveTo(1, cc.p(resultScoreBg.x, resultScoreBg.y + 30));
        var delayTime = cc.delayTime(1);
        var playSound = cc.callFunc(function() {
          Resources.playCommonEffect("coin_fly_start_sound.mp3");
        });
        var spawn = cc.spawn(moveTo, playSound);
        var onEnd = cc.callFunc(function() {
          self.isMoveGold = false;
          resultScoreNode.getComponent(cc.Label).string = "";
          resultScoreBg.setPosition(prePos);
          resultScoreBg.active = false;
          callback && callback();
        });
        var sequence = null;
        if (bolGameOver) {
          if (this.m_nLastGold > 0) {
            resultScoreNode.getComponent(cc.Label).font = this.winResultFont;
            resultScoreNode.getComponent(cc.Label).string = "+" + this.m_nLastGold;
          } else {
            resultScoreNode.getComponent(cc.Label).font = this.loseResultFont;
            resultScoreNode.getComponent(cc.Label).string = this.m_nLastGold;
          }
          sequence = cc.sequence(spawn, delayTime, onEnd);
        } else sequence = cc.sequence(moveTo, delayTime, onEnd);
        resultScoreBg.runAction(sequence);
      },
      showCharmNumAction: function showCharmNumAction(num) {
        var contentSize = this.node.getContentSize();
        var charmNode = new cc.Node();
        charmNode.setScale(.6);
        charmNode.setAnchorPoint(cc.v2(1, .5));
        this.node.addChild(charmNode);
        charmNode.addComponent(cc.Sprite);
        charmNode.getComponent(cc.Sprite).spriteFrame = this.charmAssets;
        charmNode.setLocalZOrder(100);
        var numNode = new cc.Node();
        numNode.setAnchorPoint(cc.v2(0, .5));
        this.node.addChild(numNode);
        numNode.addComponent(cc.Label);
        numNode.setPosition(cc.v2(0, -20));
        numNode.getComponent(cc.Label).isSystemFontUsed = false;
        numNode.getComponent(cc.Label).font = this.charmNumAssets;
        num > 0 && (num = "+" + num);
        numNode.getComponent(cc.Label).string = num;
        numNode.setLocalZOrder(100);
        var moveTo1 = cc.moveTo(.2, 0, contentSize.height / 2 - 17);
        var delay1 = cc.delayTime(1);
        var fadeOut1 = cc.fadeOut(.2);
        var sequence1 = cc.sequence(moveTo1, delay1, fadeOut1);
        numNode.runAction(sequence1);
        var moveTo2 = cc.moveTo(.2, 0, contentSize.height / 2);
        var delay2 = cc.delayTime(1);
        var fadeOut2 = cc.fadeOut(.2);
        var sequence2 = cc.sequence(moveTo2, delay2, fadeOut2);
        charmNode.runAction(sequence2);
      },
      playGuaFengEffects: function playGuaFengEffects(bIsPlaying, nPos) {
        var playerNode = this.node.getChildByName("playerNode");
        var whosTurnNode = playerNode.getChildByName("guafeng_act");
        if (1 == nPos) {
          whosTurnNode.x = 0;
          whosTurnNode.y = -170;
        } else if (2 == nPos) {
          whosTurnNode.x = 345;
          whosTurnNode.y = 30;
        } else if (3 == nPos) {
          whosTurnNode.x = 0;
          whosTurnNode.y = 205;
        } else if (4 == nPos) {
          whosTurnNode.x = -365;
          whosTurnNode.y = 30;
        }
        if (bIsPlaying) {
          whosTurnNode.active = true;
          var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
          dragonDisplay.playAnimation("Animation2");
          var self = this;
          var callback = function callback() {
            dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
          };
          dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        } else whosTurnNode.active = false;
      },
      playOperateEffects: function playOperateEffects(effect, nPos) {
        var spriteFrameName;
        var GameCfg = require("GameCfg");
        effect == GameCfg.EffectList.No_1pen ? spriteFrameName = "No_1pen" : effect == GameCfg.EffectList.No_2chi ? spriteFrameName = "No_2chi" : effect == GameCfg.EffectList.No_2gang ? spriteFrameName = "No_2gang" : effect == GameCfg.EffectList.No_2hu ? spriteFrameName = "No_2hu" : effect == GameCfg.EffectList.No_2ZiMo ? spriteFrameName = "No_2ZiMo" : effect == GameCfg.EffectList.No_2FanPao ? spriteFrameName = "No_2FanPao" : effect == GameCfg.EffectList.No_2LiuJu ? spriteFrameName = "No_2LiuJu" : effect == GameCfg.EffectList.No_1lai ? spriteFrameName = "No_1lai" : effect == GameCfg.EffectList.No_2ChaDaJiao ? spriteFrameName = "No_2ChaDaJiao" : effect == GameCfg.EffectList.No_2ChaHuaZhu ? spriteFrameName = "No_2ChaHuaZhu" : effect == GameCfg.EffectList.No_2caotian && (spriteFrameName = "No_2caotian");
        spriteFrameName && this.texiaoIsVis(true, spriteFrameName);
      },
      showChatTextInfo: function showChatTextInfo(chatStr) {
        var wordIndex = -1;
        for (var i in Resources.QUICK_SEND_CHATS) if (chatStr == Resources.QUICK_SEND_CHATS[i]) {
          wordIndex = i;
          break;
        }
        Resources.playQWSoundEffect(this.userInfo.getSex(), parseInt(wordIndex) + 1);
        var playerNode = this.node.getChildByName("playerNode");
        var chat = playerNode.getChildByName("chat_bg");
        chat.stopAllActions();
        chat.setScale(.5);
        chat.setOpacity(255);
        chat.active = true;
        var chattingNode = chat.getChildByName("chatting_status");
        var animation = chattingNode.getComponent(cc.Animation);
        var animState = animation.play("spot_wait_action");
        animState.speed = .3;
        animState.wrapMode = cc.WrapMode.Loop;
        animState.repeatCount = Infinity;
        var scale1 = cc.scaleTo(.2, 1.1);
        var scale2 = cc.scaleTo(.2, 1);
        var delayTime = cc.delayTime(2);
        var fadeOut = cc.fadeOut(.2);
        var scale3 = cc.scaleTo(.2, .5);
        var spawn = cc.spawn(fadeOut, scale3);
        var onEnd = cc.callFunc(function() {
          chat.active = false;
        });
        var sequence = cc.sequence(scale1, scale2, delayTime, spawn, onEnd);
        chat.runAction(sequence);
      },
      showChatFaceInfo: function showChatFaceInfo(faceId) {
        var node = new cc.Node();
        node.x = this.playerFace.x;
        node.y = this.playerFace.y;
        node.active = true;
        this.node.getChildByName("playerNode").addChild(node, 100);
        var dragonDisplay = node.addComponent(dragonBones.ArmatureDisplay);
        for (var i in this.biaoqinAssets) {
          this.biaoqinAssets[i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = this.biaoqinAssets[i]);
          this.biaoqinAssets[i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = this.biaoqinAssets[i]);
        }
        Resources.playFaceEffect(Resources.FACE_EFFECT[faceId]);
        dragonDisplay.armatureName = "armatureName";
        dragonDisplay.playAnimation(faceId + 1);
        this.onArmatureFinish = function() {
          node.destroy();
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, this.onArmatureFinish, this);
        this.faceDragonDisplay = dragonDisplay;
      },
      startLeaveTimerOnGameOver: function startLeaveTimerOnGameOver() {
        var totalTime = 60;
        var playerNode = this.node.getChildByName("playerNode");
        var ready_timer = playerNode.getChildByName("ready_timer");
        ready_timer.active = false;
        ready_timer.getComponent(cc.Label).string = totalTime;
        var self = this;
        var callback = function callback() {
          if (self.m_leaveTimerStop) return;
          totalTime -= 1;
          ready_timer.getComponent(cc.Label).string = totalTime;
          if (totalTime >= 0) _TSCommon.TSCommon.performWithDelay(self, callback, 1); else {
            ready_timer.active = false;
            if (1 == self.m_nPos || "myself" == self.node.name) {
              require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
              return;
            }
          }
        };
        _TSCommon.TSCommon.performWithDelay(this, callback, 1);
      },
      stopLeaveTimer: function stopLeaveTimer() {
        this.m_leaveTimerStop = true;
      },
      showLeaveTimer: function showLeaveTimer() {
        var playerNode = this.node.getChildByName("playerNode");
        var ready_timer = playerNode.getChildByName("ready_timer");
        ready_timer.active = true;
      },
      hideLeaveTimer: function hideLeaveTimer() {
        var playerNode = this.node.getChildByName("playerNode");
        var ready_timer = playerNode.getChildByName("ready_timer");
        ready_timer.active = false;
      },
      gameOver: function gameOver() {
        this.isMoveGold = false;
        this.nDingqueType = -1;
        this.turnToOutPlayCardIsVis(false);
        this.startLeaveTimerOnGameOver();
        this.setHuSpIsVis(false);
        this.setPoChanVis(false);
        if (this.getIsValidPlayer()) {
          this.m_isWinner && this.playWinAction();
          this.node.getComponent("PlayerCardLayer").gameOver();
          this.node.getComponent("OutCardLayer").gameOver();
          this.node.getComponent("HuCardLayer").gameOver();
        }
      },
      cleanPlayers: function cleanPlayers() {
        this.node.getComponent("PlayerCardLayer").cleanAllMjs();
        this.node.getComponent("OutCardLayer").cleanAllMjs();
        this.node.getComponent("HuCardLayer").cleanAllMjs();
        var resultScoreNode = this.node.getChildByName("flyScoreBg");
        resultScoreNode.active = false;
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../gamelib/gamelibcommon": "gamelibcommon",
    "../../weixin/WeixinManager": "WeixinManager",
    GameCfg: "GameCfg",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    HallUtils: "HallUtils",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources",
    Tools: "Tools",
    sendCMD: "sendCMD"
  } ],
  PlazaCmds: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8157a0vYQtPYoaLkAJNv+dg", "PlazaCmds");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlazaCmds = function() {
      function PlazaCmds() {}
      PlazaCmds.MAIN_GP_LOGON = 100;
      PlazaCmds.SUB_GP_LOGON_RIGISTER = 1;
      PlazaCmds.SUB_GP_LOGON_BY_NAME = 2;
      PlazaCmds.SUB_GP_LOGON_BY_USERID = 3;
      PlazaCmds.SUB_GP_LOGON_BY_VNET = 4;
      PlazaCmds.SUB_GP_LOGON_BY_VNET_TOKEN = 5;
      PlazaCmds.SUB_GP_LOGON_BY_VNET_TOKEN_V1 = 6;
      PlazaCmds.SUB_GP_LOGON_BY_VNET_CMD = 7;
      PlazaCmds.SUB_GP_LOGON_BY_IMEI = 8;
      PlazaCmds.SUB_GP_LOGON_BY_EMAIL = 9;
      PlazaCmds.SUB_GP_GET_GAMEINFO = 10;
      PlazaCmds.SUB_GP_GET_GAMEINFO_EX = 11;
      PlazaCmds.SUB_GP_LOGON_SUCCESS = 50;
      PlazaCmds.SUB_GP_LOGON_SUCCESS_EX = 51;
      PlazaCmds.SUB_GP_LOGON_RIGISTER_EX = 52;
      PlazaCmds.SUB_GP_GET_OPEN_PLATFORM_TOKEN = 53;
      PlazaCmds.SUB_GP_OPEN_PLATFORM_GETTOKEN = 54;
      PlazaCmds.SUB_GP_LOGON_SUCCESS_VNET = 55;
      PlazaCmds.SUB_GP_LOGON_RIGISTER_V1 = 56;
      PlazaCmds.SUB_GP_PSW_CARD_COORD = 57;
      PlazaCmds.SUB_GP_PSW_CARD_USER_NUM = 58;
      PlazaCmds.SUB_GP_GET_OPEN_PLATFORM_TOKEN_VNET = 64;
      PlazaCmds.SUB_GP_OPEN_PLATFORM_GETTOKEN_VNET = 65;
      PlazaCmds.SUB_GP_LOGON_REG_RESULT = 66;
      PlazaCmds.SUB_GP_LOGON_AVATAR_URL = 67;
      PlazaCmds.SUB_GP_LOGON_FACEDATA = 68;
      PlazaCmds.SUB_GP_VIP_INFO = 69;
      PlazaCmds.SUB_GP_SCORE_EX = 70;
      PlazaCmds.SUB_GP_GAMEINFO = 72;
      PlazaCmds.SUB_GP_TRANSFER = 60;
      PlazaCmds.SUB_GP_SAFEBOX = 61;
      PlazaCmds.SUB_GP_SEND_LOGON_TIME = 62;
      PlazaCmds.SUB_GP_VNET_RT_URL = 63;
      PlazaCmds.SUB_GP_GUEST = 64;
      PlazaCmds.SUB_GP_LOGON_BY_TOKEN = 65;
      PlazaCmds.MAIN_GP_SERVER_LIST = 101;
      PlazaCmds.SUB_GP_SERVER_LIST_Web = 12;
      PlazaCmds.SUB_GP_SERVER_LIST_TYPE = 1;
      PlazaCmds.SUB_GP_SERVER_LIST_KIND = 2;
      PlazaCmds.SUB_GP_SERVER_LIST_STATION = 3;
      PlazaCmds.SUB_GP_SERVER_LIST_ROOM = 4;
      PlazaCmds.SUB_GP_SERVER_LIST_ROOM_EX = 5;
      PlazaCmds.SUB_GP_SERVER_LIST_ITEM = 6;
      PlazaCmds.SUB_GP_SERVER_LIST_MODE = 9;
      PlazaCmds.SUB_GP_SERVER_LIST_SUBSTATION_ROOM = 10;
      PlazaCmds.SUB_GP_SERVER_LIST_EDU_ITEM = 21;
      PlazaCmds.SUB_GP_SERVER_LIST_SUBSTATION_KIND = 22;
      PlazaCmds.SUB_GP_SERVER_LIST_TYPE_V1 = 23;
      PlazaCmds.SUB_GP_SERVER_WEB_COUNT = 13;
      PlazaCmds.SUB_GP_SERVER_KIND_COUNT = 7;
      PlazaCmds.SUB_GP_SERVER_ROOM_COUNT = 8;
      PlazaCmds.SUB_GP_SERVER_SUBSTATION_COUNT = 11;
      PlazaCmds.SUB_GP_GET_SERVER_LIST = 9;
      PlazaCmds.SUB_GR_GET_COLLECTION_SERVER = 51;
      PlazaCmds.SUB_GR_GET_COLLECTION_SERVER_EX = 53;
      PlazaCmds.SUB_GP_GET_SUBSTATION_SERVER_LIST = 54;
      PlazaCmds.SUB_GP_GET_EDU_SERVER_LIST = 59;
      PlazaCmds.SUB_GP_GET_ONLINE_COUNT = 52;
      PlazaCmds.SUB_GP_GET_SUBSTATION_ONLINE_COUNT = 55;
      PlazaCmds.SUB_GP_SERVER_LIST_SPECIAL_KIND = 56;
      PlazaCmds.SUB_GP_SERVER_LIST_WEB_KIND = 57;
      PlazaCmds.SUB_GP_SERVER_LIST_OPENPLATFORM_KIND = 58;
      PlazaCmds.MAIN_GP_CONFIG = 102;
      PlazaCmds.SUB_GP_BBRING_IP = 1;
      PlazaCmds.SUB_GP_USER_INFO = 2;
      PlazaCmds.SUB_GP_MASTER_IP = 3;
      PlazaCmds.SUB_GP_CHANGE_INFO = 50;
      PlazaCmds.SUB_GP_AD_INFO = 51;
      PlazaCmds.SUB_GP_BIND_EMAIL = 52;
      PlazaCmds.SUB_GP_GET_AWARD = 53;
      PlazaCmds.SUB_GP_GET_FACE = 54;
      PlazaCmds.SUB_GP_APPLE_CHARGE = 55;
      PlazaCmds.SUB_GP_CHANGE_USERWORD = 56;
      PlazaCmds.MAIN_CM_SERVICE = 200;
      PlazaCmds.SUB_CM_MESSAGE = 1;
      PlazaCmds.SUB_CM_MESSAGE_EX = 2;
      PlazaCmds.SUB_CM_MESSAGE_EX_2 = 3;
      PlazaCmds.ERROR_KIND_ID = 65535;
      return PlazaCmds;
    }();
    exports.PlazaCmds = PlazaCmds;
    cc._RF.pop();
  }, {} ],
  PropertyAnimationLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92beeWY6YtNgqonyH1JcQCf", "PropertyAnimationLayer");
    "use strict";
    var _TSCommon = require("../TSCommon");
    var HallResources = require("HallResources");
    var PropertyAnimationLayer = {
      extends: cc.Component,
      properties: {
        ArmatAssets: Array(),
        SpriteAssets: Array()
      },
      onLoad: function onLoad() {
        this.ArmatAssets = new Array();
        this.SpriteAssets = new Array();
        var self = this;
        cc.loader.loadRes("texture/game/property/gameItem_1", cc.SpriteFrame, function(err, spriteFrame) {
          self.SpriteAssets[1] = spriteFrame;
        });
        cc.loader.loadRes("texture/game/property/gameItem_2", cc.SpriteFrame, function(err, spriteFrame) {
          self.SpriteAssets[2] = spriteFrame;
        });
        cc.loader.loadRes("texture/game/property/gameItem_3", cc.SpriteFrame, function(err, spriteFrame) {
          self.SpriteAssets[3] = spriteFrame;
        });
        cc.loader.loadRes("texture/game/property/gameItem_4", cc.SpriteFrame, function(err, spriteFrame) {
          self.SpriteAssets[4] = spriteFrame;
        });
        cc.loader.loadRes("texture/game/property/gameItem_5", cc.SpriteFrame, function(err, spriteFrame) {
          self.SpriteAssets[5] = spriteFrame;
        });
        cc.loader.loadRes("texture/game/property/gameItem_6", cc.SpriteFrame, function(err, spriteFrame) {
          self.SpriteAssets[6] = spriteFrame;
        });
        cc.loader.loadResDir("texture/game/property/animation/Game_JiDan", function(err, assets) {
          self.ArmatAssets[1] = assets;
        });
        cc.loader.loadResDir("texture/game/property/animation/Game_FeiDao", function(err, assets) {
          self.ArmatAssets[2] = assets;
        });
        cc.loader.loadResDir("texture/game/property/animation/Game_ZhuoJi", function(err, assets) {
          self.ArmatAssets[3] = assets;
        });
        cc.loader.loadResDir("texture/game/property/animation/Game_Kiss", function(err, assets) {
          self.ArmatAssets[4] = assets;
        });
        cc.loader.loadResDir("texture/game/property/animation/Game_MeiGui", function(err, assets) {
          self.ArmatAssets[5] = assets;
        });
        cc.loader.loadResDir("texture/game/property/animation/Game_DianZan", function(err, assets) {
          self.ArmatAssets[6] = assets;
        });
      },
      onDestroy: function onDestroy() {
        this.dragonDisplay && this.dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.onArmatureFinish, this);
      }
    };
    PropertyAnimationLayer.create = function(startPoint, endPoint, nPropertyId, onEnd) {
      this.init(startPoint, endPoint, nPropertyId, onEnd);
      this.PlayArmatureAction();
    };
    PropertyAnimationLayer.init = function(startPoint, endPoint, nPropertyId, onEnd) {
      this.m_startPoint = startPoint;
      this.m_endPoint = endPoint;
      this.m_nPropertyId = nPropertyId;
      this.m_onEnd = onEnd;
    };
    PropertyAnimationLayer.PlayArmatureAction = function() {
      var isImgLoadFinish = true;
      for (var i = 1; i <= 6; i++) this.SpriteAssets[i] || (isImgLoadFinish = false);
      isImgLoadFinish || _TSCommon.TSCommon.performWithDelay(this, this.PlayArmatureAction, .1);
      var animationArray = [ "JiDan", "FeiDao", "ZhuoJi", "Kiss", "MeiGui", "DianZan2" ];
      var actNode = new cc.Node();
      this.node.addChild(actNode, 100);
      actNode.setPosition(cc.v2(this.m_startPoint.x, this.m_startPoint.y));
      actNode.addComponent(cc.Sprite);
      actNode.active = true;
      actNode.getComponent(cc.Sprite).spriteFrame = this.SpriteAssets[this.m_nPropertyId];
      var self = this;
      var playeAnimation = function playeAnimation() {
        actNode.removeComponent(cc.Sprite);
        var armatureNode = new cc.Node();
        self.node.addChild(armatureNode, 100);
        armatureNode.setPosition(cc.v2(self.m_endPoint.x, self.m_endPoint.y));
        var dragonDisplay = armatureNode.addComponent(dragonBones.ArmatureDisplay);
        for (var i in self.ArmatAssets[self.m_nPropertyId]) {
          self.ArmatAssets[self.m_nPropertyId][i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = self.ArmatAssets[self.m_nPropertyId][i]);
          self.ArmatAssets[self.m_nPropertyId][i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = self.ArmatAssets[self.m_nPropertyId][i]);
        }
        dragonDisplay.armatureName = "armatureName";
        dragonDisplay.playAnimation(animationArray[self.m_nPropertyId - 1]);
        self.onArmatureFinish = function() {
          self.m_onEnd && "function" == typeof self.m_onEnd && self.m_onEnd();
          armatureNode.destroy();
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, self.onArmatureFinish, self);
        self.dragonDisplay = dragonDisplay;
      };
      var moveTo = cc.moveTo(.7, this.m_endPoint.x, this.m_endPoint.y);
      HallResources.getInstance().playPropertyEffect(self.m_nPropertyId);
      console.log("self.m_nPropertyId========" + self.m_nPropertyId);
      if (1 == this.m_nPropertyId || 4 == this.m_nPropertyId) {
        var rotate = cc.rotateBy(.7, 360);
        var spawn = cc.spawn(moveTo, rotate);
        var callFunc = cc.callFunc(playeAnimation);
        var sequence = cc.sequence(spawn, callFunc);
        actNode.runAction(sequence);
      } else {
        var callFunc = cc.callFunc(playeAnimation);
        var sequence = cc.sequence(moveTo, callFunc);
        actNode.runAction(sequence);
      }
    };
    cc.Class(PropertyAnimationLayer);
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon",
    HallResources: "HallResources"
  } ],
  ProtectScoreLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7010f0lFfZAJbAPRaeuaugS", "ProtectScoreLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var _WeixinManager = require("../../weixin/WeixinManager");
    var Resources = require("Resources");
    var HallResources = require("HallResources");
    var GameCfg = require("GameCfg");
    cc.Class({
      extends: cc.Component,
      properties: {
        protect_share_btn: cc.Button,
        next_game_btn: cc.Button,
        women_icon: cc.Sprite,
        title_icon: cc.Sprite,
        cup_icon: cc.Sprite,
        cup_name: cc.Label,
        richText: cc.RichText,
        protect_score: cc.Label,
        timer_label: cc.Label,
        cancel_protect_btn: cc.Button,
        match_level_star_bg: cc.Node,
        match_level_star: cc.Node,
        level_progressBar: cc.ProgressBar,
        cur_score: cc.Label,
        changeScore: cc.Label,
        protect_score_icon: cc.Node,
        protect_tips2: cc.Sprite,
        richProgressTips: {
          default: null,
          type: cc.Sprite
        },
        richProgress: {
          default: null,
          type: cc.RichText
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.removeCancelBtn = true;
        this.bolShareProtect = true;
        this.node.getChildByName("mask_bg") && this.node.getChildByName("mask_bg").setContentSize(windowSize);
      },
      onEnable: function onEnable() {
        this.show();
        this.playLightAct();
        this.getShareTimes();
        this.setCupAndLevelInfo(this.m_matchScore);
        this.setLevelInfo();
      },
      onDisable: function onDisable() {
        this.unschedule(this.m_waitCallback);
        this.m_onEnd && this.m_onEnd();
      },
      init: function init(sn, score, onEnd, nMatchLevel, nMatchScore, myselfWinOrLoseScore) {
        this.m_totalTime = 25;
        this.m_sn = sn;
        this.m_score = score;
        this.m_thisViewClosed = false;
        this.node.getChildByName("give_up_protect").active = false;
        this.m_onEnd = onEnd;
        this.m_matchLevel = nMatchLevel;
        this.m_matchScore = nMatchScore;
        this.m_myselfWinOrLoseScore = myselfWinOrLoseScore;
        _TSCommon.TSCommon.addEvent(GameCfg.PROTECT_SCORE_SUCCESS, this.onProtectScoreSucceed, this);
      },
      show: function show() {
        var self = this;
        this.m_waitCallback = function() {
          self.m_totalTime -= 1;
          self.m_totalTime < 0 && (self.node.active = false);
          if (22 == self.m_totalTime) {
            self.node.getChildByName("game_back_btn").active = true;
            self.next_game_btn.node.active = true;
          }
          self.timer_label.string = self.m_totalTime;
        }.bind(this);
        this.schedule(this.m_waitCallback, 1, this.m_totalTime, 0);
        this.protect_score.string = this.m_score;
      },
      onShareClicked: function onShareClicked() {
        var self = this;
        if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
          self.requestProtectScore();
          wx.shareAppMessage({
            title: "小手轻轻点，救活你我他！",
            imageUrl: HallResources.protectScoreShareImgUrl
          });
        }
      },
      setLevelInfo: function setLevelInfo() {
        console.log("设定段位信息");
        var divisionID = this.m_matchLevel;
        var curLevelData = HallResources.getInstance().getRankDataById(divisionID);
        var curMaxScore = curLevelData.MaxScore;
        var curMinScore = curLevelData.MinScore;
        var offsetScore = curMaxScore - curMinScore;
        console.log("段位的分数区间为：" + offsetScore);
        var curLevelScore = this.m_matchScore - curMinScore;
        var curPercent = curLevelScore / offsetScore;
        console.log("当前分数的比率为：" + curPercent);
        var starNum = Math.floor(curLevelScore / offsetScore * 3);
        console.log("当前的星数为：" + starNum);
        var preScore = this.m_matchScore - this.m_myselfWinOrLoseScore;
        console.log("之前的段位分数为: " + preScore);
        var preLevelScore = preScore - curMinScore;
        var preRankData = HallResources.getInstance().getRankAndStarByScore(preScore);
        var preStarNum = Math.floor(preLevelScore / offsetScore * 3);
        var prePercent = preLevelScore / offsetScore;
        console.log("之前分数的比率为：" + prePercent);
        console.log("之前的星数为：" + preStarNum);
        var formatNumber = require("Tools").getFormatNumber(preScore);
        formatNumber = formatNumber;
        this.cur_score.string = formatNumber;
        this.m_myselfWinOrLoseScore > 0 ? this.changeScore.string = "+" + this.m_myselfWinOrLoseScore : this.changeScore.string = this.m_myselfWinOrLoseScore;
        var self = this;
        for (var i = 0; i < this.match_level_star.childrenCount; i++) this.match_level_star.children[i].active = false;
        if (preRankData.id == divisionID) {
          self.setCupAndLevelInfo(self.m_matchScore);
          if (starNum > preStarNum) {
            for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
            self.level_progressBar.progress = prePercent;
          } else if (starNum < preStarNum) if (self.m_protectedScoreSucceed) {
            for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
            self.level_progressBar.progress = prePercent;
          } else {
            for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
            self.level_progressBar.progress = prePercent;
          } else {
            for (var i = 0; i < starNum; i++) self.match_level_star.children[i].active = true;
            self.m_protectedScoreSucceed, self.level_progressBar.progress = prePercent;
          }
        } else {
          self.setCupAndLevelInfo(preScore);
          var preLevelData = HallResources.getInstance().getRankDataById(preRankData.id);
          var preMaxScore = preLevelData.MaxScore;
          var preMinScore = preLevelData.MinScore;
          var preOffsetScore = preMaxScore - preMinScore;
          preLevelScore = preScore - preMinScore;
          preStarNum = Math.floor(preLevelScore / preOffsetScore * 3);
          prePercent = preLevelScore / preOffsetScore;
          for (var i = 0; i < preStarNum; i++) self.match_level_star.children[i].active = true;
          self.level_progressBar.progress = prePercent;
        }
        var showResultProgress = function showResultProgress() {
          console.log("之前的段位id为:" + preRankData.id);
          console.log("现在的段位id为：" + divisionID);
          if (self.m_thisViewClosed) return;
          if (preRankData.id == divisionID) if (starNum > preStarNum) {
            var onScrollEnded = function onScrollEnded() {
              self.playJiaxingAction(preStarNum, starNum);
            };
            self.scrollToPercent(prePercent, curPercent, .5, onScrollEnded);
          } else if (starNum < preStarNum) if (self.m_protectedScoreSucceed) self.scrollToPercent(curPercent, prePercent, .5); else {
            var onScrollEnded = function onScrollEnded() {
              self.playDiaoxingAction(preStarNum, starNum);
            };
            self.scrollToPercent(prePercent, curPercent, .5, onScrollEnded);
          } else self.m_protectedScoreSucceed ? self.scrollToPercent(curPercent, prePercent, .5) : self.scrollToPercent(prePercent, curPercent, .5); else {
            var preLevelData = HallResources.getInstance().getRankDataById(preRankData.id);
            var preMaxScore = preLevelData.MaxScore;
            var preMinScore = preLevelData.MinScore;
            var preOffsetScore = preMaxScore - preMinScore;
            preLevelScore = preScore - preMinScore;
            preStarNum = Math.floor(preLevelScore / preOffsetScore * 3);
            prePercent = preLevelScore / preOffsetScore;
            var onScrollEnded = function onScrollEnded() {
              var onPlayActionEnded = function onPlayActionEnded() {
                console.log("加星动画播放完毕");
                if (self.m_showLevelUpgrade) {
                  var onLevelUpgradeViewClose = function onLevelUpgradeViewClose() {
                    self.setCupAndLevelInfo(self.m_matchScore);
                    for (var i = 0; i < self.match_level_star.childrenCount; i++) self.match_level_star.children[i].active = false;
                    self.level_progressBar.progress = 0;
                  };
                  console.log("展示段位升级界面");
                  self.m_showLevelUpgrade(onLevelUpgradeViewClose);
                }
              };
              self.playJiaxingAction(preStarNum, 3, onPlayActionEnded);
            };
            self.scrollToPercent(prePercent, 1, .5, onScrollEnded, true);
          }
        };
        var playProtectScoreAction = function playProtectScoreAction() {
          self.protect_score_icon.active = true;
          self.protect_score_icon.setScale(5);
          var preX = self.protect_score_icon.x;
          var preY = self.protect_score_icon.y;
          self.protect_score_icon.x = self.protect_score_icon.x + 50;
          self.protect_score_icon.y = self.protect_score_icon.y + 50;
          var delay = cc.delayTime(.2);
          var moveTo = cc.moveTo(.1, cc.p(preX, preY));
          var scaleTo = cc.scaleTo(.1, 1);
          var spawn = cc.spawn(moveTo, scaleTo);
          var seq = cc.sequence(delay, spawn);
          self.protect_score_icon.runAction(seq);
        };
        var playChangeScoreAction = function playChangeScoreAction() {
          if (self.m_thisViewClosed) return;
          if (0 == self.m_myselfWinOrLoseScore) {
            self.changeScore.string = "";
            return;
          }
          var playActionTime = .5;
          var deltaScore = Math.abs(self.m_myselfWinOrLoseScore);
          var changed = Math.floor(85 / 2400 * deltaScore);
          self.m_myselfWinOrLoseScore <= 0 && (changed *= -1);
          var deltaTime = playActionTime / (deltaScore / Math.abs(changed));
          var calcScore = preScore;
          var calcChangeScore = self.m_myselfWinOrLoseScore;
          self.scoreChangeTimer = function() {
            if (self.m_thisViewClosed) return;
            calcScore += changed;
            calcChangeScore -= changed;
            if (changed > 0 && calcScore > self.m_matchScore || changed < 0 && calcScore < self.m_matchScore) {
              self.cur_score.string = require("Tools").getFormatNumber(self.m_matchScore);
              self.changeScore.string = 0;
              _TSCommon.TSCommon.performWithDelay(self, function() {
                self.changeScore.node.active = false;
              }, .1);
              self.unschedule(self.scoreChangeTimer);
              return;
            }
            self.cur_score.string = calcScore;
            self.changeScore.string = calcChangeScore;
          }.bind(self);
          self.schedule(self.scoreChangeTimer, deltaTime, cc.macro.REPEAT_FOREVER, 0);
        };
        if (this.m_myselfWinOrLoseScore <= 0) {
          this.changeScore.font = this.lose_score_font;
          if (self.m_protectedScoreSucceed) {
            playProtectScoreAction();
            self.changeScore.node.active = false;
          } else _TSCommon.TSCommon.performWithDelay(this, function() {
            playChangeScoreAction();
            showResultProgress();
          }.bind(this), 1);
        }
      },
      scrollToPercent: function scrollToPercent(prePercent, curPercent, scrollTime, onEnd, bolLeaveUp) {
        console.log("滑动时之前比率为：" + prePercent);
        console.log("滑动时当前比率为：" + curPercent);
        var deltaScroll = (curPercent - prePercent) / (100 * scrollTime);
        var self = this;
        Resources.playCommonEffect("moveProgress.mp3");
        var nextLevel = self.m_matchLevel;
        var toNextPercent = 1 - curPercent;
        if (bolLeaveUp) {
          nextLevel = self.m_matchLevel + 1;
          toNextPercent = 1;
        }
        if (nextLevel <= 20) {
          var preLevelData = HallResources.getInstance().getRankDataById(nextLevel);
          var preMaxScore = preLevelData.MaxScore;
          var preMinScore = preLevelData.MinScore;
          var preOffsetScore = preMaxScore - preMinScore;
          var needProgress = parseInt(preOffsetScore * toNextPercent);
          self.richProgress.string = "<color=#42130a>您当前还差</color><color=#e72c07>" + needProgress + "</color><color=#42130a>积分晋级</color>";
        }
        this.setProgress = function() {
          if (self.m_thisViewClosed) return;
          if (deltaScroll > 0 && prePercent > curPercent || deltaScroll < 0 && prePercent < curPercent) {
            onEnd && onEnd();
            self.unschedule(self.setProgress);
            return;
          }
          prePercent += deltaScroll;
          self.level_progressBar.progress = prePercent;
        }.bind(this);
        this.schedule(this.setProgress, scrollTime / (100 * scrollTime), cc.macro.REPEAT_FOREVER, 0);
      },
      onDestroy: function onDestroy() {
        this.m_protectedScoreSucceed = false;
        this.m_thisViewClosed = true;
        this.unschedule(this.setProgress);
        this.unschedule(this.scoreChangeTimer);
        _TSCommon.TSCommon.removeEvent(GameCfg.PROTECT_SCORE_SUCCESS, this.onProtectScoreSucceed, this);
        this.m_jiaxingdragonDisplay && this.m_jiaxingdragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.onPlayJiaxingFinished, this);
        this.m_diaoxingdragonDisplay && this.m_diaoxingdragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.onPlayDiaoxingFinished, this);
      },
      onProtectScoreSucceed: function onProtectScoreSucceed() {
        console.log("监听到保分成功");
        this.m_protectedScoreSucceed = true;
      },
      playJiaxingAction: function playJiaxingAction(preStarNum, starNum, onEnd) {
        if (starNum <= preStarNum) return;
        var self = this;
        cc.loader.loadResDir("animation/dragonBones/dh_jiaxing", function(err, assets) {
          if (!err) {
            self.jiaxingAssets = assets;
            var tmpStarNum = preStarNum;
            var playStarAction = function playStarAction(stars) {
              var actNode = new cc.Node();
              var dragonDisplay = actNode.addComponent(dragonBones.ArmatureDisplay);
              for (var i in self.jiaxingAssets) {
                self.jiaxingAssets[i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = self.jiaxingAssets[i]);
                self.jiaxingAssets[i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = self.jiaxingAssets[i]);
              }
              dragonDisplay.armatureName = "armatureName";
              dragonDisplay.playAnimation("shengxing");
              self.onPlayJiaxingFinished = function() {
                Resources.playCommonEffect("addStar.mp3");
                self.match_level_star.children[stars].active = true;
                actNode.destroy();
                stars + 1 < starNum ? playStarAction(stars + 1) : onEnd && onEnd();
              };
              dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, self.onPlayJiaxingFinished, self);
              self.m_jiaxingdragonDisplay = dragonDisplay;
              self.match_level_star_bg.children[stars].addChild(actNode);
            };
            playStarAction(tmpStarNum);
          }
        });
      },
      playDiaoxingAction: function playDiaoxingAction(preStarNum, starNum, onEnd) {
        if (starNum >= preStarNum) return;
        var self = this;
        cc.loader.loadResDir("animation/dragonBones/dh_diaoxing", function(err, assets) {
          if (!err) {
            self.diaoxingAssets = assets;
            var tmpStarNum = preStarNum;
            var playStarAction = function playStarAction(stars) {
              var actNode = new cc.Node();
              var dragonDisplay = actNode.addComponent(dragonBones.ArmatureDisplay);
              for (var i in self.diaoxingAssets) {
                self.diaoxingAssets[i] instanceof dragonBones.DragonBonesAsset && (dragonDisplay.dragonAsset = self.diaoxingAssets[i]);
                self.diaoxingAssets[i] instanceof dragonBones.DragonBonesAtlasAsset && (dragonDisplay.dragonAtlasAsset = self.diaoxingAssets[i]);
              }
              dragonDisplay.armatureName = "armatureName";
              dragonDisplay.playAnimation("diaoxing");
              self.onPlayDiaoxingFinished = function() {
                Resources.playCommonEffect("removeStar.mp3");
                self.match_level_star.children[stars - 1].active = false;
                actNode.destroy();
                stars - 1 > starNum ? playStarAction(stars - 1) : onEnd && onEnd();
              };
              dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, self.onPlayDiaoxingFinished, self);
              self.m_diaoxingdragonDisplay = dragonDisplay;
              self.match_level_star.children[stars - 1].addChild(actNode);
            };
            playStarAction(tmpStarNum);
          }
        });
      },
      setCupAndLevelInfo: function setCupAndLevelInfo(score) {
        var self = this;
        var data = HallResources.getInstance().getRankAndStarByScore(score);
        cc.loader.loadRes("texture/hallRes/qualifyingCup/cup" + data.cup, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.cup_icon.spriteFrame = spriteFrame);
        });
        var nextName = data.rankName;
        this.cup_name.string = nextName;
      },
      requestProtectScore: function requestProtectScore() {
        var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
        var self = this;
        var httpCallback = function httpCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            console.log("分享保分 ---------jsonObject --------");
            console.log(jsonObject);
            var nRetCode = parseInt(jsonObject.RetCode);
            if (1 == nRetCode) {
              _TSCommon.TSCommon.dispatchEvent(GameCfg.PROTECT_SCORE_SUCCESS, null);
              self.bolShareProtect ? Resources.showRewardTips("分享成功", true, true, true) : Resources.showRewardTips("您分享保分的机会已经用尽", true, true, true);
              cc.loader.loadRes("texture/game/matchResult/protect_success_title", cc.SpriteFrame, function(err, spriteFrame) {
                err || (self.title_icon.spriteFrame = spriteFrame);
              });
              cc.loader.loadRes("texture/game/protectScore/protect_girl_img2", cc.SpriteFrame, function(err, spriteFrame) {
                err || (self.women_icon.spriteFrame = spriteFrame);
              });
              self.playJinBiAct();
              self.removeCancelBtn = false;
              self.cancel_protect_btn.node.active = false;
              self.protect_score.node.active = false;
              self.protect_share_btn.node.active = false;
              self.next_game_btn.node.active = true;
              self.richProgressTips.node.active = true;
              self.richText.node.active = false;
              self.protect_tips2.node.active = false;
              self.init(self.m_sn, self.m_score, self.m_onEnd, self.m_matchLevel, self.m_matchScore, self.m_myselfWinOrLoseScore);
              self.setLevelInfo();
            } else 12 == nRetCode ? Resources.showRewardTips("分享次数已经达到上限", true, true, true) : 13 == nRetCode ? Resources.showRewardTips("该群已分享过一次，请选择其他群进行分享", true, true, true) : console.log("未对应的错误码错误");
          }
        };
        require("HallWebRequest").getInstance().getProtectScoreShareReward(this.m_sn, this.m_score, myOpenId, httpCallback);
      },
      playJinBiAct: function playJinBiAct() {
        var self = this;
        Resources.playCommonEffect("jinbiyu.mp3");
        var whosTurnNode = this.node.getChildByName("jinbiyu_act");
        var strAniName = "jinbiyu";
        whosTurnNode.active = true;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName, 1);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      getShareTimes: function getShareTimes() {
        var self = this;
        var onRetCallback = function onRetCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            var hasTimes = jsonObject.TotalTimes - jsonObject.CurTimes;
            self.richText.string = "<color=#ffffff>您还有</color><color=#e72c07>" + hasTimes + "</color><color=#ffffff>次拯救我的机会</color>";
            if (parseInt(jsonObject.CurTimes) >= parseInt(jsonObject.TotalTimes)) {
              self.bolShareProtect = false;
              cc.loader.loadRes("texture/game/gameOver/shareToGroup", cc.SpriteFrame, function(error, spriteframe) {
                error || (self.protect_share_btn.node.getComponent(cc.Sprite).spriteFrame = spriteframe);
              });
            }
          }
        };
        require("HallWebRequest").getInstance().getProtectScoreNum(onRetCallback);
      },
      playLightAct: function playLightAct() {
        var self = this;
        var whosTurnNode = this.node.getChildByName("protect_act");
        var strAniName = "btn_fenxiang";
        whosTurnNode.active = true;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName, 1);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      onResumeGameClicked: function onResumeGameClicked() {
        this.node.active = false;
      },
      onNextClicked: function onNextClicked() {
        this.m_onEnd = null;
        G.matchGameReady = true;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      },
      onLeaveGameClicked: function onLeaveGameClicked() {
        this.m_onEnd = null;
        G.goldGameReady = null;
        G.matchGameReady = null;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../weixin/WeixinManager": "WeixinManager",
    GameCfg: "GameCfg",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources",
    Tools: "Tools"
  } ],
  PublicUserInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "10f9aYQiH1MZ6SPLMzJaAAT", "PublicUserInfo");
    "use strict";
    var PublicUserInfo = cc.Class({
      ctor: function ctor() {
        this.userDBID = 39373906;
        this.nDiamond = 0;
        this.nickName = "";
        this.nFaceID = 0;
        this.encryptPassword = "e10adc3949ba59abbe56e057f20f883e";
        this.faceData = null;
        this.email = "";
        this.sex = 1;
        this.nGold = 0;
        this.vipLevel = 0;
        this.nFrag = 0;
        this.bankAmount = 0;
        this.payAmount = 0;
        this.code = 0;
        this.myCode = 0;
        this.recommandID = 0;
        this.recommandName = "";
        this.bindSendDiamond = 0;
        this.paySendDiamond = 0;
        this.agentPop = 0;
        this.nRoomCard = 0;
        this.userWords = "";
        this.payLimit = 1;
        this.sBindPhone = "";
        this.nBeanAmount = 0;
        this.nLoveliness = 0;
        this.tableBoardInfo = null;
        this.isNewUser = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  RangeCardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0193UoVhFLP6SXUSiB3k4g", "RangeCardLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var Resources = require("Resources");
    var GameDefs = require("GameDefs");
    var GameCfg = require("GameCfg");
    var Res;
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        _TSCommon.TSCommon.addEvent(GameCfg.selectedMj, this.onSelectedMj, this);
        _TSCommon.TSCommon.addEvent(GameCfg.unSelectedMj, this.onUnSelectedMj, this);
      },
      onDestroy: function onDestroy() {
        _TSCommon.TSCommon.removeEvent(GameCfg.selectedMj, this.onSelectedMj, this);
        _TSCommon.TSCommon.removeEvent(GameCfg.unSelectedMj, this.onUnSelectedMj, this);
      },
      init: function init(weaveKind, weaveItem, nPos, spriteFrame) {
        this.weaveKind = weaveKind;
        this.weaveItem = weaveItem;
        this.nPos = nPos;
        this.spriteFrame = spriteFrame;
        this.doCards();
      },
      onSelectedMj: function onSelectedMj(event) {
        var mjValue = event.data;
        for (var i = 0; i < 4; i++) this.node.children[i].active && this.node.children[i].cardValue == mjValue && (this.node.children[i].color = new cc.Color(150, 150, 227));
      },
      onUnSelectedMj: function onUnSelectedMj(event) {
        for (var i = 0; i < 4; i++) this.node.children[i].active && (this.node.children[i].color = new cc.Color(255, 255, 255));
      },
      getSpriteFrameNameByMjValueAndPos: function getSpriteFrameNameByMjValueAndPos(mjValue, nPos) {
        var foreName = null;
        var name = null;
        1 == nPos || 3 == nPos ? foreName = "hh_dao_" : 2 == nPos ? foreName = "hh_suit_y_" : 4 == nPos && (foreName = "hh_suit_z_");
        return Resources.get_frameName(foreName, mjValue);
      },
      getSpriteSpriteFrameByNameAndPos: function getSpriteSpriteFrameByNameAndPos(name, nPos) {
        return this.spriteFrame.getSpriteFrame(name);
      },
      addLaiziOrLaizipiIcon: function addLaiziOrLaizipiIcon(mjNode, mjValue) {
        mjNode.removeAllChildren();
        var Canvas = cc.director.getScene().getChildByName("Canvas");
        var MjResourceMgr = Canvas.getComponent("MjResourceMgr");
        mjNode.removeAllChildren();
      },
      doCards: function doCards() {
        if (this.weaveKind == GameDefs.WeaveType.Peng || this.weaveKind == GameDefs.WeaveType.ShunLeft || this.weaveKind == GameDefs.WeaveType.ShunMid || this.weaveKind == GameDefs.WeaveType.ShunRight) for (var i = 0; i < 4; i++) {
          if (3 == i) {
            this.node.children[i].active = false;
            break;
          }
          this.node.children[i].active = true;
          var name = this.getSpriteFrameNameByMjValueAndPos(this.weaveItem[i], this.nPos);
          this.node.children[i].getComponent(cc.Sprite).spriteFrame = this.getSpriteSpriteFrameByNameAndPos(name, this.nPos);
          this.node.children[i].cardValue = this.weaveItem[i];
          this.addLaiziOrLaizipiIcon(this.node.children[i], this.weaveItem[i]);
        } else if (this.weaveKind == GameDefs.WeaveType.MingGang || this.weaveKind == GameDefs.WeaveType.XuGang || this.weaveKind == GameDefs.WeaveType.AnGang) for (var i = 0; i < 4; i++) {
          this.node.children[i].active = true;
          var name = this.getSpriteFrameNameByMjValueAndPos(this.weaveItem[i], this.nPos);
          this.node.children[i].getComponent(cc.Sprite).spriteFrame = this.getSpriteSpriteFrameByNameAndPos(name, this.nPos);
          this.node.children[i].cardValue = this.weaveItem[i];
          this.addLaiziOrLaizipiIcon(this.node.children[i], this.weaveItem[i]);
        }
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs",
    Resources: "Resources"
  } ],
  RankGroupLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b08c7vQQ5A7JhS+HCkXNC1", "RankGroupLayer");
    "use strict";
    var RankGroupListLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        if (cc.rectContainsPoint(rect, locationInNode)) ; else {
          this.node.active = false;
          wx.postMessage({
            message: "5",
            ticket: "",
            openid: ""
          });
        }
      },
      initData: function initData(data) {},
      onClickCloseBtn: function onClickCloseBtn() {
        require("HallResources").getInstance().playCloseEffect();
        this.node.active = false;
        wx.postMessage({
          message: "5",
          ticket: "",
          openid: ""
        });
      },
      onClickChangeGroupBtn: function onClickChangeGroupBtn() {
        var self = this;
        self.node.parent.parent.getComponent("HallPlatformInfo").onClickOpenGroupBtn();
      }
    });
    module.exports = RankGroupListLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources"
  } ],
  RankLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ffa48RfK+9PSbDxYj/BT23p", "RankLayer");
    "use strict";
    var RankExtendedListLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        if (cc.rectContainsPoint(rect, locationInNode)) ; else {
          this.node.active = false;
          this.node.parent.parent.getComponent("HallPlatformInfo").onClickExtendedBtn();
        }
      },
      initData: function initData(data, myOpenId) {}
    });
    module.exports = RankExtendedListLayer;
    cc._RF.pop();
  }, {} ],
  Resources: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e14dbUBCZFMM5BvvO9D7MLa", "Resources");
    "use strict";
    var _gamelibcommon = require("../gamelib/gamelibcommon");
    var Resources = {};
    Resources.FACE_EFFECT = [ "face_1_xiao.mp3", "face_2_hehe.mp3", "face_3_biaoyang.mp3", "face_4_qiushen.mp3", "face_5_shengqi.mp3", "face_6_ku.mp3" ];
    Resources.QUICK_SEND_CHATS = [ "快嘀嘎撒，你枪摸儿", "你机二火太好打咧", "打耸过摸耸过，我要滴字就认摸不倒", "机二火好好，乱打乱来", "你列是耸过破网拉，又断线打", "都趁打几个癞字，小心被别个捉斗打列" ];
    Resources.FACE_CHAT_MAX_NUM = 25;
    Resources.WORDS_CHAT_MAX_NUM = 10;
    Resources.VIP_FACE_CHAT_MAX_NUM = 20;
    Resources.IS_PUTONG = true;
    Resources.OPERATE_CHI = 0;
    Resources.OPERATE_PENG = 1;
    Resources.OPERATE_GANG = 2;
    Resources.OPERATE_HU = 3;
    Resources.OPERATE_ZIMO = 4;
    Resources.OPERATE_CHAOTIAN = 5;
    Resources.TOAST_TAG = 1e3;
    Resources.GOLD_TAG = 1001;
    Resources.getIsFangYan = function() {
      var luange = cc.sys.localStorage.getItem("fangyan") || 0;
      luange = parseInt(luange);
      return luange;
    };
    Resources.getOneRandom = function(nRandomMax) {
      var nRand = Math.floor(Math.random() * (nRandomMax - 1));
      return nRand;
    };
    Resources.getMjSoundEffectUrl = function(sex, mjValue) {
      var url;
      url = Resources.getIsFangYan() ? sex == _gamelibcommon.gamelibcommon.SX_BOY ? "resources/sound/game/fangyan/boy/tile/" + mjValue + ".mp3" : "resources/sound/game/fangyan/girl/tile/" + mjValue + ".mp3" : sex == _gamelibcommon.gamelibcommon.SX_BOY ? "resources/sound/game/putong/boy/tile/" + mjValue + ".mp3" : "resources/sound/game/putong/girl/tile/" + mjValue + ".mp3";
      return cc.url.raw(url);
    };
    Resources.getOperateSoundEffectUrl = function(sex, operateIndex, randIndex) {
      var url;
      var operateName;
      operateIndex == Resources.OPERATE_CHI ? operateName = "eat" : operateIndex == Resources.OPERATE_GANG ? operateName = "gang" : operateIndex == Resources.OPERATE_HU ? operateName = "he" : operateIndex == Resources.OPERATE_PENG ? operateName = "peng" : operateIndex == Resources.OPERATE_ZIMO && (operateName = "zimo");
      url = Resources.getIsFangYan() ? sex == _gamelibcommon.gamelibcommon.SX_BOY ? "resources/sound/game/fangyan/boy/" + operateName + "/" + randIndex + ".mp3" : "resources/sound/game/fangyan/girl/" + operateName + "/" + randIndex + ".mp3" : sex == _gamelibcommon.gamelibcommon.SX_BOY ? "resources/sound/game/putong/boy/" + operateName + "/" + randIndex + ".mp3" : "resources/sound/game/putong/girl/" + operateName + "/" + randIndex + ".mp3";
      return cc.url.raw(url);
    };
    Resources.getQWSoundEffectUrl = function(sex, quickWord) {
      var url;
      quickWord = parseInt(quickWord);
      url = sex == _gamelibcommon.gamelibcommon.SX_BOY ? "resources/sound/game/qw/boy/" + quickWord + ".mp3" : "resources/sound/game/qw/girl/" + quickWord + ".mp3";
      return cc.url.raw(url);
    };
    Resources.playMjSoundEffect = function(sex, mjValue) {
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = Resources.getMjSoundEffectUrl(sex, mjValue);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.playQWSoundEffect = function(sex, quickWord) {
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = Resources.getQWSoundEffectUrl(sex, quickWord);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.playGangEffect = function(sex, randIndex) {
      randIndex = randIndex || 0;
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = Resources.getOperateSoundEffectUrl(sex, Resources.OPERATE_GANG, randIndex);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.playPengEffect = function(sex, randIndex) {
      randIndex = randIndex || 0;
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = Resources.getOperateSoundEffectUrl(sex, Resources.OPERATE_PENG, randIndex);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.playChiEffect = function(sex, randIndex) {
      randIndex = randIndex || 0;
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = Resources.getOperateSoundEffectUrl(sex, Resources.OPERATE_CHI, randIndex);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.playHuEffect = function(sex, randIndex) {
      randIndex = randIndex || 0;
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = Resources.getOperateSoundEffectUrl(sex, Resources.OPERATE_HU, randIndex);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.PlayZiMoEffect = function(sex, randIndex) {
      randIndex = randIndex || 0;
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = Resources.getOperateSoundEffectUrl(sex, Resources.OPERATE_ZIMO, randIndex);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.playCommonEffect = function(effectName) {
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = cc.url.raw("resources/sound/game/common/" + effectName);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.playFaceEffect = function(faceEffectName) {
      if (parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0)) {
        var audioUrl = cc.url.raw("resources/sound/game/face/" + faceEffectName);
        cc.audioEngine.play(audioUrl);
      }
    };
    Resources.formatGold = function(gold, remaindot) {
      if (Math.abs(gold) < 1e5) return gold;
      if (Math.abs(gold) >= 1e5 && Math.abs(gold) < 1e8) {
        if (remaindot) {
          var leftNum = gold % 1e4;
          if (0 == leftNum) {
            var retGold = Math.floor(gold / 1e4) + "万";
            return retGold;
          }
          gold /= 1e4;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        gold /= 1e4;
        var retGold = Math.floor(10 * gold) / 10 + "万";
        return retGold;
      }
      if (Math.abs(gold) >= 1e8 && Math.abs(gold) <= 2e9) {
        if (remaindot) {
          var leftNum = gold % 1e8;
          if (0 == leftNum) {
            var retGold = Math.floor(gold / 1e8) + "亿";
            return retGold;
          }
          gold /= 1e8;
          var retGold = Math.floor(10 * gold) / 10 + "万";
          return retGold;
        }
        gold /= 1e8;
        var retGold = Math.floor(10 * gold) / 10 + "万";
        return retGold;
      }
      if (Math.abs(gold) <= 1e11) var retGold = Math.floor(gold / 1e8) + "亿";
      if (remaindot) return "无限";
    };
    Resources.get_frameName = function(foreName, mjValue) {
      var name;
      if (mjValue < 27) {
        var type = Math.floor(mjValue / 9) + 1;
        var value = mjValue % 9 + 1;
        name = foreName + type + "_" + value;
      } else 27 == mjValue ? name = foreName + "zhong" : 28 == mjValue ? name = foreName + "fa" : 29 == mjValue ? name = foreName + "bai" : 30 == mjValue ? name = foreName + "dong" : 31 == mjValue ? name = foreName + "nan" : 32 == mjValue ? name = foreName + "xi" : 33 == mjValue && (name = foreName + "bei");
      return name;
    };
    Resources.ShowToast = function(msg, isFlyUp) {
      var scene = cc.director.getScene();
      if (scene.getChildByTag(Resources.TOAST_TAG)) return;
      var winSize = cc.director.getWinSize();
      var toastNode = new cc.Node();
      var toastSprite = toastNode.addComponent(cc.Sprite);
      cc.loader.loadRes("texture/game/toast", cc.SpriteFrame, function(err, spriteFrame) {
        err || (toastSprite.spriteFrame = spriteFrame);
      });
      toastSprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
      var tipsNode = new cc.Node();
      var tipsLabel = tipsNode.addComponent(cc.Label);
      tipsLabel.string = msg;
      tipsLabel.fontSize = 25;
      toastNode.addChild(tipsNode);
      var delayTime = cc.delayTime(1);
      var fadeOut = cc.fadeOut(2);
      var moveBy = cc.moveBy(1, 0, 30);
      var onEnd = cc.callFunc(function() {
        toastNode.stopAction();
        toastNode.removeFromParent(true);
      });
      var sequence;
      if (isFlyUp) {
        var spawn = cc.spawn(fadeOut, moveBy);
        sequence = cc.sequence(delayTime, spawn, onEnd);
      } else sequence = cc.sequence(delayTime, fadeOut, onEnd);
      toastNode.runAction(sequence);
      toastNode.x = winSize.width / 2;
      toastNode.y = winSize.height / 2;
      scene.addChild(toastNode, 1, Resources.TOAST_TAG);
      toastNode.width = tipsNode.width + 10;
      toastNode.height = tipsNode.height + 10;
      tipsNode.x = 0;
      tipsNode.y = -5;
    };
    Resources.showRewardTips = function(msg, isFlyUp, isDiamond, isOnlyShowText) {
      var scene = cc.director.getScene();
      if (scene.getChildByTag(Resources.GOLD_TAG)) return;
      var winSize = cc.director.getWinSize();
      var toastNode = new cc.Node();
      var toastSprite = toastNode.addComponent(cc.Sprite);
      cc.loader.loadRes("texture/commonRes/commontipsBg", cc.SpriteFrame, function(err, spriteFrame) {
        err || (toastSprite.spriteFrame = spriteFrame);
      });
      var iconNode = new cc.Node();
      var iconSprite = iconNode.addComponent(cc.Sprite);
      isDiamond ? cc.loader.loadRes("texture/commonRes/money/diamondCoin", cc.SpriteFrame, function(err, spriteFrame) {
        err || (iconSprite.spriteFrame = spriteFrame);
      }) : cc.loader.loadRes("texture/commonRes/money/goldCoin", cc.SpriteFrame, function(err, spriteFrame) {
        err || (iconSprite.spriteFrame = spriteFrame);
      });
      iconNode.anchorX = 1;
      iconNode.x = -8;
      var tipsNode = new cc.Node();
      var tipsLabel = tipsNode.addComponent(cc.Label);
      tipsLabel.string = msg;
      tipsLabel.fontSize = 30;
      tipsNode.anchorX = 0;
      if (isOnlyShowText) {
        tipsNode.anchorX = .5;
        tipsNode.x = 0;
        tipsNode.y = -5;
        toastNode.addChild(tipsNode);
      } else {
        tipsNode.x = 8;
        tipsNode.y = -5;
        toastNode.addChild(iconNode);
        toastNode.addChild(tipsNode);
      }
      var delayTime = cc.delayTime(1);
      var fadeOut = cc.fadeOut(2);
      var moveBy = cc.moveBy(1, 0, 30);
      var onEnd = cc.callFunc(function() {
        toastNode.stopAction();
        toastNode.removeFromParent(true);
      });
      var sequence;
      if (isFlyUp) {
        var spawn = cc.spawn(fadeOut, moveBy);
        sequence = cc.sequence(delayTime, spawn, onEnd);
      } else sequence = cc.sequence(delayTime, fadeOut, onEnd);
      toastNode.runAction(sequence);
      toastNode.x = winSize.width / 2;
      toastNode.y = winSize.height / 2;
      scene.addChild(toastNode, 1, Resources.GOLD_TAG);
    };
    module.exports = Resources;
    cc._RF.pop();
  }, {
    "../gamelib/gamelibcommon": "gamelibcommon"
  } ],
  RoomTypeList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ab708FWVrxK5I9s3VL9l8It", "RoomTypeList");
    "use strict";
    var HallResources = require("HallResources");
    var RoomTypeList = cc.Class({
      extends: cc.Component,
      properties: {
        roomType1: {
          default: null,
          type: cc.Button
        },
        roomType2: {
          default: null,
          type: cc.Button
        },
        roomType3: {
          default: null,
          type: cc.Button
        },
        roomType1Score: {
          default: null,
          type: cc.Label
        },
        roomType2Score: {
          default: null,
          type: cc.Label
        },
        roomType3Score: {
          default: null,
          type: cc.Label
        },
        roomType1Gold: {
          default: null,
          type: cc.Label
        },
        roomType2Gold: {
          default: null,
          type: cc.Label
        },
        roomType3Gold: {
          default: null,
          type: cc.Label
        },
        roomType1PlayerCount: {
          default: null,
          type: cc.Label
        },
        roomType2PlayerCount: {
          default: null,
          type: cc.Label
        },
        roomType3PlayerCount: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        this.content = this.node.getComponent(cc.ScrollView).content;
        var xinshouNode = this.roomType1.node.getChildByName("xinshou_act");
        var dragonDisplay = xinshouNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("xinshouchang");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        var zhongjiNode = this.roomType2.node.getChildByName("zhongji_act");
        var dragonDisplay = zhongjiNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("zhongjichang");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
        var gaojiNode = this.roomType3.node.getChildByName("gaoji_act");
        var dragonDisplay = gaojiNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation("gaojichang");
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      onClickButton: function onClickButton(pSender, index) {
        require("HallResources").getInstance().playButtonEffect();
        var gameInfo = this.gameList[index];
        var pRoomList = require("HallResources").getInstance().enterGameRoomBeanByStaionName(gameInfo.szStationName);
        HallResources.recordPlayerLogToServer(HallResources.recordList.enter_room);
      },
      showRoomList: function showRoomList(gameList) {
        var gameLibSink = require("GameLibSink").getInstance();
        var gameLib = gameLibSink.getGameLib();
        this.gameList = gameList;
        var sortFunction = function sortFunction(stStation1, stStation2) {
          return stStation1.dwRuleID - stStation2.dwRuleID;
        };
        this.gameList.sort(sortFunction);
        this.roomType3.node.active = false;
        this.roomType2.node.active = false;
        this.roomType1.node.active = false;
        if (gameList.length > 2) {
          this.roomType3.node.active = true;
          this.roomType3PlayerCount.string = gameLib.getStationOnlineCount(gameList[2].dwStationID);
        }
        if (gameList.length > 1) {
          this.roomType2.node.active = true;
          this.roomType2PlayerCount.string = gameLib.getStationOnlineCount(gameList[1].dwStationID);
        }
        if (gameList.length > 0) {
          this.roomType1.node.active = true;
          this.roomType1PlayerCount.string = gameLib.getStationOnlineCount(gameList[0].dwStationID);
        }
      }
    });
    cc._RF.pop();
  }, {
    GameLibSink: "GameLibSink",
    HallResources: "HallResources"
  } ],
  ScoreParser: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f825kIy39FlbxX/9uLERFA", "ScoreParser");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../../TSCommon");
    var ByteArray_1 = require("../../common/ByteArray");
    var tagScoreColumnDesc = function() {
      function tagScoreColumnDesc() {
        this.cbLength = 0;
      }
      tagScoreColumnDesc.prototype.GetLength = function() {
        return 19;
      };
      tagScoreColumnDesc.prototype.Deserialize = function(buf, nOffset) {
        buf.position = nOffset;
        this.cbLength = buf.readUnsignedByte();
        this.cbScoreField = buf.readUnsignedByte();
        this.cbDataType = buf.readUnsignedByte();
        var sz = new ByteArray_1.ByteArray();
        buf.readBytes(sz, 0, 16);
        sz.position = 0;
        this.szDesc = TSCommon_1.TSCommon.readGbkString(sz, 16);
        return true;
      };
      return tagScoreColumnDesc;
    }();
    exports.tagScoreColumnDesc = tagScoreColumnDesc;
    var ScoreColumnDetailInfo = function() {
      function ScoreColumnDetailInfo() {
        this.column = new tagScoreColumnDesc();
        this.dwOffset = 0;
      }
      return ScoreColumnDetailInfo;
    }();
    exports.ScoreColumnDetailInfo = ScoreColumnDetailInfo;
    var ScoreParser = function() {
      function ScoreParser() {
        this._pHeader = new ByteArray_1.ByteArray();
        this._nHeaderLen = 0;
        this._nScoreBufLen = 0;
        this._bInitialized = false;
      }
      ScoreParser.getInstance = function() {
        null == this._instance && (this._instance = new ScoreParser());
        return this._instance;
      };
      ScoreParser.prototype.GetScoreField = function(lpScoreBuffer, nField, lpScore) {
        var nMaxLen = lpScore.length;
        var nBufLen = lpScoreBuffer.length;
        if (0 == this._nScoreBufLen || 0 == this._nHeaderLen) return false;
        if (nBufLen <= 0) return false;
        if (nBufLen != this._nScoreBufLen) {
          TSCommon_1.TSCommon.log("ScoreParser:getScoreField(),nBufLen != _nScoreBufLen");
          return false;
        }
        var info = this._mapHeaders[nField];
        if (null == info) return false;
        if (nMaxLen < info.column.cbLength) return false;
        lpScore.position = 0;
        lpScore.writeBytes(lpScoreBuffer, info.dwOffset, nMaxLen);
        lpScore.position = 0;
        return true;
      };
      ScoreParser.prototype.getScoreFieldInt = function(lpScoreBuffer, Field) {
        var nRetVal = -1;
        var byRetVal = new ByteArray_1.ByteArray();
        byRetVal.length = 4;
        if (!this.GetScoreField(lpScoreBuffer, Field, byRetVal)) return nRetVal;
        byRetVal.position = 0;
        nRetVal = byRetVal.readInt();
        return nRetVal;
      };
      ScoreParser.prototype.getScoreHeader = function() {
        if (this._nHeaderLen <= 0) return null;
        var btRet = new ByteArray_1.ByteArray();
        btRet.writeBytes(this._pHeader, 0, this._nHeaderLen);
        return btRet;
      };
      ScoreParser.prototype.setScoreHeader = function(lpScoreHeader) {
        this._bInitialized = false;
        var nLen = lpScoreHeader.length;
        if (nLen <= 0) return false;
        var descTemp = new tagScoreColumnDesc();
        var descLen = descTemp.GetLength();
        if (nLen % descLen != 0) return false;
        this._nHeaderLen = nLen;
        this._pHeader.position = 0;
        this._pHeader.writeBytes(lpScoreHeader);
        this._mapHeaders = new Array();
        var nColumnCount = this._nHeaderLen / descLen;
        this._nScoreBufLen = 0;
        var nOffSet = 0;
        for (var i = 0; i < nColumnCount; i++) {
          var desc = new ScoreColumnDetailInfo();
          desc.column.Deserialize(this._pHeader, nOffSet);
          nOffSet += desc.column.GetLength();
          desc.dwOffset = this._nScoreBufLen;
          this._nScoreBufLen += desc.column.cbLength;
          var nKey = desc.column.cbScoreField;
          this._mapHeaders[nKey] = desc;
        }
        this._bInitialized = true;
        return true;
      };
      ScoreParser.prototype.IsInitialized = function() {
        return this._bInitialized;
      };
      ScoreParser.enScore_Score = 0;
      ScoreParser.enScore_Win = 1;
      ScoreParser.enScore_Loss = 2;
      ScoreParser.enScore_Draw = 3;
      ScoreParser.enScore_Flee = 4;
      ScoreParser.enScore_SetCount = 5;
      ScoreParser.enScore_Custom = 16;
      ScoreParser.enScore_Gold = 17;
      ScoreParser.enScore_Tax = 18;
      ScoreParser.enScore_Ranking = 19;
      return ScoreParser;
    }();
    exports.ScoreParser = ScoreParser;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray"
  } ],
  SeasonLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "813a3+xIXVDtaP8sRZBdOUO", "SeasonLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var _WeixinManager = require("../weixin/WeixinManager");
    var HallResources = require("HallResources");
    var Tools = require("Tools");
    var SeasonLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        cupBg: {
          default: null,
          type: cc.Node
        },
        nowRankPrefab: {
          default: null,
          type: cc.Prefab
        },
        otherRankPrefab: {
          default: null,
          type: cc.Prefab
        },
        nextLevelLabel: {
          default: null,
          type: cc.Label
        },
        progressBar: {
          default: null,
          type: cc.ProgressBar
        },
        progressValueLabel: {
          default: null,
          type: cc.Label
        },
        levelNowSeasonLabel: {
          default: null,
          type: cc.Label
        },
        rewardLabel: {
          default: null,
          type: cc.Label
        },
        getRewardBtn: {
          default: null,
          type: cc.Button
        },
        getRewardGrayBtn: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      initData: function initData(rankScore, allRankData, seasonStartTime, seasonEndTime, divisionID) {
        if (19 != divisionID) {
          var data = HallResources.getInstance().getRankDataById(divisionID + 1);
          var nextScore = data.MinScore;
          var nextName = data.LittleName;
          this.nextLevelLabel.string = "距离" + nextName + "还差" + (nextScore - rankScore);
          this.progressBar.progress = rankScore / nextScore;
          this.progressValueLabel.string = Tools.getFormatNumber(rankScore) + "/" + Tools.getFormatNumber(nextScore);
        } else {
          this.nextLevelLabel.string = "您已经达到最高等级";
          this.progressBar.progress = 1;
          this.progressValueLabel.string = rankScore + "/" + rankScore;
        }
        this.cupBg.removeAllChildren();
        var data = HallResources.getInstance().getRankAndStarByScore(rankScore);
        console.log("=================赛季================");
        console.log(data);
        var myCup = data.cup - 1;
        if (myCup <= 3) {
          var item = null;
          var offsetX = 300;
          item = cc.instantiate(this.nowRankPrefab);
          item.getComponent("NowRankLevelItem").initData(allRankData[myCup], data, divisionID);
          item.parent = this.cupBg;
          item.setPosition(110, 0);
          for (var i = 1; i < 3; i++) {
            var item2 = null;
            item2 = cc.instantiate(this.otherRankPrefab);
            item2.getComponent("OtherRankLevelItem").initData(allRankData[myCup + i]);
            var offsetX2 = 315;
            item2.parent = this.cupBg;
            var x = 110 + offsetX + (i - 1) * offsetX2;
            item2.setPosition(x, 0);
            2 == i && item2.getComponent("OtherRankLevelItem").setArrowShow(false);
          }
        } else for (var i = 3; i < 6; i++) {
          if (myCup == i) {
            var item = null;
            var offsetX = 300;
            item = cc.instantiate(this.nowRankPrefab);
            item.getComponent("NowRankLevelItem").initData(allRankData[myCup], data, divisionID);
            5 == i && item.getComponent("NowRankLevelItem").setArrowShow(false);
          } else {
            item = cc.instantiate(this.otherRankPrefab);
            item.getComponent("OtherRankLevelItem").initData(allRankData[i]);
            item.getComponent("OtherRankLevelItem").setUnlockVis(myCup < i);
            offsetX = 315;
            5 == i && item.getComponent("OtherRankLevelItem").setArrowShow(false);
          }
          item.parent = this.cupBg;
          var x = 110 + (i - 3) * offsetX;
          item.setPosition(x, 0);
        }
      },
      start: function start() {},
      updateGetRewardData: function updateGetRewardData() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------DivisionUpAwardGetInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var data = jsonObject.table[0];
            self.rewardLabel.string = "x" + data.AwardAmount;
            self.levelNowSeasonLabel.string = "本赛季段位达到" + data.LevelName;
            self.LevelUpTo = data.LevelUpTo;
            if (1 == data.CanAward && 0 == data.IsGetAward) {
              self.getRewardGrayBtn.node.active = false;
              self.getRewardBtn.node.active = true;
              _TSCommon.TSCommon.dispatchEvent(HallResources.onSeasonLevelUp, true);
            } else {
              self.getRewardGrayBtn.node.active = true;
              self.getRewardBtn.node.active = false;
              _TSCommon.TSCommon.dispatchEvent(HallResources.onSeasonLevelUp, false);
            }
          }
        };
        require("HallWebRequest").getInstance().getDivisionUpAwardGetInfo(callBackFunc);
      },
      clickGetRewardBtn: function clickGetRewardBtn() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------DivisionUpAwardGetInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var data = jsonObject;
            var retcode = data.RetCode;
            if (1 == retcode) {
              require("HallControl").getInstance().getPublicUserInfo().nDiamond = data.myBalance;
              _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "+" + data.AwardAmount, "texture/commonRes/money/diamondCoin" ]);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onRefreshPlayerDiamondCount, this);
              self.updateGetRewardData();
            } else 11 == retcode ? console.log("密码错误") : 12 == retcode ? console.log("未满足条件") : 13 == retcode ? console.log("重复领取") : console.log("失败");
          }
        };
        var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
        require("HallWebRequest").getInstance().getDivisionUpAwardGetAward(self.LevelUpTo, myOpenId, callBackFunc);
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      }
    });
    module.exports = SeasonLayer;
    cc._RF.pop();
  }, {
    "../weixin/WeixinManager": "WeixinManager",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    TSCommon: "TSCommon",
    Tools: "Tools"
  } ],
  StringConvert: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0d166XJ75Hj46lcoIOEvVX", "StringConvert");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("./ByteArray");
    var StringConvert = function() {
      function StringConvert() {}
      StringConvert.getGBK = function(s) {
        var ret = new Array();
        for (var i = 0; i < s.length; i++) {
          var tmp = StringConvert.gbk_wctomb(s.charCodeAt(i));
          for (var key in tmp) ret.push(tmp[key]);
        }
        ret.push(0);
        return ret;
      };
      StringConvert.gbk_wctomb = function(wc) {
        var ret = new Array();
        if (wc <= 127) {
          ret.push(wc);
          return ret;
        }
        var index = 0;
        wc >= StringConvert.unicode[0] && (index = wc - StringConvert.unicode[0]);
        if (index < StringConvert.unicode.length) {
          var ba = new ByteArray_1.ByteArray();
          ba.writeShort(StringConvert.gbkcode[index]);
          ba.position = 0;
          var high = ba.readUnsignedByte();
          ret.push(ba.readUnsignedByte());
          ret.push(high);
          return ret;
        }
        for (var i = StringConvert.unicode.length - 1; i >= 0; i--) if (StringConvert.unicode[i] == wc) {
          var ba = new ByteArray_1.ByteArray();
          ba.writeShort(StringConvert.gbkcode[i]);
          ba.position = 0;
          var high = ba.readUnsignedByte();
          ret.push(ba.readUnsignedByte());
          ret.push(high);
          return ret;
        }
        console.log("gbk_wctomb " + wc);
        var ba = new ByteArray_1.ByteArray();
        ba.writeShort(wc);
        ba.position = 0;
        ret.push(ba.readUnsignedByte());
        ret.push(ba.readUnsignedByte());
        return ret;
      };
      StringConvert.getUtf8 = function(gbk) {
        var s = "";
        for (var key = 0; key < gbk.length; key++) {
          var c = gbk[key];
          if (0 == c) break;
          if (c <= 127) {
            s += String.fromCharCode(c);
            continue;
          }
          var c = gbk[key + 1] + 256 * gbk[key];
          key++;
          var sTemp = String.fromCharCode(StringConvert.gbkmbtowc(c));
          s += sTemp;
        }
        return s;
      };
      StringConvert.gbkmbtowc = function(gbkCode) {
        for (var i = 0; i < StringConvert.gbkcode.length; i++) if (StringConvert.gbkcode[i] == gbkCode) {
          var retCode = StringConvert.unicode[i];
          return retCode;
        }
        console.log("gbkmbtowc " + gbkCode);
        return gbkCode;
      };
      StringConvert.gbkcode = [ 53947, 46753, 33088, 50911, 33089, 33090, 33091, 52722, 54729, 51453, 51663, 53186, 55458, 45755, 54251, 33092, 55460, 46067, 33093, 55208, 51154, 55463, 51904, 33094, 51184, 45563, 53941, 46292, 46763, 52159, 55465, 33095, 33096, 33097, 46762, 33098, 49597, 53711, 33099, 51621, 55469, 33100, 47350, 53694, 58332, 54992, 33101, 33102, 47073, 33103, 46254, 33104, 49625, 33105, 55484, 33106, 52712, 46500, 52906, 55031, 33107, 49398, 48857, 55471, 33108, 33109, 33110, 50379, 33111, 48835, 33112, 55473, 50100, 53989, 33113, 54958, 52954, 54695, 47861, 47014, 49366, 33114, 50873, 50642, 51143, 33115, 47572, 33116, 46027, 53970, 33117, 33118, 55487, 48837, 50930, 53938, 53168, 53223, 33119, 33120, 33121, 33122, 51945, 33123, 33124, 55488, 33125, 33126, 33127, 33128, 33129, 33130, 49906, 49874, 33131, 51433, 33132, 33133, 33134, 33135, 33136, 33137, 33138, 33139, 33140, 33141, 51116, 33142, 33143, 33144, 33145, 33146, 33147, 33148, 49611, 33149, 54248, 54777, 33150, 51906, 46846, 55457, 54234, 49143, 33152, 54470, 48037, 55489, 52965, 48814, 33153, 33154, 55464, 33155, 53703, 53417, 33156, 33157, 33158, 55485, 55791, 52726, 49082, 33159, 48571, 47781, 53984, 45818, 47840, 50358, 33160, 53229, 48809, 52644, 49601, 33161, 33162, 33163, 51159, 55793, 33164, 55796, 33165, 33166, 33167, 33168, 51403, 55529, 33169, 33170, 33171, 53978, 51890, 51402, 55532, 55530, 55494, 48630, 50893, 46064, 33172, 55531, 48625, 48617, 33173, 51412, 46291, 33174, 33175, 49880, 33176, 45782, 55248, 51915, 52219, 54732, 47286, 53193, 33177, 33178, 33179, 55770, 55536, 51114, 33180, 55534, 33181, 46330, 49646, 53972, 33182, 33183, 55533, 33184, 53959, 55535, 50119, 33185, 33186, 33187, 53750, 33188, 55001, 55538, 33189, 55541, 48382, 48347, 33190, 33191, 33192, 51406, 33193, 47069, 33194, 47042, 33195, 50931, 33196, 33197, 33198, 33199, 33200, 33201, 33202, 55544, 53953, 33203, 33204, 52969, 48319, 47100, 47013, 53469, 33205, 33206, 33207, 33208, 33209, 55002, 54213, 48111, 48097, 55537, 33210, 33211, 51617, 52912, 46251, 33212, 55539, 33213, 51659, 55542, 49879, 55543, 33214, 33215, 52913, 55545, 33216, 33217, 33218, 45742, 47552, 33219, 55715, 33220, 45289, 33221, 49638, 33222, 51692, 33223, 52165, 33224, 52166, 55716, 33225, 33226, 33227, 33228, 33229, 46568, 33230, 33231, 46507, 33232, 33233, 33234, 33235, 33236, 33237, 52923, 46541, 55201, 55284, 54227, 33238, 52453, 33239, 47822, 33240, 55714, 55772, 54240, 55549, 47088, 55287, 55550, 55546, 55713, 50403, 33241, 33242, 54198, 55540, 55773, 33243, 55547, 33244, 50661, 33245, 33246, 49360, 33247, 33248, 53744, 45275, 33249, 33250, 48337, 55718, 33251, 55717, 33252, 33253, 33254, 33255, 55724, 55726, 33256, 55723, 51897, 33257, 33258, 33259, 55721, 54966, 33260, 33261, 33262, 46046, 55720, 33263, 49405, 33264, 51916, 33265, 55722, 33266, 55719, 33267, 33268, 55728, 33269, 33270, 46769, 33271, 33272, 33273, 47529, 33274, 53952, 33275, 33276, 53184, 33277, 33278, 49858, 33344, 48580, 54764, 45792, 51144, 49131, 55725, 33345, 55727, 33346, 52970, 47854, 33347, 33348, 33349, 33350, 33351, 51158, 33352, 33353, 33354, 33355, 33356, 33357, 33358, 33359, 33360, 45539, 33361, 33362, 33363, 46297, 46829, 55732, 33364, 33365, 33366, 33367, 49057, 33368, 33369, 33370, 55774, 51150, 49406, 55736, 33371, 33372, 33373, 33374, 33375, 52183, 47101, 33376, 55733, 33377, 55735, 45475, 54241, 55737, 33378, 53445, 33379, 55734, 33380, 33381, 55729, 33382, 55730, 49577, 55731, 33383, 33384, 48371, 53470, 47273, 33385, 48867, 33386, 55741, 33387, 33388, 33389, 33390, 55738, 33391, 45235, 33392, 33393, 33394, 55746, 33395, 33396, 33397, 33398, 33399, 33400, 33401, 33402, 33403, 33404, 33405, 33406, 33408, 55748, 45494, 33409, 55743, 33410, 33411, 46521, 33412, 48883, 33413, 33414, 33415, 52424, 47858, 53968, 33416, 55747, 33417, 33418, 48616, 33419, 45995, 33420, 33421, 33422, 55749, 48875, 33423, 55750, 55739, 50399, 33424, 55742, 55745, 55744, 33425, 33426, 33427, 33428, 33429, 33430, 33431, 33432, 33433, 33434, 33435, 54702, 33436, 54965, 33437, 51171, 33438, 33439, 33440, 33441, 55752, 33442, 33443, 33444, 48345, 55754, 33445, 33446, 33447, 55740, 33448, 55755, 50859, 33449, 33450, 33451, 33452, 33453, 55753, 33454, 33455, 33456, 33457, 55286, 33458, 52643, 33459, 33460, 33461, 33462, 33463, 33464, 33465, 33466, 48545, 33467, 33468, 33469, 33470, 33471, 33472, 55756, 33473, 33474, 33475, 33476, 33477, 33478, 33479, 33480, 33481, 50620, 52661, 33482, 33483, 33484, 55757, 33485, 33486, 55751, 45989, 49150, 33487, 33488, 33489, 33490, 47285, 33491, 33492, 49404, 33493, 33494, 33495, 33496, 45304, 33497, 33498, 33499, 33500, 33501, 33502, 33503, 33504, 33505, 33506, 33507, 33508, 33509, 33510, 33511, 33512, 33513, 33514, 33515, 33516, 33517, 46326, 33518, 55758, 33519, 55759, 46242, 55760, 33520, 33521, 46303, 33522, 33523, 33524, 33525, 33526, 45249, 33527, 33528, 33529, 33530, 33531, 33532, 33533, 55761, 51637, 33534, 33600, 33601, 33602, 33603, 33604, 33605, 33606, 33607, 33608, 33609, 33610, 33611, 33612, 33613, 33614, 33615, 33616, 33617, 53233, 33618, 33619, 33620, 33621, 33622, 33623, 55762, 33624, 33625, 33626, 49605, 33627, 33628, 33629, 33630, 33631, 33632, 33633, 33634, 33635, 33636, 33637, 55766, 51630, 33638, 33639, 33640, 33641, 55765, 55764, 55767, 33642, 33643, 33644, 33645, 52187, 33646, 48553, 33647, 33648, 33649, 33650, 33651, 50855, 33652, 33653, 33654, 33655, 33656, 33657, 33658, 33659, 33660, 33661, 55763, 55768, 33662, 33664, 33665, 55769, 33666, 33667, 33668, 33669, 33670, 33671, 51429, 33672, 33673, 33674, 33675, 33676, 33677, 33678, 33679, 33680, 33681, 33682, 33683, 33684, 33685, 49372, 33686, 33687, 33688, 33689, 33690, 33691, 33692, 33693, 33694, 33695, 33696, 33697, 33698, 33699, 33700, 33701, 33702, 33703, 33704, 33705, 33706, 33707, 33708, 33709, 33710, 33711, 33712, 33713, 33714, 46841, 55459, 54474, 33715, 54442, 53462, 46052, 54743, 33716, 53192, 47586, 33717, 49099, 33718, 50146, 33719, 33720, 33721, 46802, 33722, 33723, 52675, 55790, 55792, 33724, 33725, 33726, 46515, 33727, 46773, 33728, 33729, 33730, 33731, 33732, 48804, 33733, 33734, 51435, 33735, 33736, 51371, 33737, 33738, 45259, 47531, 49657, 55778, 33739, 49340, 47538, 33740, 47576, 53451, 45560, 50916, 48863, 46564, 55240, 33741, 53752, 48358, 51934, 33742, 33743, 48317, 55782, 55527, 33744, 33745, 50394, 33746, 33747, 47316, 51389, 33748, 33749, 45793, 54489, 33750, 33751, 33752, 33753, 50096, 33754, 33755, 50145, 55970, 51423, 33756, 53428, 33757, 48892, 50601, 33758, 33759, 33760, 47578, 33761, 55971, 33762, 54441, 55972, 33763, 33764, 33765, 33766, 33767, 55803, 46764, 33768, 33769, 47083, 45561, 55804, 46053, 48886, 33770, 49142, 53937, 49380, 33771, 33772, 33773, 46771, 55806, 55805, 33774, 33775, 48827, 33776, 33777, 33778, 50912, 33779, 55228, 55969, 33780, 49593, 33781, 46578, 49640, 33782, 33783, 48373, 33784, 46293, 33785, 33786, 33787, 33788, 33789, 33790, 33856, 33857, 33858, 49629, 33859, 50429, 33860, 33861, 48312, 47026, 33862, 33863, 47087, 33864, 33865, 33866, 33867, 33868, 33869, 55788, 33870, 50878, 33871, 49069, 48075, 33872, 33873, 46538, 33874, 56265, 53463, 33875, 52665, 45244, 46070, 48119, 56266, 47791, 33876, 54500, 46518, 46579, 55510, 51408, 33877, 33878, 47062, 51152, 55511, 33879, 49071, 33880, 33881, 56251, 55512, 33882, 33883, 53452, 48046, 33884, 33885, 33886, 60350, 49616, 49653, 54514, 47317, 46260, 33887, 46069, 33888, 33889, 51646, 33890, 33891, 33892, 50640, 33893, 33894, 33895, 50649, 49403, 33896, 45552, 33897, 55513, 47566, 33898, 46525, 33899, 33900, 55514, 33901, 33902, 54982, 52130, 51375, 51634, 46284, 49100, 33903, 47604, 33904, 55515, 55516, 46823, 48321, 52458, 33905, 33906, 33907, 33908, 33909, 33910, 53239, 33911, 55517, 51120, 33912, 33913, 47568, 48547, 33914, 33915, 52446, 33916, 50890, 33917, 33918, 33920, 33921, 33922, 55520, 33923, 55518, 33924, 33925, 55519, 33926, 33927, 33928, 45310, 33929, 48871, 33930, 51875, 48372, 33931, 33932, 33933, 33934, 47281, 33935, 33936, 47342, 33937, 33938, 33939, 33940, 33941, 33942, 33943, 33944, 33945, 33946, 55522, 33947, 48587, 33948, 55524, 55523, 33949, 33950, 33951, 33952, 33953, 50684, 33954, 33955, 33956, 33957, 33958, 33959, 33960, 55525, 33961, 33962, 55526, 33963, 33964, 33965, 33966, 33967, 33968, 33969, 49574, 33970, 51376, 45292, 47526, 48339, 52977, 56253, 49619, 33971, 33972, 33973, 33974, 46767, 55034, 50604, 48601, 56254, 56255, 33975, 33976, 33977, 49400, 48802, 49357, 33978, 33979, 33980, 33981, 33982, 33983, 33984, 33985, 33986, 33987, 56256, 51910, 33988, 33989, 33990, 45738, 33991, 33992, 33993, 54210, 33994, 50147, 33995, 53675, 33996, 33997, 33998, 33999, 56258, 34e3, 49365, 34001, 34002, 34003, 56259, 34004, 49073, 34005, 34006, 34007, 34008, 34009, 34010, 50364, 34011, 34012, 34013, 34014, 51162, 34015, 34016, 34017, 34018, 34019, 34020, 34021, 34022, 34023, 34024, 34025, 56260, 34026, 34027, 34028, 34029, 34030, 34031, 34032, 34033, 55784, 51671, 34034, 34035, 34036, 47540, 52976, 54472, 34037, 34038, 34039, 34040, 45308, 46290, 34041, 53465, 34042, 34043, 34044, 34045, 55785, 34046, 57035, 55787, 34112, 34113, 34114, 34115, 55472, 48047, 45489, 34116, 46039, 55502, 34117, 34118, 54481, 34119, 34120, 48563, 49135, 34121, 53179, 34122, 34123, 55504, 34124, 34125, 34126, 47051, 34127, 34128, 34129, 55505, 34130, 34131, 34132, 34133, 34134, 34135, 34136, 34137, 34138, 34139, 50853, 51192, 53949, 34140, 34141, 55506, 50404, 34142, 51886, 34143, 51111, 34144, 55462, 34145, 51709, 52967, 48092, 45291, 34146, 34147, 34148, 48042, 53421, 34149, 45488, 55268, 55231, 34150, 46501, 49908, 50383, 34151, 34152, 45737, 34153, 45751, 34154, 45541, 57266, 54716, 49064, 49836, 55509, 49841, 34155, 55508, 52948, 34156, 56032, 34157, 52928, 34158, 34159, 55476, 50094, 54177, 52899, 34160, 48308, 51380, 49873, 34161, 48877, 53430, 34162, 56033, 34163, 34164, 34165, 34166, 51172, 34167, 34168, 45991, 34169, 46834, 52476, 49402, 34170, 34171, 49399, 34172, 53689, 53729, 55495, 34173, 34174, 34176, 34177, 34178, 34179, 34180, 45790, 34181, 34182, 49381, 34183, 47857, 34184, 34185, 55496, 34186, 54445, 34187, 34188, 53217, 55497, 34189, 55498, 53187, 34190, 46072, 48839, 34191, 34192, 34193, 34194, 55499, 34195, 34196, 34197, 34198, 34199, 34200, 34201, 56268, 34202, 34203, 34204, 34205, 51365, 34206, 34207, 34208, 53208, 34209, 51454, 45774, 34210, 34211, 34212, 34213, 34214, 54230, 45798, 48304, 54225, 52139, 47028, 34215, 34216, 34217, 47010, 34218, 34219, 51941, 34220, 51361, 51932, 45540, 53488, 34221, 50641, 34222, 34223, 34224, 56261, 46590, 34225, 34226, 49114, 47557, 48868, 49645, 34227, 57270, 57269, 54971, 48592, 54745, 45256, 46755, 49097, 52392, 57267, 51895, 54226, 34228, 55503, 53942, 47813, 52158, 52414, 34229, 57271, 46576, 57268, 34230, 34231, 34232, 54261, 34233, 46036, 47351, 34234, 57274, 34235, 47823, 48298, 46581, 34236, 52652, 50171, 47859, 49396, 52674, 53234, 57272, 53189, 34237, 49856, 57273, 49904, 34238, 34239, 34240, 48893, 34241, 49631, 52684, 54007, 47053, 57281, 34242, 57284, 34243, 34244, 47089, 45257, 46806, 47060, 34245, 47788, 52477, 49108, 52145, 50932, 34246, 54952, 57285, 34247, 52962, 46003, 34248, 34249, 52988, 46261, 34250, 52935, 47856, 34251, 52961, 34252, 53693, 34253, 34254, 57280, 34255, 34256, 46324, 34257, 46026, 34258, 47334, 57275, 34259, 34260, 34261, 34262, 50373, 34263, 57276, 57277, 57278, 50619, 57279, 57282, 54449, 57283, 34264, 51130, 52952, 34265, 34266, 34267, 34268, 34269, 50392, 34270, 57290, 34271, 57295, 34272, 55004, 34273, 34274, 34275, 34276, 34277, 34278, 34279, 34280, 57289, 57306, 52918, 34281, 47815, 57294, 57288, 50654, 34282, 34283, 51691, 47860, 50172, 34284, 34285, 48855, 34286, 57286, 34287, 57293, 34288, 50648, 34289, 34290, 34291, 34292, 54694, 47821, 34293, 48844, 54205, 47296, 34294, 55012, 34295, 57287, 47550, 49063, 34296, 34297, 49660, 57291, 57292, 34298, 57296, 34299, 34300, 34301, 34302, 34368, 57307, 57317, 34369, 57303, 57302, 55241, 57315, 57316, 58859, 53927, 57298, 34370, 49065, 34371, 54491, 34372, 49096, 57300, 34373, 34374, 34375, 53196, 34376, 34377, 57309, 34378, 53706, 34379, 57310, 45223, 50871, 57299, 34380, 47845, 34381, 46815, 52699, 47614, 54485, 34382, 34383, 57311, 53228, 45221, 57319, 57297, 53702, 57301, 57304, 57305, 57308, 34384, 48041, 34385, 57312, 57313, 34386, 57314, 57318, 57320, 54196, 34387, 34388, 34389, 34390, 34391, 47335, 50614, 57322, 51674, 49576, 50372, 34392, 34393, 49118, 53240, 34394, 34395, 34396, 54748, 57326, 34397, 34398, 34399, 34400, 34401, 34402, 45752, 34403, 47839, 57324, 34404, 56257, 34405, 53732, 34406, 34407, 34408, 34409, 52212, 46269, 34410, 45222, 34411, 34412, 34413, 34414, 34415, 57329, 52422, 57330, 34416, 34417, 57325, 34418, 34419, 34420, 34421, 34422, 34423, 57321, 34424, 34425, 34426, 34427, 57323, 34428, 57327, 57328, 48061, 34429, 34430, 57331, 34432, 34433, 57332, 34434, 48035, 34435, 51931, 52904, 57511, 45994, 34436, 57510, 34437, 34438, 34439, 57505, 34440, 34441, 34442, 34443, 57342, 34444, 52697, 57340, 34445, 57338, 34446, 49104, 55236, 34447, 51660, 34448, 34449, 57336, 45217, 34450, 34451, 34452, 34453, 34454, 57341, 34455, 34456, 34457, 34458, 57339, 57506, 34459, 34460, 34461, 34462, 34463, 57512, 34464, 34465, 34466, 34467, 47048, 34468, 34469, 50849, 51638, 49330, 57333, 34470, 34471, 50622, 34472, 55492, 57337, 50422, 34473, 34474, 34475, 34476, 34477, 34478, 57507, 57508, 57509, 53413, 34479, 34480, 57524, 52452, 34481, 57521, 34482, 49062, 57519, 52921, 57515, 51654, 34483, 34484, 49326, 57518, 47853, 47792, 57513, 34485, 34486, 34487, 57334, 34488, 57523, 34489, 34490, 57528, 34491, 34492, 34493, 46253, 57529, 34494, 34495, 53170, 47816, 34496, 57520, 34497, 34498, 34499, 34500, 34501, 34502, 34503, 53498, 34504, 34505, 34506, 34507, 34508, 34509, 34510, 34511, 34512, 57516, 34513, 54523, 34514, 57335, 34515, 50663, 34516, 57517, 34517, 54263, 34518, 57526, 57527, 34519, 34520, 34521, 34522, 34523, 57540, 53473, 34524, 34525, 34526, 57532, 34527, 34528, 57545, 57546, 34529, 34530, 34531, 57534, 57514, 51620, 57537, 34532, 57522, 34533, 34534, 34535, 34536, 34537, 51912, 57539, 34538, 57525, 34539, 52939, 34540, 52163, 57549, 57542, 57538, 34541, 57547, 34542, 57530, 57535, 57536, 34543, 34544, 57541, 34545, 34546, 57543, 57544, 34547, 57548, 34548, 57531, 34549, 34550, 34551, 34552, 34553, 52180, 57557, 34554, 57558, 57554, 34555, 34556, 34557, 34558, 34624, 34625, 57552, 48334, 34626, 34627, 57553, 34628, 47298, 55493, 34629, 34630, 34631, 34632, 34633, 34634, 34635, 34636, 53482, 34637, 34638, 49903, 34639, 34640, 57551, 57533, 34641, 34642, 34643, 57556, 57555, 34644, 34645, 57559, 34646, 34647, 34648, 34649, 57564, 57560, 34650, 34651, 34652, 55030, 46e3, 34653, 55276, 34654, 52155, 34655, 34656, 57562, 34657, 52987, 34658, 34659, 34660, 47833, 34661, 34662, 34663, 34664, 34665, 34666, 34667, 34668, 34669, 34670, 34671, 34672, 57569, 57565, 53933, 34673, 34674, 34675, 34676, 34677, 57570, 34678, 34679, 57563, 57561, 57567, 34680, 34681, 57568, 34682, 34683, 34684, 34685, 34686, 57566, 34688, 57572, 34689, 34690, 34691, 50935, 55468, 54507, 57574, 51913, 34692, 34693, 34694, 34695, 57573, 34696, 34697, 34698, 34699, 47297, 34700, 34701, 34702, 34703, 57575, 57576, 34704, 34705, 34706, 34707, 34708, 34709, 34710, 34711, 57577, 57571, 34712, 34713, 34714, 34715, 34716, 34717, 34718, 47807, 52455, 34719, 34720, 34721, 57578, 34722, 34723, 34724, 34725, 34726, 34727, 34728, 34729, 34730, 34731, 34732, 34733, 34734, 34735, 34736, 53241, 34737, 34738, 34739, 34740, 34741, 34742, 34743, 34744, 34745, 34746, 34747, 57579, 34748, 34749, 34750, 34751, 34752, 34753, 34754, 51394, 34755, 34756, 34757, 34758, 48576, 34759, 34760, 34761, 34762, 34763, 34764, 34765, 34766, 34767, 34768, 34769, 34770, 34771, 50386, 34772, 34773, 34774, 34775, 34776, 34777, 34778, 34779, 34780, 57580, 34781, 34782, 57581, 34783, 34784, 51188, 52164, 34785, 57582, 48088, 55478, 54002, 57583, 52677, 34786, 46810, 34787, 34788, 34789, 34790, 34791, 34792, 57585, 34793, 54448, 34794, 34795, 49319, 46289, 34796, 34797, 52903, 57584, 34798, 34799, 34800, 57586, 47564, 34801, 34802, 47610, 52668, 57587, 34803, 34804, 34805, 50900, 57588, 34806, 54450, 34807, 51366, 57590, 57589, 34808, 34809, 34810, 34811, 34812, 34813, 34814, 34880, 34881, 34882, 34883, 34884, 34885, 34886, 34887, 34888, 34889, 57591, 34890, 34891, 52673, 34892, 34893, 34894, 51877, 34895, 34896, 34897, 34898, 54490, 56279, 56281, 34899, 56280, 47591, 56284, 56285, 46552, 34900, 34901, 56282, 34902, 34903, 34904, 34905, 34906, 56283, 45985, 56287, 34907, 34908, 48120, 34909, 54967, 34910, 56288, 34911, 34912, 34913, 34914, 48889, 34915, 34916, 47035, 34917, 56272, 52398, 49074, 48053, 55288, 49107, 34918, 34919, 34920, 34921, 34922, 49129, 34923, 34924, 48353, 52403, 56286, 45267, 52971, 47064, 55225, 50882, 34925, 34926, 49316, 34927, 52409, 34928, 56295, 56289, 50874, 56291, 34929, 56296, 34930, 50679, 34931, 34932, 34933, 56298, 34934, 34935, 56297, 49088, 34936, 34937, 34938, 56294, 56293, 34939, 34940, 34941, 34942, 34944, 46265, 49324, 49826, 56290, 56292, 34945, 34946, 34947, 34948, 53453, 56301, 34949, 34950, 34951, 34952, 34953, 49373, 56306, 34954, 34955, 34956, 34957, 34958, 34959, 34960, 46818, 34961, 34962, 34963, 34964, 56307, 56274, 47544, 54443, 56300, 34965, 49105, 56304, 34966, 56273, 34967, 46566, 34968, 56299, 49125, 34969, 34970, 34971, 56302, 34972, 56305, 34973, 34974, 34975, 56313, 34976, 34977, 34978, 34979, 34980, 34981, 34982, 34983, 34984, 47521, 45219, 34985, 34986, 34987, 34988, 34989, 34990, 34991, 49905, 34992, 34993, 46023, 56303, 34994, 34995, 56312, 34996, 50898, 56308, 34997, 34998, 56309, 56311, 56310, 34999, 35e3, 56318, 35001, 54258, 45754, 35002, 35003, 35004, 56317, 35005, 35006, 35007, 35008, 35009, 35010, 35011, 35012, 56484, 35013, 56315, 35014, 35015, 35016, 35017, 56314, 35018, 35019, 35020, 56316, 50656, 48121, 35021, 35022, 56483, 35023, 35024, 56485, 35025, 52419, 35026, 35027, 35028, 46801, 56768, 35029, 35030, 35031, 56481, 35032, 56482, 35033, 35034, 35035, 51125, 35036, 35037, 35038, 46825, 35039, 35040, 35041, 56487, 35042, 35043, 35044, 35045, 56486, 35046, 56489, 45476, 35047, 35048, 46540, 35049, 35050, 35051, 35052, 35053, 49072, 35054, 35055, 35056, 35057, 35058, 53727, 35059, 35060, 35061, 35062, 46786, 35063, 35064, 35065, 35066, 35067, 35068, 35069, 35070, 35136, 35137, 35138, 35139, 35140, 35141, 56488, 35142, 35143, 35144, 35145, 35146, 35147, 35148, 52218, 60403, 35149, 35150, 35151, 52188, 35152, 35153, 52222, 35154, 35155, 35156, 52417, 35157, 35158, 35159, 35160, 35161, 51451, 35162, 35163, 35164, 35165, 35166, 35167, 56490, 35168, 35169, 35170, 35171, 35172, 52462, 56491, 35173, 35174, 35175, 35176, 35177, 35178, 35179, 35180, 35181, 35182, 35183, 35184, 35185, 35186, 35187, 35188, 35189, 56275, 35190, 56495, 56492, 35191, 48819, 35192, 51963, 35193, 35194, 35195, 56493, 35196, 35197, 35198, 35200, 35201, 35202, 35203, 35204, 51658, 50361, 35205, 35206, 35207, 35208, 35209, 51133, 56494, 35210, 35211, 35212, 54518, 53478, 35213, 35214, 35215, 35216, 35217, 35218, 35219, 35220, 50347, 46805, 35221, 35222, 35223, 35224, 35225, 35226, 35227, 35228, 35229, 35230, 35231, 35232, 35233, 35234, 35235, 35236, 35237, 35238, 56276, 35239, 35240, 35241, 35242, 45530, 35243, 35244, 35245, 56277, 35246, 35247, 35248, 35249, 35250, 35251, 35252, 35253, 35254, 35255, 35256, 56278, 35257, 35258, 35259, 47806, 35260, 35261, 35262, 35263, 35264, 35265, 35266, 35267, 35268, 35269, 35270, 35271, 35272, 35273, 51392, 35274, 35275, 35276, 35277, 35278, 35279, 51903, 51401, 35280, 55219, 35281, 51705, 35282, 35283, 49095, 35284, 35285, 47864, 35286, 35287, 53948, 35288, 35289, 35290, 35291, 35292, 35293, 35294, 35295, 58042, 35296, 46246, 35297, 35298, 45496, 35299, 35300, 35301, 35302, 35303, 47284, 35304, 53188, 35305, 35306, 35307, 35308, 55783, 53158, 52706, 35309, 35310, 55789, 46816, 35311, 53945, 35312, 35313, 47547, 35314, 35315, 35316, 35317, 58041, 58039, 35318, 46323, 35319, 52460, 52395, 47090, 35320, 55474, 53739, 47803, 35321, 51879, 35322, 35323, 52663, 35324, 35325, 53956, 49124, 48336, 46817, 35326, 57029, 35392, 35393, 35394, 35395, 57030, 56252, 35396, 53721, 35397, 35398, 50918, 50382, 47086, 35399, 47068, 35400, 35401, 49148, 55264, 35402, 50933, 35403, 35404, 45500, 57032, 48561, 52439, 57034, 35405, 57033, 35406, 35407, 35408, 35409, 35410, 46572, 35411, 51677, 35412, 35413, 45250, 35414, 35415, 35416, 35417, 35418, 35419, 35420, 35421, 35422, 35423, 35424, 35425, 35426, 50606, 50603, 35427, 50380, 35428, 48361, 52221, 35429, 35430, 35431, 47811, 35432, 35433, 35434, 58873, 51431, 58874, 52733, 35435, 55217, 47294, 49896, 35436, 51409, 35437, 35438, 58875, 35439, 35440, 35441, 35442, 46794, 48331, 35443, 35444, 53757, 59041, 35445, 50158, 35446, 35447, 35448, 35449, 59044, 35450, 35451, 35452, 35453, 58878, 59045, 52695, 35454, 35456, 47041, 58876, 58877, 59043, 35457, 35458, 50397, 59048, 35459, 35460, 59047, 35461, 35462, 35463, 35464, 35465, 35466, 50115, 35467, 50910, 35468, 35469, 59050, 35470, 35471, 35472, 35473, 35474, 35475, 35476, 50359, 35477, 35478, 35479, 59042, 51900, 35480, 35481, 35482, 35483, 48611, 47555, 59046, 53461, 52911, 35484, 35485, 59049, 59056, 35486, 53926, 35487, 48554, 59053, 35488, 35489, 35490, 35491, 35492, 59055, 35493, 49361, 35494, 35495, 53964, 35496, 35497, 35498, 48295, 35499, 35500, 35501, 35502, 35503, 35504, 35505, 35506, 35507, 35508, 35509, 35510, 59057, 35511, 54006, 35512, 35513, 35514, 55243, 35515, 52734, 35516, 52702, 49830, 59051, 59052, 48575, 59054, 59059, 35517, 35518, 59058, 35519, 35520, 35521, 35522, 59062, 35523, 59064, 35524, 35525, 35526, 35527, 50415, 35528, 35529, 35530, 50376, 35531, 35532, 48874, 51695, 35533, 35534, 59063, 35535, 46832, 35536, 35537, 35538, 50148, 35539, 35540, 35541, 35542, 35543, 35544, 35545, 54249, 59060, 35546, 59061, 35547, 51362, 35548, 35549, 35550, 35551, 35552, 59069, 35553, 35554, 35555, 59065, 35556, 35557, 35558, 35559, 35560, 50885, 35561, 35562, 52721, 59067, 35563, 35564, 35565, 35566, 35567, 35568, 35569, 35570, 35571, 35572, 59068, 35573, 35574, 35575, 35576, 48105, 35577, 35578, 35579, 35580, 35581, 35582, 35648, 59070, 35649, 35650, 35651, 35652, 59066, 35653, 35654, 49335, 35655, 35656, 35657, 35658, 35659, 35660, 35661, 35662, 35663, 54180, 59071, 51700, 59075, 35664, 35665, 59076, 35666, 35667, 35668, 35669, 53494, 35670, 35671, 35672, 35673, 35674, 35675, 35676, 35677, 35678, 35679, 35680, 35681, 35682, 35683, 35684, 35685, 35686, 35687, 50109, 35688, 35689, 35690, 35691, 35692, 35693, 35694, 50116, 59074, 35695, 35696, 35697, 35698, 35699, 35700, 35701, 35702, 35703, 35704, 35705, 35706, 35707, 35708, 59073, 35709, 35710, 35712, 35713, 35714, 35715, 35716, 59079, 53169, 35717, 60404, 35718, 35719, 59082, 35720, 35721, 35722, 35723, 35724, 59077, 35725, 35726, 48350, 51625, 35727, 35728, 35729, 35730, 35731, 35732, 48309, 35733, 35734, 53203, 35735, 35736, 35737, 35738, 35739, 59080, 35740, 59081, 35741, 59086, 35742, 59088, 35743, 35744, 35745, 59089, 35746, 35747, 35748, 59083, 46549, 35749, 59084, 35750, 35751, 59087, 35752, 35753, 50395, 35754, 59078, 35755, 35756, 35757, 35758, 35759, 59085, 35760, 35761, 35762, 35763, 35764, 35765, 35766, 35767, 35768, 35769, 35770, 35771, 35772, 35773, 35774, 35775, 35776, 35777, 35778, 35779, 35780, 35781, 35782, 59090, 35783, 35784, 35785, 35786, 35787, 35788, 35789, 35790, 35791, 35792, 35793, 35794, 59092, 59091, 35795, 35796, 35797, 35798, 35799, 35800, 35801, 35802, 35803, 35804, 35805, 35806, 35807, 35808, 35809, 35810, 35811, 35812, 35813, 35814, 35815, 35816, 35817, 35818, 35819, 35820, 59093, 35821, 55800, 35822, 35823, 59094, 35824, 35825, 35826, 35827, 35828, 35829, 35830, 35831, 59095, 35832, 35833, 35834, 35835, 35836, 35837, 35838, 35904, 35905, 35906, 35907, 35908, 35909, 35910, 35911, 55251, 59101, 35912, 59102, 49111, 54480, 35913, 55254, 46310, 52207, 59098, 55491, 55246, 53410, 35914, 50127, 35915, 35916, 59103, 48318, 47554, 59099, 53671, 35917, 35918, 47778, 49871, 35919, 55467, 35920, 35921, 35922, 51947, 58862, 35923, 59100, 35924, 47093, 35925, 35926, 35927, 35928, 51430, 35929, 35930, 50421, 35931, 35932, 58802, 50430, 35933, 52220, 58803, 54700, 35934, 54254, 51928, 45234, 35935, 52174, 52714, 35936, 35937, 47850, 35938, 35939, 35940, 58805, 35941, 58804, 35942, 55258, 47577, 55014, 46760, 52720, 53963, 45478, 51893, 35943, 46056, 51699, 49101, 53499, 51922, 58806, 48066, 35944, 35945, 35946, 53212, 47532, 35947, 35948, 35949, 35950, 54487, 35951, 35952, 47782, 53735, 53244, 48338, 35953, 58807, 51421, 35954, 35955, 35956, 49133, 45558, 52190, 35957, 35958, 48325, 35959, 48324, 54010, 50140, 49116, 35960, 35961, 35962, 35963, 47291, 35964, 35965, 35966, 50114, 35968, 47790, 54434, 35969, 35970, 35971, 35972, 35973, 35974, 35975, 35976, 35977, 51166, 50351, 45804, 35978, 47569, 35979, 35980, 58811, 49608, 35981, 35982, 54703, 35983, 35984, 35985, 35986, 35987, 58812, 35988, 58814, 35989, 35990, 35991, 35992, 35993, 35994, 35995, 46311, 46804, 52162, 53680, 46524, 35996, 35997, 51929, 35998, 47074, 35999, 36e3, 51684, 36001, 48555, 36002, 36003, 52926, 55280, 36004, 36005, 36006, 36007, 53409, 36008, 51673, 36009, 36010, 46843, 59096, 48354, 36011, 46014, 36012, 51664, 36013, 59097, 45986, 36014, 36015, 36016, 36017, 57036, 36018, 54216, 57037, 36019, 53922, 36020, 36021, 36022, 36023, 57038, 36024, 36025, 36026, 36027, 48845, 36028, 36029, 57039, 36030, 36031, 36032, 51884, 54012, 46047, 58858, 50401, 48801, 52914, 50418, 48854, 50856, 45795, 36033, 36034, 48851, 36035, 36036, 51196, 52459, 48620, 52957, 36037, 36038, 51898, 50881, 58860, 53436, 36039, 36040, 36041, 54713, 36042, 36043, 36044, 58861, 36045, 36046, 36047, 36048, 51956, 36049, 52672, 49861, 36050, 58863, 36051, 49860, 58864, 36052, 36053, 36054, 36055, 36056, 36057, 36058, 58872, 52685, 36059, 51645, 36060, 36061, 36062, 36063, 36064, 36065, 36066, 53977, 57768, 36067, 36068, 36069, 36070, 54252, 36071, 52202, 50929, 36072, 36073, 36074, 36075, 36076, 57772, 36077, 36078, 36079, 57767, 57769, 36080, 36081, 57770, 57775, 36082, 36083, 45805, 36084, 57771, 47322, 57773, 57774, 57776, 46522, 57777, 36085, 36086, 36087, 36088, 36089, 57779, 57784, 36090, 36091, 36092, 36093, 36094, 53714, 36160, 57782, 57781, 49643, 36161, 36162, 36163, 57783, 36164, 54464, 36165, 57778, 36166, 57786, 45238, 36167, 36168, 36169, 36170, 57780, 36171, 49145, 36172, 57785, 36173, 36174, 57787, 36175, 36176, 36177, 36178, 36179, 36180, 57790, 36181, 36182, 36183, 36184, 36185, 36186, 57788, 36187, 36188, 36189, 36190, 36191, 36192, 54981, 36193, 36194, 36195, 36196, 36197, 36198, 36199, 53183, 36200, 36201, 57789, 57791, 49869, 36202, 46827, 36203, 54264, 36204, 36205, 51149, 36206, 36207, 47077, 36208, 36209, 36210, 36211, 36212, 36213, 36214, 36215, 36216, 36217, 48894, 36218, 36219, 36220, 36221, 36222, 36224, 57792, 57793, 36225, 36226, 57799, 46055, 36227, 36228, 36229, 36230, 36231, 36232, 50921, 36233, 36234, 36235, 36236, 36237, 46302, 36238, 53698, 36239, 36240, 36241, 36242, 57800, 36243, 36244, 57798, 36245, 36246, 36247, 36248, 36249, 57797, 36250, 57795, 57794, 36251, 45504, 36252, 36253, 36254, 54712, 57796, 36255, 36256, 36257, 36258, 36259, 57803, 36260, 36261, 36262, 36263, 36264, 36265, 36266, 36267, 57804, 57802, 36268, 36269, 36270, 36271, 36272, 36273, 36274, 36275, 61434, 36276, 36277, 57811, 57810, 51126, 36278, 36279, 36280, 36281, 36282, 36283, 36284, 36285, 36286, 36287, 36288, 57801, 36289, 36290, 57806, 36291, 57808, 36292, 36293, 36294, 36295, 36296, 36297, 36298, 36299, 36300, 36301, 36302, 57812, 36303, 57809, 57805, 36304, 36305, 57807, 36306, 36307, 36308, 36309, 57813, 36310, 36311, 36312, 36313, 36314, 36315, 36316, 36317, 36318, 36319, 36320, 36321, 36322, 57814, 36323, 36324, 36325, 36326, 36327, 36328, 36329, 36330, 36331, 36332, 36333, 36334, 36335, 36336, 36337, 36338, 36339, 36340, 36341, 36342, 36343, 36344, 57815, 36345, 36346, 36347, 57816, 36348, 36349, 36350, 36416, 36417, 36418, 36419, 36420, 36421, 36422, 36423, 36424, 36425, 36426, 36427, 36428, 36429, 36430, 36431, 36432, 36433, 36434, 36435, 36436, 36437, 57818, 36438, 36439, 36440, 36441, 36442, 36443, 36444, 36445, 36446, 36447, 36448, 36449, 36450, 57819, 36451, 36452, 36453, 36454, 36455, 36456, 36457, 52897, 36458, 36459, 36460, 36461, 36462, 36463, 36464, 36465, 36466, 36467, 36468, 36469, 36470, 59357, 36471, 46248, 55005, 36472, 36473, 53682, 46002, 36474, 36475, 47524, 55283, 51145, 48862, 47534, 36476, 52951, 36477, 36478, 45806, 56271, 36480, 48314, 53969, 52168, 45261, 36481, 36482, 53231, 36483, 36484, 36485, 36486, 36487, 55779, 48621, 36488, 36489, 45522, 51920, 45756, 36490, 52135, 47019, 36491, 51878, 36492, 36493, 36494, 53155, 36495, 36496, 57592, 54730, 57595, 36497, 36498, 57594, 50625, 52475, 36499, 49585, 57593, 55011, 45743, 54980, 46555, 36500, 36501, 36502, 36503, 36504, 36505, 36506, 36507, 46328, 54945, 36508, 36509, 36510, 36511, 36512, 53167, 45295, 36513, 36514, 57596, 36515, 36516, 36517, 36518, 36519, 57761, 45987, 36520, 36521, 57597, 57598, 50097, 36522, 36523, 36524, 36525, 50141, 36526, 57762, 47097, 36527, 36528, 36529, 36530, 36531, 36532, 48079, 36533, 36534, 36535, 36536, 36537, 36538, 36539, 57763, 50363, 36540, 36541, 36542, 36543, 36544, 57764, 36545, 36546, 57765, 36547, 36548, 57766, 46257, 36549, 36550, 36551, 36552, 36553, 36554, 36555, 36556, 36557, 36558, 36559, 36560, 36561, 36562, 36563, 47305, 50877, 50410, 36564, 45730, 36565, 53458, 36566, 59355, 48067, 54231, 54212, 36567, 47587, 58063, 36568, 36569, 36570, 55215, 36571, 51180, 45523, 36572, 36573, 46258, 58065, 36574, 36575, 36576, 53490, 49838, 58064, 36577, 49122, 54182, 46551, 58066, 46570, 36578, 50157, 47357, 36579, 47278, 36580, 50643, 47055, 58068, 36581, 36582, 36583, 36584, 58067, 46792, 55289, 36585, 36586, 36587, 36588, 36589, 52645, 36590, 36591, 36592, 36593, 36594, 58072, 36595, 58070, 51964, 49077, 54201, 58069, 36596, 36597, 36598, 36599, 58071, 36600, 36601, 36602, 36603, 36604, 36605, 36606, 36672, 36673, 36674, 49582, 49352, 36675, 36676, 36677, 36678, 36679, 36680, 58075, 58074, 49322, 36681, 36682, 49614, 36683, 36684, 36685, 36686, 58076, 36687, 36688, 36689, 36690, 36691, 36692, 36693, 36694, 36695, 36696, 36697, 36698, 58077, 36699, 58078, 36700, 36701, 36702, 36703, 36704, 36705, 36706, 36707, 36708, 56264, 36709, 53715, 52642, 36710, 36711, 48552, 36712, 36713, 36714, 57027, 55461, 49066, 56269, 53996, 50938, 50602, 36715, 36716, 36717, 57028, 36718, 45527, 57262, 36719, 36720, 36721, 51901, 36722, 57265, 36723, 47533, 36724, 54013, 36725, 47269, 47851, 36726, 36727, 46042, 36728, 36729, 36730, 46556, 54725, 36731, 36732, 36733, 36734, 50134, 53202, 48033, 36736, 58867, 58866, 36737, 36738, 58868, 36739, 52708, 36740, 51445, 36741, 36742, 36743, 36744, 36745, 36746, 36747, 46511, 51135, 36748, 58870, 36749, 36750, 36751, 60592, 36752, 36753, 36754, 36755, 36756, 36757, 36758, 36759, 36760, 36761, 36762, 36763, 36764, 36765, 36766, 58854, 36767, 47593, 46513, 36768, 49852, 58856, 58855, 58857, 36769, 36770, 36771, 36772, 53965, 36773, 36774, 36775, 57834, 53454, 36776, 52654, 36777, 53733, 36778, 36779, 45770, 45547, 36780, 45554, 50669, 36781, 36782, 54723, 54192, 36783, 57820, 36784, 36785, 36786, 57821, 36787, 53979, 36788, 46009, 45515, 36789, 36790, 36791, 52729, 54775, 57822, 36792, 48822, 46333, 36793, 57823, 47836, 57824, 48050, 49865, 57825, 36794, 36795, 36796, 53484, 36797, 52669, 36798, 36799, 57826, 36800, 46531, 50631, 57827, 36801, 36802, 57828, 36803, 36804, 36805, 36806, 54265, 36807, 36808, 36809, 36810, 36811, 36812, 57829, 36813, 53677, 36814, 36815, 57830, 52898, 36816, 36817, 36818, 36819, 36820, 36821, 57831, 36822, 46530, 36823, 36824, 36825, 36826, 57832, 48085, 36827, 36828, 36829, 36830, 36831, 53444, 58080, 45528, 53988, 36832, 36833, 58081, 36834, 36835, 48329, 51404, 36836, 58083, 60670, 60669, 57263, 36837, 36838, 36839, 58082, 54974, 52732, 50086, 36840, 36841, 36842, 58307, 36843, 36844, 54994, 58087, 36845, 36846, 58088, 36847, 36848, 54215, 36849, 36850, 58092, 49132, 36851, 58093, 58085, 36852, 36853, 46016, 36854, 36855, 36856, 50414, 36857, 36858, 58094, 36859, 36860, 53443, 36861, 47862, 58089, 47070, 48051, 52396, 52171, 58084, 58086, 58090, 58091, 36862, 36928, 36929, 58103, 36930, 36931, 58100, 54517, 58099, 36932, 36933, 50605, 36934, 54778, 50626, 45760, 36935, 36936, 58095, 36937, 58098, 49583, 52156, 36938, 36939, 46497, 58105, 36940, 36941, 36942, 48305, 58097, 53460, 54457, 58101, 47574, 58102, 36943, 36944, 36945, 51155, 36946, 36947, 36948, 36949, 36950, 58096, 36951, 36952, 36953, 36954, 36955, 55260, 60833, 36956, 36957, 58104, 36958, 60837, 58110, 51921, 36959, 36960, 36961, 36962, 36963, 36964, 36965, 49589, 36966, 48080, 36967, 36968, 49110, 36969, 47843, 36970, 36971, 52129, 36972, 36973, 36974, 60838, 60835, 36975, 36976, 60834, 36977, 36978, 36979, 36980, 48086, 60839, 53492, 36981, 36982, 60836, 47838, 46839, 58273, 46770, 52465, 47527, 36983, 53154, 51105, 36984, 36985, 49106, 36986, 36987, 46833, 36988, 58106, 58107, 58109, 58108, 50389, 58274, 36989, 54209, 36990, 36992, 36993, 58279, 51140, 36994, 36995, 36996, 36997, 53156, 36998, 36999, 58281, 47799, 37e3, 37001, 37002, 37003, 58280, 37004, 48090, 37005, 58275, 37006, 37007, 37008, 58276, 58282, 37009, 58278, 37010, 52978, 54214, 37011, 37012, 48060, 37013, 37014, 54467, 37015, 50426, 37016, 37017, 60840, 53500, 58277, 37018, 50165, 37019, 58285, 45487, 37020, 58290, 37021, 37022, 37023, 48322, 37024, 37025, 58284, 46527, 37026, 37027, 37028, 37029, 37030, 37031, 37032, 37033, 51177, 58288, 37034, 37035, 37036, 48810, 52719, 37037, 37038, 37039, 37040, 37041, 48115, 37042, 37043, 37044, 52456, 37045, 37046, 58287, 37047, 58289, 37048, 53159, 58286, 37049, 52905, 48093, 37050, 37051, 37052, 37053, 37054, 46571, 48869, 45778, 46029, 37055, 45497, 58283, 45777, 46508, 47583, 46824, 37056, 37057, 53227, 58295, 37058, 48076, 37059, 37060, 51399, 53450, 37061, 37062, 37063, 37064, 37065, 58296, 46062, 37066, 37067, 37068, 37069, 60841, 37070, 54266, 54244, 37071, 37072, 37073, 60842, 58297, 53986, 37074, 37075, 37076, 37077, 37078, 58293, 37079, 37080, 37081, 37082, 54238, 37083, 37084, 37085, 37086, 47312, 58291, 37087, 37088, 58294, 47071, 37089, 58292, 49314, 37090, 37091, 37092, 58298, 37093, 37094, 37095, 37096, 37097, 37098, 37099, 37100, 37101, 37102, 37103, 37104, 37105, 37106, 37107, 37108, 37109, 37110, 37111, 54456, 37112, 37113, 37114, 37115, 37116, 37117, 37118, 37184, 46280, 37185, 58299, 37186, 48069, 37187, 51703, 37188, 37189, 51685, 37190, 37191, 37192, 50365, 37193, 37194, 37195, 37196, 37197, 37198, 37199, 60843, 37200, 37201, 37202, 37203, 49917, 37204, 37205, 37206, 37207, 48091, 49070, 37208, 37209, 37210, 37211, 37212, 37213, 37214, 52927, 37215, 37216, 37217, 37218, 58300, 37219, 49078, 37220, 37221, 37222, 37223, 37224, 37225, 37226, 37227, 37228, 37229, 37230, 37231, 37232, 37233, 37234, 37235, 37236, 37237, 37238, 45551, 37239, 37240, 54519, 37241, 37242, 37243, 37244, 37245, 58302, 37246, 37248, 37249, 37250, 37251, 37252, 37253, 37254, 60845, 37255, 37256, 37257, 37258, 37259, 37260, 37261, 37262, 37263, 58303, 47785, 60844, 37264, 37265, 58301, 37266, 37267, 37268, 37269, 37270, 37271, 37272, 37273, 37274, 37275, 58304, 37276, 37277, 37278, 37279, 37280, 37281, 47798, 37282, 37283, 37284, 46766, 37285, 37286, 37287, 37288, 37289, 53432, 37290, 45251, 60846, 37291, 37292, 37293, 37294, 37295, 60847, 49345, 37296, 58305, 37297, 37298, 37299, 37300, 37301, 37302, 37303, 37304, 37305, 37306, 37307, 37308, 37309, 37310, 37311, 37312, 37313, 50611, 37314, 37315, 37316, 37317, 37318, 37319, 37320, 37321, 37322, 37323, 37324, 37325, 37326, 37327, 58306, 37328, 37329, 37330, 37331, 37332, 37333, 37334, 37335, 37336, 56498, 37337, 37338, 37339, 37340, 37341, 37342, 60848, 37343, 47338, 37344, 52972, 60071, 53479, 51961, 51414, 53175, 46025, 52946, 48612, 37345, 37346, 58334, 48114, 60072, 54717, 37347, 50909, 60073, 37348, 37349, 37350, 60074, 37351, 60076, 60075, 37352, 60078, 60077, 37353, 37354, 37355, 37356, 48600, 37357, 60079, 37358, 49854, 37359, 37360, 37361, 37362, 46273, 46327, 37363, 37364, 48039, 37365, 37366, 37367, 37368, 37369, 60646, 60645, 47039, 52217, 45538, 37370, 60647, 37371, 37372, 37373, 51656, 60648, 60649, 37374, 51926, 57040, 45765, 54522, 37440, 37441, 50891, 45255, 46322, 51411, 37442, 37443, 37444, 52688, 37445, 37446, 49080, 37447, 37448, 37449, 37450, 37451, 37452, 37453, 49115, 37454, 37455, 51108, 54964, 37456, 49321, 57041, 51624, 53743, 50596, 45287, 46006, 51397, 37457, 37458, 45282, 37459, 37460, 47094, 37461, 37462, 50682, 37463, 37464, 46835, 37465, 54738, 46032, 48316, 37466, 37467, 37468, 45997, 37469, 37470, 37471, 37472, 48881, 45265, 37473, 37474, 37475, 37476, 37477, 37478, 53974, 51939, 55205, 37479, 52662, 46774, 49081, 54747, 37480, 47271, 50647, 37481, 37482, 37483, 57042, 49113, 49877, 51136, 37484, 48036, 45480, 37485, 37486, 50666, 37487, 37488, 50683, 52391, 37489, 37490, 37491, 37492, 45479, 37493, 37494, 37495, 46550, 37496, 37497, 37498, 50344, 37499, 57043, 53690, 46057, 37500, 50162, 37501, 37502, 47095, 37504, 55028, 46499, 45808, 50356, 50409, 49325, 57044, 37505, 45288, 50628, 49632, 37506, 47573, 37507, 48860, 52696, 45262, 37508, 52687, 57046, 48848, 55230, 57045, 54736, 45277, 37509, 37510, 50402, 37511, 37512, 49827, 48368, 37513, 54197, 49337, 50593, 45734, 54513, 37514, 37515, 49320, 51907, 57047, 54780, 37516, 47536, 37517, 51373, 52137, 37518, 57049, 49085, 37519, 37520, 37521, 37522, 50868, 55207, 51888, 50371, 37523, 46038, 47570, 37524, 37525, 37526, 37527, 54968, 60156, 45236, 37528, 37529, 37530, 37531, 49126, 37532, 37533, 52468, 37534, 37535, 37536, 37537, 52698, 37538, 37539, 37540, 54975, 49870, 37541, 52942, 52386, 53422, 50387, 46514, 57048, 54773, 48311, 48083, 37542, 37543, 45220, 37544, 50610, 46316, 37545, 37546, 37547, 54769, 37548, 37549, 60157, 37550, 37551, 37552, 37553, 37554, 37555, 57050, 52646, 37556, 37557, 52716, 37558, 37559, 37560, 37561, 52966, 57052, 37562, 52657, 49318, 37563, 37564, 55229, 37565, 57051, 45254, 47796, 51667, 50419, 48872, 37566, 37567, 37568, 37569, 45750, 37570, 37571, 37572, 37573, 37574, 37575, 37576, 37577, 49356, 52208, 37578, 48369, 48059, 46519, 37579, 37580, 37581, 50677, 37582, 57062, 37583, 37584, 37585, 57059, 48861, 37586, 37587, 57055, 37588, 37589, 37590, 37591, 46263, 48605, 37592, 37593, 57056, 50413, 37594, 37595, 37596, 37597, 53190, 37598, 46560, 37599, 37600, 37601, 37602, 46814, 51930, 46580, 57061, 37603, 54726, 37604, 57057, 52429, 50942, 37605, 50629, 37606, 37607, 37608, 53940, 37609, 48882, 37610, 37611, 37612, 37613, 37614, 37615, 37616, 49875, 37617, 52413, 46008, 37618, 48595, 37619, 49112, 52678, 53722, 46315, 37620, 57060, 57053, 57063, 37621, 60158, 37622, 37623, 49840, 57058, 37624, 37625, 54976, 46503, 37626, 45812, 37627, 57064, 37628, 57074, 37629, 37630, 37696, 37697, 37698, 57069, 37699, 57073, 37700, 37701, 51424, 37702, 37703, 37704, 55265, 57071, 50152, 52449, 37705, 45797, 37706, 37707, 37708, 53950, 37709, 37710, 37711, 37712, 37713, 37714, 37715, 57070, 37716, 57067, 52949, 37717, 46247, 37718, 37719, 37720, 37721, 37722, 49067, 48830, 37723, 37724, 48594, 37725, 37726, 37727, 37728, 57065, 37729, 54446, 37730, 57054, 37731, 57066, 37732, 37733, 37734, 37735, 49343, 37736, 57068, 45811, 47337, 49831, 37737, 37738, 48577, 37739, 37740, 37741, 37742, 37743, 57077, 57080, 37744, 37745, 45739, 46244, 37746, 37747, 46314, 51622, 37748, 37749, 37750, 37751, 37752, 37753, 57078, 52177, 37754, 47331, 37755, 57079, 57082, 37756, 37757, 37758, 37760, 57081, 37761, 37762, 37763, 52418, 37764, 45281, 46318, 37765, 37766, 37767, 37768, 37769, 37770, 58810, 37771, 37772, 37773, 37774, 37775, 53423, 37776, 37777, 45803, 37778, 60321, 37779, 57076, 37780, 37781, 51683, 57075, 45274, 53921, 45559, 37782, 52399, 37783, 37784, 37785, 37786, 37787, 37788, 37789, 57072, 37790, 52132, 37791, 37792, 37793, 54698, 37794, 37795, 37796, 37797, 37798, 57083, 37799, 37800, 37801, 37802, 37803, 37804, 37805, 37806, 46301, 37807, 50342, 37808, 37809, 37810, 57085, 37811, 37812, 37813, 37814, 37815, 37816, 37817, 37818, 37819, 37820, 50174, 50337, 57249, 37821, 37822, 37823, 37824, 37825, 37826, 37827, 49612, 37828, 57084, 48879, 37829, 50866, 37830, 37831, 37832, 37833, 37834, 37835, 37836, 37837, 37838, 46021, 51446, 37839, 37840, 52154, 57086, 37841, 37842, 57252, 37843, 37844, 37845, 37846, 55218, 37847, 37848, 37849, 37850, 37851, 46007, 37852, 37853, 37854, 37855, 49603, 37856, 37857, 51147, 45733, 46313, 37858, 55211, 37859, 37860, 37861, 37862, 50412, 37863, 57250, 57251, 37864, 57253, 37865, 47795, 37866, 37867, 37868, 57254, 37869, 49374, 37870, 37871, 51651, 37872, 37873, 37874, 37875, 37876, 37877, 37878, 45785, 51174, 37879, 57255, 37880, 51164, 37881, 37882, 37883, 37884, 57256, 60322, 37885, 37886, 37952, 37953, 37954, 52179, 37955, 37956, 37957, 57258, 37958, 57257, 37959, 45761, 37960, 37961, 37962, 37963, 37964, 37965, 37966, 37967, 37968, 37969, 37970, 37971, 37972, 37973, 37974, 37975, 37976, 37977, 37978, 37979, 37980, 37981, 37982, 37983, 37984, 50634, 37985, 37986, 37987, 37988, 37989, 37990, 37991, 37992, 57259, 37993, 37994, 37995, 37996, 37997, 37998, 37999, 38e3, 54492, 38001, 38002, 38003, 38004, 38005, 51393, 38006, 38007, 38008, 38009, 38010, 38011, 38012, 38013, 38014, 38016, 38017, 38018, 57260, 38019, 38020, 38021, 38022, 38023, 48880, 38024, 38025, 57261, 54951, 38026, 38027, 38028, 38029, 60087, 60342, 51925, 38030, 55548, 47300, 38031, 47525, 38032, 38033, 47045, 54782, 38034, 38035, 38036, 38037, 38038, 47562, 38039, 38040, 53415, 62669, 38041, 38042, 46544, 38043, 38044, 50164, 38045, 48840, 38046, 38047, 38048, 60343, 45245, 38049, 38050, 48588, 38051, 49586, 38052, 45526, 45992, 38053, 38054, 38055, 47314, 51618, 38056, 38057, 46808, 38058, 38059, 38060, 38061, 60344, 48820, 38062, 38063, 38064, 51965, 38065, 51139, 38066, 54779, 38067, 38068, 47091, 38069, 38070, 38071, 38072, 38073, 38074, 38075, 38076, 38077, 38078, 38079, 38080, 38081, 38082, 38083, 52932, 38084, 38085, 38086, 54699, 45555, 38087, 38088, 38089, 60595, 45279, 38090, 60597, 38091, 38092, 38093, 46775, 38094, 49615, 38095, 62970, 53425, 38096, 38097, 54757, 38098, 52947, 38099, 38100, 48623, 46050, 38101, 47275, 38102, 54710, 38103, 60861, 38104, 46799, 38105, 52153, 53442, 38106, 38107, 38108, 38109, 38110, 38111, 38112, 38113, 47037, 38114, 38115, 60598, 51881, 38116, 38117, 38118, 50644, 38119, 60601, 60600, 49859, 60599, 38120, 38121, 38122, 38123, 53501, 60602, 38124, 60603, 55269, 38125, 38126, 60604, 38127, 38128, 38129, 60605, 50924, 38130, 38131, 38132, 38133, 38134, 38135, 38136, 38137, 52958, 38138, 48328, 38139, 38140, 51413, 46505, 48841, 54972, 54503, 38141, 38142, 53678, 53489, 60088, 60089, 60090, 47797, 38208, 38209, 38210, 38211, 51889, 49141, 38212, 38213, 52730, 38214, 38215, 38216, 38217, 38218, 60096, 38219, 45242, 60094, 38220, 38221, 49317, 38222, 38223, 38224, 60091, 38225, 45821, 38226, 50167, 48104, 38227, 38228, 38229, 53975, 52980, 60095, 38230, 38231, 38232, 60092, 38233, 38234, 38235, 60099, 38236, 53447, 54195, 38237, 38238, 38239, 38240, 46266, 38241, 50113, 55282, 38242, 38243, 38244, 38245, 54737, 38246, 51911, 38247, 60101, 38248, 38249, 60100, 60103, 60102, 38250, 38251, 38252, 38253, 38254, 55015, 38255, 53204, 38256, 38257, 60107, 38258, 48078, 38259, 38260, 38261, 38262, 38263, 38264, 38265, 48634, 51662, 38266, 38267, 60108, 38268, 38269, 51641, 53246, 60106, 54478, 60109, 60111, 38270, 38272, 52717, 38273, 38274, 38275, 38276, 60105, 38277, 60110, 38278, 38279, 52974, 38280, 48094, 38281, 46015, 38282, 38283, 38284, 38285, 38286, 50901, 48816, 52986, 38287, 38288, 38289, 51175, 38290, 48807, 60112, 38291, 38292, 54983, 38293, 38294, 38295, 49600, 38296, 38297, 38298, 54493, 38299, 60113, 38300, 38301, 53182, 38302, 38303, 38304, 38305, 60114, 38306, 38307, 38308, 38309, 51950, 38310, 38311, 38312, 38313, 50607, 45237, 38314, 38315, 38316, 38317, 38318, 60116, 38319, 38320, 38321, 38322, 38323, 38324, 38325, 38326, 38327, 60115, 62687, 38328, 38329, 38330, 38331, 38332, 50362, 38333, 38334, 38335, 38336, 38337, 45481, 38338, 38339, 38340, 38341, 58847, 38342, 38343, 38344, 38345, 60117, 38346, 38347, 38348, 38349, 38350, 38351, 38352, 38353, 38354, 38355, 38356, 38357, 38358, 38359, 38360, 38361, 38362, 38363, 38364, 38365, 38366, 38367, 38368, 38369, 38370, 38371, 51951, 38372, 60118, 60119, 50904, 38373, 38374, 38375, 38376, 38377, 38378, 38379, 38380, 60120, 38381, 38382, 60121, 38383, 38384, 38385, 38386, 38387, 38388, 54459, 38389, 51194, 53943, 47356, 38390, 38391, 60098, 38392, 45788, 38393, 38394, 49916, 38395, 54520, 52454, 55278, 38396, 38397, 38398, 38464, 38465, 38466, 38467, 54466, 54224, 60355, 50675, 38468, 47102, 38469, 38470, 60372, 38471, 38472, 38473, 52151, 60382, 38474, 49354, 38475, 38476, 38477, 52731, 38478, 45999, 38479, 50906, 38480, 38481, 38482, 38483, 38484, 38485, 60412, 38486, 50366, 38487, 52916, 50345, 45502, 54525, 38488, 51957, 38489, 55020, 38490, 38491, 50899, 46820, 38492, 38493, 38494, 38495, 48122, 38496, 38497, 53472, 38498, 38499, 51633, 38500, 54483, 51368, 38501, 38502, 47307, 38503, 59582, 51644, 38504, 38505, 59579, 38506, 49390, 53459, 45764, 46309, 38507, 59580, 38508, 38509, 54728, 38510, 38511, 38512, 38513, 38514, 46789, 38515, 59581, 51960, 47324, 52469, 38516, 38517, 38518, 49332, 38519, 38520, 53742, 59583, 59586, 38521, 38522, 47804, 38523, 45485, 48604, 38524, 60093, 59587, 38525, 59590, 38526, 59595, 38528, 38529, 38530, 38531, 59596, 38532, 52169, 45285, 38533, 48299, 38534, 38535, 47545, 38536, 38537, 59585, 38538, 52727, 38539, 59594, 38540, 38541, 38542, 38543, 52982, 38544, 38545, 38546, 38547, 54765, 38548, 49622, 59588, 38549, 50102, 38550, 47611, 54950, 59592, 38551, 38552, 38553, 51936, 54502, 38554, 59584, 38555, 59589, 59591, 38556, 51129, 47075, 38557, 59593, 38558, 49117, 59602, 38559, 38560, 59607, 38561, 59605, 48348, 48335, 59611, 38562, 38563, 38564, 38565, 38566, 38567, 38568, 38569, 59614, 38570, 59610, 45562, 38571, 38572, 38573, 38574, 38575, 38576, 38577, 38578, 38579, 38580, 45272, 50355, 47308, 50914, 51390, 51425, 38581, 38582, 38583, 59599, 59604, 59606, 38584, 47601, 59608, 55285, 38585, 50427, 38586, 59612, 38587, 38588, 45801, 38589, 38590, 38591, 59601, 38592, 38593, 48365, 38594, 38595, 49090, 59597, 55033, 38596, 49656, 45809, 38597, 38598, 38599, 38600, 38601, 38602, 38603, 38604, 59615, 38605, 51905, 59609, 38606, 38607, 38608, 38609, 54692, 38610, 45546, 54715, 59598, 59600, 46768, 59603, 38611, 59613, 49336, 38612, 51959, 38613, 52136, 38614, 38615, 50908, 49397, 38616, 38617, 38618, 38619, 38620, 59625, 38621, 38622, 38623, 53411, 38624, 38625, 38626, 38627, 38628, 38629, 38630, 59634, 55018, 38631, 38632, 38633, 38634, 38635, 38636, 38637, 59616, 59617, 38638, 38639, 38640, 53753, 47819, 47353, 38641, 38642, 47345, 54484, 59631, 38643, 59630, 59628, 47600, 52434, 59622, 52902, 49138, 38644, 45240, 59633, 59632, 38645, 55232, 38646, 59620, 38647, 52649, 51619, 38648, 48056, 48603, 59626, 38649, 38650, 38651, 38652, 38653, 38654, 38720, 38721, 38722, 38723, 59618, 59619, 59621, 46517, 59623, 51141, 59627, 59629, 48560, 55214, 38724, 59640, 38725, 38726, 38727, 38728, 38729, 38730, 38731, 38732, 59637, 38733, 52656, 59638, 38734, 38735, 38736, 38737, 38738, 38739, 38740, 38741, 38742, 49594, 38743, 59624, 38744, 50103, 45296, 38745, 38746, 38747, 38748, 38749, 38750, 38751, 38752, 59636, 38753, 38754, 38755, 59639, 38756, 38757, 38758, 47523, 38759, 38760, 38761, 38762, 38763, 38764, 38765, 38766, 38767, 38768, 51666, 38769, 38770, 38771, 50126, 52960, 49382, 38772, 38773, 38774, 38775, 52211, 38776, 52445, 53429, 38777, 38778, 51937, 38779, 59635, 38780, 38781, 38782, 38784, 38785, 38786, 38787, 38788, 38789, 38790, 48364, 38791, 59641, 38792, 38793, 38794, 38795, 38796, 38797, 50142, 38798, 50917, 38799, 47607, 38800, 38801, 38802, 38803, 45300, 38804, 38805, 55256, 38806, 38807, 48300, 38808, 50671, 38809, 38810, 38811, 38812, 38813, 52420, 38814, 38815, 59814, 38816, 38817, 38818, 38819, 38820, 38821, 38822, 38823, 38824, 38825, 51629, 38826, 59810, 49378, 38827, 38828, 38829, 49091, 38830, 38831, 38832, 59646, 47575, 38833, 59643, 38834, 38835, 38836, 38837, 59812, 38838, 38839, 38840, 53966, 38841, 38842, 38843, 38844, 38845, 59811, 38846, 54962, 55221, 38847, 59815, 38848, 48567, 38849, 38850, 38851, 38852, 38853, 38854, 38855, 38856, 38857, 38858, 38859, 38860, 59644, 59645, 38861, 38862, 38863, 59809, 38864, 38865, 38866, 38867, 38868, 38869, 38870, 38871, 52694, 38872, 38873, 53932, 38874, 38875, 38876, 59826, 38877, 38878, 38879, 38880, 59817, 38881, 38882, 38883, 46250, 38884, 46267, 38885, 38886, 59819, 38887, 38888, 38889, 38890, 38891, 38892, 38893, 38894, 38895, 38896, 38897, 38898, 38899, 38900, 38901, 38902, 38903, 53416, 38904, 38905, 59813, 38906, 38907, 46078, 38908, 38909, 59820, 49379, 38910, 59818, 38976, 38977, 59833, 38978, 38979, 59832, 38980, 38981, 38982, 38983, 59822, 38984, 38985, 59642, 38986, 38987, 59816, 38988, 38989, 38990, 38991, 38992, 49068, 59825, 59834, 38993, 38994, 49829, 38995, 38996, 38997, 59823, 38998, 47301, 38999, 59821, 39e3, 54236, 59828, 59829, 59831, 39001, 39002, 39003, 59847, 39004, 39005, 39006, 39007, 39008, 39009, 49350, 59845, 39010, 39011, 59824, 39012, 39013, 59835, 45297, 39014, 39015, 39016, 39017, 39018, 39019, 39020, 39021, 39022, 39023, 59836, 54693, 39024, 39025, 59838, 39026, 59839, 39027, 39028, 39029, 59841, 39030, 39031, 49649, 39032, 39033, 51382, 39034, 39035, 39036, 59837, 39037, 39038, 39040, 39041, 39042, 59842, 39043, 39044, 39045, 39046, 39047, 39048, 39049, 39050, 59843, 39051, 59827, 39052, 59830, 39053, 48049, 39054, 39055, 39056, 59840, 39057, 39058, 39059, 39060, 39061, 39062, 48375, 39063, 39064, 39065, 59844, 59846, 39066, 39067, 39068, 39069, 39070, 39071, 39072, 39073, 39074, 39075, 39076, 39077, 59850, 39078, 39079, 39080, 39081, 59854, 39082, 39083, 39084, 39085, 39086, 39087, 39088, 39089, 39090, 39091, 45787, 39092, 59848, 39093, 39094, 39095, 39096, 39097, 39098, 39099, 39100, 39101, 39102, 47022, 39103, 39104, 39105, 39106, 39107, 39108, 39109, 39110, 39111, 39112, 39113, 39114, 59851, 59852, 39115, 39116, 39117, 39118, 39119, 39120, 54721, 39121, 50339, 39122, 39123, 39124, 39125, 39126, 39127, 59864, 39128, 47841, 39129, 39130, 39131, 39132, 59849, 39133, 54179, 39134, 39135, 39136, 59860, 39137, 39138, 39139, 39140, 39141, 39142, 39143, 59863, 59856, 39144, 39145, 39146, 39147, 39148, 59855, 39149, 39150, 51137, 39151, 39152, 39153, 39154, 39155, 39156, 39157, 39158, 59858, 39159, 39160, 39161, 39162, 39163, 39164, 39165, 59865, 46024, 39166, 59859, 39232, 39233, 39234, 39235, 39236, 53232, 39237, 39238, 39239, 59853, 39240, 39241, 39242, 39243, 39244, 39245, 39246, 39247, 39248, 39249, 39250, 46071, 39251, 39252, 39253, 39254, 39255, 39256, 39257, 59862, 39258, 39259, 59866, 39260, 39261, 39262, 52404, 39263, 39264, 39265, 53165, 39266, 39267, 39268, 39269, 39270, 39271, 39272, 39273, 39274, 59861, 39275, 59868, 59867, 39276, 39277, 39278, 39279, 39280, 59870, 39281, 39282, 39283, 39284, 39285, 39286, 39287, 39288, 59857, 39289, 39290, 39291, 39292, 39293, 39294, 39296, 39297, 59869, 39298, 59871, 50122, 39299, 39300, 39301, 39302, 39303, 39304, 39305, 39306, 39307, 39308, 39309, 39310, 39311, 39312, 39313, 39314, 39315, 39316, 39317, 39318, 39319, 39320, 39321, 39322, 39323, 39324, 39325, 39326, 39327, 39328, 39329, 39330, 39331, 39332, 39333, 39334, 39335, 39336, 39337, 39338, 39339, 39340, 39341, 39342, 39343, 39344, 39345, 39346, 39347, 39348, 39349, 39350, 39351, 39352, 39353, 39354, 39355, 39356, 39357, 39358, 39359, 39360, 39361, 39362, 39363, 39364, 39365, 39366, 39367, 39368, 39369, 39370, 39371, 39372, 39373, 39374, 39375, 39376, 39377, 39378, 39379, 39380, 39381, 39382, 39383, 39384, 39385, 39386, 39387, 39388, 39389, 39390, 39391, 39392, 39393, 39394, 39395, 39396, 39397, 39398, 39399, 39400, 39401, 39402, 39403, 39404, 39405, 39406, 39407, 39408, 39409, 39410, 39411, 39412, 39413, 51127, 46286, 48054, 53440, 60579, 39414, 39415, 50615, 39416, 39417, 39418, 39419, 39420, 39421, 39422, 39488, 39489, 39490, 54267, 39491, 39492, 39493, 39494, 60580, 39495, 60581, 50907, 39496, 39497, 39498, 49134, 39499, 39500, 39501, 39502, 60582, 39503, 39504, 60583, 53418, 39505, 51128, 39506, 39507, 47336, 39508, 39509, 39510, 39511, 39512, 39513, 39514, 39515, 39516, 39517, 39518, 39519, 60584, 39520, 39521, 39522, 39523, 39524, 39525, 39526, 39527, 54969, 54781, 46283, 45757, 52964, 50919, 39528, 39529, 52705, 39530, 39531, 39532, 39533, 39534, 39535, 39536, 39537, 39538, 39539, 39540, 39541, 39542, 39543, 46325, 39544, 52160, 48351, 39545, 39546, 39547, 39548, 59874, 59875, 53738, 59877, 39549, 46329, 59876, 39550, 53683, 51938, 45776, 39552, 59880, 39553, 39554, 39555, 39556, 59878, 59879, 39557, 39558, 54963, 39559, 39560, 39561, 59881, 59882, 39562, 39563, 39564, 39565, 39566, 59883, 39567, 39568, 39569, 39570, 39571, 39572, 39573, 39574, 59884, 39575, 39576, 39577, 39578, 39579, 39580, 39581, 39582, 60591, 50617, 46798, 39583, 54003, 39584, 39585, 39586, 39587, 39588, 39589, 39590, 46574, 39591, 48089, 60593, 39592, 39593, 53987, 39594, 39595, 39596, 39597, 39598, 52963, 39599, 50360, 39600, 50111, 39601, 39602, 46782, 55481, 45512, 45519, 45521, 50686, 39603, 45520, 39604, 50091, 39605, 39606, 39607, 39608, 39609, 54705, 39610, 39611, 39612, 39613, 39614, 39615, 39616, 39617, 60324, 47809, 39618, 39619, 39620, 52410, 39621, 39622, 39623, 60325, 39624, 60327, 39625, 39626, 39627, 60328, 39628, 39629, 39630, 60326, 39631, 39632, 39633, 39634, 39635, 39636, 39637, 60329, 60331, 60330, 39638, 39639, 39640, 39641, 39642, 60332, 39643, 51919, 55477, 50161, 39644, 50085, 50936, 60333, 50378, 39645, 60334, 60335, 60336, 47061, 39646, 39647, 39648, 47098, 39649, 60337, 51170, 39650, 60339, 39651, 47780, 53749, 45233, 60338, 60340, 39652, 39653, 39654, 46506, 49864, 51176, 39655, 60341, 39656, 52142, 58335, 39657, 39658, 54208, 39659, 39660, 39661, 39662, 55771, 39663, 39664, 52641, 54957, 51187, 39665, 39666, 39667, 55776, 48099, 39668, 47802, 58338, 39669, 39670, 39671, 39672, 39673, 53163, 39674, 39675, 39676, 58336, 51655, 39677, 47801, 39678, 39744, 39745, 53684, 58337, 51434, 47535, 48557, 46040, 52955, 39746, 39747, 52416, 39748, 39749, 39750, 58344, 58345, 52724, 39751, 39752, 39753, 39754, 39755, 52397, 39756, 48307, 39757, 58346, 39758, 58347, 39759, 39760, 53466, 39761, 39762, 39763, 50939, 47066, 39764, 39765, 51167, 53962, 52950, 39766, 58340, 58348, 39767, 51698, 46017, 39768, 39769, 58343, 39770, 39771, 50915, 58341, 39772, 39773, 60851, 58342, 39774, 39775, 39776, 39777, 51635, 39778, 50662, 39779, 39780, 39781, 47541, 39782, 50107, 39783, 58339, 50621, 49572, 49881, 45783, 39784, 58349, 48038, 50349, 39785, 58352, 48858, 39786, 39787, 58363, 58357, 47827, 39788, 39789, 39790, 39791, 47056, 54221, 39792, 54990, 54739, 47553, 54708, 53720, 39793, 39794, 39795, 39796, 53433, 51190, 39797, 39798, 39799, 51370, 45748, 39800, 50138, 39801, 39802, 39803, 58350, 39804, 39805, 58364, 58351, 47016, 58359, 58356, 39806, 39808, 39809, 47034, 39810, 39811, 50594, 39812, 58358, 50653, 45736, 50940, 39813, 50400, 39814, 39815, 55202, 39816, 49377, 58361, 39817, 39818, 58362, 58365, 52393, 58355, 39819, 54206, 39820, 45507, 60852, 58353, 58354, 39821, 58360, 53434, 50883, 54515, 58366, 39822, 39823, 48608, 39824, 39825, 58535, 39826, 39827, 58534, 39828, 39829, 39830, 53747, 58531, 39831, 58537, 39832, 39833, 39834, 51447, 39835, 39836, 39837, 39838, 53172, 39839, 58536, 58542, 49893, 39840, 39841, 46772, 39842, 39843, 39844, 39845, 39846, 39847, 48626, 39848, 58530, 39849, 39850, 47849, 58538, 39851, 39852, 58540, 39853, 39854, 46845, 55006, 58546, 39855, 58541, 39856, 39857, 39858, 58529, 39859, 48110, 52701, 51106, 50633, 39860, 39861, 49655, 39862, 58532, 39863, 51123, 48556, 48573, 58533, 39864, 55239, 45794, 39865, 58539, 48323, 58543, 39866, 48107, 58544, 50600, 58545, 39867, 39868, 39869, 39870, 54755, 49059, 39871, 58554, 39872, 58551, 39873, 58555, 39874, 39875, 58557, 39876, 39877, 50902, 39878, 39879, 47814, 49355, 39880, 39881, 39882, 47265, 58548, 39883, 39884, 39885, 39886, 54433, 39887, 39888, 47779, 48638, 39889, 39890, 39891, 58556, 39892, 39893, 39894, 39895, 39896, 52671, 39897, 39898, 50425, 39899, 39900, 53243, 51686, 39901, 39902, 54207, 39903, 53201, 39904, 39905, 58547, 39906, 58552, 58553, 52457, 39907, 39908, 39909, 39910, 39911, 52430, 39912, 49364, 58549, 49584, 58550, 52944, 39913, 48065, 46547, 39914, 51443, 48551, 54727, 51628, 47266, 58570, 39915, 39916, 58572, 53700, 39917, 39918, 53946, 39919, 39920, 47789, 39921, 39922, 47828, 39923, 39924, 39925, 39926, 39927, 39928, 58563, 46573, 39929, 39930, 39931, 55245, 58560, 53245, 58559, 39932, 39933, 39934, 49628, 52426, 4e4, 40001, 40002, 40003, 51943, 40004, 40005, 40006, 40007, 50391, 40008, 52436, 58568, 40009, 40010, 40011, 58567, 58561, 40012, 58564, 46509, 40013, 40014, 54233, 40015, 58566, 40016, 40017, 40018, 40019, 54009, 46307, 40020, 48052, 40021, 40022, 51694, 40023, 46270, 40024, 40025, 40026, 48108, 40027, 53709, 40028, 52461, 60853, 40029, 40030, 40031, 40032, 40033, 40034, 40035, 40036, 51173, 40037, 40038, 40039, 40040, 54440, 40041, 58571, 55253, 58562, 40042, 48549, 58565, 40043, 40044, 54246, 40045, 58569, 51704, 40046, 40047, 58558, 40048, 40049, 54245, 40050, 40051, 51198, 46793, 40052, 54524, 45747, 58583, 40053, 40054, 40055, 52930, 40056, 58573, 40057, 52924, 40058, 47323, 40059, 40060, 58582, 40061, 49098, 40062, 40064, 40065, 54222, 40066, 50156, 40067, 40068, 40069, 40070, 40071, 40072, 40073, 40074, 50632, 58584, 40075, 40076, 40077, 40078, 40079, 40080, 40081, 40082, 52676, 58575, 40083, 40084, 40085, 40086, 58580, 58581, 40087, 47870, 40088, 53222, 40089, 40090, 54719, 40091, 40092, 40093, 58578, 40094, 40095, 40096, 40097, 40098, 40099, 40100, 40101, 40102, 40103, 40104, 58576, 40105, 40106, 58574, 40107, 40108, 40109, 40110, 40111, 40112, 40113, 40114, 40115, 40116, 40117, 40118, 40119, 40120, 40121, 52709, 51882, 40122, 40123, 40124, 49315, 40125, 48550, 58579, 40126, 40127, 47304, 40128, 40129, 40130, 40131, 40132, 58599, 54452, 40133, 40134, 40135, 40136, 40137, 40138, 40139, 58587, 40140, 40141, 40142, 49647, 40143, 40144, 58601, 40145, 40146, 53991, 40147, 40148, 58591, 40149, 58592, 40150, 40151, 53162, 40152, 40153, 40154, 40155, 52189, 40156, 58586, 58577, 40157, 58597, 40158, 51420, 58595, 40159, 40160, 50407, 58594, 40161, 58593, 40162, 40163, 40164, 46076, 58600, 40165, 40166, 40167, 40168, 46561, 40169, 40170, 40171, 55244, 40172, 40173, 40174, 58598, 40175, 48044, 40176, 55250, 52431, 60408, 40177, 58596, 40178, 40179, 47606, 40180, 40181, 40182, 54989, 58585, 58588, 49914, 58590, 40183, 49867, 49348, 49872, 40184, 45557, 52402, 40185, 40186, 40187, 40188, 40189, 40190, 40256, 40257, 40258, 40259, 46542, 40260, 40261, 40262, 40263, 58607, 40264, 40265, 40266, 40267, 40268, 40269, 40270, 40271, 50863, 40272, 40273, 40274, 50913, 40275, 40276, 58613, 40277, 40278, 40279, 40280, 40281, 49833, 40282, 40283, 40284, 49388, 53725, 58606, 40285, 40286, 40287, 40288, 40289, 40290, 40291, 40292, 40293, 40294, 50350, 40295, 40296, 40297, 58605, 40298, 40299, 40300, 40301, 58614, 58612, 49918, 40302, 58589, 40303, 58608, 40304, 51966, 40305, 54724, 40306, 40307, 58609, 40308, 40309, 40310, 40311, 40312, 40313, 40314, 53754, 40315, 40316, 40317, 40318, 40320, 40321, 40322, 58603, 58604, 40323, 40324, 40325, 58610, 40326, 52907, 40327, 40328, 40329, 40330, 40331, 40332, 40333, 40334, 40335, 40336, 50635, 40337, 40338, 40339, 51121, 40340, 49850, 40341, 40342, 40343, 58602, 40344, 40345, 40346, 49610, 40347, 40348, 40349, 40350, 40351, 40352, 52406, 46001, 40353, 40354, 40355, 58619, 40356, 58611, 40357, 40358, 40359, 58618, 40360, 58621, 40361, 58620, 40362, 40363, 40364, 40365, 40366, 40367, 40368, 46030, 40369, 40370, 40371, 46010, 58615, 40372, 40373, 58617, 58616, 50668, 40374, 40375, 40376, 40377, 40378, 40379, 40380, 40381, 40382, 40383, 40384, 40385, 40386, 49341, 40387, 40388, 40389, 40390, 54504, 40391, 40392, 40393, 40394, 40395, 58786, 40396, 40397, 40398, 40399, 40400, 40401, 40402, 40403, 40404, 40405, 40406, 45252, 40407, 40408, 58788, 40409, 40410, 58787, 40411, 40412, 40413, 40414, 40415, 40416, 48292, 40417, 58789, 40418, 40419, 40420, 40421, 40422, 40423, 58785, 40424, 40425, 40426, 40427, 40428, 40429, 40430, 58622, 45556, 40431, 40432, 40433, 40434, 40435, 40436, 40437, 40438, 40439, 40440, 40441, 58792, 40442, 58793, 58790, 40443, 40444, 40445, 40446, 40512, 40513, 40514, 40515, 40516, 40517, 40518, 40519, 58791, 58794, 40520, 40521, 40522, 40523, 40524, 40525, 40526, 40527, 40528, 40529, 40530, 40531, 40532, 40533, 40534, 40535, 40536, 40537, 40538, 40539, 40540, 40541, 40542, 40543, 40544, 40545, 40546, 40547, 40548, 40549, 40550, 40551, 40552, 50905, 40553, 40554, 40555, 40556, 40557, 40558, 40559, 40560, 58795, 58797, 40561, 40562, 40563, 40564, 40565, 40566, 40567, 58796, 40568, 40569, 40570, 40571, 40572, 40573, 40574, 40576, 40577, 40578, 40579, 40580, 40581, 40582, 40583, 40584, 40585, 58799, 40586, 40587, 40588, 58798, 40589, 40590, 40591, 40592, 40593, 40594, 40595, 40596, 40597, 40598, 40599, 40600, 40601, 40602, 40603, 40604, 40605, 40606, 47584, 40607, 40608, 58800, 40609, 40610, 40611, 40612, 40613, 40614, 40615, 40616, 40617, 40618, 40619, 40620, 40621, 40622, 58801, 40623, 40624, 40625, 40626, 40627, 40628, 40629, 40630, 40631, 40632, 40633, 40634, 48112, 60641, 50160, 40635, 46534, 48082, 40636, 40637, 40638, 40639, 49641, 54510, 40640, 48836, 40641, 40642, 40643, 55238, 40644, 54486, 45779, 60606, 40645, 40646, 40647, 40648, 60097, 40649, 40650, 40651, 49839, 46262, 40652, 40653, 40654, 53719, 40655, 40656, 40657, 46004, 40658, 51378, 49083, 60608, 40659, 40660, 54987, 40661, 40662, 60607, 60609, 40663, 40664, 40665, 40666, 40667, 40668, 40669, 40670, 40671, 40672, 40673, 40674, 40675, 60613, 48870, 52415, 50650, 48828, 40676, 60614, 40677, 45566, 40678, 40679, 40680, 60612, 54696, 46563, 40681, 60610, 49590, 46051, 40682, 40683, 60611, 52152, 49347, 52478, 40684, 40685, 40686, 40687, 49618, 40688, 60616, 40689, 40690, 40691, 40692, 40693, 40694, 40695, 40696, 40697, 40698, 40699, 40700, 40701, 47846, 49363, 40702, 55026, 40768, 40769, 40770, 53708, 40771, 40772, 40773, 40774, 49086, 40775, 47027, 51669, 60615, 48098, 40776, 52428, 48637, 51400, 40777, 53161, 40778, 40779, 40780, 40781, 40782, 40783, 40784, 52713, 40785, 50667, 40786, 40787, 40788, 47081, 40789, 40790, 40791, 40792, 40793, 40794, 40795, 40796, 40797, 40798, 40799, 53705, 47800, 40800, 40801, 40802, 40803, 40804, 60617, 40805, 40806, 60618, 40807, 48064, 60619, 40808, 60642, 45498, 47065, 40809, 40810, 40811, 40812, 40813, 40814, 40815, 40816, 40817, 40818, 40819, 48569, 40820, 40821, 40822, 40823, 40824, 40825, 40826, 40827, 60620, 53734, 60621, 40828, 40829, 40830, 40832, 51387, 40833, 40834, 40835, 40836, 40837, 40838, 40839, 40840, 40841, 40842, 40843, 40844, 40845, 40846, 60625, 40847, 40848, 40849, 40850, 60627, 40851, 48077, 40852, 48357, 40853, 40854, 40855, 40856, 40857, 40858, 40859, 40860, 40861, 40862, 40863, 40864, 40865, 60623, 40866, 51639, 40867, 40868, 40869, 40870, 40871, 50106, 40872, 60643, 54741, 60624, 40873, 40874, 40875, 40876, 40877, 55027, 40878, 40879, 40880, 60626, 60622, 40881, 40882, 40883, 40884, 60628, 40885, 60629, 40886, 40887, 51647, 40888, 40889, 40890, 40891, 40892, 40893, 53160, 40894, 40895, 40896, 40897, 40898, 53468, 40899, 40900, 40901, 40902, 53676, 40903, 40904, 40905, 40906, 51419, 40907, 40908, 40909, 60630, 52981, 40910, 40911, 40912, 40913, 40914, 51948, 60634, 40915, 40916, 40917, 40918, 40919, 40920, 40921, 60633, 40922, 40923, 40924, 45246, 40925, 40926, 40927, 40928, 40929, 40930, 60631, 40931, 60632, 40932, 40933, 40934, 60644, 40935, 40936, 40937, 40938, 40939, 40940, 40941, 40942, 40943, 51388, 40944, 40945, 40946, 40947, 40948, 40949, 40950, 40951, 40952, 40953, 49607, 40954, 40955, 40956, 40957, 40958, 60636, 53728, 41024, 41025, 41026, 41027, 41028, 41029, 41030, 41031, 41032, 41033, 60635, 41034, 41035, 41036, 41037, 54511, 41038, 60637, 41039, 41040, 41041, 41042, 41043, 41044, 56262, 41045, 41046, 41047, 41048, 41049, 41050, 41051, 41052, 41053, 41054, 60638, 41055, 41056, 41057, 41058, 41059, 41060, 41061, 41062, 41063, 41064, 41065, 41066, 45484, 41067, 41068, 41069, 41070, 41071, 41072, 41073, 41074, 41075, 41076, 41077, 41078, 41079, 41080, 41081, 41082, 41083, 41084, 41085, 41086, 41088, 41089, 60639, 41090, 41091, 41092, 41093, 41094, 41095, 41096, 41097, 41098, 41099, 60640, 41100, 55206, 41101, 50624, 41102, 41103, 41104, 60348, 45230, 41105, 41106, 41107, 48884, 47288, 53935, 45270, 46585, 41108, 55475, 41109, 52140, 41110, 58333, 41111, 41112, 41113, 41114, 41115, 41116, 41117, 50860, 45286, 41118, 41119, 41120, 50630, 60345, 41121, 41122, 41123, 41124, 60346, 41125, 41126, 41127, 60347, 41128, 41129, 53696, 41130, 50595, 41131, 60146, 41132, 50354, 41133, 50357, 49358, 41134, 41135, 41136, 60147, 50369, 41137, 52975, 41138, 41139, 41140, 41141, 60144, 60148, 41142, 41143, 51708, 41144, 41145, 51107, 41146, 41147, 41148, 52440, 52990, 41149, 41150, 41151, 60149, 60150, 53164, 49383, 41152, 41153, 60151, 41154, 41155, 41156, 41157, 41158, 46783, 60152, 41159, 60153, 41160, 60154, 41161, 41162, 60155, 41163, 41164, 41165, 41166, 41167, 41168, 41169, 41170, 41171, 41172, 41173, 41174, 60145, 41175, 41176, 41177, 41178, 41179, 41180, 41181, 41182, 41183, 41184, 41185, 41186, 51374, 57835, 41187, 47032, 57836, 41188, 41189, 41190, 57837, 41191, 55220, 57838, 57839, 54220, 41192, 41193, 41194, 41195, 41196, 41197, 41198, 57841, 49137, 57840, 46546, 41199, 41200, 41201, 45495, 41202, 41203, 41204, 41205, 57843, 57842, 41206, 47868, 41207, 57844, 41208, 41209, 41210, 41211, 47543, 41212, 48849, 41213, 41214, 43584, 43585, 50428, 43586, 47837, 48582, 43587, 43588, 43589, 43590, 43591, 43592, 57845, 57847, 43593, 43594, 46784, 53185, 51880, 57846, 54776, 54268, 57848, 57852, 57849, 43595, 43596, 57850, 49386, 43597, 57854, 58017, 49351, 43598, 43599, 43600, 43601, 57851, 43602, 57853, 43603, 43604, 43605, 43606, 43607, 43608, 58021, 43609, 43610, 43611, 49620, 43612, 43613, 43614, 43615, 58019, 43616, 58024, 45822, 58018, 43617, 43618, 43619, 50125, 45762, 58023, 58022, 43620, 43621, 58020, 58025, 43622, 43623, 58027, 43624, 43625, 43626, 53449, 55021, 50088, 58028, 43627, 53207, 43628, 43629, 58030, 43630, 43631, 47855, 43632, 43633, 59872, 58029, 58026, 43634, 43635, 43636, 43637, 48043, 54451, 43638, 43639, 43640, 43641, 43642, 43643, 43644, 43645, 43646, 43648, 43649, 43650, 43651, 58032, 43652, 43653, 58031, 43654, 59873, 43655, 43656, 43657, 43658, 58033, 43659, 43660, 43661, 43662, 43663, 43664, 43665, 43666, 58034, 43667, 43668, 43669, 43670, 43671, 43672, 43673, 43674, 43675, 43676, 43677, 58035, 52385, 43678, 58036, 43679, 43680, 43840, 43841, 43842, 43843, 43844, 43845, 43846, 43847, 43848, 43849, 43850, 43851, 58037, 43852, 43853, 43854, 43855, 43856, 53502, 43857, 43858, 49866, 43859, 54257, 43860, 52725, 43861, 43862, 59360, 43863, 43864, 59361, 43865, 43866, 43867, 43868, 48833, 43869, 43870, 43871, 43872, 49898, 43873, 43874, 43875, 59364, 43876, 43877, 59363, 43878, 43879, 43880, 43881, 43882, 43883, 52710, 43884, 50101, 43885, 43886, 59362, 48055, 53206, 43887, 49633, 59369, 43888, 43889, 43890, 59368, 43891, 43892, 59380, 45731, 43893, 43894, 43895, 43896, 59370, 43897, 59366, 43898, 43899, 43900, 43901, 43902, 59372, 59371, 51642, 43904, 43905, 54756, 43906, 59365, 47017, 59367, 43907, 43908, 43909, 43910, 43911, 43912, 43913, 59374, 43914, 43915, 43916, 43917, 59379, 43918, 55017, 43919, 43920, 43921, 43922, 59373, 43923, 59378, 43924, 59377, 43925, 43926, 43927, 45280, 43928, 43929, 43930, 43931, 59381, 43932, 43933, 43934, 43935, 43936, 44096, 44097, 44098, 44099, 44100, 44101, 44102, 44103, 44104, 44105, 44106, 51186, 44107, 49349, 49389, 44108, 44109, 49648, 59376, 44110, 44111, 44112, 44113, 59382, 52214, 44114, 44115, 44116, 44117, 44118, 44119, 44120, 44121, 44122, 59554, 59553, 44123, 44124, 44125, 44126, 44127, 44128, 55233, 44129, 44130, 59386, 59385, 44131, 59387, 44132, 59383, 44133, 59390, 44134, 59389, 44135, 59388, 44136, 44137, 49621, 51161, 50685, 50627, 44138, 44139, 44140, 44141, 44142, 51181, 44143, 44144, 44145, 44146, 59555, 44147, 44148, 44149, 44150, 44151, 44152, 44153, 44154, 44155, 44156, 44157, 44158, 44160, 44161, 44162, 44163, 44164, 44165, 44166, 59558, 44167, 59557, 44168, 59559, 47863, 59384, 59556, 44169, 51440, 51626, 44170, 44171, 44172, 44173, 44174, 44175, 44176, 44177, 44178, 44179, 44180, 44181, 44182, 59561, 44183, 44184, 47589, 44185, 44186, 44187, 44188, 44189, 53758, 59560, 44190, 44191, 44192, 44352, 44353, 44354, 59562, 44355, 59565, 59566, 44356, 49575, 44357, 44358, 44359, 59567, 44360, 44361, 44362, 59568, 44363, 44364, 59564, 44365, 59572, 44366, 44367, 44368, 44369, 44370, 44371, 44372, 44373, 44374, 44375, 44376, 59563, 44377, 59569, 44378, 44379, 44380, 44381, 44382, 44383, 44384, 44385, 59573, 59570, 59571, 44386, 44387, 44388, 44389, 44390, 44391, 44392, 44393, 44394, 44395, 44396, 44397, 44398, 44399, 44400, 44401, 59575, 44402, 44403, 44404, 44405, 44406, 44407, 44408, 44409, 44410, 44411, 44412, 44413, 44414, 44416, 44417, 44418, 44419, 44420, 44421, 44422, 44423, 44424, 44425, 59574, 44426, 44427, 44428, 44429, 44430, 44431, 44432, 44433, 44434, 47567, 44435, 61612, 44436, 61613, 44437, 50864, 45290, 51391, 44438, 52703, 44439, 44440, 44441, 44442, 44443, 44444, 44445, 52941, 60081, 44446, 44447, 44448, 44608, 60082, 44609, 50879, 46281, 44610, 44611, 44612, 44613, 44614, 44615, 44616, 60083, 44617, 44618, 44619, 44620, 54759, 44621, 44622, 44623, 44624, 44625, 44626, 44627, 44628, 56825, 44629, 60084, 44630, 60085, 44631, 60086, 44632, 44633, 44634, 44635, 47306, 57264, 51701, 44636, 52464, 44637, 44638, 51706, 44639, 44640, 44641, 44642, 44643, 51707, 44644, 44645, 54211, 52134, 44646, 47270, 61614, 45506, 44647, 58808, 52463, 54217, 48343, 51690, 44648, 46567, 44649, 50384, 46569, 44650, 61102, 48045, 44651, 44652, 59358, 44653, 61103, 44654, 44655, 44656, 44657, 45993, 44658, 44659, 61106, 44660, 44661, 61105, 48615, 44662, 61104, 52919, 44663, 44664, 44665, 44666, 50639, 44667, 44668, 44669, 44670, 49652, 56270, 61107, 53491, 44672, 44673, 44674, 44675, 44676, 44677, 44678, 44679, 49876, 50920, 44680, 44681, 44682, 47020, 44683, 44684, 44685, 44686, 44687, 44688, 44689, 61108, 44690, 46059, 44691, 44692, 44693, 48123, 61109, 44694, 44695, 44696, 44697, 44698, 59356, 44699, 44700, 44701, 61110, 44702, 44703, 48558, 44704, 44864, 44865, 44866, 61922, 44867, 44868, 44869, 51944, 44870, 53961, 61658, 44871, 61659, 44872, 61660, 49606, 44873, 47341, 48846, 44874, 44875, 61662, 44876, 50609, 61661, 53745, 44877, 61664, 45260, 48618, 44878, 44879, 44880, 44881, 44882, 53983, 61663, 44883, 46255, 47080, 61670, 61669, 50851, 61665, 61666, 46275, 44884, 44885, 61667, 54766, 44886, 44887, 52443, 48850, 48306, 44888, 44889, 44890, 61672, 61671, 61668, 45729, 44891, 54946, 54200, 48823, 51372, 44892, 44893, 61674, 44894, 44895, 44896, 44897, 53751, 44898, 54988, 47835, 61673, 44899, 46779, 44900, 44901, 52660, 44902, 44903, 50854, 44904, 44905, 44906, 49569, 61675, 61678, 44907, 61677, 61680, 61676, 44908, 48062, 61679, 44909, 44910, 44911, 44912, 52405, 61682, 44913, 44914, 46037, 44915, 44916, 44917, 44918, 45524, 44919, 44920, 61683, 44921, 44922, 61684, 61686, 46305, 44923, 61681, 44924, 61687, 44925, 44926, 44928, 44929, 61690, 44930, 61688, 44931, 44932, 44933, 61685, 44934, 44935, 44936, 44937, 61693, 44938, 61689, 61692, 61694, 44939, 61857, 44940, 44941, 44942, 52929, 61860, 44943, 61859, 44944, 49654, 61691, 51933, 44945, 44946, 46321, 45553, 52401, 44947, 61862, 44948, 44949, 61863, 44950, 44951, 61868, 54734, 61865, 44952, 44953, 51379, 44954, 44955, 44956, 61858, 44957, 61867, 61864, 61861, 44958, 44959, 61866, 44960, 45120, 45121, 45122, 45123, 45124, 45125, 45126, 45225, 61869, 45127, 45128, 45129, 45130, 45131, 45132, 61871, 45133, 61873, 45134, 45135, 45136, 45137, 45138, 61872, 45139, 61870, 45140, 45141, 45142, 45143, 53666, 45144, 45145, 45146, 45147, 45148, 45149, 45150, 61874, 45151, 45152, 45153, 61875, 45154, 45155, 45156, 45157, 45158, 45159, 45160, 45161, 47599, 45162, 45163, 46535, 45164, 45271, 45273, 45165, 45166, 45167, 54509, 45168, 46532, 45169, 48596, 48074, 61607, 45170, 45171, 47326, 45172, 45173, 61608, 45174, 45175, 45224, 45176, 61609, 45177, 45178, 52718, 45179, 45180, 61610, 45181, 45182, 45184, 45185, 45186, 45187, 45188, 45189, 45190, 45191, 61611, 45192, 45193, 45194, 45195, 45196, 45197, 45198, 45199, 45200, 50852, 45201, 45202, 55013, 61924, 45203, 61925, 45204, 45205, 45206, 45207, 45208, 45209, 45210, 45211, 45212, 45213, 50163, 45214, 45215, 54235, 45216, 45376, 54993, 50664, 45377, 54191, 45378, 53990, 45379, 45380, 61121, 45243, 54709, 53710, 48352, 47824, 45381, 49144, 45382, 47303, 46529, 50636, 45383, 45384, 51874, 45385, 45386, 45387, 50123, 45388, 45389, 45390, 45391, 45392, 61122, 45393, 45394, 45395, 45396, 45397, 45398, 45399, 45400, 50367, 46754, 45401, 60908, 50084, 45402, 54961, 45403, 45404, 45405, 53216, 60911, 45406, 45407, 50638, 45408, 46812, 45409, 45410, 51873, 45411, 45412, 60909, 45413, 45414, 60912, 60913, 50108, 45415, 49076, 45416, 60910, 45417, 45418, 45419, 45420, 45421, 45422, 45423, 45424, 45425, 45426, 45427, 60916, 60914, 45428, 45429, 45430, 45431, 54758, 50143, 45432, 60915, 45433, 45434, 45435, 60918, 45436, 54691, 53667, 45437, 45438, 45440, 60917, 45441, 50128, 45442, 45443, 45444, 45445, 45446, 60919, 49140, 48876, 60920, 45447, 52471, 45448, 53723, 45449, 45450, 45451, 55237, 54774, 45452, 60924, 45453, 45454, 45455, 60923, 45456, 45457, 45458, 45459, 45460, 45461, 45462, 45463, 60921, 60922, 45464, 45465, 45466, 45467, 45468, 45469, 45470, 45471, 60925, 48806, 45472, 45632, 45633, 45634, 45635, 52143, 61089, 46781, 45636, 61090, 50368, 45637, 60926, 45638, 45639, 48606, 45767, 45640, 45641, 45642, 45643, 45644, 45645, 45646, 45647, 45648, 45649, 45650, 45651, 46787, 45652, 45653, 45654, 61093, 55482, 61091, 61094, 45655, 45656, 45657, 50153, 46066, 45658, 45659, 45660, 45661, 45662, 45663, 61095, 61092, 53177, 45664, 45665, 61096, 49911, 45666, 45667, 45668, 45669, 45670, 45671, 45672, 45673, 45674, 45675, 45676, 45677, 61097, 61098, 45678, 57003, 45679, 45680, 50867, 45681, 51142, 45682, 55029, 46537, 45683, 52146, 45684, 45685, 45686, 61099, 45687, 45688, 52651, 45689, 61100, 45690, 45691, 45692, 45693, 45694, 54704, 45696, 61101, 45697, 63172, 45698, 45699, 45700, 45701, 45702, 45703, 45704, 45705, 45706, 45707, 45708, 45709, 45710, 56263, 45711, 45712, 45713, 45714, 45715, 45716, 45717, 45718, 45719, 46243, 45720, 45721, 45722, 50092, 61926, 45723, 45724, 45725, 45726, 45727, 51896, 53971, 45728, 54954, 45888, 61426, 45889, 48856, 45890, 48579, 61427, 46796, 45227, 45891, 45892, 45893, 45894, 51887, 45895, 45896, 60854, 45897, 60855, 45898, 45899, 45900, 45901, 52985, 47023, 49139, 60856, 49899, 51632, 45902, 45903, 45904, 45905, 45906, 45907, 60857, 45908, 45909, 50934, 49075, 45910, 45911, 45912, 60860, 50680, 45913, 53712, 45914, 55209, 60858, 60859, 45915, 53730, 45916, 60863, 60864, 45917, 60868, 45918, 45919, 45920, 60872, 45921, 60870, 60878, 54760, 45922, 60873, 45923, 45924, 60871, 60862, 45925, 45926, 50665, 45927, 45928, 45929, 50886, 45930, 45931, 51689, 54482, 60865, 60866, 60867, 60869, 45932, 49401, 45933, 46241, 45934, 45935, 45936, 45937, 47592, 45938, 60880, 45939, 45940, 45941, 45942, 60881, 45943, 60874, 45944, 60879, 45945, 52984, 45946, 45947, 52150, 60876, 60877, 45948, 45949, 45950, 45952, 45953, 53237, 45954, 45955, 45956, 45957, 45958, 45959, 45960, 45961, 45962, 45963, 45964, 45965, 60882, 49650, 54194, 60875, 51383, 45966, 45967, 45968, 45969, 45970, 45971, 45972, 45973, 48367, 45974, 45975, 45976, 45977, 50672, 45978, 45979, 45980, 45981, 45982, 45983, 45984, 46144, 46145, 46146, 60886, 46147, 46575, 46148, 46149, 49845, 45229, 52201, 46150, 46151, 45486, 46152, 60884, 46153, 46154, 46155, 52715, 46562, 46156, 60885, 60883, 60887, 46157, 46158, 46586, 46159, 60888, 46160, 60889, 46161, 60892, 46162, 45516, 46163, 46164, 46165, 46166, 46167, 46168, 46169, 46170, 50678, 48366, 60890, 52412, 45802, 46171, 46172, 46173, 46174, 60891, 46175, 46176, 46177, 46178, 50411, 46179, 46180, 46277, 46181, 46182, 46183, 45301, 46184, 46185, 46186, 60895, 49370, 46312, 46187, 46188, 46189, 46190, 50637, 46191, 46192, 46193, 60893, 49092, 46194, 46195, 46196, 60894, 46197, 46198, 46199, 46200, 46201, 46202, 46203, 46204, 46205, 46206, 46208, 46209, 46210, 46211, 50341, 46212, 46213, 46214, 60896, 46215, 46216, 46217, 46218, 46219, 60897, 46220, 60899, 46221, 46222, 49623, 46223, 46224, 48071, 46225, 46226, 46227, 46228, 46229, 46230, 48568, 46231, 46232, 46233, 60898, 46234, 46235, 46236, 46237, 46238, 46239, 46240, 46400, 46401, 46402, 46403, 46404, 46405, 60900, 46406, 46407, 46408, 46409, 46410, 46411, 46412, 46413, 46414, 46415, 60902, 46416, 46417, 46418, 46419, 46420, 60901, 46421, 46422, 46423, 46424, 46425, 46426, 46427, 46428, 46429, 46430, 46431, 46432, 46433, 46434, 46435, 60903, 46436, 46437, 46438, 46439, 46440, 51902, 60650, 49393, 46441, 51687, 46442, 60651, 50926, 46443, 46444, 46445, 46446, 60652, 46447, 50925, 60653, 46448, 46449, 46450, 46451, 46452, 46453, 46454, 46455, 46456, 60656, 46457, 46458, 55270, 60659, 46459, 46460, 60657, 60654, 60655, 55203, 51697, 52206, 60660, 46461, 60658, 46462, 46464, 53225, 46465, 60662, 50865, 46466, 46467, 46468, 46469, 48320, 46470, 60661, 46471, 46472, 46473, 46474, 46475, 46476, 46477, 46523, 48118, 46478, 60663, 46479, 46480, 46481, 46482, 46483, 55799, 48635, 46484, 46485, 49851, 60664, 46486, 46487, 46488, 46489, 60665, 46490, 46491, 46492, 46493, 47267, 46494, 46495, 46496, 46656, 46657, 46658, 46659, 46660, 46661, 46662, 60666, 46663, 46664, 46665, 46666, 46667, 46668, 46669, 46670, 46671, 46672, 46673, 46674, 60667, 46675, 46676, 46677, 46678, 46679, 46680, 46681, 46682, 46683, 46684, 46685, 60668, 46686, 46687, 46688, 46689, 46690, 54253, 55470, 49387, 46691, 51165, 47820, 46692, 53475, 52157, 46693, 52666, 46694, 46695, 47313, 46696, 46697, 45564, 46698, 51183, 46699, 54998, 46700, 46701, 46702, 49094, 50155, 46703, 46704, 61429, 46705, 46706, 50136, 46707, 46708, 46709, 46710, 46711, 46712, 55266, 46713, 46714, 46715, 61431, 46035, 46716, 51160, 53741, 46717, 54984, 46718, 61432, 46720, 61430, 46721, 48125, 46022, 46722, 46723, 46724, 46725, 46726, 46727, 46728, 48597, 46729, 46730, 53958, 46731, 48096, 46732, 46733, 53153, 46734, 61436, 61435, 46735, 46736, 61433, 46737, 46738, 46739, 46740, 46028, 46741, 51668, 52144, 46742, 46743, 46744, 46745, 46746, 61438, 46747, 46748, 45278, 46749, 46750, 54985, 46751, 46752, 46912, 61437, 46913, 46061, 46914, 46915, 63189, 46916, 46917, 46918, 46919, 46920, 46921, 46922, 46923, 46924, 46925, 46926, 46927, 46928, 46929, 46930, 52936, 46931, 46932, 46933, 61602, 46934, 61601, 46935, 46526, 48346, 48124, 46936, 47333, 46937, 46938, 46939, 46940, 46941, 46942, 50370, 46943, 46944, 46945, 46946, 46947, 46948, 46949, 46950, 46951, 46952, 61603, 46953, 46954, 46955, 46956, 46957, 52203, 46958, 46959, 46960, 46961, 46962, 46963, 46964, 46965, 46966, 46967, 46968, 46969, 46970, 46971, 46972, 46973, 46974, 46976, 46977, 46978, 46979, 46980, 46981, 46982, 61606, 46983, 46984, 46985, 53672, 46986, 48831, 51182, 61878, 61879, 49109, 46987, 46988, 46989, 46990, 46249, 61880, 52667, 46991, 51156, 54701, 46992, 61881, 46993, 61882, 46994, 46995, 46996, 46997, 51151, 46998, 46999, 47e3, 53924, 54991, 47001, 47002, 61883, 48593, 46256, 48829, 47003, 47004, 47005, 46300, 52945, 47006, 49119, 61885, 47007, 47008, 47168, 47169, 49146, 61884, 47170, 61887, 47171, 47172, 47173, 61886, 61888, 47174, 47175, 47176, 47177, 47178, 61889, 47179, 47180, 47181, 47182, 47183, 47184, 47185, 47186, 47187, 47188, 47189, 49662, 47190, 47191, 47192, 47193, 47194, 47195, 47196, 47197, 47198, 47199, 47200, 49570, 47201, 47202, 47203, 47204, 47205, 47206, 47207, 47208, 47209, 47210, 51962, 47211, 47212, 54718, 47213, 47214, 47215, 47216, 48826, 48825, 54722, 47217, 47218, 49058, 47219, 52655, 61877, 47220, 47221, 47222, 47223, 47224, 47225, 48607, 47226, 46795, 47227, 47228, 47229, 47230, 47232, 47233, 47234, 47235, 47236, 55025, 62403, 47237, 47238, 62404, 47239, 47309, 47240, 47241, 47242, 62406, 62407, 47243, 45258, 47244, 62405, 47245, 62409, 52209, 47246, 47247, 47248, 62411, 47249, 53414, 47250, 47251, 45514, 62408, 47252, 47253, 47254, 62415, 47255, 46545, 47256, 47257, 62423, 47258, 62418, 47259, 47260, 47261, 62420, 62419, 47099, 47262, 45503, 47263, 62414, 62410, 46554, 47264, 62416, 47424, 47425, 62417, 47426, 62421, 47427, 47428, 47429, 47430, 62413, 47431, 48355, 47432, 49661, 47433, 62422, 47434, 47435, 47436, 47437, 47438, 47439, 62426, 47440, 62412, 47441, 46536, 47442, 48622, 62428, 47443, 47444, 47012, 49136, 55038, 52658, 47445, 46320, 47446, 45791, 47447, 62424, 47448, 62425, 51640, 47449, 62429, 47450, 47451, 62430, 47452, 62433, 47453, 47454, 47455, 47456, 47457, 47458, 47459, 47460, 47461, 47462, 47463, 62431, 47464, 47465, 62435, 62434, 47466, 47467, 62427, 47468, 49130, 47469, 46063, 47470, 62432, 47471, 47472, 51113, 47473, 48370, 47474, 47475, 47476, 47477, 62443, 47478, 47479, 47480, 47481, 47482, 47483, 47484, 47551, 47485, 47486, 62436, 47488, 47489, 47490, 45741, 48126, 47491, 52195, 47492, 47493, 47494, 47495, 62445, 62441, 47496, 47497, 47498, 47580, 62446, 47499, 47500, 47501, 62437, 62438, 62442, 49889, 62444, 62447, 62440, 48381, 47502, 47503, 47504, 53220, 47505, 47506, 62448, 47507, 47508, 47509, 62439, 47510, 47511, 47512, 47513, 47514, 47515, 47516, 47517, 62450, 47518, 47519, 47520, 47680, 55213, 50858, 47681, 47682, 47683, 47684, 62451, 47685, 47686, 47687, 47688, 62449, 47689, 49832, 47690, 47691, 47692, 47693, 47694, 47325, 62453, 47695, 47696, 62452, 47697, 47698, 47699, 46299, 47700, 47701, 47702, 62454, 62455, 47703, 47704, 47705, 62456, 47706, 47707, 47708, 49338, 47709, 47710, 49385, 47711, 47712, 47713, 47714, 47715, 50673, 47716, 47717, 47718, 47719, 62459, 47720, 62458, 47721, 47722, 47723, 47724, 47725, 47726, 47727, 47728, 46296, 47729, 47730, 47731, 62462, 62457, 47732, 47733, 62460, 47734, 47735, 47736, 47737, 47738, 47739, 62461, 47740, 47741, 47742, 47744, 47745, 47746, 47747, 47748, 62625, 47749, 47750, 47751, 47752, 47753, 47754, 62627, 48073, 47755, 47756, 62626, 47757, 47758, 47759, 47760, 47761, 47762, 47763, 47764, 47765, 47766, 47767, 47768, 47769, 62628, 47770, 47771, 47772, 47773, 47774, 47775, 45758, 62630, 62629, 47776, 47936, 47937, 47938, 47939, 47940, 47941, 47942, 47943, 47944, 47945, 48302, 47946, 47947, 47948, 47949, 47950, 47951, 47952, 47953, 47954, 47955, 47956, 47957, 47958, 47959, 47960, 47961, 47962, 47963, 47964, 47965, 47966, 47967, 47968, 47969, 47970, 47971, 47972, 47973, 47974, 47975, 47976, 47977, 47978, 47979, 47980, 47981, 47982, 50135, 55777, 47983, 47984, 47985, 47986, 47987, 47988, 49376, 62668, 55249, 47989, 47990, 47991, 47992, 47993, 47994, 47995, 47996, 47997, 47998, 48e3, 47067, 48001, 48002, 48003, 48004, 48005, 48006, 48007, 62670, 49571, 48008, 48009, 50889, 48010, 46294, 54707, 48011, 48012, 48013, 62672, 62671, 62673, 52186, 48014, 48015, 62674, 48016, 54465, 55008, 48017, 48018, 48019, 48020, 47072, 48021, 48022, 48023, 49592, 48024, 48025, 49595, 62675, 48812, 48026, 48027, 48028, 48029, 48030, 46306, 48031, 48032, 62676, 62677, 48811, 48192, 48193, 62678, 48194, 48195, 48196, 62683, 48197, 62679, 62682, 48198, 47869, 48199, 62680, 62681, 48200, 48201, 48202, 48203, 48204, 48205, 48206, 47330, 52423, 62684, 48207, 45786, 48208, 48209, 50131, 48210, 48211, 54499, 49079, 48212, 48213, 48214, 48215, 48216, 48217, 48218, 62685, 48219, 48220, 48221, 48222, 48223, 48224, 50612, 48225, 48226, 48227, 48228, 48229, 48230, 48231, 48232, 62697, 48233, 48234, 53173, 48235, 48236, 48237, 48238, 48239, 48240, 48241, 48242, 48243, 48244, 48245, 48246, 48247, 48248, 52937, 48249, 48250, 48251, 48252, 48253, 48254, 48256, 48257, 48258, 48259, 48260, 48261, 48262, 48263, 48264, 48265, 48266, 48267, 48268, 48269, 48270, 52184, 48271, 52215, 48272, 48273, 48274, 48275, 48628, 48276, 48277, 48278, 55247, 48279, 48280, 48281, 49371, 48282, 48283, 48284, 48285, 48286, 48287, 48288, 48448, 48449, 48450, 48451, 48452, 48453, 48454, 48455, 48456, 48457, 48458, 48459, 48460, 48461, 48462, 48463, 48464, 48465, 48466, 48467, 48468, 48469, 48470, 48471, 48472, 48473, 48474, 48475, 48476, 48477, 48478, 48479, 48480, 48481, 48482, 48483, 48484, 48485, 48486, 48487, 48488, 48489, 48490, 48491, 48492, 48493, 48494, 48495, 48496, 48497, 48498, 48499, 48500, 48501, 48502, 53493, 48503, 48504, 48505, 48506, 48507, 48508, 48509, 48510, 62698, 48512, 48513, 48514, 48515, 48516, 48517, 48518, 48519, 48520, 48521, 48522, 48523, 48524, 48525, 48526, 48527, 48528, 48529, 48530, 48531, 48532, 48533, 48534, 48535, 48536, 48537, 48538, 48539, 48540, 48541, 48542, 48543, 48544, 48704, 48705, 48706, 48707, 48708, 48709, 48710, 48711, 48712, 48713, 48714, 48715, 48716, 62699, 48717, 48718, 48719, 48720, 48721, 48722, 48723, 62700, 48724, 48725, 48726, 48727, 48728, 48729, 48730, 48731, 48732, 48733, 48734, 48735, 48736, 48737, 48738, 48739, 48740, 48741, 48742, 48743, 48744, 48745, 48746, 48747, 48748, 48749, 48750, 48751, 48752, 48753, 48754, 48755, 48756, 48757, 48758, 48759, 48760, 48761, 48762, 48763, 48764, 48765, 48766, 48768, 48769, 48770, 48771, 48772, 48773, 48774, 48775, 48776, 48777, 48778, 48779, 48780, 48781, 48782, 48783, 48784, 48785, 48786, 48787, 48788, 48789, 48790, 48791, 48792, 48793, 48794, 48795, 48796, 48797, 48798, 48799, 48800, 48960, 48961, 48962, 48963, 48964, 48965, 48966, 48967, 48968, 48969, 48970, 48971, 48972, 48973, 48974, 48975, 48976, 48977, 48978, 48979, 48980, 48981, 48982, 48983, 48984, 48985, 48986, 48987, 48988, 48989, 48990, 48991, 48992, 48993, 48994, 48995, 48996, 48997, 48998, 48999, 49e3, 49001, 49002, 49003, 49004, 49005, 49006, 49007, 49008, 49009, 49010, 49011, 49012, 49013, 49014, 49015, 49016, 49017, 49018, 49019, 49020, 49021, 49022, 49024, 63459, 49025, 49026, 49027, 49028, 49029, 47025, 49030, 49031, 49032, 49033, 49034, 62701, 49035, 49036, 49037, 49038, 49039, 49040, 49041, 49042, 49043, 49044, 49045, 49046, 49047, 49048, 49049, 49050, 49051, 49052, 49053, 49054, 49055, 49056, 49216, 49217, 49218, 49219, 49220, 49221, 49222, 49223, 49224, 49225, 49226, 49227, 49228, 49229, 49230, 49231, 49232, 49233, 49234, 49235, 49236, 49237, 49238, 49239, 49240, 49241, 49242, 49243, 49244, 49245, 49246, 49247, 49248, 49249, 49250, 49251, 55275, 49252, 49253, 49254, 49255, 49256, 49257, 49258, 49259, 49260, 49261, 49262, 49263, 49264, 49265, 49266, 49267, 49268, 49269, 49270, 49271, 49272, 49273, 49274, 49275, 62702, 49276, 49277, 49278, 59129, 48832, 59130, 47852, 59131, 53195, 59132, 54460, 48310, 59133, 59134, 48333, 51410, 52915, 59297, 49280, 46271, 59298, 51636, 47321, 50377, 49281, 55261, 49882, 47063, 54973, 52934, 47044, 49282, 49283, 50598, 59299, 53215, 59300, 59301, 59302, 49591, 55273, 51696, 53176, 54959, 54997, 59303, 45293, 59304, 59305, 51676, 53999, 48813, 59306, 45299, 51422, 48609, 59307, 51398, 49284, 59308, 48102, 47352, 53668, 59309, 49895, 48888, 48586, 52659, 59310, 59311, 48878, 53477, 49285, 52199, 52432, 48332, 59312, 48296, 53495, 59313, 49286, 53496, 59314, 59315, 46274, 59316, 59317, 51710, 52908, 50144, 59319, 45505, 46065, 49287, 59320, 59321, 55259, 54720, 59322, 49868, 55226, 59323, 59324, 59325, 48362, 50149, 49346, 59326, 59327, 48297, 49288, 59328, 59329, 59318, 46800, 59330, 49289, 59331, 59332, 48058, 46558, 49862, 45536, 59333, 54453, 59334, 47295, 59336, 59335, 47084, 49290, 59337, 45816, 59338, 59339, 59340, 59341, 59342, 59343, 59344, 54183, 52213, 59345, 59346, 59347, 59348, 51657, 59349, 59350, 59351, 59352, 59353, 48585, 59354, 62398, 49291, 47319, 49292, 51377, 49293, 49294, 49295, 49296, 49297, 49298, 49299, 62399, 49300, 62400, 62401, 49301, 49302, 49303, 49304, 49305, 49306, 49307, 49308, 49309, 49310, 47582, 52728, 49311, 49312, 55528, 47793, 49472, 49886, 61111, 49473, 47011, 49474, 49475, 49476, 49477, 61113, 49478, 61112, 45269, 49479, 49480, 49481, 49482, 49483, 61115, 54742, 55279, 49484, 49485, 49486, 54979, 49487, 49488, 61117, 51952, 49489, 61116, 49490, 49491, 49492, 49493, 61118, 49494, 49495, 49496, 49497, 61120, 49498, 49499, 61119, 49500, 49501, 49502, 49503, 49504, 49505, 49506, 49507, 53746, 49508, 51132, 49509, 50112, 49510, 49511, 49512, 49513, 49514, 47329, 49515, 49516, 49517, 49518, 49519, 49639, 49520, 49521, 62662, 53471, 62663, 49522, 53211, 49523, 49524, 51386, 49525, 49526, 62664, 49527, 49528, 49529, 49530, 49531, 49532, 49533, 62665, 62666, 49534, 62667, 49536, 49537, 49538, 49539, 49540, 55802, 47358, 49541, 49542, 58865, 54256, 49543, 62688, 49544, 52940, 49545, 49546, 49547, 46049, 49548, 49549, 49550, 49551, 61876, 49552, 53998, 49553, 62689, 49554, 49555, 49556, 49557, 49558, 53224, 62690, 49559, 49560, 51148, 49561, 49562, 49563, 49564, 49565, 49566, 46548, 46308, 62692, 49567, 49568, 49728, 62691, 62693, 49729, 49730, 62694, 49731, 49732, 49733, 49734, 62695, 49735, 47794, 45247, 49736, 62696, 49737, 49738, 49739, 49740, 49741, 49742, 49743, 47021, 53997, 49744, 49745, 49746, 53931, 49359, 49747, 49084, 60323, 54751, 60104, 49748, 49749, 49750, 49751, 61939, 46840, 52131, 49752, 49753, 50381, 49754, 61927, 49755, 61928, 47355, 61929, 47812, 54469, 45266, 49756, 49757, 61930, 49758, 49759, 49760, 61931, 49761, 61932, 49762, 49763, 61933, 61934, 61935, 61937, 61936, 50645, 49764, 49765, 49766, 49767, 49768, 49769, 61938, 49770, 46842, 49771, 61940, 53934, 57031, 52170, 49772, 49773, 46044, 49774, 46498, 49775, 47522, 49776, 49777, 50420, 61941, 49778, 49779, 61942, 49780, 49781, 49782, 49604, 49659, 54960, 61943, 49783, 49784, 49785, 49786, 61944, 49787, 49578, 49788, 49789, 49790, 50872, 49792, 48859, 49793, 49794, 49795, 49796, 49797, 49798, 49799, 49800, 49801, 49802, 49803, 49804, 49805, 49806, 61945, 46287, 49807, 49808, 49809, 49810, 49811, 49812, 61946, 49813, 49814, 49815, 49816, 49817, 49818, 49819, 49820, 49821, 49822, 49823, 49824, 49984, 60850, 60849, 49985, 49986, 52192, 53982, 49987, 52161, 54744, 49988, 51426, 49989, 49375, 48289, 49990, 49991, 49992, 49993, 49994, 49995, 60353, 49996, 49997, 53412, 49998, 55010, 49999, 46791, 47320, 60352, 47310, 5e4, 60351, 45990, 47561, 54955, 50001, 47092, 47050, 50002, 50003, 50004, 48359, 47038, 60358, 50005, 60359, 45241, 49103, 50006, 60357, 54269, 50007, 60360, 50008, 50009, 60361, 50010, 50011, 47054, 50012, 60354, 60356, 51702, 54999, 54733, 53426, 60367, 52920, 60368, 50013, 46504, 50014, 50015, 50016, 50017, 50018, 45491, 60370, 52389, 50019, 50020, 50021, 50022, 50023, 50024, 50025, 50646, 60371, 50026, 60369, 50655, 60366, 51876, 60373, 45307, 50027, 50028, 47866, 50029, 50030, 55479, 61923, 50031, 60362, 60363, 60364, 60365, 60374, 59072, 60377, 50032, 49128, 53960, 60375, 60380, 47340, 60376, 50033, 48570, 50034, 53464, 50035, 45239, 50036, 60381, 50396, 50037, 50038, 50039, 50040, 54956, 50041, 50042, 50043, 46304, 50044, 50045, 49910, 48313, 50046, 50048, 60378, 60379, 54496, 50922, 50388, 60383, 50599, 55797, 50049, 45745, 50050, 60388, 50051, 48581, 50052, 50053, 50054, 60386, 50055, 50056, 50057, 50058, 50059, 50060, 50061, 50062, 50063, 50064, 50065, 50066, 50067, 60387, 50068, 50069, 47276, 50070, 52689, 60389, 50071, 50072, 50073, 60385, 50074, 49587, 50075, 50076, 50077, 50078, 50079, 50850, 50080, 50240, 50241, 50242, 50243, 50244, 50245, 52467, 50246, 60390, 50247, 49328, 53944, 60391, 50248, 50249, 50250, 47279, 47277, 50251, 60392, 51131, 52723, 50252, 50253, 50254, 60394, 60395, 50255, 50256, 50257, 50258, 50259, 60397, 50260, 50261, 50262, 50263, 53448, 50264, 60402, 50265, 60398, 50266, 50267, 50268, 60401, 51449, 50269, 53756, 60396, 50270, 50271, 60393, 50272, 50273, 50274, 50275, 47289, 53209, 50405, 60399, 60400, 52442, 52680, 45298, 50276, 60406, 50277, 50278, 50279, 50280, 50281, 60405, 50282, 45746, 50283, 50284, 50285, 50286, 47328, 50287, 60407, 50288, 50289, 50290, 50291, 50292, 50293, 45548, 50294, 50295, 52421, 50340, 53157, 50296, 50297, 50298, 50299, 50300, 60409, 50301, 50302, 60578, 50304, 50674, 50305, 60410, 50306, 50307, 50308, 50309, 50310, 50311, 50312, 50313, 51653, 50314, 50315, 50316, 50317, 50318, 50319, 58079, 60414, 50320, 50321, 50322, 50323, 52686, 60577, 45531, 54199, 50324, 50325, 53980, 50326, 50327, 50328, 60413, 50329, 60411, 50330, 50331, 50332, 50333, 50334, 50335, 50336, 50496, 50497, 50498, 50499, 50500, 50501, 50502, 50503, 50504, 50505, 50506, 50507, 50508, 50509, 50510, 46012, 50511, 50512, 50513, 60080, 50514, 50515, 55252, 50516, 62635, 46068, 50517, 50518, 50519, 50520, 50521, 54977, 54978, 50522, 50523, 50524, 50525, 50526, 50527, 54761, 48842, 50528, 62631, 50529, 53928, 62632, 62633, 50530, 62634, 48843, 54239, 50531, 50532, 50533, 50534, 50535, 51680, 51681, 50536, 50537, 62402, 50538, 51942, 50539, 52466, 50540, 50541, 50542, 50543, 50544, 50545, 58038, 52148, 50546, 52968, 55003, 50547, 62637, 62638, 62639, 50548, 50549, 50550, 50551, 62642, 50552, 47805, 62643, 45283, 62640, 50553, 62641, 48546, 45781, 50554, 62646, 62647, 46822, 45744, 53199, 62644, 46252, 50555, 62645, 50556, 50557, 62648, 50558, 50560, 50561, 50562, 50563, 62649, 50564, 50565, 52647, 50566, 62650, 50567, 62651, 50568, 50569, 50570, 62652, 50571, 50572, 50573, 50574, 50575, 50576, 50577, 50578, 52178, 50579, 62653, 50580, 50581, 50582, 50583, 62654, 50584, 50585, 50586, 50587, 50588, 50589, 50590, 50591, 62655, 50592, 50752, 50753, 50754, 50755, 62686, 49596, 48360, 50756, 51627, 53726, 58869, 50757, 50758, 50759, 50760, 56499, 53973, 50761, 50762, 56500, 45228, 56501, 50763, 50764, 48602, 50765, 56505, 50766, 50767, 50768, 55490, 50769, 56503, 54259, 50770, 51670, 56506, 56502, 50771, 56507, 50082, 50772, 50773, 50774, 50775, 56508, 56517, 56509, 50776, 50777, 52959, 54949, 50778, 56527, 50779, 56525, 50780, 50781, 56530, 48614, 49835, 50782, 56504, 56523, 56526, 56510, 47058, 45253, 56519, 53438, 56513, 48040, 50783, 47036, 56524, 50784, 50785, 56518, 56511, 51163, 50786, 50787, 50788, 53695, 56512, 50789, 50790, 56522, 50791, 50792, 56528, 50793, 50794, 52909, 56514, 50795, 56515, 56520, 56521, 45780, 56529, 52181, 50796, 54455, 56539, 56543, 52390, 56550, 50797, 50151, 56540, 50798, 50799, 49089, 56537, 50800, 45306, 47542, 56549, 56531, 50801, 56516, 56534, 51444, 49120, 50802, 50803, 50804, 50805, 51643, 50806, 50807, 50808, 45501, 50809, 54178, 50810, 50811, 56538, 50812, 50813, 56533, 50814, 50875, 50816, 56542, 50817, 50818, 50819, 50820, 50821, 55234, 50095, 47030, 51153, 50089, 56546, 56536, 56555, 56532, 50822, 50823, 56541, 50824, 48805, 56535, 50825, 56544, 50826, 50827, 56547, 56548, 50828, 56568, 50829, 50830, 56545, 56738, 56551, 50831, 50832, 50833, 50834, 50835, 50836, 50837, 50838, 50839, 50840, 48363, 46276, 50841, 50842, 50083, 45799, 56570, 50843, 56562, 50844, 56559, 50845, 56572, 56558, 54e3, 45800, 50846, 51415, 51427, 56571, 50847, 56557, 50848, 51008, 51009, 56567, 51010, 51011, 56565, 51012, 51013, 48803, 56564, 51014, 45789, 51015, 51016, 51017, 51018, 51019, 56563, 48374, 56552, 48068, 51020, 49395, 51021, 51022, 51023, 51024, 51025, 48340, 56553, 56554, 51026, 56561, 56566, 56569, 46516, 51027, 51417, 48103, 56574, 56573, 54187, 56737, 56739, 56741, 54001, 56740, 56742, 56743, 53929, 51028, 51029, 51030, 51031, 51032, 51033, 51034, 47817, 56745, 51035, 51036, 56758, 56753, 56756, 51037, 51038, 51039, 51040, 51041, 51042, 51043, 56752, 50894, 51044, 51045, 49394, 51046, 51047, 51048, 51049, 51631, 51050, 51051, 51052, 56556, 56750, 51053, 51054, 51055, 51056, 56759, 51057, 51058, 56560, 56751, 51059, 56760, 51060, 56748, 51061, 51062, 51063, 51064, 51065, 51066, 51067, 56761, 56755, 56749, 50346, 51068, 51069, 51070, 51072, 56744, 49331, 49579, 56746, 56747, 51073, 56754, 48113, 56757, 54184, 56762, 51074, 56763, 50087, 51075, 51076, 56786, 56764, 51077, 51078, 51079, 56785, 51080, 47549, 51081, 51082, 48853, 51083, 48890, 51084, 51085, 47818, 51086, 51087, 51088, 51089, 56778, 51090, 56773, 51091, 56767, 51092, 51093, 51094, 45771, 56771, 51095, 56779, 45732, 56789, 51096, 51097, 51098, 56766, 51099, 51100, 51101, 50896, 56784, 51102, 51103, 51104, 51264, 51265, 56788, 49634, 47046, 51266, 51267, 51268, 51269, 51270, 56782, 56783, 51271, 51272, 51273, 56772, 51274, 51275, 51276, 56765, 51277, 56781, 52433, 51278, 56777, 51279, 51280, 51281, 51282, 56770, 50120, 50876, 52910, 56780, 51283, 56776, 51284, 51285, 51286, 51287, 51288, 51289, 56769, 51290, 51291, 51292, 56774, 49884, 51293, 51294, 51295, 51296, 51297, 51298, 54185, 54186, 56787, 53236, 51448, 51299, 51300, 51301, 51302, 51303, 51304, 51305, 51306, 56806, 51307, 51308, 51309, 51310, 51311, 51312, 56775, 51313, 51314, 51315, 56800, 49892, 51316, 51317, 51318, 51319, 51320, 51321, 51322, 51323, 56801, 51324, 51325, 51326, 51328, 51329, 51330, 51331, 51332, 51333, 51334, 56791, 51335, 51336, 51337, 51338, 51339, 55032, 51340, 56793, 56792, 47344, 56790, 51341, 51342, 51343, 51344, 50895, 51345, 46765, 51346, 51347, 51348, 51349, 51350, 56802, 51351, 47865, 54497, 56807, 51352, 51353, 51354, 46288, 51355, 56794, 51356, 49147, 56803, 51357, 56799, 51358, 56797, 51359, 51360, 51520, 51521, 51522, 51523, 51524, 46553, 51525, 51526, 51527, 51528, 56795, 56796, 56798, 51529, 48559, 56804, 51530, 56805, 51531, 51532, 51533, 51534, 51535, 51536, 51537, 51538, 56821, 51539, 50121, 51540, 51541, 52194, 51542, 51543, 51544, 51545, 56818, 51546, 51547, 51548, 51549, 51550, 51551, 51552, 51553, 51554, 51555, 51556, 51557, 51558, 55521, 51559, 51560, 50897, 51561, 56820, 51562, 51563, 51564, 54772, 56819, 56816, 51565, 51566, 56812, 51567, 56815, 51568, 56808, 51569, 51570, 53486, 51571, 51572, 51573, 51574, 51416, 56814, 51575, 51576, 56809, 51577, 51578, 56810, 52210, 51579, 56813, 51580, 51581, 45517, 51582, 51584, 51585, 51586, 51587, 51588, 49334, 51589, 48315, 56817, 51590, 51591, 56823, 51592, 56822, 56811, 51593, 51594, 51595, 51596, 51597, 50670, 51598, 51599, 51600, 56827, 51601, 51602, 51603, 51604, 51605, 51606, 51607, 51608, 51609, 51610, 51611, 56996, 51612, 51613, 56995, 51614, 51615, 51616, 51776, 51777, 51778, 51779, 51780, 51781, 51782, 51783, 51784, 56824, 51785, 51786, 51787, 51788, 50159, 51789, 49915, 51790, 51791, 51792, 54753, 51793, 51794, 52917, 51795, 51796, 51797, 51798, 56829, 51799, 45772, 51800, 51801, 51802, 51803, 51804, 51805, 51806, 51807, 51808, 50408, 51935, 51809, 51810, 51811, 51812, 51813, 51814, 51815, 51816, 51817, 51818, 51134, 56826, 56828, 56830, 56994, 45226, 45518, 51819, 51820, 51821, 51822, 51823, 57004, 51824, 51825, 51826, 51827, 56998, 48566, 51439, 51828, 51829, 51830, 51831, 51832, 51833, 51834, 51835, 51836, 51837, 51838, 56993, 51840, 51841, 56997, 51842, 51843, 51844, 51845, 57001, 51846, 51847, 51848, 51849, 51850, 57e3, 51851, 51852, 51853, 56999, 51854, 51855, 51856, 51857, 51858, 51859, 51860, 51861, 51862, 57005, 51863, 54476, 51864, 51865, 51866, 51867, 57011, 57002, 57006, 51868, 51869, 49369, 51870, 51871, 51872, 52032, 52033, 45473, 57014, 52034, 57009, 52035, 52036, 52037, 52038, 52039, 52040, 52041, 57010, 52042, 52043, 52044, 52045, 52046, 52047, 52048, 52049, 52050, 52051, 52052, 53670, 57013, 52053, 52054, 52055, 52056, 52057, 52058, 52059, 57007, 52060, 52061, 52062, 57008, 52063, 53437, 52064, 52065, 52066, 57012, 51949, 57017, 52067, 52068, 52069, 52070, 52071, 52072, 57016, 52073, 57015, 52074, 52075, 52076, 52077, 52078, 52079, 52080, 57019, 52081, 52082, 52083, 52084, 52085, 52086, 52087, 48613, 52088, 52089, 52090, 52091, 52092, 45784, 50154, 52093, 52094, 57018, 52096, 50618, 52097, 52098, 52099, 52100, 52101, 52102, 57020, 52103, 52104, 52105, 52106, 52107, 52108, 52109, 52441, 52110, 52111, 52112, 52113, 47018, 52114, 52115, 52116, 52117, 52118, 52119, 52120, 52121, 52122, 52123, 52124, 52125, 52126, 52127, 52128, 52288, 52289, 54501, 52290, 52291, 52292, 57021, 52293, 52294, 52295, 52296, 52297, 57023, 52298, 52299, 52300, 52301, 52302, 52303, 52304, 52305, 52306, 52307, 52308, 50338, 52309, 52310, 52311, 52312, 57025, 52313, 52314, 52315, 52316, 52317, 52318, 52319, 52320, 52321, 52322, 52323, 52324, 52325, 52326, 52327, 52328, 57022, 52329, 57024, 52330, 52331, 52332, 52333, 52334, 52335, 52336, 52337, 52338, 52339, 52340, 52341, 52342, 52343, 54714, 52344, 52345, 52346, 57026, 52347, 52348, 52349, 52350, 52352, 52353, 52354, 52355, 52356, 52357, 52358, 52359, 52360, 52361, 52362, 52363, 62126, 48034, 49842, 50608, 49863, 52364, 52365, 62127, 52366, 52367, 52368, 52369, 52370, 53481, 52371, 52372, 52373, 54237, 52374, 52375, 52376, 60349, 52377, 52378, 52379, 52380, 52381, 52382, 52383, 52384, 46054, 62128, 52544, 62129, 52545, 52546, 51885, 52547, 52548, 52549, 52550, 52551, 52552, 52553, 47847, 62131, 62133, 62132, 52196, 53178, 62130, 51892, 53967, 49900, 52554, 52555, 52556, 52557, 52558, 52559, 52560, 52931, 62136, 45302, 62135, 52561, 52562, 52563, 52564, 52565, 62142, 52566, 45775, 52567, 52568, 52569, 52570, 52571, 52572, 53697, 62138, 52573, 52574, 52575, 52576, 52577, 62140, 54505, 52578, 52579, 62139, 62134, 62143, 62141, 52580, 62137, 52581, 52582, 62151, 62148, 62150, 52583, 52584, 62154, 62146, 62144, 52585, 52586, 52587, 62149, 52588, 52589, 52590, 52591, 52592, 55035, 52593, 52594, 52595, 62145, 52596, 51193, 51679, 52597, 62152, 47558, 46512, 52598, 52599, 62147, 62153, 62160, 62166, 52600, 52601, 48087, 52602, 52603, 52604, 62165, 52700, 52605, 55019, 52606, 52608, 62162, 62164, 52609, 52610, 52611, 52612, 47346, 52613, 52614, 52615, 52616, 62155, 52617, 52618, 52619, 62158, 49913, 52620, 54749, 62156, 62157, 62159, 62163, 52621, 52622, 52623, 62169, 54204, 52624, 52625, 52626, 52627, 46826, 52628, 51953, 52629, 47076, 62167, 52630, 52631, 52632, 62168, 62170, 62173, 62171, 52633, 52634, 62172, 52635, 52636, 52637, 52638, 53713, 62161, 52639, 52681, 52640, 52943, 54953, 52800, 62179, 52801, 50139, 52802, 62176, 52803, 52804, 49327, 62188, 62174, 52805, 62177, 52806, 52807, 52808, 62184, 52809, 52810, 52811, 52812, 62178, 52813, 52814, 62183, 52815, 52816, 62182, 52817, 52818, 62185, 52819, 52820, 52821, 62175, 52822, 52823, 62180, 62186, 52824, 52825, 52826, 52827, 52828, 52829, 52830, 54188, 62181, 45813, 52831, 52832, 62194, 52833, 53419, 52834, 52835, 52836, 52837, 62197, 52838, 52839, 52840, 48072, 52841, 62201, 52842, 52843, 52844, 52845, 52846, 52847, 62192, 52848, 52849, 62198, 62200, 62202, 52850, 52851, 52852, 52853, 52854, 52855, 52856, 52857, 62195, 52858, 62193, 52859, 52860, 52861, 47867, 52862, 46587, 52864, 52865, 52866, 52867, 62191, 62199, 62189, 62190, 52868, 52869, 52870, 62187, 62374, 52871, 62371, 52872, 52873, 62370, 52874, 52875, 62196, 52876, 51418, 52877, 52878, 52879, 52880, 52881, 62203, 52882, 52883, 52884, 62373, 52885, 52886, 52887, 52888, 52889, 52890, 52891, 50168, 52892, 52893, 52894, 52895, 52896, 53056, 53057, 53058, 62205, 53059, 53060, 62375, 62377, 62372, 53061, 62204, 53062, 53063, 53064, 62379, 53065, 62378, 53066, 53067, 53068, 53069, 49885, 53070, 53071, 62382, 53072, 53073, 62384, 53074, 53075, 53076, 53077, 53078, 62369, 53079, 53080, 53081, 62385, 62380, 53082, 53083, 53084, 53085, 53086, 62383, 62206, 62381, 53087, 53088, 53089, 53090, 53091, 53092, 53093, 62386, 53094, 53095, 53096, 53097, 62388, 53098, 53099, 53100, 53101, 62376, 53102, 53103, 53104, 53105, 62387, 53106, 53107, 53108, 62389, 53109, 53110, 53111, 53112, 53113, 53114, 53115, 53116, 53117, 53118, 53431, 53120, 53121, 53122, 53123, 62392, 53124, 53125, 53126, 53127, 55801, 53128, 53129, 53130, 53131, 53132, 53133, 62393, 53134, 53135, 53136, 53137, 53138, 53139, 53140, 53141, 62391, 53142, 51428, 62390, 53143, 53144, 53145, 53146, 62394, 53147, 53148, 53149, 53150, 53151, 62395, 46272, 53152, 53312, 53313, 53314, 53315, 53316, 53317, 53318, 53319, 53320, 53321, 53322, 53323, 53324, 53325, 61123, 53326, 53327, 53328, 53329, 53330, 53331, 62396, 53332, 53333, 62397, 53334, 53335, 53336, 53674, 53337, 53338, 53339, 62636, 53446, 53340, 53341, 53342, 53343, 53344, 53345, 53456, 53724, 53346, 53347, 53348, 53349, 53350, 53351, 53198, 53352, 53353, 48598, 53354, 53699, 53355, 53356, 53357, 53358, 53359, 53360, 53361, 47842, 57833, 53954, 61890, 45753, 53362, 53363, 45549, 61891, 53364, 51648, 46020, 53365, 55794, 53366, 52133, 53367, 61892, 53368, 53369, 53370, 53371, 54996, 53372, 53373, 53374, 53376, 53377, 61893, 62656, 61894, 53378, 54444, 61895, 53379, 45248, 62657, 53380, 53381, 62658, 53382, 53383, 46332, 53384, 50651, 53385, 53386, 53387, 53388, 52411, 53389, 53390, 53391, 53476, 53392, 53393, 53394, 53395, 53396, 52704, 53397, 53398, 53399, 53400, 53401, 61896, 53402, 55795, 53403, 53404, 53405, 53406, 53407, 53408, 45499, 53568, 53166, 53569, 53570, 53571, 47268, 53572, 53573, 53574, 53575, 53576, 61898, 53577, 53578, 53579, 53580, 61899, 53581, 53582, 53583, 53584, 45763, 49617, 53585, 53586, 55216, 61897, 53587, 53588, 61900, 53589, 53590, 53591, 53592, 61902, 53593, 53594, 53595, 55798, 53596, 53985, 54435, 53597, 53598, 62659, 51385, 53599, 53600, 53601, 53602, 53603, 62660, 53604, 53605, 61901, 61903, 49123, 61904, 53606, 53607, 61908, 53608, 53609, 53610, 53611, 53612, 53613, 53614, 61910, 61905, 53615, 51665, 50657, 53616, 53617, 53618, 49891, 47612, 53619, 53620, 61907, 53621, 61909, 53622, 53623, 53624, 47571, 53625, 53626, 53627, 53628, 53629, 53630, 53632, 61915, 53633, 53634, 53635, 53636, 53637, 47830, 53638, 45309, 61913, 53639, 53640, 53641, 53642, 53643, 61912, 61906, 61914, 53644, 53645, 53646, 53647, 53648, 61911, 53649, 53650, 53651, 51436, 53652, 53653, 53654, 53655, 52682, 61917, 53656, 53657, 53658, 53659, 58813, 53660, 53661, 53662, 61916, 53663, 61918, 53664, 53824, 53825, 53826, 53827, 53828, 53829, 53830, 53831, 53832, 61919, 53833, 53834, 53221, 53835, 53836, 53837, 53838, 53839, 53840, 53841, 53842, 53843, 53844, 53845, 53846, 53847, 53848, 53849, 53850, 53851, 53852, 53853, 53854, 53855, 53856, 53857, 53858, 53859, 62661, 48627, 53860, 53861, 53862, 53863, 53864, 53865, 61920, 53866, 53867, 53868, 53869, 53870, 53871, 53872, 53873, 53874, 53875, 53876, 53877, 53878, 53879, 53880, 53881, 53882, 53883, 53884, 53885, 61921, 53886, 53888, 53889, 52983, 53890, 53930, 53891, 61947, 53892, 53893, 47282, 53894, 53895, 53896, 53897, 53898, 53899, 53900, 53901, 53902, 53903, 53904, 53905, 53906, 53907, 53908, 53909, 53910, 53911, 53912, 53913, 53914, 53915, 53916, 53917, 53918, 53919, 53920, 54080, 54081, 54082, 54083, 54084, 54085, 54086, 54087, 54088, 54089, 54090, 54091, 54092, 54093, 54094, 54095, 54096, 54097, 54098, 54099, 54100, 54101, 54102, 54103, 54104, 54105, 54106, 54107, 54108, 54109, 54110, 48379, 47579, 54111, 47590, 50137, 51923, 60136, 49344, 48885, 60137, 60138, 60139, 54112, 60140, 60141, 60142, 60143, 48583, 54113, 54114, 54115, 62971, 54116, 54117, 54118, 62973, 54119, 62974, 54120, 62972, 54121, 54122, 54123, 54124, 48610, 54125, 63137, 46245, 54126, 54127, 54128, 54129, 63138, 54130, 54131, 54132, 63139, 54133, 54134, 54135, 60594, 54136, 54137, 54138, 54139, 54140, 54141, 54142, 54144, 54145, 54146, 54147, 54148, 53716, 54149, 54150, 54151, 54152, 54153, 54154, 55786, 54155, 54156, 54157, 54158, 54159, 54160, 54161, 54162, 54163, 54164, 54165, 54166, 54167, 54168, 54169, 54170, 54171, 54172, 54173, 54174, 54175, 54176, 54336, 54337, 54338, 54339, 54340, 54341, 54342, 54343, 54344, 54345, 54346, 54347, 54348, 54349, 54350, 54351, 54352, 54353, 54354, 54355, 54356, 54357, 54358, 54359, 54360, 54361, 54362, 54363, 54364, 54365, 54366, 54367, 63140, 54368, 54369, 54370, 54371, 54372, 54373, 54374, 54375, 54376, 61114, 54377, 54378, 54379, 54380, 54381, 54382, 54383, 54384, 54385, 54386, 54387, 54388, 54389, 54390, 54391, 54392, 54393, 54394, 54395, 54396, 54397, 54398, 54400, 54401, 54402, 54403, 54404, 54405, 54406, 54407, 54408, 54409, 54410, 54411, 54412, 54413, 54414, 54415, 54416, 54417, 54418, 54419, 54420, 54421, 54422, 54423, 54424, 54425, 54706, 54426, 54427, 54428, 54429, 54430, 54431, 54432, 54592, 54593, 54594, 54595, 54596, 54597, 54598, 54599, 54270, 52444, 54600, 54601, 54602, 54603, 54604, 54605, 54606, 54607, 51908, 54608, 54609, 54610, 54611, 54612, 54613, 54614, 54615, 54616, 54617, 54618, 54619, 54620, 54621, 54622, 54623, 54624, 54625, 54626, 54627, 54628, 54629, 54630, 54631, 54632, 54633, 54634, 54635, 54636, 54637, 54638, 54639, 54640, 54641, 54642, 54643, 54644, 54645, 54646, 54647, 54648, 54649, 54650, 54651, 54652, 54653, 54654, 54656, 54657, 54658, 54659, 54660, 54661, 54662, 54663, 54664, 54665, 54666, 54667, 54668, 54669, 54670, 54671, 54672, 54673, 54674, 54675, 54676, 54677, 54678, 54679, 54680, 54681, 54682, 54683, 54684, 54685, 54686, 54687, 54688, 54848, 54849, 54850, 54851, 54852, 54853, 54854, 54855, 54856, 54857, 54858, 54859, 54860, 54861, 54862, 54863, 54864, 54865, 54866, 54867, 54868, 54869, 54870, 54871, 54872, 54873, 54874, 54875, 54876, 54877, 54878, 54879, 54880, 54881, 54882, 58816, 54883, 54884, 54885, 54886, 54887, 54888, 54889, 54890, 54891, 54892, 54893, 54894, 54895, 54896, 54897, 54898, 54899, 54900, 54901, 54902, 54903, 54904, 54905, 54906, 54907, 54908, 54909, 54910, 54912, 54913, 63141, 54914, 54915, 54916, 54917, 54918, 54919, 54920, 54921, 54922, 54923, 54924, 54925, 54926, 54927, 54928, 54929, 54930, 54931, 54932, 54933, 54934, 54935, 54936, 54937, 54938, 54939, 54940, 54941, 54942, 54943, 54944, 55104, 55105, 55106, 55107, 55108, 55109, 55110, 55111, 55112, 55113, 55114, 55115, 55116, 55117, 55118, 55119, 55120, 55121, 55122, 55123, 55124, 55125, 55126, 55127, 55128, 55129, 55130, 55131, 55132, 55133, 55134, 55135, 48815, 55136, 55137, 55138, 55139, 55140, 50857, 55141, 55142, 55143, 55144, 55145, 55146, 55147, 55148, 55149, 55150, 55151, 55152, 55153, 55154, 55155, 55156, 55157, 55158, 55159, 55160, 55161, 55162, 55163, 55164, 55165, 55166, 55168, 55169, 55170, 55171, 55172, 55173, 55174, 55175, 55176, 55177, 55178, 55179, 55180, 55181, 55182, 55183, 55184, 55185, 55186, 55187, 55188, 55189, 55190, 55191, 55192, 55973, 48326, 46761, 47292, 51407, 48293, 55974, 55975, 52438, 51395, 55976, 50941, 55193, 53685, 53993, 53686, 48327, 55194, 48562, 48100, 55977, 55978, 53704, 55979, 53485, 46831, 49883, 55195, 52175, 47085, 51688, 47043, 48887, 54948, 55980, 55981, 50880, 55271, 51894, 55196, 54697, 52191, 54767, 55982, 55007, 46282, 55984, 55983, 55197, 53995, 55985, 55986, 55987, 51924, 55988, 51883, 55989, 55990, 46031, 55023, 55991, 48048, 46510, 55992, 55993, 47598, 53679, 53992, 55994, 47299, 53226, 45807, 55995, 55996, 55198, 48619, 52956, 54255, 55997, 52979, 55998, 54229, 48101, 55999, 52149, 52176, 56e3, 51179, 55022, 56001, 50613, 46785, 56002, 47052, 49102, 56003, 56004, 52141, 56005, 46583, 56006, 49602, 55227, 56007, 52408, 55199, 53994, 50353, 56008, 46589, 48081, 56009, 53427, 56010, 56011, 52925, 56012, 56013, 56014, 45815, 56017, 56015, 53736, 56016, 50133, 56018, 55200, 56019, 56020, 56021, 53435, 53925, 45305, 56022, 51115, 56023, 48631, 50081, 56024, 56025, 50173, 52407, 56026, 56027, 49342, 50903, 56028, 56029, 51124, 56030, 56031, 47560, 55360, 55361, 55362, 55363, 55364, 55365, 55366, 55367, 55368, 48109, 55369, 55370, 55371, 55372, 46777, 62712, 55373, 62713, 55374, 55375, 52707, 55376, 55377, 55378, 55379, 55380, 55381, 55382, 55383, 62905, 55384, 55385, 55386, 55387, 60384, 55388, 55389, 55390, 55391, 55392, 55393, 53235, 48063, 55394, 55395, 55396, 55397, 55398, 55399, 55400, 47808, 54437, 55401, 55402, 55403, 55404, 55405, 55406, 55407, 57817, 55408, 55409, 55410, 55411, 62964, 45482, 45810, 55412, 55413, 55414, 55415, 55416, 55417, 55418, 62965, 55419, 55420, 62967, 55421, 55422, 55424, 47825, 62966, 55425, 50098, 55426, 55427, 55428, 55429, 55430, 55431, 55432, 62969, 55433, 55434, 55435, 62968, 55436, 55437, 55438, 55439, 55440, 55441, 55442, 55443, 55444, 55445, 55446, 55447, 55448, 55449, 55450, 55451, 55452, 55453, 55454, 55455, 55456, 55616, 55617, 55618, 55619, 55620, 55621, 55622, 55623, 55624, 55625, 55626, 55627, 55628, 55629, 55630, 55631, 55632, 55633, 55634, 55635, 55636, 55637, 55638, 55639, 55640, 55641, 55642, 55643, 55644, 55645, 55646, 55647, 55648, 55649, 55650, 55651, 55652, 55653, 55654, 55655, 55656, 55657, 55658, 55659, 55660, 55661, 55662, 55663, 55664, 55665, 55666, 55667, 55668, 55669, 55670, 55671, 55672, 55673, 55674, 55675, 55676, 55677, 55678, 55680, 55681, 55682, 55683, 55684, 55685, 55686, 55687, 55688, 55689, 55690, 55691, 55692, 55693, 55694, 55695, 55696, 55697, 55698, 55699, 55700, 55701, 55702, 55703, 55704, 55705, 55706, 55707, 55708, 55709, 55710, 55711, 55712, 55872, 55873, 55874, 55875, 55876, 55877, 55878, 55879, 55880, 55881, 55882, 55883, 55884, 55885, 55886, 45492, 54762, 47290, 55887, 47537, 45766, 54512, 53197, 45276, 54731, 48117, 54986, 47031, 52400, 50870, 45537, 47546, 55036, 47585, 47009, 48378, 60122, 60123, 52473, 47603, 60124, 46331, 50099, 47057, 47832, 60125, 54516, 60126, 48342, 48095, 60127, 49630, 49848, 54495, 55242, 60128, 60129, 60132, 60130, 60131, 51678, 47283, 46788, 60133, 51946, 51661, 46285, 55888, 55889, 58073, 50658, 60134, 49333, 55890, 55224, 60135, 55212, 51452, 55507, 55501, 54494, 55891, 54521, 51652, 54190, 47315, 46048, 55892, 51682, 62710, 55893, 55894, 55895, 47829, 55896, 62711, 55897, 55898, 55263, 55899, 55900, 62705, 47280, 54740, 47311, 50928, 55901, 55902, 55903, 55904, 55905, 55906, 55907, 55908, 55909, 46019, 55910, 55911, 62706, 45996, 55912, 55913, 55914, 55915, 54461, 51191, 55916, 55917, 55918, 55919, 55920, 62708, 55921, 55922, 62707, 55923, 55924, 55925, 55926, 55927, 55928, 55929, 55930, 55931, 55932, 52427, 55933, 55934, 55936, 51364, 55937, 55938, 55939, 55940, 55941, 55942, 55943, 55944, 55945, 55946, 55947, 55948, 55949, 62709, 55950, 55267, 50623, 62912, 55951, 55952, 62907, 55953, 62915, 55954, 62914, 55955, 54970, 62913, 55956, 55957, 55958, 54462, 62916, 55959, 62924, 55960, 55961, 55962, 55963, 45263, 46584, 55964, 62921, 62922, 55965, 50652, 55966, 55967, 55968, 56128, 62917, 62918, 56129, 56130, 62919, 62923, 56131, 48864, 62920, 47354, 56132, 56133, 56134, 62928, 62931, 56135, 56136, 56137, 49127, 56138, 47602, 62908, 62925, 56139, 56140, 49847, 56141, 56142, 56143, 52472, 56144, 48377, 56145, 62926, 62927, 62929, 46821, 62930, 56146, 62933, 56147, 56148, 56149, 56150, 56151, 56152, 56153, 62909, 56154, 56155, 56156, 62932, 54203, 56157, 46060, 56158, 56159, 52388, 56160, 56161, 56162, 56163, 62934, 56164, 56165, 56166, 56167, 56168, 56169, 56170, 56171, 62935, 48865, 62936, 56172, 56173, 52447, 62939, 56174, 56175, 56176, 56177, 56178, 45768, 55257, 56179, 62937, 56180, 62938, 62940, 56181, 62946, 56182, 56183, 56184, 62944, 56185, 56186, 56187, 62943, 62941, 56188, 56189, 62945, 56190, 56192, 62942, 62948, 62949, 56193, 52451, 56194, 56195, 58815, 46520, 62947, 62952, 52387, 56196, 56197, 56198, 56199, 56200, 62950, 62951, 56201, 56202, 56203, 56204, 56205, 56206, 62910, 56207, 56208, 56209, 56210, 56211, 56212, 56213, 56214, 56215, 56216, 56217, 56218, 45508, 56219, 56220, 62911, 56221, 56222, 46533, 45796, 56223, 62956, 62953, 56224, 46807, 56384, 62957, 56385, 62954, 56386, 56387, 56388, 56389, 56390, 62955, 56391, 56392, 46298, 56393, 54506, 56394, 56395, 56396, 62958, 56397, 46073, 56398, 56399, 56400, 56401, 56402, 56403, 56404, 62959, 62961, 56405, 56406, 56407, 62960, 56408, 56409, 56410, 56411, 56412, 56413, 56414, 62962, 56415, 62963, 56416, 56417, 56418, 56419, 56420, 56421, 56422, 56423, 56424, 56425, 56426, 56427, 51693, 47530, 56428, 56429, 51195, 56430, 56431, 46819, 56432, 56433, 56434, 56435, 56436, 56437, 56438, 52425, 56439, 56440, 56441, 56442, 56443, 56444, 56445, 56446, 56448, 56449, 56450, 56451, 56452, 56453, 56454, 56455, 56456, 56457, 56458, 60070, 56459, 56460, 56461, 56462, 56463, 56464, 56465, 56466, 56467, 56468, 56469, 56470, 56471, 56472, 56473, 56474, 56475, 56476, 56477, 56478, 56479, 56480, 56640, 56641, 56642, 56643, 56644, 56645, 56646, 56647, 56648, 56649, 56650, 56651, 56652, 56653, 56654, 56655, 56656, 56657, 56658, 56659, 56660, 56661, 56662, 56663, 56664, 56665, 56666, 56667, 56668, 56669, 56670, 56671, 56672, 56673, 56674, 56675, 56676, 56677, 56678, 56679, 56680, 56681, 56682, 56683, 56684, 56685, 56686, 56687, 56688, 56689, 56690, 56691, 56692, 56693, 56694, 56695, 56696, 56697, 56698, 56699, 56700, 56701, 56702, 56704, 56705, 56706, 56707, 56708, 56709, 56710, 56711, 56712, 56713, 56714, 56715, 56716, 56717, 56718, 56719, 56720, 56721, 56722, 56723, 56724, 56725, 56726, 56727, 56728, 56729, 56730, 56731, 56732, 56733, 56734, 56735, 56736, 56896, 56897, 56898, 56899, 56900, 56901, 56902, 56903, 56904, 56905, 56906, 56907, 56908, 56909, 56910, 56911, 56912, 56913, 56914, 56915, 56916, 56917, 56918, 56919, 56920, 56921, 56922, 56923, 56924, 56925, 56926, 56927, 56928, 46005, 54526, 47596, 53497, 56929, 59885, 55210, 59886, 49878, 51437, 47844, 59887, 59888, 59889, 55009, 59890, 59891, 59893, 59892, 59894, 59895, 51169, 59896, 54488, 59897, 48590, 56930, 59898, 59899, 48591, 59900, 47272, 49598, 59901, 45490, 48084, 47605, 59902, 56931, 60065, 60066, 60067, 47096, 48301, 56932, 51940, 57550, 54447, 53181, 54711, 60068, 54750, 60069, 53441, 47548, 56933, 46279, 45529, 56934, 56935, 56936, 49329, 56937, 56938, 56939, 56940, 45542, 45543, 56941, 45544, 56942, 56943, 56944, 56945, 46013, 51432, 56946, 56947, 56948, 56949, 58817, 56950, 56951, 45535, 56952, 56953, 56954, 49609, 46319, 56955, 56956, 51112, 54232, 56957, 50937, 53688, 56958, 47613, 49909, 56960, 56961, 56962, 56963, 56964, 54189, 56965, 54475, 48636, 56966, 58818, 47029, 58819, 56967, 56968, 48057, 54754, 56969, 48632, 54454, 52901, 49580, 46041, 56970, 56971, 52470, 56972, 58822, 58820, 58824, 56973, 58826, 58823, 46543, 50888, 56974, 46588, 58821, 56975, 51958, 56976, 56977, 58825, 56978, 56979, 56980, 50132, 45509, 48291, 56981, 56982, 56983, 55223, 56984, 56985, 52683, 52173, 51914, 52435, 58828, 58827, 50406, 56986, 56987, 53665, 53687, 58829, 56988, 58832, 56989, 52664, 55024, 58831, 46557, 56990, 52670, 56991, 58833, 46778, 56992, 57152, 52648, 47588, 57153, 51909, 46033, 52185, 54508, 58834, 47082, 57154, 57155, 57156, 58830, 57157, 57158, 57159, 57160, 57161, 57162, 58837, 46334, 58838, 57163, 57164, 57165, 57166, 57167, 58835, 58836, 57168, 53981, 57169, 57170, 49887, 45510, 57171, 54242, 57172, 57173, 46813, 52204, 57174, 58839, 57175, 57176, 54262, 57177, 57178, 57179, 57180, 57181, 45545, 57182, 46836, 58842, 58840, 58841, 46528, 57183, 57184, 57185, 53957, 58844, 57186, 57187, 58846, 57188, 57189, 57190, 57191, 57192, 57193, 58845, 51122, 57194, 53923, 57195, 57196, 58843, 57197, 57198, 57199, 57200, 54498, 54746, 57201, 57202, 57203, 57204, 57205, 58848, 55281, 57206, 57207, 57208, 57209, 57210, 57211, 57212, 58849, 57213, 45532, 53755, 57214, 58850, 58852, 57216, 57217, 57218, 57219, 58851, 57220, 57221, 58853, 57222, 57223, 57224, 57225, 57226, 53976, 57227, 46539, 57228, 59359, 57229, 56053, 57230, 56056, 57231, 56054, 57232, 56055, 57233, 57234, 57235, 56058, 53455, 50375, 57236, 57237, 45294, 57238, 57239, 57240, 53424, 57241, 56057, 57242, 54218, 47786, 56226, 51185, 57243, 56060, 56059, 51675, 56061, 57244, 56225, 55262, 56062, 49626, 57245, 57246, 56229, 57247, 57248, 54260, 57408, 57409, 56231, 56228, 57410, 56232, 57411, 57412, 48572, 57413, 57414, 57415, 49353, 56227, 56230, 54947, 57416, 56233, 57417, 57418, 57419, 56237, 57420, 57421, 57422, 56238, 56236, 47810, 57423, 57424, 57425, 49060, 56235, 57426, 57427, 57428, 56234, 54471, 45759, 57429, 57430, 56239, 57431, 47609, 57432, 56240, 57433, 57434, 57435, 57436, 46011, 57437, 57438, 57439, 46502, 57440, 57441, 57442, 57443, 46780, 56241, 57444, 57445, 57446, 46837, 57447, 56242, 57448, 57449, 57450, 57451, 57452, 57453, 57454, 57455, 57456, 57457, 57458, 57459, 57460, 57461, 57462, 57463, 57464, 57465, 57466, 57467, 45513, 57468, 57469, 57470, 57472, 56244, 57473, 57474, 57475, 56243, 56245, 57476, 57477, 57478, 57479, 57480, 57481, 57482, 57483, 57484, 57485, 57486, 56247, 57487, 56246, 57488, 57489, 57490, 57491, 57492, 57493, 57494, 56248, 57495, 57496, 57497, 57498, 57499, 57500, 57501, 57502, 57503, 56249, 57504, 57664, 56250, 57665, 57666, 54223, 62714, 51189, 55235, 50660, 62716, 62717, 62715, 57667, 48838, 57668, 57669, 57670, 57671, 53487, 57672, 57673, 47059, 57674, 57675, 54477, 52394, 57676, 57677, 62882, 62881, 47784, 62718, 52182, 57678, 57679, 57680, 62884, 49362, 57681, 46058, 57682, 52650, 62885, 62883, 48564, 62888, 57683, 62889, 48589, 50104, 49121, 52193, 62890, 57684, 57685, 57686, 62886, 62887, 50416, 57687, 57688, 57689, 57690, 57691, 62892, 57692, 46268, 57693, 55277, 57694, 46295, 62891, 62894, 57695, 57696, 62893, 62895, 53457, 57697, 57698, 57699, 57700, 57701, 57702, 57703, 50129, 51369, 57704, 57705, 57706, 57707, 57708, 57709, 62896, 62897, 57710, 57711, 57712, 57713, 57714, 57715, 62898, 57716, 57717, 62899, 62900, 62901, 57718, 57719, 57720, 57721, 62903, 62902, 57722, 57723, 57724, 57725, 62904, 57726, 57728, 57729, 57730, 57731, 57732, 57733, 57734, 57735, 57736, 57737, 57738, 45769, 57739, 54228, 51917, 57740, 49391, 55e3, 53936, 49599, 57741, 48624, 57742, 57743, 57744, 57745, 57746, 57747, 57748, 57749, 57750, 57751, 47274, 57752, 57753, 57754, 57755, 57756, 57757, 57758, 57759, 57760, 57920, 57921, 57922, 57923, 57924, 57925, 57926, 57927, 57928, 57929, 57930, 57931, 57932, 57933, 57934, 57935, 57936, 57937, 57938, 57939, 57940, 57941, 57942, 57943, 57944, 57945, 57946, 57947, 57948, 57949, 57950, 57951, 57952, 57953, 57954, 57955, 57956, 57957, 57958, 57959, 57960, 57961, 57962, 57963, 57964, 57965, 57966, 57967, 57968, 57969, 57970, 57971, 57972, 57973, 57974, 57975, 57976, 57977, 57978, 57979, 57980, 57981, 57982, 57984, 57985, 57986, 57987, 57988, 57989, 57990, 57991, 57992, 57993, 57994, 57995, 57996, 57997, 57998, 57999, 58e3, 58001, 58002, 58003, 58004, 58005, 58006, 58007, 58008, 58009, 58010, 58011, 58012, 58013, 58014, 58015, 58016, 58176, 58177, 58178, 58179, 58180, 58181, 58182, 58183, 58184, 58185, 58186, 58187, 58188, 58189, 58190, 58191, 58192, 58193, 58194, 58195, 58196, 58197, 58198, 58199, 58200, 58201, 58202, 58203, 58204, 58205, 58206, 58207, 58208, 58209, 58210, 58211, 58212, 58213, 58214, 58215, 58216, 58217, 58218, 58219, 58220, 58221, 48376, 58222, 58223, 58224, 58225, 58226, 58227, 58228, 58229, 58230, 58231, 58232, 58233, 58234, 58235, 58236, 58237, 58238, 58240, 58241, 58242, 58243, 58244, 58245, 58246, 58247, 63174, 58248, 58249, 58250, 58251, 58252, 58253, 58254, 58255, 58256, 58257, 58258, 58259, 58260, 58261, 58262, 58263, 58264, 58265, 58266, 58267, 58268, 58269, 58270, 58271, 58272, 58432, 58433, 58434, 58435, 58436, 58437, 63175, 58438, 58439, 58440, 58441, 58442, 58443, 58444, 58445, 58446, 58447, 58448, 58449, 58450, 58451, 58452, 58453, 58454, 58455, 58456, 58457, 58458, 58459, 58460, 58461, 58462, 63176, 58463, 58464, 58465, 58466, 58467, 58468, 58469, 58470, 58471, 58472, 58473, 58474, 58475, 58476, 58477, 58478, 58479, 58480, 58481, 58482, 58483, 58484, 58485, 58486, 58487, 58488, 58489, 58490, 58491, 58492, 58493, 58494, 58496, 58497, 58498, 58499, 58500, 58501, 58502, 58503, 58504, 58505, 58506, 58507, 58508, 58509, 58510, 58511, 58512, 58513, 58514, 58515, 58516, 58517, 58518, 58519, 58520, 58521, 58522, 58523, 58524, 58525, 58526, 58527, 58528, 58688, 58689, 58690, 58691, 58692, 58693, 58694, 58695, 58696, 58697, 58698, 58699, 58700, 58701, 58702, 58703, 58704, 58705, 58706, 58707, 58708, 58709, 58710, 58711, 58712, 58713, 58714, 58715, 58716, 58717, 58718, 58719, 58720, 58721, 58722, 58723, 58724, 58725, 58726, 58727, 58728, 58729, 58730, 58731, 58732, 58733, 58734, 58735, 58736, 58737, 58738, 58739, 63177, 58740, 58741, 58742, 58743, 58744, 58745, 58746, 58747, 58748, 58749, 58750, 58752, 58753, 58754, 58755, 58756, 58757, 58758, 58759, 58760, 58761, 58762, 58763, 58764, 58765, 58766, 58767, 58768, 58769, 58770, 58771, 58772, 58773, 58774, 58775, 58776, 58777, 58778, 58779, 58780, 58781, 58782, 58783, 63178, 58784, 58944, 58945, 58946, 58947, 58948, 58949, 58950, 58951, 58952, 58953, 58954, 58955, 58956, 58957, 58958, 58959, 58960, 58961, 58962, 58963, 58964, 58965, 58966, 58967, 58968, 58969, 58970, 58971, 58972, 58973, 58974, 58975, 58976, 58977, 58978, 63180, 58979, 58980, 58981, 58982, 58983, 58984, 58985, 58986, 58987, 58988, 58989, 58990, 58991, 58992, 58993, 58994, 58995, 58996, 58997, 58998, 58999, 59e3, 59001, 59002, 59003, 59004, 59005, 59006, 59008, 59009, 59010, 59011, 59012, 59013, 59014, 59015, 59016, 59017, 59018, 59019, 59020, 59021, 59022, 59023, 59024, 59025, 59026, 59027, 59028, 59029, 59030, 59031, 59032, 59033, 59034, 59035, 59036, 59037, 63179, 59038, 59039, 59040, 59200, 59201, 59202, 59203, 59204, 59205, 59206, 59207, 63465, 59208, 59209, 59210, 59211, 59212, 59213, 59214, 59215, 59216, 59217, 59218, 59219, 59220, 59221, 59222, 59223, 59224, 59225, 59226, 59227, 59228, 59229, 59230, 59231, 59232, 59233, 59234, 59235, 59236, 59237, 59238, 59239, 59240, 59241, 59242, 59243, 59244, 59245, 59246, 59247, 59248, 59249, 59250, 59251, 59252, 59253, 59254, 59255, 59256, 59257, 59258, 59259, 59260, 59261, 59262, 59264, 59265, 59266, 59267, 59268, 59269, 59270, 59271, 59272, 59273, 59274, 59275, 59276, 59277, 59278, 59279, 59280, 59281, 59282, 59283, 59284, 59285, 59286, 59287, 59288, 59289, 59290, 59291, 59292, 59293, 59294, 59295, 59296, 59456, 59457, 59458, 59459, 59460, 59461, 59462, 59463, 59464, 59465, 59466, 59467, 59468, 59469, 59470, 63181, 59471, 59472, 59473, 59474, 59475, 59476, 59477, 59478, 59479, 59480, 59481, 59482, 59483, 59484, 59485, 59486, 59487, 59488, 59489, 59490, 59491, 59492, 59493, 59494, 59495, 59496, 59497, 59498, 59499, 59500, 59501, 59502, 59503, 59504, 59505, 59506, 59507, 59508, 59509, 59510, 59511, 59512, 59513, 59514, 63182, 59515, 59516, 59517, 59518, 59520, 59521, 59522, 59523, 59524, 59525, 59526, 59527, 59528, 59529, 59530, 59531, 59532, 59533, 59534, 59535, 59536, 59537, 59538, 59539, 59540, 61124, 61125, 61126, 54763, 46756, 61128, 61127, 61129, 61130, 51109, 61131, 61132, 59541, 47024, 46582, 61133, 61135, 59542, 61134, 59543, 47302, 61136, 61137, 61138, 46811, 45998, 54995, 50374, 45493, 47318, 61139, 61140, 54463, 51157, 48891, 52953, 47539, 61142, 61141, 61144, 61143, 50597, 61145, 61146, 51118, 61147, 51119, 61148, 45735, 61149, 61150, 61151, 61152, 61153, 55274, 61154, 61155, 48344, 61156, 54219, 52474, 45740, 49637, 61157, 51110, 50093, 59544, 61158, 61159, 61160, 61161, 61162, 61163, 61164, 59545, 61165, 61166, 61167, 59546, 59547, 61168, 61169, 61170, 61172, 61171, 59548, 61173, 52653, 49857, 61174, 61175, 61176, 54689, 61177, 53171, 61178, 61179, 59549, 61180, 61181, 61345, 61182, 61346, 47349, 50170, 61347, 61348, 48578, 53951, 45817, 61349, 61350, 61351, 54008, 61352, 55037, 61353, 50892, 59550, 61354, 61355, 49588, 61356, 53242, 52216, 61358, 61357, 46074, 47608, 61359, 61360, 53474, 61361, 61362, 47078, 53439, 61363, 61364, 61365, 51441, 52448, 61366, 61367, 61368, 61369, 61370, 54752, 61371, 46317, 50090, 61372, 59551, 61373, 61374, 61375, 59552, 52989, 61376, 49888, 46264, 55222, 48629, 59712, 53191, 61379, 61377, 61378, 61380, 46759, 48380, 48866, 50124, 61381, 61382, 59713, 61383, 61391, 61384, 61385, 61386, 51138, 61425, 46797, 61387, 59714, 61388, 61389, 46790, 50110, 61390, 59715, 61392, 61393, 61394, 54770, 59716, 61395, 50423, 59717, 61396, 50424, 61397, 61398, 47332, 45303, 61399, 61400, 61401, 59718, 61402, 61403, 61404, 61405, 59719, 61406, 48821, 61409, 61407, 61408, 59720, 61410, 61411, 49613, 61412, 61413, 61414, 61415, 61416, 61417, 61418, 61419, 61420, 49368, 59721, 61421, 49581, 61422, 61423, 61424, 59722, 59723, 53218, 59724, 59725, 59726, 59727, 59728, 59729, 59730, 59731, 45988, 59732, 59733, 59734, 59735, 59736, 59737, 59738, 59739, 59740, 59741, 59742, 59743, 59744, 59745, 59746, 59747, 59748, 59749, 59750, 59751, 59752, 59753, 59754, 59755, 59756, 59757, 59758, 59759, 59760, 59761, 59762, 59763, 59764, 59765, 59766, 59767, 59768, 59769, 59770, 59771, 59772, 59773, 59774, 59776, 59777, 59778, 59779, 59780, 59781, 59782, 59783, 59784, 59785, 59786, 59787, 59788, 59789, 59790, 59791, 59792, 59793, 59794, 59795, 59796, 59797, 59798, 59799, 59800, 59801, 59802, 59803, 59804, 59805, 59806, 59807, 59808, 59968, 59969, 59970, 59971, 59972, 59973, 59974, 59975, 59976, 59977, 59978, 59979, 59980, 59981, 59982, 59983, 59984, 59985, 59986, 59987, 59988, 59989, 59990, 59991, 59992, 59993, 59994, 59995, 50117, 58309, 51649, 58310, 59996, 45525, 52938, 46259, 51442, 58311, 53200, 58312, 48356, 58313, 58314, 50118, 54690, 50390, 47595, 52933, 58315, 50166, 58316, 59997, 47015, 47347, 47826, 58317, 58318, 54468, 58319, 59998, 58320, 53707, 58321, 58322, 58323, 58324, 53718, 58325, 45819, 49339, 58326, 59999, 49323, 58327, 58328, 58329, 6e4, 58330, 58331, 60001, 47287, 56034, 60002, 46803, 60003, 56036, 56035, 60004, 60005, 60006, 60007, 60008, 60009, 60010, 56038, 60011, 60012, 60013, 51438, 60014, 60015, 56037, 47040, 53748, 54005, 54771, 48599, 60016, 60017, 60018, 60019, 55272, 56040, 56039, 60020, 45218, 52691, 60021, 56041, 60022, 47293, 48330, 49853, 49828, 46018, 56042, 60023, 49834, 50352, 48565, 60024, 60025, 53214, 60026, 60027, 60028, 56043, 51650, 60029, 60030, 60032, 60033, 60034, 45533, 60035, 60036, 60037, 56044, 60038, 46776, 54458, 60039, 46077, 60040, 60041, 56045, 54473, 53205, 50659, 60042, 56046, 60043, 60044, 60045, 60046, 60047, 56047, 60048, 56048, 49642, 52437, 53213, 60049, 60050, 60051, 60052, 60053, 60054, 60055, 60056, 60057, 60058, 60059, 60060, 60061, 54247, 49825, 60062, 56049, 60063, 60064, 52197, 60224, 56050, 60225, 52198, 54014, 60226, 60227, 60228, 47348, 60229, 60230, 56051, 45231, 53174, 60231, 60232, 54735, 60233, 60234, 60235, 60236, 60237, 60238, 60239, 60240, 60241, 60242, 52205, 60243, 60244, 60245, 60246, 60247, 60248, 60249, 60250, 56052, 60251, 60252, 58308, 60253, 60254, 49573, 60255, 60256, 63167, 60257, 60258, 63168, 63169, 50385, 60259, 51384, 53731, 60260, 60261, 53467, 53701, 48303, 47565, 60262, 61428, 60263, 60264, 46278, 54202, 63170, 46075, 60265, 60266, 63171, 60267, 60268, 46577, 60269, 60270, 60271, 60272, 60273, 60274, 60275, 60276, 60277, 60278, 63173, 60279, 60280, 60281, 60282, 60283, 60284, 60285, 54250, 63143, 53673, 60286, 60288, 60289, 60290, 63145, 60291, 60292, 60293, 63144, 60294, 60295, 49635, 49367, 60296, 45474, 60297, 60298, 60299, 60300, 52973, 60301, 53480, 63147, 60302, 60303, 53238, 60304, 63146, 54768, 63148, 50105, 60305, 60306, 60307, 48116, 63150, 63149, 60308, 60309, 60310, 50398, 60311, 60312, 49624, 60313, 60314, 60315, 60316, 60317, 52138, 60318, 53180, 60319, 60320, 60480, 60481, 60482, 60483, 60484, 60485, 60486, 60487, 60488, 63151, 60489, 60490, 63152, 60491, 60492, 63153, 60493, 49846, 60494, 60495, 60496, 60497, 60498, 45268, 50681, 60499, 60500, 60501, 60502, 63154, 60503, 60504, 60505, 60506, 60507, 60508, 60509, 60510, 60511, 60512, 60513, 60514, 60515, 60516, 60517, 60518, 60519, 60520, 60521, 51168, 63142, 60522, 60523, 48824, 60524, 60525, 48818, 60526, 46565, 60527, 60528, 47047, 60529, 49087, 50130, 50150, 60530, 60531, 55500, 60532, 60533, 60534, 47343, 60535, 60536, 60537, 60538, 60539, 60540, 60541, 60542, 60544, 48633, 53669, 60545, 45264, 60546, 60547, 60548, 60549, 60550, 63408, 60551, 60552, 60553, 60554, 60555, 60556, 60557, 60558, 63409, 60559, 60560, 60561, 60562, 60563, 53420, 60564, 45232, 60565, 60566, 60567, 63410, 63411, 60568, 63412, 60569, 60570, 60571, 51146, 60572, 60573, 60574, 60575, 60576, 60736, 60737, 48847, 60738, 60739, 63415, 60740, 60741, 60742, 60743, 60744, 60745, 60746, 63414, 60747, 45534, 60748, 63413, 60749, 60750, 63416, 60751, 63417, 60752, 60753, 60754, 60755, 60756, 60757, 60758, 60759, 60760, 60761, 60762, 60763, 60764, 60765, 60766, 60767, 60768, 60769, 60770, 60771, 60772, 60773, 60774, 60775, 60776, 60777, 60778, 60779, 60780, 60781, 60782, 60783, 60784, 60785, 60786, 60787, 60788, 60789, 60790, 60791, 60792, 60793, 60794, 60795, 60796, 60797, 60798, 60800, 60801, 52900, 51405, 60802, 47787, 59576, 59577, 59578, 48834, 60803, 60804, 60805, 60806, 60807, 54004, 60808, 54479, 51672, 60809, 60810, 60811, 60812, 60813, 60814, 60815, 60816, 60817, 60818, 60819, 60820, 60821, 60822, 60823, 60824, 60825, 60826, 60827, 60828, 60829, 60830, 60831, 60832, 60992, 60993, 60994, 60995, 60996, 60997, 60998, 60999, 61e3, 61001, 61002, 61003, 61004, 61005, 61006, 61007, 61008, 61009, 61010, 61011, 61012, 61013, 61014, 61015, 61016, 61017, 61018, 61019, 61020, 61021, 61022, 61023, 61024, 61025, 61026, 61027, 61028, 61029, 61030, 61031, 61032, 61033, 61034, 61035, 61036, 61037, 61038, 61039, 61040, 61041, 61042, 61043, 61044, 61045, 61046, 61047, 61048, 61049, 61050, 61051, 61052, 61053, 61054, 61056, 61057, 61058, 61059, 61060, 61061, 61062, 61063, 61064, 61065, 61066, 61067, 61068, 61069, 61070, 61071, 61072, 61073, 61074, 61075, 61076, 61077, 61078, 61079, 61080, 61081, 61082, 61083, 61084, 61085, 61086, 61087, 61088, 61248, 61249, 61250, 61251, 61252, 61253, 53939, 46757, 51178, 61948, 53230, 52147, 53483, 59375, 52711, 47563, 46809, 61949, 45284, 52172, 61950, 54436, 49837, 49644, 50884, 48817, 62113, 48341, 61254, 62114, 62115, 61255, 62116, 53955, 50869, 61256, 52679, 62117, 61257, 54193, 49093, 52450, 61258, 62118, 62119, 53717, 46830, 62120, 62121, 46559, 62122, 62123, 61259, 45820, 62124, 62125, 51367, 61260, 61261, 61262, 61263, 61264, 61265, 61266, 61267, 61268, 61269, 61270, 61271, 61272, 61273, 61274, 61275, 61276, 61277, 61278, 61279, 61280, 61281, 61282, 61283, 61284, 61285, 61286, 61287, 61288, 61289, 61290, 61291, 61292, 61293, 61294, 61295, 61296, 61297, 47079, 61298, 61299, 60585, 60586, 60587, 61300, 60588, 61301, 61302, 50862, 60589, 60590, 61303, 61304, 61305, 47049, 51891, 61306, 61307, 61308, 61309, 61310, 61312, 61313, 58040, 63439, 61314, 61315, 61316, 61317, 61318, 61319, 61320, 61321, 61322, 61323, 61324, 61325, 61326, 61327, 61328, 61329, 61330, 61331, 61332, 61333, 61334, 61335, 61336, 61337, 61338, 61339, 61340, 61341, 61342, 61343, 61344, 61504, 61505, 61506, 61507, 61508, 63440, 61509, 61510, 45773, 61511, 61512, 61513, 61514, 61515, 61516, 61517, 61518, 61519, 61520, 61521, 61522, 61523, 61524, 61525, 61526, 61527, 61528, 61529, 61530, 61531, 61532, 61533, 61534, 61535, 61536, 61537, 61538, 61539, 63441, 61540, 61541, 61542, 61543, 61544, 61545, 61546, 61547, 61548, 61549, 61550, 61551, 61552, 61553, 61554, 61555, 61556, 61557, 61558, 61559, 61560, 61561, 61562, 61563, 61564, 61565, 61566, 61568, 61569, 61570, 61571, 61572, 61573, 61574, 61575, 61576, 61577, 63443, 63442, 61578, 61579, 61580, 61581, 61582, 61583, 61584, 61585, 61586, 61587, 61588, 61589, 61590, 58043, 61591, 48290, 61592, 58044, 58045, 58046, 58047, 58048, 58049, 47033, 54011, 48548, 51918, 45477, 52167, 61593, 58050, 46844, 51396, 58051, 61594, 61595, 48584, 61596, 45565, 58052, 61597, 46838, 58053, 50393, 61598, 61599, 58054, 53210, 47581, 58055, 49313, 61600, 58056, 45814, 61760, 58057, 61761, 49651, 58058, 58059, 49912, 58060, 58061, 58062, 51927, 55480, 55781, 53219, 61762, 61763, 61764, 61765, 61766, 61767, 61768, 61769, 61770, 61771, 61772, 61605, 61773, 61774, 56496, 61775, 61776, 61777, 61778, 61779, 61780, 61781, 61782, 61783, 61784, 61785, 61786, 61787, 61788, 61789, 61790, 61791, 61792, 61793, 61794, 61795, 61796, 61797, 61798, 61799, 61800, 61801, 61802, 61803, 61804, 61805, 61806, 61807, 61808, 61809, 61810, 61811, 61812, 61813, 61814, 61815, 61816, 61817, 61818, 61819, 61820, 61821, 61822, 61824, 61825, 61826, 61827, 61828, 61829, 61830, 61831, 61832, 61833, 61834, 61835, 61836, 61837, 61838, 61839, 61840, 61841, 61842, 61843, 61844, 61845, 61846, 61847, 61848, 61849, 61850, 61851, 61852, 61853, 61854, 61855, 61856, 62016, 62017, 62018, 62019, 62020, 62021, 62022, 62023, 62024, 62025, 62026, 62027, 62028, 62029, 62030, 62031, 62032, 62033, 62034, 62035, 62036, 62037, 62038, 62039, 62040, 62041, 62042, 62043, 62044, 62045, 62046, 62047, 62048, 62049, 62050, 62051, 62052, 62053, 62054, 62055, 62056, 62057, 62058, 62059, 62060, 62061, 62062, 62063, 62064, 62065, 62066, 62067, 62068, 62069, 62070, 62071, 62072, 62073, 62074, 62075, 62076, 62077, 62078, 62080, 62081, 62082, 62083, 62084, 62085, 62086, 62087, 62088, 62089, 62090, 62091, 62092, 62093, 62094, 62095, 62096, 62097, 62098, 62099, 62100, 62101, 62102, 62103, 62104, 62105, 62106, 62107, 62108, 62109, 62110, 62111, 62112, 62272, 62273, 62274, 62275, 62276, 62277, 62278, 62279, 62280, 62281, 62282, 62283, 62284, 62285, 62286, 62287, 62288, 62289, 49901, 54438, 52692, 53681, 46043, 51197, 62290, 45749, 49855, 59104, 51899, 59105, 59106, 48852, 59107, 55204, 52693, 59109, 48349, 59108, 59110, 59111, 49902, 62291, 48574, 59112, 49894, 47783, 59113, 62292, 59114, 46034, 53737, 62293, 62294, 49061, 59115, 50927, 59116, 59117, 62295, 62296, 59118, 50861, 59119, 62297, 51623, 59120, 59121, 59122, 58809, 59123, 59124, 49890, 59125, 59126, 55016, 59127, 62298, 59128, 47559, 62299, 62300, 62301, 62302, 62303, 62304, 62305, 63419, 63418, 62306, 62307, 62308, 62309, 63422, 63420, 47777, 62310, 63423, 62311, 63424, 62312, 62313, 62314, 63426, 63425, 63428, 62315, 62316, 63427, 62317, 62318, 62319, 62320, 62321, 63429, 63430, 62322, 62323, 62324, 62325, 63431, 62326, 52200, 62327, 62328, 62329, 62330, 47327, 62331, 62332, 62333, 62334, 62336, 62337, 63444, 62338, 63445, 62339, 62340, 62341, 62342, 63446, 62343, 62344, 62345, 62346, 63448, 62347, 63450, 62348, 63447, 62349, 62350, 62351, 62352, 62353, 62354, 62355, 62356, 62357, 63451, 62358, 63449, 62359, 62360, 62361, 62362, 62363, 62364, 62365, 55255, 62366, 62367, 62368, 62528, 63452, 62529, 62530, 62531, 62532, 62533, 62534, 63453, 62535, 62536, 62537, 63454, 62538, 62539, 62540, 62541, 62542, 62543, 62544, 62545, 62546, 62547, 62548, 63455, 62549, 62550, 62551, 63456, 62552, 62553, 62554, 62555, 62556, 62557, 62558, 62559, 62560, 62561, 62562, 56267, 62563, 62564, 55466, 62565, 62566, 62567, 62568, 62569, 62570, 62571, 62572, 58871, 47597, 62573, 62574, 62575, 62576, 49149, 48106, 63433, 50887, 63432, 62577, 63434, 63436, 63435, 62578, 62579, 62580, 63437, 62581, 52922, 62582, 63438, 62583, 62584, 50343, 62585, 62586, 62587, 62588, 62589, 62590, 62592, 62593, 62594, 62595, 62596, 62597, 62598, 62599, 62600, 62601, 62602, 62603, 62604, 62605, 62606, 62607, 62608, 62609, 62610, 62611, 62612, 62613, 62614, 62615, 62616, 62617, 62618, 62619, 62620, 62621, 62622, 62623, 62624, 62784, 62785, 62786, 62787, 62788, 62789, 62790, 62791, 62792, 62793, 62794, 62795, 62796, 62797, 62798, 62799, 62800, 62801, 62802, 62803, 62804, 62805, 62806, 62807, 62808, 62809, 62810, 62811, 62812, 62813, 62814, 62815, 62816, 62817, 62818, 62819, 62820, 62821, 62822, 62823, 62824, 62825, 62826, 62827, 62828, 62829, 62830, 62831, 62832, 62833, 62834, 62835, 62836, 62837, 62838, 62839, 62840, 62841, 62842, 62843, 62844, 62845, 62846, 62848, 62849, 62850, 62851, 62852, 62853, 62854, 62855, 62856, 62857, 62858, 62859, 62860, 62861, 62862, 62863, 62864, 62865, 62866, 62867, 62868, 62869, 62870, 62871, 62872, 62873, 62874, 62875, 62876, 62877, 62878, 62879, 62880, 63040, 63041, 63042, 63043, 63044, 63045, 63046, 63047, 63048, 63049, 63050, 63051, 63052, 63053, 63054, 63055, 63056, 63057, 63058, 63059, 63060, 63061, 63062, 63063, 63064, 63065, 63066, 63067, 63068, 63069, 63070, 63071, 63072, 63073, 63074, 63075, 63076, 63077, 63078, 63079, 63080, 63081, 63082, 63083, 63084, 63085, 63086, 63087, 63088, 63089, 63090, 63091, 63092, 63093, 63094, 63095, 63096, 63097, 63098, 63099, 63100, 63101, 63102, 63104, 63105, 63106, 63107, 63108, 63109, 63110, 63111, 63112, 63113, 63114, 63115, 63116, 63117, 63118, 63119, 63120, 63121, 63122, 63123, 63124, 63125, 63126, 63127, 63128, 63129, 63130, 63131, 63132, 63133, 63134, 63135, 63136, 63296, 63297, 63298, 63299, 63300, 63301, 63302, 63303, 63304, 63305, 63306, 63307, 63308, 63309, 63310, 63311, 63312, 63313, 63314, 63315, 63316, 63317, 63318, 63319, 63320, 63321, 63322, 63323, 63324, 63325, 63326, 63327, 63328, 63329, 63330, 63331, 63332, 63333, 63334, 63335, 63336, 63337, 63338, 63339, 63340, 63341, 63342, 63343, 63344, 63345, 63346, 63347, 63348, 63349, 63350, 63351, 63352, 63353, 63354, 63355, 63356, 63357, 63358, 63360, 54243, 63361, 63362, 63183, 63363, 49843, 63184, 63364, 63365, 63185, 63186, 63187, 63188, 63366, 63367, 63190, 63368, 45483, 63191, 63369, 63192, 63193, 63194, 63370, 63195, 63196, 63371, 63372, 63373, 63374, 63197, 63198, 53194, 63375, 63199, 63200, 63201, 63202, 63203, 63204, 49392, 63205, 63206, 63207, 63208, 63209, 63376, 63210, 63377, 63211, 63212, 63378, 63213, 63214, 63215, 63216, 63217, 63218, 63219, 63220, 48808, 63379, 63221, 63222, 63223, 63224, 63380, 63381, 63382, 63383, 63384, 51450, 63225, 63226, 63227, 63228, 63385, 63386, 63229, 63230, 63393, 63394, 63395, 63396, 63397, 63387, 63388, 63398, 63399, 63400, 45550, 63401, 63402, 63403, 63389, 63390, 63404, 63405, 49627, 63406, 63391, 63392, 63407, 63552, 63553, 63554, 63555, 63556, 63557, 63558, 63559, 63560, 63561, 63562, 63563, 63564, 63565, 63566, 63567, 63568, 63569, 63570, 63571, 63572, 63573, 63574, 63575, 63576, 63577, 63578, 63579, 63580, 63581, 63582, 63583, 63584, 63585, 63586, 63587, 63588, 63589, 63590, 63591, 63592, 63593, 63594, 63595, 63596, 63597, 63598, 63599, 63600, 63601, 63602, 63603, 63604, 63605, 63606, 63607, 63608, 63609, 63610, 63611, 63612, 63613, 63614, 63616, 63617, 63618, 63619, 63620, 63621, 63622, 63623, 63624, 63625, 63626, 63627, 63628, 63629, 63630, 63631, 63632, 63633, 63634, 63635, 63636, 63637, 63638, 63639, 63640, 63641, 63642, 63643, 63644, 63645, 63646, 63647, 63648, 63808, 63809, 63810, 63811, 63812, 63813, 63814, 63815, 63816, 63817, 63818, 63819, 63820, 63821, 63822, 63823, 63824, 63825, 63826, 63827, 63828, 63829, 63830, 63831, 63832, 63833, 63834, 63835, 63836, 63837, 63838, 63839, 63840, 63841, 63842, 63843, 63844, 63845, 63846, 63847, 63848, 63849, 63850, 63851, 63852, 63853, 63854, 63855, 63856, 63857, 63858, 63859, 63860, 63861, 63862, 63863, 63864, 63865, 63866, 63867, 63868, 63869, 63870, 63872, 63873, 63874, 63875, 63876, 63877, 63878, 63879, 63880, 63881, 63882, 63883, 63884, 63885, 63886, 63887, 63888, 63889, 63890, 63891, 63892, 63893, 63894, 63895, 63896, 63897, 63898, 63899, 63900, 63901, 63902, 63903, 63904, 64064, 64065, 64066, 64067, 64068, 64069, 64070, 64071, 64072, 64073, 64074, 64075, 64076, 64077, 64078, 64079, 64080, 64081, 64082, 64083, 64084, 64085, 64086, 64087, 64088, 64089, 64090, 64091, 64092, 64093, 64094, 64095, 64096, 64097, 64098, 64099, 64100, 64101, 64102, 64103, 64104, 64105, 64106, 64107, 64108, 64109, 64110, 64111, 64112, 64113, 64114, 64115, 64116, 64117, 64118, 64119, 64120, 64121, 64122, 64123, 64124, 64125, 64126, 64128, 64129, 64130, 64131, 64132, 64133, 64134, 64135, 64136, 64137, 64138, 64139, 64140, 64141, 64142, 64143, 64144, 64145, 64146, 64147, 64148, 64149, 64150, 64151, 64152, 64153, 64154, 64155, 64156, 64157, 64158, 64159, 64160, 64320, 64321, 64322, 64323, 64324, 64325, 64326, 64327, 64328, 64329, 64330, 64331, 64332, 64333, 64334, 64335, 64336, 64337, 64338, 64339, 64340, 64341, 64342, 64343, 64344, 64345, 64346, 64347, 50417, 61615, 48294, 61616, 50169, 64348, 50616, 53691, 64349, 61617, 61618, 61619, 61620, 61621, 53692, 64350, 53740, 64351, 61623, 61622, 54439, 64352, 52690, 61624, 61626, 61625, 61627, 61628, 64353, 64354, 47339, 61629, 47848, 64355, 61630, 61631, 48873, 61632, 46828, 61633, 61634, 61635, 61636, 51381, 61637, 61638, 64356, 61639, 50676, 64357, 61640, 64358, 64359, 64360, 61641, 64361, 61642, 63421, 64362, 61643, 61644, 61645, 64363, 61646, 64364, 64365, 64366, 64367, 61647, 47831, 64368, 61648, 61649, 61650, 61651, 61652, 61653, 61654, 61656, 64369, 64370, 54181, 61655, 64371, 61657, 64372, 64373, 64374, 64375, 64376, 64377, 64378, 64379, 64380, 64381, 62906, 49849, 64382, 64384, 63460, 64385, 64386, 64387, 64388, 63461, 63462, 64389, 64390, 63463, 64391, 64392, 64393, 64394, 64395, 64396, 63464, 49844, 64397, 64398, 64399, 64400, 64401, 64402, 64403, 64404, 64405, 63466, 64406, 63467, 64407, 64408, 64409, 64410, 64411, 64412, 49907, 64413, 64414, 64415, 64416, 64576, 64577, 64578, 64579, 64580, 64581, 64582, 64583, 64584, 62704, 64585, 64586, 64587, 62703, 64588, 64589, 49897, 64590, 63457, 63458, 64591, 64592, 64593, 64594, 64595, 48070, 64596, 64597, 64598, 64599, 55780, 64600, 64601, 64602, 51954, 49384, 61604, 64603, 47834, 64604, 64605, 51117, 64606, 64607, 64608, 50348, 64609, 64610, 63468, 63469, 63470, 64611, 63472, 63471, 64612, 63473, 64613, 64614, 63476, 64615, 63475, 64616, 63474, 63477, 64617, 64618, 64619, 64620, 63478, 64621, 64622, 64623, 64624, 64625, 64626, 64627, 64628, 64629, 60905, 64630, 60906, 60907, 64631, 63164, 64632, 64633, 64634, 64635, 64636, 64637, 64638, 64640, 64641, 64642, 64643, 64644, 63165, 64645, 63166, 46758, 64646, 55486, 64647, 64648, 47556, 64649, 64650, 64651, 55483, 64652, 56497, 64653, 64654, 64655, 64656, 64657, 64658, 51955, 64659, 63479, 64660, 64661, 64662, 64663, 64664, 64665, 64666, 64667, 64668, 63480, 64669, 64670, 63481, 64671, 64672, 64832, 64833, 64834, 64835, 64836, 63483, 64837, 63482, 64838, 45511, 64839, 63484, 63485, 64840, 64841, 64842, 64843, 64844, 63486, 64845, 64846, 64847, 64848, 64849, 64850, 64851, 64852, 64853, 64854, 64855, 50923, 60596, 64856, 64857, 64858, 64859, 64860, 64861, 64862, 64863, 64864, 64865, 64866, 64867, 64868, 64869, 64870, 64871, 64872, 64873, 64874, 64875, 64876, 64877, 64878, 64879, 64880, 64881, 64882, 64883, 64884, 64885, 64886, 64887, 64888, 64889, 64890, 64891, 64892, 64893, 64894, 64896, 64897, 64898, 64899, 64900, 64901, 46045, 63155, 64902, 64903, 63156, 49636, 63157, 63158, 63159, 63160, 63161, 63162, 51363, 63163, 64904, 64905, 64906, 64907, 64908, 64909, 64910, 64911, 64912, 64913, 64914, 64915, 49658, 47528, 60904, 64916, 64917, 64918, 47594, 55775, 64919, 64920, 64921, 64922, 64923, 44195, 41900 ];
      StringConvert.unicode = [ 19968, 19969, 19970, 19971, 19972, 19973, 19974, 19975, 19976, 19977, 19978, 19979, 19980, 19981, 19982, 19983, 19984, 19985, 19986, 19987, 19988, 19989, 19990, 19991, 19992, 19993, 19994, 19995, 19996, 19997, 19998, 19999, 2e4, 20001, 20002, 20003, 20004, 20005, 20006, 20007, 20008, 20009, 20010, 20011, 20012, 20013, 20014, 20015, 20016, 20017, 20018, 20019, 20020, 20021, 20022, 20023, 20024, 20025, 20026, 20027, 20028, 20029, 20030, 20031, 20032, 20033, 20034, 20035, 20036, 20037, 20038, 20039, 20040, 20041, 20042, 20043, 20044, 20045, 20046, 20047, 20048, 20049, 20050, 20051, 20052, 20053, 20054, 20055, 20056, 20057, 20058, 20059, 20060, 20061, 20062, 20063, 20064, 20065, 20066, 20067, 20068, 20069, 20070, 20071, 20072, 20073, 20074, 20075, 20076, 20077, 20078, 20079, 20080, 20081, 20082, 20083, 20084, 20085, 20086, 20087, 20088, 20089, 20090, 20091, 20092, 20093, 20094, 20095, 20096, 20097, 20098, 20099, 20100, 20101, 20102, 20103, 20104, 20105, 20106, 20107, 20108, 20109, 20110, 20111, 20112, 20113, 20114, 20115, 20116, 20117, 20118, 20119, 20120, 20121, 20122, 20123, 20124, 20125, 20126, 20127, 20128, 20129, 20130, 20131, 20132, 20133, 20134, 20135, 20136, 20137, 20138, 20139, 20140, 20141, 20142, 20143, 20144, 20145, 20146, 20147, 20148, 20149, 20150, 20151, 20152, 20153, 20154, 20155, 20156, 20157, 20158, 20159, 20160, 20161, 20162, 20163, 20164, 20165, 20166, 20167, 20168, 20169, 20170, 20171, 20172, 20173, 20174, 20175, 20176, 20177, 20178, 20179, 20180, 20181, 20182, 20183, 20184, 20185, 20186, 20187, 20188, 20189, 20190, 20191, 20192, 20193, 20194, 20195, 20196, 20197, 20198, 20199, 20200, 20201, 20202, 20203, 20204, 20205, 20206, 20207, 20208, 20209, 20210, 20211, 20212, 20213, 20214, 20215, 20216, 20217, 20218, 20219, 20220, 20221, 20222, 20223, 20224, 20225, 20226, 20227, 20228, 20229, 20230, 20231, 20232, 20233, 20234, 20235, 20236, 20237, 20238, 20239, 20240, 20241, 20242, 20243, 20244, 20245, 20246, 20247, 20248, 20249, 20250, 20251, 20252, 20253, 20254, 20255, 20256, 20257, 20258, 20259, 20260, 20261, 20262, 20263, 20264, 20265, 20266, 20267, 20268, 20269, 20270, 20271, 20272, 20273, 20274, 20275, 20276, 20277, 20278, 20279, 20280, 20281, 20282, 20283, 20284, 20285, 20286, 20287, 20288, 20289, 20290, 20291, 20292, 20293, 20294, 20295, 20296, 20297, 20298, 20299, 20300, 20301, 20302, 20303, 20304, 20305, 20306, 20307, 20308, 20309, 20310, 20311, 20312, 20313, 20314, 20315, 20316, 20317, 20318, 20319, 20320, 20321, 20322, 20323, 20324, 20325, 20326, 20327, 20328, 20329, 20330, 20331, 20332, 20333, 20334, 20335, 20336, 20337, 20338, 20339, 20340, 20341, 20342, 20343, 20344, 20345, 20346, 20347, 20348, 20349, 20350, 20351, 20352, 20353, 20354, 20355, 20356, 20357, 20358, 20359, 20360, 20361, 20362, 20363, 20364, 20365, 20366, 20367, 20368, 20369, 20370, 20371, 20372, 20373, 20374, 20375, 20376, 20377, 20378, 20379, 20380, 20381, 20382, 20383, 20384, 20385, 20386, 20387, 20388, 20389, 20390, 20391, 20392, 20393, 20394, 20395, 20396, 20397, 20398, 20399, 20400, 20401, 20402, 20403, 20404, 20405, 20406, 20407, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20415, 20416, 20417, 20418, 20419, 20420, 20421, 20422, 20423, 20424, 20425, 20426, 20427, 20428, 20429, 20430, 20431, 20432, 20433, 20434, 20435, 20436, 20437, 20438, 20439, 20440, 20441, 20442, 20443, 20444, 20445, 20446, 20447, 20448, 20449, 20450, 20451, 20452, 20453, 20454, 20455, 20456, 20457, 20458, 20459, 20460, 20461, 20462, 20463, 20464, 20465, 20466, 20467, 20468, 20469, 20470, 20471, 20472, 20473, 20474, 20475, 20476, 20477, 20478, 20479, 20480, 20481, 20482, 20483, 20484, 20485, 20486, 20487, 20488, 20489, 20490, 20491, 20492, 20493, 20494, 20495, 20496, 20497, 20498, 20499, 20500, 20501, 20502, 20503, 20504, 20505, 20506, 20507, 20508, 20509, 20510, 20511, 20512, 20513, 20514, 20515, 20516, 20517, 20518, 20519, 20520, 20521, 20522, 20523, 20524, 20525, 20526, 20527, 20528, 20529, 20530, 20531, 20532, 20533, 20534, 20535, 20536, 20537, 20538, 20539, 20540, 20541, 20542, 20543, 20544, 20545, 20546, 20547, 20548, 20549, 20550, 20551, 20552, 20553, 20554, 20555, 20556, 20557, 20558, 20559, 20560, 20561, 20562, 20563, 20564, 20565, 20566, 20567, 20568, 20569, 20570, 20571, 20572, 20573, 20574, 20575, 20576, 20577, 20578, 20579, 20580, 20581, 20582, 20583, 20584, 20585, 20586, 20587, 20588, 20589, 20590, 20591, 20592, 20593, 20594, 20595, 20596, 20597, 20598, 20599, 20600, 20601, 20602, 20603, 20604, 20605, 20606, 20607, 20608, 20609, 20610, 20611, 20612, 20613, 20614, 20615, 20616, 20617, 20618, 20619, 20620, 20621, 20622, 20623, 20624, 20625, 20626, 20627, 20628, 20629, 20630, 20631, 20632, 20633, 20634, 20635, 20636, 20637, 20638, 20639, 20640, 20641, 20642, 20643, 20644, 20645, 20646, 20647, 20648, 20649, 20650, 20651, 20652, 20653, 20654, 20655, 20656, 20657, 20658, 20659, 20660, 20661, 20662, 20663, 20664, 20665, 20666, 20667, 20668, 20669, 20670, 20671, 20672, 20673, 20674, 20675, 20676, 20677, 20678, 20679, 20680, 20681, 20682, 20683, 20684, 20685, 20686, 20687, 20688, 20689, 20690, 20691, 20692, 20693, 20694, 20695, 20696, 20697, 20698, 20699, 20700, 20701, 20702, 20703, 20704, 20705, 20706, 20707, 20708, 20709, 20710, 20711, 20712, 20713, 20714, 20715, 20716, 20717, 20718, 20719, 20720, 20721, 20722, 20723, 20724, 20725, 20726, 20727, 20728, 20729, 20730, 20731, 20732, 20733, 20734, 20735, 20736, 20737, 20738, 20739, 20740, 20741, 20742, 20743, 20744, 20745, 20746, 20747, 20748, 20749, 20750, 20751, 20752, 20753, 20754, 20755, 20756, 20757, 20758, 20759, 20760, 20761, 20762, 20763, 20764, 20765, 20766, 20767, 20768, 20769, 20770, 20771, 20772, 20773, 20774, 20775, 20776, 20777, 20778, 20779, 20780, 20781, 20782, 20783, 20784, 20785, 20786, 20787, 20788, 20789, 20790, 20791, 20792, 20793, 20794, 20795, 20796, 20797, 20798, 20799, 20800, 20801, 20802, 20803, 20804, 20805, 20806, 20807, 20808, 20809, 20810, 20811, 20812, 20813, 20814, 20815, 20816, 20817, 20818, 20819, 20820, 20821, 20822, 20823, 20824, 20825, 20826, 20827, 20828, 20829, 20830, 20831, 20832, 20833, 20834, 20835, 20836, 20837, 20838, 20839, 20840, 20841, 20842, 20843, 20844, 20845, 20846, 20847, 20848, 20849, 20850, 20851, 20852, 20853, 20854, 20855, 20856, 20857, 20858, 20859, 20860, 20861, 20862, 20863, 20864, 20865, 20866, 20867, 20868, 20869, 20870, 20871, 20872, 20873, 20874, 20875, 20876, 20877, 20878, 20879, 20880, 20881, 20882, 20883, 20884, 20885, 20886, 20887, 20888, 20889, 20890, 20891, 20892, 20893, 20894, 20895, 20896, 20897, 20898, 20899, 20900, 20901, 20902, 20903, 20904, 20905, 20906, 20907, 20908, 20909, 20910, 20911, 20912, 20913, 20914, 20915, 20916, 20917, 20918, 20919, 20920, 20921, 20922, 20923, 20924, 20925, 20926, 20927, 20928, 20929, 20930, 20931, 20932, 20933, 20934, 20935, 20936, 20937, 20938, 20939, 20940, 20941, 20942, 20943, 20944, 20945, 20946, 20947, 20948, 20949, 20950, 20951, 20952, 20953, 20954, 20955, 20956, 20957, 20958, 20959, 20960, 20961, 20962, 20963, 20964, 20965, 20966, 20967, 20968, 20969, 20970, 20971, 20972, 20973, 20974, 20975, 20976, 20977, 20978, 20979, 20980, 20981, 20982, 20983, 20984, 20985, 20986, 20987, 20988, 20989, 20990, 20991, 20992, 20993, 20994, 20995, 20996, 20997, 20998, 20999, 21e3, 21001, 21002, 21003, 21004, 21005, 21006, 21007, 21008, 21009, 21010, 21011, 21012, 21013, 21014, 21015, 21016, 21017, 21018, 21019, 21020, 21021, 21022, 21023, 21024, 21025, 21026, 21027, 21028, 21029, 21030, 21031, 21032, 21033, 21034, 21035, 21036, 21037, 21038, 21039, 21040, 21041, 21042, 21043, 21044, 21045, 21046, 21047, 21048, 21049, 21050, 21051, 21052, 21053, 21054, 21055, 21056, 21057, 21058, 21059, 21060, 21061, 21062, 21063, 21064, 21065, 21066, 21067, 21068, 21069, 21070, 21071, 21072, 21073, 21074, 21075, 21076, 21077, 21078, 21079, 21080, 21081, 21082, 21083, 21084, 21085, 21086, 21087, 21088, 21089, 21090, 21091, 21092, 21093, 21094, 21095, 21096, 21097, 21098, 21099, 21100, 21101, 21102, 21103, 21104, 21105, 21106, 21107, 21108, 21109, 21110, 21111, 21112, 21113, 21114, 21115, 21116, 21117, 21118, 21119, 21120, 21121, 21122, 21123, 21124, 21125, 21126, 21127, 21128, 21129, 21130, 21131, 21132, 21133, 21134, 21135, 21136, 21137, 21138, 21139, 21140, 21141, 21142, 21143, 21144, 21145, 21146, 21147, 21148, 21149, 21150, 21151, 21152, 21153, 21154, 21155, 21156, 21157, 21158, 21159, 21160, 21161, 21162, 21163, 21164, 21165, 21166, 21167, 21168, 21169, 21170, 21171, 21172, 21173, 21174, 21175, 21176, 21177, 21178, 21179, 21180, 21181, 21182, 21183, 21184, 21185, 21186, 21187, 21188, 21189, 21190, 21191, 21192, 21193, 21194, 21195, 21196, 21197, 21198, 21199, 21200, 21201, 21202, 21203, 21204, 21205, 21206, 21207, 21208, 21209, 21210, 21211, 21212, 21213, 21214, 21215, 21216, 21217, 21218, 21219, 21220, 21221, 21222, 21223, 21224, 21225, 21226, 21227, 21228, 21229, 21230, 21231, 21232, 21233, 21234, 21235, 21236, 21237, 21238, 21239, 21240, 21241, 21242, 21243, 21244, 21245, 21246, 21247, 21248, 21249, 21250, 21251, 21252, 21253, 21254, 21255, 21256, 21257, 21258, 21259, 21260, 21261, 21262, 21263, 21264, 21265, 21266, 21267, 21268, 21269, 21270, 21271, 21272, 21273, 21274, 21275, 21276, 21277, 21278, 21279, 21280, 21281, 21282, 21283, 21284, 21285, 21286, 21287, 21288, 21289, 21290, 21291, 21292, 21293, 21294, 21295, 21296, 21297, 21298, 21299, 21300, 21301, 21302, 21303, 21304, 21305, 21306, 21307, 21308, 21309, 21310, 21311, 21312, 21313, 21314, 21315, 21316, 21317, 21318, 21319, 21320, 21321, 21322, 21323, 21324, 21325, 21326, 21327, 21328, 21329, 21330, 21331, 21332, 21333, 21334, 21335, 21336, 21337, 21338, 21339, 21340, 21341, 21342, 21343, 21344, 21345, 21346, 21347, 21348, 21349, 21350, 21351, 21352, 21353, 21354, 21355, 21356, 21357, 21358, 21359, 21360, 21361, 21362, 21363, 21364, 21365, 21366, 21367, 21368, 21369, 21370, 21371, 21372, 21373, 21374, 21375, 21376, 21377, 21378, 21379, 21380, 21381, 21382, 21383, 21384, 21385, 21386, 21387, 21388, 21389, 21390, 21391, 21392, 21393, 21394, 21395, 21396, 21397, 21398, 21399, 21400, 21401, 21402, 21403, 21404, 21405, 21406, 21407, 21408, 21409, 21410, 21411, 21412, 21413, 21414, 21415, 21416, 21417, 21418, 21419, 21420, 21421, 21422, 21423, 21424, 21425, 21426, 21427, 21428, 21429, 21430, 21431, 21432, 21433, 21434, 21435, 21436, 21437, 21438, 21439, 21440, 21441, 21442, 21443, 21444, 21445, 21446, 21447, 21448, 21449, 21450, 21451, 21452, 21453, 21454, 21455, 21456, 21457, 21458, 21459, 21460, 21461, 21462, 21463, 21464, 21465, 21466, 21467, 21468, 21469, 21470, 21471, 21472, 21473, 21474, 21475, 21476, 21477, 21478, 21479, 21480, 21481, 21482, 21483, 21484, 21485, 21486, 21487, 21488, 21489, 21490, 21491, 21492, 21493, 21494, 21495, 21496, 21497, 21498, 21499, 21500, 21501, 21502, 21503, 21504, 21505, 21506, 21507, 21508, 21509, 21510, 21511, 21512, 21513, 21514, 21515, 21516, 21517, 21518, 21519, 21520, 21521, 21522, 21523, 21524, 21525, 21526, 21527, 21528, 21529, 21530, 21531, 21532, 21533, 21534, 21535, 21536, 21537, 21538, 21539, 21540, 21541, 21542, 21543, 21544, 21545, 21546, 21547, 21548, 21549, 21550, 21551, 21552, 21553, 21554, 21555, 21556, 21557, 21558, 21559, 21560, 21561, 21562, 21563, 21564, 21565, 21566, 21567, 21568, 21569, 21570, 21571, 21572, 21573, 21574, 21575, 21576, 21577, 21578, 21579, 21580, 21581, 21582, 21583, 21584, 21585, 21586, 21587, 21588, 21589, 21590, 21591, 21592, 21593, 21594, 21595, 21596, 21597, 21598, 21599, 21600, 21601, 21602, 21603, 21604, 21605, 21606, 21607, 21608, 21609, 21610, 21611, 21612, 21613, 21614, 21615, 21616, 21617, 21618, 21619, 21620, 21621, 21622, 21623, 21624, 21625, 21626, 21627, 21628, 21629, 21630, 21631, 21632, 21633, 21634, 21635, 21636, 21637, 21638, 21639, 21640, 21641, 21642, 21643, 21644, 21645, 21646, 21647, 21648, 21649, 21650, 21651, 21652, 21653, 21654, 21655, 21656, 21657, 21658, 21659, 21660, 21661, 21662, 21663, 21664, 21665, 21666, 21667, 21668, 21669, 21670, 21671, 21672, 21673, 21674, 21675, 21676, 21677, 21678, 21679, 21680, 21681, 21682, 21683, 21684, 21685, 21686, 21687, 21688, 21689, 21690, 21691, 21692, 21693, 21694, 21695, 21696, 21697, 21698, 21699, 21700, 21701, 21702, 21703, 21704, 21705, 21706, 21707, 21708, 21709, 21710, 21711, 21712, 21713, 21714, 21715, 21716, 21717, 21718, 21719, 21720, 21721, 21722, 21723, 21724, 21725, 21726, 21727, 21728, 21729, 21730, 21731, 21732, 21733, 21734, 21735, 21736, 21737, 21738, 21739, 21740, 21741, 21742, 21743, 21744, 21745, 21746, 21747, 21748, 21749, 21750, 21751, 21752, 21753, 21754, 21755, 21756, 21757, 21758, 21759, 21760, 21761, 21762, 21763, 21764, 21765, 21766, 21767, 21768, 21769, 21770, 21771, 21772, 21773, 21774, 21775, 21776, 21777, 21778, 21779, 21780, 21781, 21782, 21783, 21784, 21785, 21786, 21787, 21788, 21789, 21790, 21791, 21792, 21793, 21794, 21795, 21796, 21797, 21798, 21799, 21800, 21801, 21802, 21803, 21804, 21805, 21806, 21807, 21808, 21809, 21810, 21811, 21812, 21813, 21814, 21815, 21816, 21817, 21818, 21819, 21820, 21821, 21822, 21823, 21824, 21825, 21826, 21827, 21828, 21829, 21830, 21831, 21832, 21833, 21834, 21835, 21836, 21837, 21838, 21839, 21840, 21841, 21842, 21843, 21844, 21845, 21846, 21847, 21848, 21849, 21850, 21851, 21852, 21853, 21854, 21855, 21856, 21857, 21858, 21859, 21860, 21861, 21862, 21863, 21864, 21865, 21866, 21867, 21868, 21869, 21870, 21871, 21872, 21873, 21874, 21875, 21876, 21877, 21878, 21879, 21880, 21881, 21882, 21883, 21884, 21885, 21886, 21887, 21888, 21889, 21890, 21891, 21892, 21893, 21894, 21895, 21896, 21897, 21898, 21899, 21900, 21901, 21902, 21903, 21904, 21905, 21906, 21907, 21908, 21909, 21910, 21911, 21912, 21913, 21914, 21915, 21916, 21917, 21918, 21919, 21920, 21921, 21922, 21923, 21924, 21925, 21926, 21927, 21928, 21929, 21930, 21931, 21932, 21933, 21934, 21935, 21936, 21937, 21938, 21939, 21940, 21941, 21942, 21943, 21944, 21945, 21946, 21947, 21948, 21949, 21950, 21951, 21952, 21953, 21954, 21955, 21956, 21957, 21958, 21959, 21960, 21961, 21962, 21963, 21964, 21965, 21966, 21967, 21968, 21969, 21970, 21971, 21972, 21973, 21974, 21975, 21976, 21977, 21978, 21979, 21980, 21981, 21982, 21983, 21984, 21985, 21986, 21987, 21988, 21989, 21990, 21991, 21992, 21993, 21994, 21995, 21996, 21997, 21998, 21999, 22e3, 22001, 22002, 22003, 22004, 22005, 22006, 22007, 22008, 22009, 22010, 22011, 22012, 22013, 22014, 22015, 22016, 22017, 22018, 22019, 22020, 22021, 22022, 22023, 22024, 22025, 22026, 22027, 22028, 22029, 22030, 22031, 22032, 22033, 22034, 22035, 22036, 22037, 22038, 22039, 22040, 22041, 22042, 22043, 22044, 22045, 22046, 22047, 22048, 22049, 22050, 22051, 22052, 22053, 22054, 22055, 22056, 22057, 22058, 22059, 22060, 22061, 22062, 22063, 22064, 22065, 22066, 22067, 22068, 22069, 22070, 22071, 22072, 22073, 22074, 22075, 22076, 22077, 22078, 22079, 22080, 22081, 22082, 22083, 22084, 22085, 22086, 22087, 22088, 22089, 22090, 22091, 22092, 22093, 22094, 22095, 22096, 22097, 22098, 22099, 22100, 22101, 22102, 22103, 22104, 22105, 22106, 22107, 22108, 22109, 22110, 22111, 22112, 22113, 22114, 22115, 22116, 22117, 22118, 22119, 22120, 22121, 22122, 22123, 22124, 22125, 22126, 22127, 22128, 22129, 22130, 22131, 22132, 22133, 22134, 22135, 22136, 22137, 22138, 22139, 22140, 22141, 22142, 22143, 22144, 22145, 22146, 22147, 22148, 22149, 22150, 22151, 22152, 22153, 22154, 22155, 22156, 22157, 22158, 22159, 22160, 22161, 22162, 22163, 22164, 22165, 22166, 22167, 22168, 22169, 22170, 22171, 22172, 22173, 22174, 22175, 22176, 22177, 22178, 22179, 22180, 22181, 22182, 22183, 22184, 22185, 22186, 22187, 22188, 22189, 22190, 22191, 22192, 22193, 22194, 22195, 22196, 22197, 22198, 22199, 22200, 22201, 22202, 22203, 22204, 22205, 22206, 22207, 22208, 22209, 22210, 22211, 22212, 22213, 22214, 22215, 22216, 22217, 22218, 22219, 22220, 22221, 22222, 22223, 22224, 22225, 22226, 22227, 22228, 22229, 22230, 22231, 22232, 22233, 22234, 22235, 22236, 22237, 22238, 22239, 22240, 22241, 22242, 22243, 22244, 22245, 22246, 22247, 22248, 22249, 22250, 22251, 22252, 22253, 22254, 22255, 22256, 22257, 22258, 22259, 22260, 22261, 22262, 22263, 22264, 22265, 22266, 22267, 22268, 22269, 22270, 22271, 22272, 22273, 22274, 22275, 22276, 22277, 22278, 22279, 22280, 22281, 22282, 22283, 22284, 22285, 22286, 22287, 22288, 22289, 22290, 22291, 22292, 22293, 22294, 22295, 22296, 22297, 22298, 22299, 22300, 22301, 22302, 22303, 22304, 22305, 22306, 22307, 22308, 22309, 22310, 22311, 22312, 22313, 22314, 22315, 22316, 22317, 22318, 22319, 22320, 22321, 22322, 22323, 22324, 22325, 22326, 22327, 22328, 22329, 22330, 22331, 22332, 22333, 22334, 22335, 22336, 22337, 22338, 22339, 22340, 22341, 22342, 22343, 22344, 22345, 22346, 22347, 22348, 22349, 22350, 22351, 22352, 22353, 22354, 22355, 22356, 22357, 22358, 22359, 22360, 22361, 22362, 22363, 22364, 22365, 22366, 22367, 22368, 22369, 22370, 22371, 22372, 22373, 22374, 22375, 22376, 22377, 22378, 22379, 22380, 22381, 22382, 22383, 22384, 22385, 22386, 22387, 22388, 22389, 22390, 22391, 22392, 22393, 22394, 22395, 22396, 22397, 22398, 22399, 22400, 22401, 22402, 22403, 22404, 22405, 22406, 22407, 22408, 22409, 22410, 22411, 22412, 22413, 22414, 22415, 22416, 22417, 22418, 22419, 22420, 22421, 22422, 22423, 22424, 22425, 22426, 22427, 22428, 22429, 22430, 22431, 22432, 22433, 22434, 22435, 22436, 22437, 22438, 22439, 22440, 22441, 22442, 22443, 22444, 22445, 22446, 22447, 22448, 22449, 22450, 22451, 22452, 22453, 22454, 22455, 22456, 22457, 22458, 22459, 22460, 22461, 22462, 22463, 22464, 22465, 22466, 22467, 22468, 22469, 22470, 22471, 22472, 22473, 22474, 22475, 22476, 22477, 22478, 22479, 22480, 22481, 22482, 22483, 22484, 22485, 22486, 22487, 22488, 22489, 22490, 22491, 22492, 22493, 22494, 22495, 22496, 22497, 22498, 22499, 22500, 22501, 22502, 22503, 22504, 22505, 22506, 22507, 22508, 22509, 22510, 22511, 22512, 22513, 22514, 22515, 22516, 22517, 22518, 22519, 22520, 22521, 22522, 22523, 22524, 22525, 22526, 22527, 22528, 22529, 22530, 22531, 22532, 22533, 22534, 22535, 22536, 22537, 22538, 22539, 22540, 22541, 22542, 22543, 22544, 22545, 22546, 22547, 22548, 22549, 22550, 22551, 22552, 22553, 22554, 22555, 22556, 22557, 22558, 22559, 22560, 22561, 22562, 22563, 22564, 22565, 22566, 22567, 22568, 22569, 22570, 22571, 22572, 22573, 22574, 22575, 22576, 22577, 22578, 22579, 22580, 22581, 22582, 22583, 22584, 22585, 22586, 22587, 22588, 22589, 22590, 22591, 22592, 22593, 22594, 22595, 22596, 22597, 22598, 22599, 22600, 22601, 22602, 22603, 22604, 22605, 22606, 22607, 22608, 22609, 22610, 22611, 22612, 22613, 22614, 22615, 22616, 22617, 22618, 22619, 22620, 22621, 22622, 22623, 22624, 22625, 22626, 22627, 22628, 22629, 22630, 22631, 22632, 22633, 22634, 22635, 22636, 22637, 22638, 22639, 22640, 22641, 22642, 22643, 22644, 22645, 22646, 22647, 22648, 22649, 22650, 22651, 22652, 22653, 22654, 22655, 22656, 22657, 22658, 22659, 22660, 22661, 22662, 22663, 22664, 22665, 22666, 22667, 22668, 22669, 22670, 22671, 22672, 22673, 22674, 22675, 22676, 22677, 22678, 22679, 22680, 22681, 22682, 22683, 22684, 22685, 22686, 22687, 22688, 22689, 22690, 22691, 22692, 22693, 22694, 22695, 22696, 22697, 22698, 22699, 22700, 22701, 22702, 22703, 22704, 22705, 22706, 22707, 22708, 22709, 22710, 22711, 22712, 22713, 22714, 22715, 22716, 22717, 22718, 22719, 22720, 22721, 22722, 22723, 22724, 22725, 22726, 22727, 22728, 22729, 22730, 22731, 22732, 22733, 22734, 22735, 22736, 22737, 22738, 22739, 22740, 22741, 22742, 22743, 22744, 22745, 22746, 22747, 22748, 22749, 22750, 22751, 22752, 22753, 22754, 22755, 22756, 22757, 22758, 22759, 22760, 22761, 22762, 22763, 22764, 22765, 22766, 22767, 22768, 22769, 22770, 22771, 22772, 22773, 22774, 22775, 22776, 22777, 22778, 22779, 22780, 22781, 22782, 22783, 22784, 22785, 22786, 22787, 22788, 22789, 22790, 22791, 22792, 22793, 22794, 22795, 22796, 22797, 22798, 22799, 22800, 22801, 22802, 22803, 22804, 22805, 22806, 22807, 22808, 22809, 22810, 22811, 22812, 22813, 22814, 22815, 22816, 22817, 22818, 22819, 22820, 22821, 22822, 22823, 22824, 22825, 22826, 22827, 22828, 22829, 22830, 22831, 22832, 22833, 22834, 22835, 22836, 22837, 22838, 22839, 22840, 22841, 22842, 22843, 22844, 22845, 22846, 22847, 22848, 22849, 22850, 22851, 22852, 22853, 22854, 22855, 22856, 22857, 22858, 22859, 22860, 22861, 22862, 22863, 22864, 22865, 22866, 22867, 22868, 22869, 22870, 22871, 22872, 22873, 22874, 22875, 22876, 22877, 22878, 22879, 22880, 22881, 22882, 22883, 22884, 22885, 22886, 22887, 22888, 22889, 22890, 22891, 22892, 22893, 22894, 22895, 22896, 22897, 22898, 22899, 22900, 22901, 22902, 22903, 22904, 22905, 22906, 22907, 22908, 22909, 22910, 22911, 22912, 22913, 22914, 22915, 22916, 22917, 22918, 22919, 22920, 22921, 22922, 22923, 22924, 22925, 22926, 22927, 22928, 22929, 22930, 22931, 22932, 22933, 22934, 22935, 22936, 22937, 22938, 22939, 22940, 22941, 22942, 22943, 22944, 22945, 22946, 22947, 22948, 22949, 22950, 22951, 22952, 22953, 22954, 22955, 22956, 22957, 22958, 22959, 22960, 22961, 22962, 22963, 22964, 22965, 22966, 22967, 22968, 22969, 22970, 22971, 22972, 22973, 22974, 22975, 22976, 22977, 22978, 22979, 22980, 22981, 22982, 22983, 22984, 22985, 22986, 22987, 22988, 22989, 22990, 22991, 22992, 22993, 22994, 22995, 22996, 22997, 22998, 22999, 23e3, 23001, 23002, 23003, 23004, 23005, 23006, 23007, 23008, 23009, 23010, 23011, 23012, 23013, 23014, 23015, 23016, 23017, 23018, 23019, 23020, 23021, 23022, 23023, 23024, 23025, 23026, 23027, 23028, 23029, 23030, 23031, 23032, 23033, 23034, 23035, 23036, 23037, 23038, 23039, 23040, 23041, 23042, 23043, 23044, 23045, 23046, 23047, 23048, 23049, 23050, 23051, 23052, 23053, 23054, 23055, 23056, 23057, 23058, 23059, 23060, 23061, 23062, 23063, 23064, 23065, 23066, 23067, 23068, 23069, 23070, 23071, 23072, 23073, 23074, 23075, 23076, 23077, 23078, 23079, 23080, 23081, 23082, 23083, 23084, 23085, 23086, 23087, 23088, 23089, 23090, 23091, 23092, 23093, 23094, 23095, 23096, 23097, 23098, 23099, 23100, 23101, 23102, 23103, 23104, 23105, 23106, 23107, 23108, 23109, 23110, 23111, 23112, 23113, 23114, 23115, 23116, 23117, 23118, 23119, 23120, 23121, 23122, 23123, 23124, 23125, 23126, 23127, 23128, 23129, 23130, 23131, 23132, 23133, 23134, 23135, 23136, 23137, 23138, 23139, 23140, 23141, 23142, 23143, 23144, 23145, 23146, 23147, 23148, 23149, 23150, 23151, 23152, 23153, 23154, 23155, 23156, 23157, 23158, 23159, 23160, 23161, 23162, 23163, 23164, 23165, 23166, 23167, 23168, 23169, 23170, 23171, 23172, 23173, 23174, 23175, 23176, 23177, 23178, 23179, 23180, 23181, 23182, 23183, 23184, 23185, 23186, 23187, 23188, 23189, 23190, 23191, 23192, 23193, 23194, 23195, 23196, 23197, 23198, 23199, 23200, 23201, 23202, 23203, 23204, 23205, 23206, 23207, 23208, 23209, 23210, 23211, 23212, 23213, 23214, 23215, 23216, 23217, 23218, 23219, 23220, 23221, 23222, 23223, 23224, 23225, 23226, 23227, 23228, 23229, 23230, 23231, 23232, 23233, 23234, 23235, 23236, 23237, 23238, 23239, 23240, 23241, 23242, 23243, 23244, 23245, 23246, 23247, 23248, 23249, 23250, 23251, 23252, 23253, 23254, 23255, 23256, 23257, 23258, 23259, 23260, 23261, 23262, 23263, 23264, 23265, 23266, 23267, 23268, 23269, 23270, 23271, 23272, 23273, 23274, 23275, 23276, 23277, 23278, 23279, 23280, 23281, 23282, 23283, 23284, 23285, 23286, 23287, 23288, 23289, 23290, 23291, 23292, 23293, 23294, 23295, 23296, 23297, 23298, 23299, 23300, 23301, 23302, 23303, 23304, 23305, 23306, 23307, 23308, 23309, 23310, 23311, 23312, 23313, 23314, 23315, 23316, 23317, 23318, 23319, 23320, 23321, 23322, 23323, 23324, 23325, 23326, 23327, 23328, 23329, 23330, 23331, 23332, 23333, 23334, 23335, 23336, 23337, 23338, 23339, 23340, 23341, 23342, 23343, 23344, 23345, 23346, 23347, 23348, 23349, 23350, 23351, 23352, 23353, 23354, 23355, 23356, 23357, 23358, 23359, 23360, 23361, 23362, 23363, 23364, 23365, 23366, 23367, 23368, 23369, 23370, 23371, 23372, 23373, 23374, 23375, 23376, 23377, 23378, 23379, 23380, 23381, 23382, 23383, 23384, 23385, 23386, 23387, 23388, 23389, 23390, 23391, 23392, 23393, 23394, 23395, 23396, 23397, 23398, 23399, 23400, 23401, 23402, 23403, 23404, 23405, 23406, 23407, 23408, 23409, 23410, 23411, 23412, 23413, 23414, 23415, 23416, 23417, 23418, 23419, 23420, 23421, 23422, 23423, 23424, 23425, 23426, 23427, 23428, 23429, 23430, 23431, 23432, 23433, 23434, 23435, 23436, 23437, 23438, 23439, 23440, 23441, 23442, 23443, 23444, 23445, 23446, 23447, 23448, 23449, 23450, 23451, 23452, 23453, 23454, 23455, 23456, 23457, 23458, 23459, 23460, 23461, 23462, 23463, 23464, 23465, 23466, 23467, 23468, 23469, 23470, 23471, 23472, 23473, 23474, 23475, 23476, 23477, 23478, 23479, 23480, 23481, 23482, 23483, 23484, 23485, 23486, 23487, 23488, 23489, 23490, 23491, 23492, 23493, 23494, 23495, 23496, 23497, 23498, 23499, 23500, 23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509, 23510, 23511, 23512, 23513, 23514, 23515, 23516, 23517, 23518, 23519, 23520, 23521, 23522, 23523, 23524, 23525, 23526, 23527, 23528, 23529, 23530, 23531, 23532, 23533, 23534, 23535, 23536, 23537, 23538, 23539, 23540, 23541, 23542, 23543, 23544, 23545, 23546, 23547, 23548, 23549, 23550, 23551, 23552, 23553, 23554, 23555, 23556, 23557, 23558, 23559, 23560, 23561, 23562, 23563, 23564, 23565, 23566, 23567, 23568, 23569, 23570, 23571, 23572, 23573, 23574, 23575, 23576, 23577, 23578, 23579, 23580, 23581, 23582, 23583, 23584, 23585, 23586, 23587, 23588, 23589, 23590, 23591, 23592, 23593, 23594, 23595, 23596, 23597, 23598, 23599, 23600, 23601, 23602, 23603, 23604, 23605, 23606, 23607, 23608, 23609, 23610, 23611, 23612, 23613, 23614, 23615, 23616, 23617, 23618, 23619, 23620, 23621, 23622, 23623, 23624, 23625, 23626, 23627, 23628, 23629, 23630, 23631, 23632, 23633, 23634, 23635, 23636, 23637, 23638, 23639, 23640, 23641, 23642, 23643, 23644, 23645, 23646, 23647, 23648, 23649, 23650, 23651, 23652, 23653, 23654, 23655, 23656, 23657, 23658, 23659, 23660, 23661, 23662, 23663, 23664, 23665, 23666, 23667, 23668, 23669, 23670, 23671, 23672, 23673, 23674, 23675, 23676, 23677, 23678, 23679, 23680, 23681, 23682, 23683, 23684, 23685, 23686, 23687, 23688, 23689, 23690, 23691, 23692, 23693, 23694, 23695, 23696, 23697, 23698, 23699, 23700, 23701, 23702, 23703, 23704, 23705, 23706, 23707, 23708, 23709, 23710, 23711, 23712, 23713, 23714, 23715, 23716, 23717, 23718, 23719, 23720, 23721, 23722, 23723, 23724, 23725, 23726, 23727, 23728, 23729, 23730, 23731, 23732, 23733, 23734, 23735, 23736, 23737, 23738, 23739, 23740, 23741, 23742, 23743, 23744, 23745, 23746, 23747, 23748, 23749, 23750, 23751, 23752, 23753, 23754, 23755, 23756, 23757, 23758, 23759, 23760, 23761, 23762, 23763, 23764, 23765, 23766, 23767, 23768, 23769, 23770, 23771, 23772, 23773, 23774, 23775, 23776, 23777, 23778, 23779, 23780, 23781, 23782, 23783, 23784, 23785, 23786, 23787, 23788, 23789, 23790, 23791, 23792, 23793, 23794, 23795, 23796, 23797, 23798, 23799, 23800, 23801, 23802, 23803, 23804, 23805, 23806, 23807, 23808, 23809, 23810, 23811, 23812, 23813, 23814, 23815, 23816, 23817, 23818, 23819, 23820, 23821, 23822, 23823, 23824, 23825, 23826, 23827, 23828, 23829, 23830, 23831, 23832, 23833, 23834, 23835, 23836, 23837, 23838, 23839, 23840, 23841, 23842, 23843, 23844, 23845, 23846, 23847, 23848, 23849, 23850, 23851, 23852, 23853, 23854, 23855, 23856, 23857, 23858, 23859, 23860, 23861, 23862, 23863, 23864, 23865, 23866, 23867, 23868, 23869, 23870, 23871, 23872, 23873, 23874, 23875, 23876, 23877, 23878, 23879, 23880, 23881, 23882, 23883, 23884, 23885, 23886, 23887, 23888, 23889, 23890, 23891, 23892, 23893, 23894, 23895, 23896, 23897, 23898, 23899, 23900, 23901, 23902, 23903, 23904, 23905, 23906, 23907, 23908, 23909, 23910, 23911, 23912, 23913, 23914, 23915, 23916, 23917, 23918, 23919, 23920, 23921, 23922, 23923, 23924, 23925, 23926, 23927, 23928, 23929, 23930, 23931, 23932, 23933, 23934, 23935, 23936, 23937, 23938, 23939, 23940, 23941, 23942, 23943, 23944, 23945, 23946, 23947, 23948, 23949, 23950, 23951, 23952, 23953, 23954, 23955, 23956, 23957, 23958, 23959, 23960, 23961, 23962, 23963, 23964, 23965, 23966, 23967, 23968, 23969, 23970, 23971, 23972, 23973, 23974, 23975, 23976, 23977, 23978, 23979, 23980, 23981, 23982, 23983, 23984, 23985, 23986, 23987, 23988, 23989, 23990, 23991, 23992, 23993, 23994, 23995, 23996, 23997, 23998, 23999, 24e3, 24001, 24002, 24003, 24004, 24005, 24006, 24007, 24008, 24009, 24010, 24011, 24012, 24013, 24014, 24015, 24016, 24017, 24018, 24019, 24020, 24021, 24022, 24023, 24024, 24025, 24026, 24027, 24028, 24029, 24030, 24031, 24032, 24033, 24034, 24035, 24036, 24037, 24038, 24039, 24040, 24041, 24042, 24043, 24044, 24045, 24046, 24047, 24048, 24049, 24050, 24051, 24052, 24053, 24054, 24055, 24056, 24057, 24058, 24059, 24060, 24061, 24062, 24063, 24064, 24065, 24066, 24067, 24068, 24069, 24070, 24071, 24072, 24073, 24074, 24075, 24076, 24077, 24078, 24079, 24080, 24081, 24082, 24083, 24084, 24085, 24086, 24087, 24088, 24089, 24090, 24091, 24092, 24093, 24094, 24095, 24096, 24097, 24098, 24099, 24100, 24101, 24102, 24103, 24104, 24105, 24106, 24107, 24108, 24109, 24110, 24111, 24112, 24113, 24114, 24115, 24116, 24117, 24118, 24119, 24120, 24121, 24122, 24123, 24124, 24125, 24126, 24127, 24128, 24129, 24130, 24131, 24132, 24133, 24134, 24135, 24136, 24137, 24138, 24139, 24140, 24141, 24142, 24143, 24144, 24145, 24146, 24147, 24148, 24149, 24150, 24151, 24152, 24153, 24154, 24155, 24156, 24157, 24158, 24159, 24160, 24161, 24162, 24163, 24164, 24165, 24166, 24167, 24168, 24169, 24170, 24171, 24172, 24173, 24174, 24175, 24176, 24177, 24178, 24179, 24180, 24181, 24182, 24183, 24184, 24185, 24186, 24187, 24188, 24189, 24190, 24191, 24192, 24193, 24194, 24195, 24196, 24197, 24198, 24199, 24200, 24201, 24202, 24203, 24204, 24205, 24206, 24207, 24208, 24209, 24210, 24211, 24212, 24213, 24214, 24215, 24216, 24217, 24218, 24219, 24220, 24221, 24222, 24223, 24224, 24225, 24226, 24227, 24228, 24229, 24230, 24231, 24232, 24233, 24234, 24235, 24236, 24237, 24238, 24239, 24240, 24241, 24242, 24243, 24244, 24245, 24246, 24247, 24248, 24249, 24250, 24251, 24252, 24253, 24254, 24255, 24256, 24257, 24258, 24259, 24260, 24261, 24262, 24263, 24264, 24265, 24266, 24267, 24268, 24269, 24270, 24271, 24272, 24273, 24274, 24275, 24276, 24277, 24278, 24279, 24280, 24281, 24282, 24283, 24284, 24285, 24286, 24287, 24288, 24289, 24290, 24291, 24292, 24293, 24294, 24295, 24296, 24297, 24298, 24299, 24300, 24301, 24302, 24303, 24304, 24305, 24306, 24307, 24308, 24309, 24310, 24311, 24312, 24313, 24314, 24315, 24316, 24317, 24318, 24319, 24320, 24321, 24322, 24323, 24324, 24325, 24326, 24327, 24328, 24329, 24330, 24331, 24332, 24333, 24334, 24335, 24336, 24337, 24338, 24339, 24340, 24341, 24342, 24343, 24344, 24345, 24346, 24347, 24348, 24349, 24350, 24351, 24352, 24353, 24354, 24355, 24356, 24357, 24358, 24359, 24360, 24361, 24362, 24363, 24364, 24365, 24366, 24367, 24368, 24369, 24370, 24371, 24372, 24373, 24374, 24375, 24376, 24377, 24378, 24379, 24380, 24381, 24382, 24383, 24384, 24385, 24386, 24387, 24388, 24389, 24390, 24391, 24392, 24393, 24394, 24395, 24396, 24397, 24398, 24399, 24400, 24401, 24402, 24403, 24404, 24405, 24406, 24407, 24408, 24409, 24410, 24411, 24412, 24413, 24414, 24415, 24416, 24417, 24418, 24419, 24420, 24421, 24422, 24423, 24424, 24425, 24426, 24427, 24428, 24429, 24430, 24431, 24432, 24433, 24434, 24435, 24436, 24437, 24438, 24439, 24440, 24441, 24442, 24443, 24444, 24445, 24446, 24447, 24448, 24449, 24450, 24451, 24452, 24453, 24454, 24455, 24456, 24457, 24458, 24459, 24460, 24461, 24462, 24463, 24464, 24465, 24466, 24467, 24468, 24469, 24470, 24471, 24472, 24473, 24474, 24475, 24476, 24477, 24478, 24479, 24480, 24481, 24482, 24483, 24484, 24485, 24486, 24487, 24488, 24489, 24490, 24491, 24492, 24493, 24494, 24495, 24496, 24497, 24498, 24499, 24500, 24501, 24502, 24503, 24504, 24505, 24506, 24507, 24508, 24509, 24510, 24511, 24512, 24513, 24514, 24515, 24516, 24517, 24518, 24519, 24520, 24521, 24522, 24523, 24524, 24525, 24526, 24527, 24528, 24529, 24530, 24531, 24532, 24533, 24534, 24535, 24536, 24537, 24538, 24539, 24540, 24541, 24542, 24543, 24544, 24545, 24546, 24547, 24548, 24549, 24550, 24551, 24552, 24553, 24554, 24555, 24556, 24557, 24558, 24559, 24560, 24561, 24562, 24563, 24564, 24565, 24566, 24567, 24568, 24569, 24570, 24571, 24572, 24573, 24574, 24575, 24576, 24577, 24578, 24579, 24580, 24581, 24582, 24583, 24584, 24585, 24586, 24587, 24588, 24589, 24590, 24591, 24592, 24593, 24594, 24595, 24596, 24597, 24598, 24599, 24600, 24601, 24602, 24603, 24604, 24605, 24606, 24607, 24608, 24609, 24610, 24611, 24612, 24613, 24614, 24615, 24616, 24617, 24618, 24619, 24620, 24621, 24622, 24623, 24624, 24625, 24626, 24627, 24628, 24629, 24630, 24631, 24632, 24633, 24634, 24635, 24636, 24637, 24638, 24639, 24640, 24641, 24642, 24643, 24644, 24645, 24646, 24647, 24648, 24649, 24650, 24651, 24652, 24653, 24654, 24655, 24656, 24657, 24658, 24659, 24660, 24661, 24662, 24663, 24664, 24665, 24666, 24667, 24668, 24669, 24670, 24671, 24672, 24673, 24674, 24675, 24676, 24677, 24678, 24679, 24680, 24681, 24682, 24683, 24684, 24685, 24686, 24687, 24688, 24689, 24690, 24691, 24692, 24693, 24694, 24695, 24696, 24697, 24698, 24699, 24700, 24701, 24702, 24703, 24704, 24705, 24706, 24707, 24708, 24709, 24710, 24711, 24712, 24713, 24714, 24715, 24716, 24717, 24718, 24719, 24720, 24721, 24722, 24723, 24724, 24725, 24726, 24727, 24728, 24729, 24730, 24731, 24732, 24733, 24734, 24735, 24736, 24737, 24738, 24739, 24740, 24741, 24742, 24743, 24744, 24745, 24746, 24747, 24748, 24749, 24750, 24751, 24752, 24753, 24754, 24755, 24756, 24757, 24758, 24759, 24760, 24761, 24762, 24763, 24764, 24765, 24766, 24767, 24768, 24769, 24770, 24771, 24772, 24773, 24774, 24775, 24776, 24777, 24778, 24779, 24780, 24781, 24782, 24783, 24784, 24785, 24786, 24787, 24788, 24789, 24790, 24791, 24792, 24793, 24794, 24795, 24796, 24797, 24798, 24799, 24800, 24801, 24802, 24803, 24804, 24805, 24806, 24807, 24808, 24809, 24810, 24811, 24812, 24813, 24814, 24815, 24816, 24817, 24818, 24819, 24820, 24821, 24822, 24823, 24824, 24825, 24826, 24827, 24828, 24829, 24830, 24831, 24832, 24833, 24834, 24835, 24836, 24837, 24838, 24839, 24840, 24841, 24842, 24843, 24844, 24845, 24846, 24847, 24848, 24849, 24850, 24851, 24852, 24853, 24854, 24855, 24856, 24857, 24858, 24859, 24860, 24861, 24862, 24863, 24864, 24865, 24866, 24867, 24868, 24869, 24870, 24871, 24872, 24873, 24874, 24875, 24876, 24877, 24878, 24879, 24880, 24881, 24882, 24883, 24884, 24885, 24886, 24887, 24888, 24889, 24890, 24891, 24892, 24893, 24894, 24895, 24896, 24897, 24898, 24899, 24900, 24901, 24902, 24903, 24904, 24905, 24906, 24907, 24908, 24909, 24910, 24911, 24912, 24913, 24914, 24915, 24916, 24917, 24918, 24919, 24920, 24921, 24922, 24923, 24924, 24925, 24926, 24927, 24928, 24929, 24930, 24931, 24932, 24933, 24934, 24935, 24936, 24937, 24938, 24939, 24940, 24941, 24942, 24943, 24944, 24945, 24946, 24947, 24948, 24949, 24950, 24951, 24952, 24953, 24954, 24955, 24956, 24957, 24958, 24959, 24960, 24961, 24962, 24963, 24964, 24965, 24966, 24967, 24968, 24969, 24970, 24971, 24972, 24973, 24974, 24975, 24976, 24977, 24978, 24979, 24980, 24981, 24982, 24983, 24984, 24985, 24986, 24987, 24988, 24989, 24990, 24991, 24992, 24993, 24994, 24995, 24996, 24997, 24998, 24999, 25e3, 25001, 25002, 25003, 25004, 25005, 25006, 25007, 25008, 25009, 25010, 25011, 25012, 25013, 25014, 25015, 25016, 25017, 25018, 25019, 25020, 25021, 25022, 25023, 25024, 25025, 25026, 25027, 25028, 25029, 25030, 25031, 25032, 25033, 25034, 25035, 25036, 25037, 25038, 25039, 25040, 25041, 25042, 25043, 25044, 25045, 25046, 25047, 25048, 25049, 25050, 25051, 25052, 25053, 25054, 25055, 25056, 25057, 25058, 25059, 25060, 25061, 25062, 25063, 25064, 25065, 25066, 25067, 25068, 25069, 25070, 25071, 25072, 25073, 25074, 25075, 25076, 25077, 25078, 25079, 25080, 25081, 25082, 25083, 25084, 25085, 25086, 25087, 25088, 25089, 25090, 25091, 25092, 25093, 25094, 25095, 25096, 25097, 25098, 25099, 25100, 25101, 25102, 25103, 25104, 25105, 25106, 25107, 25108, 25109, 25110, 25111, 25112, 25113, 25114, 25115, 25116, 25117, 25118, 25119, 25120, 25121, 25122, 25123, 25124, 25125, 25126, 25127, 25128, 25129, 25130, 25131, 25132, 25133, 25134, 25135, 25136, 25137, 25138, 25139, 25140, 25141, 25142, 25143, 25144, 25145, 25146, 25147, 25148, 25149, 25150, 25151, 25152, 25153, 25154, 25155, 25156, 25157, 25158, 25159, 25160, 25161, 25162, 25163, 25164, 25165, 25166, 25167, 25168, 25169, 25170, 25171, 25172, 25173, 25174, 25175, 25176, 25177, 25178, 25179, 25180, 25181, 25182, 25183, 25184, 25185, 25186, 25187, 25188, 25189, 25190, 25191, 25192, 25193, 25194, 25195, 25196, 25197, 25198, 25199, 25200, 25201, 25202, 25203, 25204, 25205, 25206, 25207, 25208, 25209, 25210, 25211, 25212, 25213, 25214, 25215, 25216, 25217, 25218, 25219, 25220, 25221, 25222, 25223, 25224, 25225, 25226, 25227, 25228, 25229, 25230, 25231, 25232, 25233, 25234, 25235, 25236, 25237, 25238, 25239, 25240, 25241, 25242, 25243, 25244, 25245, 25246, 25247, 25248, 25249, 25250, 25251, 25252, 25253, 25254, 25255, 25256, 25257, 25258, 25259, 25260, 25261, 25262, 25263, 25264, 25265, 25266, 25267, 25268, 25269, 25270, 25271, 25272, 25273, 25274, 25275, 25276, 25277, 25278, 25279, 25280, 25281, 25282, 25283, 25284, 25285, 25286, 25287, 25288, 25289, 25290, 25291, 25292, 25293, 25294, 25295, 25296, 25297, 25298, 25299, 25300, 25301, 25302, 25303, 25304, 25305, 25306, 25307, 25308, 25309, 25310, 25311, 25312, 25313, 25314, 25315, 25316, 25317, 25318, 25319, 25320, 25321, 25322, 25323, 25324, 25325, 25326, 25327, 25328, 25329, 25330, 25331, 25332, 25333, 25334, 25335, 25336, 25337, 25338, 25339, 25340, 25341, 25342, 25343, 25344, 25345, 25346, 25347, 25348, 25349, 25350, 25351, 25352, 25353, 25354, 25355, 25356, 25357, 25358, 25359, 25360, 25361, 25362, 25363, 25364, 25365, 25366, 25367, 25368, 25369, 25370, 25371, 25372, 25373, 25374, 25375, 25376, 25377, 25378, 25379, 25380, 25381, 25382, 25383, 25384, 25385, 25386, 25387, 25388, 25389, 25390, 25391, 25392, 25393, 25394, 25395, 25396, 25397, 25398, 25399, 25400, 25401, 25402, 25403, 25404, 25405, 25406, 25407, 25408, 25409, 25410, 25411, 25412, 25413, 25414, 25415, 25416, 25417, 25418, 25419, 25420, 25421, 25422, 25423, 25424, 25425, 25426, 25427, 25428, 25429, 25430, 25431, 25432, 25433, 25434, 25435, 25436, 25437, 25438, 25439, 25440, 25441, 25442, 25443, 25444, 25445, 25446, 25447, 25448, 25449, 25450, 25451, 25452, 25453, 25454, 25455, 25456, 25457, 25458, 25459, 25460, 25461, 25462, 25463, 25464, 25465, 25466, 25467, 25468, 25469, 25470, 25471, 25472, 25473, 25474, 25475, 25476, 25477, 25478, 25479, 25480, 25481, 25482, 25483, 25484, 25485, 25486, 25487, 25488, 25489, 25490, 25491, 25492, 25493, 25494, 25495, 25496, 25497, 25498, 25499, 25500, 25501, 25502, 25503, 25504, 25505, 25506, 25507, 25508, 25509, 25510, 25511, 25512, 25513, 25514, 25515, 25516, 25517, 25518, 25519, 25520, 25521, 25522, 25523, 25524, 25525, 25526, 25527, 25528, 25529, 25530, 25531, 25532, 25533, 25534, 25535, 25536, 25537, 25538, 25539, 25540, 25541, 25542, 25543, 25544, 25545, 25546, 25547, 25548, 25549, 25550, 25551, 25552, 25553, 25554, 25555, 25556, 25557, 25558, 25559, 25560, 25561, 25562, 25563, 25564, 25565, 25566, 25567, 25568, 25569, 25570, 25571, 25572, 25573, 25574, 25575, 25576, 25577, 25578, 25579, 25580, 25581, 25582, 25583, 25584, 25585, 25586, 25587, 25588, 25589, 25590, 25591, 25592, 25593, 25594, 25595, 25596, 25597, 25598, 25599, 25600, 25601, 25602, 25603, 25604, 25605, 25606, 25607, 25608, 25609, 25610, 25611, 25612, 25613, 25614, 25615, 25616, 25617, 25618, 25619, 25620, 25621, 25622, 25623, 25624, 25625, 25626, 25627, 25628, 25629, 25630, 25631, 25632, 25633, 25634, 25635, 25636, 25637, 25638, 25639, 25640, 25641, 25642, 25643, 25644, 25645, 25646, 25647, 25648, 25649, 25650, 25651, 25652, 25653, 25654, 25655, 25656, 25657, 25658, 25659, 25660, 25661, 25662, 25663, 25664, 25665, 25666, 25667, 25668, 25669, 25670, 25671, 25672, 25673, 25674, 25675, 25676, 25677, 25678, 25679, 25680, 25681, 25682, 25683, 25684, 25685, 25686, 25687, 25688, 25689, 25690, 25691, 25692, 25693, 25694, 25695, 25696, 25697, 25698, 25699, 25700, 25701, 25702, 25703, 25704, 25705, 25706, 25707, 25708, 25709, 25710, 25711, 25712, 25713, 25714, 25715, 25716, 25717, 25718, 25719, 25720, 25721, 25722, 25723, 25724, 25725, 25726, 25727, 25728, 25729, 25730, 25731, 25732, 25733, 25734, 25735, 25736, 25737, 25738, 25739, 25740, 25741, 25742, 25743, 25744, 25745, 25746, 25747, 25748, 25749, 25750, 25751, 25752, 25753, 25754, 25755, 25756, 25757, 25758, 25759, 25760, 25761, 25762, 25763, 25764, 25765, 25766, 25767, 25768, 25769, 25770, 25771, 25772, 25773, 25774, 25775, 25776, 25777, 25778, 25779, 25780, 25781, 25782, 25783, 25784, 25785, 25786, 25787, 25788, 25789, 25790, 25791, 25792, 25793, 25794, 25795, 25796, 25797, 25798, 25799, 25800, 25801, 25802, 25803, 25804, 25805, 25806, 25807, 25808, 25809, 25810, 25811, 25812, 25813, 25814, 25815, 25816, 25817, 25818, 25819, 25820, 25821, 25822, 25823, 25824, 25825, 25826, 25827, 25828, 25829, 25830, 25831, 25832, 25833, 25834, 25835, 25836, 25837, 25838, 25839, 25840, 25841, 25842, 25843, 25844, 25845, 25846, 25847, 25848, 25849, 25850, 25851, 25852, 25853, 25854, 25855, 25856, 25857, 25858, 25859, 25860, 25861, 25862, 25863, 25864, 25865, 25866, 25867, 25868, 25869, 25870, 25871, 25872, 25873, 25874, 25875, 25876, 25877, 25878, 25879, 25880, 25881, 25882, 25883, 25884, 25885, 25886, 25887, 25888, 25889, 25890, 25891, 25892, 25893, 25894, 25895, 25896, 25897, 25898, 25899, 25900, 25901, 25902, 25903, 25904, 25905, 25906, 25907, 25908, 25909, 25910, 25911, 25912, 25913, 25914, 25915, 25916, 25917, 25918, 25919, 25920, 25921, 25922, 25923, 25924, 25925, 25926, 25927, 25928, 25929, 25930, 25931, 25932, 25933, 25934, 25935, 25936, 25937, 25938, 25939, 25940, 25941, 25942, 25943, 25944, 25945, 25946, 25947, 25948, 25949, 25950, 25951, 25952, 25953, 25954, 25955, 25956, 25957, 25958, 25959, 25960, 25961, 25962, 25963, 25964, 25965, 25966, 25967, 25968, 25969, 25970, 25971, 25972, 25973, 25974, 25975, 25976, 25977, 25978, 25979, 25980, 25981, 25982, 25983, 25984, 25985, 25986, 25987, 25988, 25989, 25990, 25991, 25992, 25993, 25994, 25995, 25996, 25997, 25998, 25999, 26e3, 26001, 26002, 26003, 26004, 26005, 26006, 26007, 26008, 26009, 26010, 26011, 26012, 26013, 26014, 26015, 26016, 26017, 26018, 26019, 26020, 26021, 26022, 26023, 26024, 26025, 26026, 26027, 26028, 26029, 26030, 26031, 26032, 26033, 26034, 26035, 26036, 26037, 26038, 26039, 26040, 26041, 26042, 26043, 26044, 26045, 26046, 26047, 26048, 26049, 26050, 26051, 26052, 26053, 26054, 26055, 26056, 26057, 26058, 26059, 26060, 26061, 26062, 26063, 26064, 26065, 26066, 26067, 26068, 26069, 26070, 26071, 26072, 26073, 26074, 26075, 26076, 26077, 26078, 26079, 26080, 26081, 26082, 26083, 26084, 26085, 26086, 26087, 26088, 26089, 26090, 26091, 26092, 26093, 26094, 26095, 26096, 26097, 26098, 26099, 26100, 26101, 26102, 26103, 26104, 26105, 26106, 26107, 26108, 26109, 26110, 26111, 26112, 26113, 26114, 26115, 26116, 26117, 26118, 26119, 26120, 26121, 26122, 26123, 26124, 26125, 26126, 26127, 26128, 26129, 26130, 26131, 26132, 26133, 26134, 26135, 26136, 26137, 26138, 26139, 26140, 26141, 26142, 26143, 26144, 26145, 26146, 26147, 26148, 26149, 26150, 26151, 26152, 26153, 26154, 26155, 26156, 26157, 26158, 26159, 26160, 26161, 26162, 26163, 26164, 26165, 26166, 26167, 26168, 26169, 26170, 26171, 26172, 26173, 26174, 26175, 26176, 26177, 26178, 26179, 26180, 26181, 26182, 26183, 26184, 26185, 26186, 26187, 26188, 26189, 26190, 26191, 26192, 26193, 26194, 26195, 26196, 26197, 26198, 26199, 26200, 26201, 26202, 26203, 26204, 26205, 26206, 26207, 26208, 26209, 26210, 26211, 26212, 26213, 26214, 26215, 26216, 26217, 26218, 26219, 26220, 26221, 26222, 26223, 26224, 26225, 26226, 26227, 26228, 26229, 26230, 26231, 26232, 26233, 26234, 26235, 26236, 26237, 26238, 26239, 26240, 26241, 26242, 26243, 26244, 26245, 26246, 26247, 26248, 26249, 26250, 26251, 26252, 26253, 26254, 26255, 26256, 26257, 26258, 26259, 26260, 26261, 26262, 26263, 26264, 26265, 26266, 26267, 26268, 26269, 26270, 26271, 26272, 26273, 26274, 26275, 26276, 26277, 26278, 26279, 26280, 26281, 26282, 26283, 26284, 26285, 26286, 26287, 26288, 26289, 26290, 26291, 26292, 26293, 26294, 26295, 26296, 26297, 26298, 26299, 26300, 26301, 26302, 26303, 26304, 26305, 26306, 26307, 26308, 26309, 26310, 26311, 26312, 26313, 26314, 26315, 26316, 26317, 26318, 26319, 26320, 26321, 26322, 26323, 26324, 26325, 26326, 26327, 26328, 26329, 26330, 26331, 26332, 26333, 26334, 26335, 26336, 26337, 26338, 26339, 26340, 26341, 26342, 26343, 26344, 26345, 26346, 26347, 26348, 26349, 26350, 26351, 26352, 26353, 26354, 26355, 26356, 26357, 26358, 26359, 26360, 26361, 26362, 26363, 26364, 26365, 26366, 26367, 26368, 26369, 26370, 26371, 26372, 26373, 26374, 26375, 26376, 26377, 26378, 26379, 26380, 26381, 26382, 26383, 26384, 26385, 26386, 26387, 26388, 26389, 26390, 26391, 26392, 26393, 26394, 26395, 26396, 26397, 26398, 26399, 26400, 26401, 26402, 26403, 26404, 26405, 26406, 26407, 26408, 26409, 26410, 26411, 26412, 26413, 26414, 26415, 26416, 26417, 26418, 26419, 26420, 26421, 26422, 26423, 26424, 26425, 26426, 26427, 26428, 26429, 26430, 26431, 26432, 26433, 26434, 26435, 26436, 26437, 26438, 26439, 26440, 26441, 26442, 26443, 26444, 26445, 26446, 26447, 26448, 26449, 26450, 26451, 26452, 26453, 26454, 26455, 26456, 26457, 26458, 26459, 26460, 26461, 26462, 26463, 26464, 26465, 26466, 26467, 26468, 26469, 26470, 26471, 26472, 26473, 26474, 26475, 26476, 26477, 26478, 26479, 26480, 26481, 26482, 26483, 26484, 26485, 26486, 26487, 26488, 26489, 26490, 26491, 26492, 26493, 26494, 26495, 26496, 26497, 26498, 26499, 26500, 26501, 26502, 26503, 26504, 26505, 26506, 26507, 26508, 26509, 26510, 26511, 26512, 26513, 26514, 26515, 26516, 26517, 26518, 26519, 26520, 26521, 26522, 26523, 26524, 26525, 26526, 26527, 26528, 26529, 26530, 26531, 26532, 26533, 26534, 26535, 26536, 26537, 26538, 26539, 26540, 26541, 26542, 26543, 26544, 26545, 26546, 26547, 26548, 26549, 26550, 26551, 26552, 26553, 26554, 26555, 26556, 26557, 26558, 26559, 26560, 26561, 26562, 26563, 26564, 26565, 26566, 26567, 26568, 26569, 26570, 26571, 26572, 26573, 26574, 26575, 26576, 26577, 26578, 26579, 26580, 26581, 26582, 26583, 26584, 26585, 26586, 26587, 26588, 26589, 26590, 26591, 26592, 26593, 26594, 26595, 26596, 26597, 26598, 26599, 26600, 26601, 26602, 26603, 26604, 26605, 26606, 26607, 26608, 26609, 26610, 26611, 26612, 26613, 26614, 26615, 26616, 26617, 26618, 26619, 26620, 26621, 26622, 26623, 26624, 26625, 26626, 26627, 26628, 26629, 26630, 26631, 26632, 26633, 26634, 26635, 26636, 26637, 26638, 26639, 26640, 26641, 26642, 26643, 26644, 26645, 26646, 26647, 26648, 26649, 26650, 26651, 26652, 26653, 26654, 26655, 26656, 26657, 26658, 26659, 26660, 26661, 26662, 26663, 26664, 26665, 26666, 26667, 26668, 26669, 26670, 26671, 26672, 26673, 26674, 26675, 26676, 26677, 26678, 26679, 26680, 26681, 26682, 26683, 26684, 26685, 26686, 26687, 26688, 26689, 26690, 26691, 26692, 26693, 26694, 26695, 26696, 26697, 26698, 26699, 26700, 26701, 26702, 26703, 26704, 26705, 26706, 26707, 26708, 26709, 26710, 26711, 26712, 26713, 26714, 26715, 26716, 26717, 26718, 26719, 26720, 26721, 26722, 26723, 26724, 26725, 26726, 26727, 26728, 26729, 26730, 26731, 26732, 26733, 26734, 26735, 26736, 26737, 26738, 26739, 26740, 26741, 26742, 26743, 26744, 26745, 26746, 26747, 26748, 26749, 26750, 26751, 26752, 26753, 26754, 26755, 26756, 26757, 26758, 26759, 26760, 26761, 26762, 26763, 26764, 26765, 26766, 26767, 26768, 26769, 26770, 26771, 26772, 26773, 26774, 26775, 26776, 26777, 26778, 26779, 26780, 26781, 26782, 26783, 26784, 26785, 26786, 26787, 26788, 26789, 26790, 26791, 26792, 26793, 26794, 26795, 26796, 26797, 26798, 26799, 26800, 26801, 26802, 26803, 26804, 26805, 26806, 26807, 26808, 26809, 26810, 26811, 26812, 26813, 26814, 26815, 26816, 26817, 26818, 26819, 26820, 26821, 26822, 26823, 26824, 26825, 26826, 26827, 26828, 26829, 26830, 26831, 26832, 26833, 26834, 26835, 26836, 26837, 26838, 26839, 26840, 26841, 26842, 26843, 26844, 26845, 26846, 26847, 26848, 26849, 26850, 26851, 26852, 26853, 26854, 26855, 26856, 26857, 26858, 26859, 26860, 26861, 26862, 26863, 26864, 26865, 26866, 26867, 26868, 26869, 26870, 26871, 26872, 26873, 26874, 26875, 26876, 26877, 26878, 26879, 26880, 26881, 26882, 26883, 26884, 26885, 26886, 26887, 26888, 26889, 26890, 26891, 26892, 26893, 26894, 26895, 26896, 26897, 26898, 26899, 26900, 26901, 26902, 26903, 26904, 26905, 26906, 26907, 26908, 26909, 26910, 26911, 26912, 26913, 26914, 26915, 26916, 26917, 26918, 26919, 26920, 26921, 26922, 26923, 26924, 26925, 26926, 26927, 26928, 26929, 26930, 26931, 26932, 26933, 26934, 26935, 26936, 26937, 26938, 26939, 26940, 26941, 26942, 26943, 26944, 26945, 26946, 26947, 26948, 26949, 26950, 26951, 26952, 26953, 26954, 26955, 26956, 26957, 26958, 26959, 26960, 26961, 26962, 26963, 26964, 26965, 26966, 26967, 26968, 26969, 26970, 26971, 26972, 26973, 26974, 26975, 26976, 26977, 26978, 26979, 26980, 26981, 26982, 26983, 26984, 26985, 26986, 26987, 26988, 26989, 26990, 26991, 26992, 26993, 26994, 26995, 26996, 26997, 26998, 26999, 27e3, 27001, 27002, 27003, 27004, 27005, 27006, 27007, 27008, 27009, 27010, 27011, 27012, 27013, 27014, 27015, 27016, 27017, 27018, 27019, 27020, 27021, 27022, 27023, 27024, 27025, 27026, 27027, 27028, 27029, 27030, 27031, 27032, 27033, 27034, 27035, 27036, 27037, 27038, 27039, 27040, 27041, 27042, 27043, 27044, 27045, 27046, 27047, 27048, 27049, 27050, 27051, 27052, 27053, 27054, 27055, 27056, 27057, 27058, 27059, 27060, 27061, 27062, 27063, 27064, 27065, 27066, 27067, 27068, 27069, 27070, 27071, 27072, 27073, 27074, 27075, 27076, 27077, 27078, 27079, 27080, 27081, 27082, 27083, 27084, 27085, 27086, 27087, 27088, 27089, 27090, 27091, 27092, 27093, 27094, 27095, 27096, 27097, 27098, 27099, 27100, 27101, 27102, 27103, 27104, 27105, 27106, 27107, 27108, 27109, 27110, 27111, 27112, 27113, 27114, 27115, 27116, 27117, 27118, 27119, 27120, 27121, 27122, 27123, 27124, 27125, 27126, 27127, 27128, 27129, 27130, 27131, 27132, 27133, 27134, 27135, 27136, 27137, 27138, 27139, 27140, 27141, 27142, 27143, 27144, 27145, 27146, 27147, 27148, 27149, 27150, 27151, 27152, 27153, 27154, 27155, 27156, 27157, 27158, 27159, 27160, 27161, 27162, 27163, 27164, 27165, 27166, 27167, 27168, 27169, 27170, 27171, 27172, 27173, 27174, 27175, 27176, 27177, 27178, 27179, 27180, 27181, 27182, 27183, 27184, 27185, 27186, 27187, 27188, 27189, 27190, 27191, 27192, 27193, 27194, 27195, 27196, 27197, 27198, 27199, 27200, 27201, 27202, 27203, 27204, 27205, 27206, 27207, 27208, 27209, 27210, 27211, 27212, 27213, 27214, 27215, 27216, 27217, 27218, 27219, 27220, 27221, 27222, 27223, 27224, 27225, 27226, 27227, 27228, 27229, 27230, 27231, 27232, 27233, 27234, 27235, 27236, 27237, 27238, 27239, 27240, 27241, 27242, 27243, 27244, 27245, 27246, 27247, 27248, 27249, 27250, 27251, 27252, 27253, 27254, 27255, 27256, 27257, 27258, 27259, 27260, 27261, 27262, 27263, 27264, 27265, 27266, 27267, 27268, 27269, 27270, 27271, 27272, 27273, 27274, 27275, 27276, 27277, 27278, 27279, 27280, 27281, 27282, 27283, 27284, 27285, 27286, 27287, 27288, 27289, 27290, 27291, 27292, 27293, 27294, 27295, 27296, 27297, 27298, 27299, 27300, 27301, 27302, 27303, 27304, 27305, 27306, 27307, 27308, 27309, 27310, 27311, 27312, 27313, 27314, 27315, 27316, 27317, 27318, 27319, 27320, 27321, 27322, 27323, 27324, 27325, 27326, 27327, 27328, 27329, 27330, 27331, 27332, 27333, 27334, 27335, 27336, 27337, 27338, 27339, 27340, 27341, 27342, 27343, 27344, 27345, 27346, 27347, 27348, 27349, 27350, 27351, 27352, 27353, 27354, 27355, 27356, 27357, 27358, 27359, 27360, 27361, 27362, 27363, 27364, 27365, 27366, 27367, 27368, 27369, 27370, 27371, 27372, 27373, 27374, 27375, 27376, 27377, 27378, 27379, 27380, 27381, 27382, 27383, 27384, 27385, 27386, 27387, 27388, 27389, 27390, 27391, 27392, 27393, 27394, 27395, 27396, 27397, 27398, 27399, 27400, 27401, 27402, 27403, 27404, 27405, 27406, 27407, 27408, 27409, 27410, 27411, 27412, 27413, 27414, 27415, 27416, 27417, 27418, 27419, 27420, 27421, 27422, 27423, 27424, 27425, 27426, 27427, 27428, 27429, 27430, 27431, 27432, 27433, 27434, 27435, 27436, 27437, 27438, 27439, 27440, 27441, 27442, 27443, 27444, 27445, 27446, 27447, 27448, 27449, 27450, 27451, 27452, 27453, 27454, 27455, 27456, 27457, 27458, 27459, 27460, 27461, 27462, 27463, 27464, 27465, 27466, 27467, 27468, 27469, 27470, 27471, 27472, 27473, 27474, 27475, 27476, 27477, 27478, 27479, 27480, 27481, 27482, 27483, 27484, 27485, 27486, 27487, 27488, 27489, 27490, 27491, 27492, 27493, 27494, 27495, 27496, 27497, 27498, 27499, 27500, 27501, 27502, 27503, 27504, 27505, 27506, 27507, 27508, 27509, 27510, 27511, 27512, 27513, 27514, 27515, 27516, 27517, 27518, 27519, 27520, 27521, 27522, 27523, 27524, 27525, 27526, 27527, 27528, 27529, 27530, 27531, 27532, 27533, 27534, 27535, 27536, 27537, 27538, 27539, 27540, 27541, 27542, 27543, 27544, 27545, 27546, 27547, 27548, 27549, 27550, 27551, 27552, 27553, 27554, 27555, 27556, 27557, 27558, 27559, 27560, 27561, 27562, 27563, 27564, 27565, 27566, 27567, 27568, 27569, 27570, 27571, 27572, 27573, 27574, 27575, 27576, 27577, 27578, 27579, 27580, 27581, 27582, 27583, 27584, 27585, 27586, 27587, 27588, 27589, 27590, 27591, 27592, 27593, 27594, 27595, 27596, 27597, 27598, 27599, 27600, 27601, 27602, 27603, 27604, 27605, 27606, 27607, 27608, 27609, 27610, 27611, 27612, 27613, 27614, 27615, 27616, 27617, 27618, 27619, 27620, 27621, 27622, 27623, 27624, 27625, 27626, 27627, 27628, 27629, 27630, 27631, 27632, 27633, 27634, 27635, 27636, 27637, 27638, 27639, 27640, 27641, 27642, 27643, 27644, 27645, 27646, 27647, 27648, 27649, 27650, 27651, 27652, 27653, 27654, 27655, 27656, 27657, 27658, 27659, 27660, 27661, 27662, 27663, 27664, 27665, 27666, 27667, 27668, 27669, 27670, 27671, 27672, 27673, 27674, 27675, 27676, 27677, 27678, 27679, 27680, 27681, 27682, 27683, 27684, 27685, 27686, 27687, 27688, 27689, 27690, 27691, 27692, 27693, 27694, 27695, 27696, 27697, 27698, 27699, 27700, 27701, 27702, 27703, 27704, 27705, 27706, 27707, 27708, 27709, 27710, 27711, 27712, 27713, 27714, 27715, 27716, 27717, 27718, 27719, 27720, 27721, 27722, 27723, 27724, 27725, 27726, 27727, 27728, 27729, 27730, 27731, 27732, 27733, 27734, 27735, 27736, 27737, 27738, 27739, 27740, 27741, 27742, 27743, 27744, 27745, 27746, 27747, 27748, 27749, 27750, 27751, 27752, 27753, 27754, 27755, 27756, 27757, 27758, 27759, 27760, 27761, 27762, 27763, 27764, 27765, 27766, 27767, 27768, 27769, 27770, 27771, 27772, 27773, 27774, 27775, 27776, 27777, 27778, 27779, 27780, 27781, 27782, 27783, 27784, 27785, 27786, 27787, 27788, 27789, 27790, 27791, 27792, 27793, 27794, 27795, 27796, 27797, 27798, 27799, 27800, 27801, 27802, 27803, 27804, 27805, 27806, 27807, 27808, 27809, 27810, 27811, 27812, 27813, 27814, 27815, 27816, 27817, 27818, 27819, 27820, 27821, 27822, 27823, 27824, 27825, 27826, 27827, 27828, 27829, 27830, 27831, 27832, 27833, 27834, 27835, 27836, 27837, 27838, 27839, 27840, 27841, 27842, 27843, 27844, 27845, 27846, 27847, 27848, 27849, 27850, 27851, 27852, 27853, 27854, 27855, 27856, 27857, 27858, 27859, 27860, 27861, 27862, 27863, 27864, 27865, 27866, 27867, 27868, 27869, 27870, 27871, 27872, 27873, 27874, 27875, 27876, 27877, 27878, 27879, 27880, 27881, 27882, 27883, 27884, 27885, 27886, 27887, 27888, 27889, 27890, 27891, 27892, 27893, 27894, 27895, 27896, 27897, 27898, 27899, 27900, 27901, 27902, 27903, 27904, 27905, 27906, 27907, 27908, 27909, 27910, 27911, 27912, 27913, 27914, 27915, 27916, 27917, 27918, 27919, 27920, 27921, 27922, 27923, 27924, 27925, 27926, 27927, 27928, 27929, 27930, 27931, 27932, 27933, 27934, 27935, 27936, 27937, 27938, 27939, 27940, 27941, 27942, 27943, 27944, 27945, 27946, 27947, 27948, 27949, 27950, 27951, 27952, 27953, 27954, 27955, 27956, 27957, 27958, 27959, 27960, 27961, 27962, 27963, 27964, 27965, 27966, 27967, 27968, 27969, 27970, 27971, 27972, 27973, 27974, 27975, 27976, 27977, 27978, 27979, 27980, 27981, 27982, 27983, 27984, 27985, 27986, 27987, 27988, 27989, 27990, 27991, 27992, 27993, 27994, 27995, 27996, 27997, 27998, 27999, 28e3, 28001, 28002, 28003, 28004, 28005, 28006, 28007, 28008, 28009, 28010, 28011, 28012, 28013, 28014, 28015, 28016, 28017, 28018, 28019, 28020, 28021, 28022, 28023, 28024, 28025, 28026, 28027, 28028, 28029, 28030, 28031, 28032, 28033, 28034, 28035, 28036, 28037, 28038, 28039, 28040, 28041, 28042, 28043, 28044, 28045, 28046, 28047, 28048, 28049, 28050, 28051, 28052, 28053, 28054, 28055, 28056, 28057, 28058, 28059, 28060, 28061, 28062, 28063, 28064, 28065, 28066, 28067, 28068, 28069, 28070, 28071, 28072, 28073, 28074, 28075, 28076, 28077, 28078, 28079, 28080, 28081, 28082, 28083, 28084, 28085, 28086, 28087, 28088, 28089, 28090, 28091, 28092, 28093, 28094, 28095, 28096, 28097, 28098, 28099, 28100, 28101, 28102, 28103, 28104, 28105, 28106, 28107, 28108, 28109, 28110, 28111, 28112, 28113, 28114, 28115, 28116, 28117, 28118, 28119, 28120, 28121, 28122, 28123, 28124, 28125, 28126, 28127, 28128, 28129, 28130, 28131, 28132, 28133, 28134, 28135, 28136, 28137, 28138, 28139, 28140, 28141, 28142, 28143, 28144, 28145, 28146, 28147, 28148, 28149, 28150, 28151, 28152, 28153, 28154, 28155, 28156, 28157, 28158, 28159, 28160, 28161, 28162, 28163, 28164, 28165, 28166, 28167, 28168, 28169, 28170, 28171, 28172, 28173, 28174, 28175, 28176, 28177, 28178, 28179, 28180, 28181, 28182, 28183, 28184, 28185, 28186, 28187, 28188, 28189, 28190, 28191, 28192, 28193, 28194, 28195, 28196, 28197, 28198, 28199, 28200, 28201, 28202, 28203, 28204, 28205, 28206, 28207, 28208, 28209, 28210, 28211, 28212, 28213, 28214, 28215, 28216, 28217, 28218, 28219, 28220, 28221, 28222, 28223, 28224, 28225, 28226, 28227, 28228, 28229, 28230, 28231, 28232, 28233, 28234, 28235, 28236, 28237, 28238, 28239, 28240, 28241, 28242, 28243, 28244, 28245, 28246, 28247, 28248, 28249, 28250, 28251, 28252, 28253, 28254, 28255, 28256, 28257, 28258, 28259, 28260, 28261, 28262, 28263, 28264, 28265, 28266, 28267, 28268, 28269, 28270, 28271, 28272, 28273, 28274, 28275, 28276, 28277, 28278, 28279, 28280, 28281, 28282, 28283, 28284, 28285, 28286, 28287, 28288, 28289, 28290, 28291, 28292, 28293, 28294, 28295, 28296, 28297, 28298, 28299, 28300, 28301, 28302, 28303, 28304, 28305, 28306, 28307, 28308, 28309, 28310, 28311, 28312, 28313, 28314, 28315, 28316, 28317, 28318, 28319, 28320, 28321, 28322, 28323, 28324, 28325, 28326, 28327, 28328, 28329, 28330, 28331, 28332, 28333, 28334, 28335, 28336, 28337, 28338, 28339, 28340, 28341, 28342, 28343, 28344, 28345, 28346, 28347, 28348, 28349, 28350, 28351, 28352, 28353, 28354, 28355, 28356, 28357, 28358, 28359, 28360, 28361, 28362, 28363, 28364, 28365, 28366, 28367, 28368, 28369, 28370, 28371, 28372, 28373, 28374, 28375, 28376, 28377, 28378, 28379, 28380, 28381, 28382, 28383, 28384, 28385, 28386, 28387, 28388, 28389, 28390, 28391, 28392, 28393, 28394, 28395, 28396, 28397, 28398, 28399, 28400, 28401, 28402, 28403, 28404, 28405, 28406, 28407, 28408, 28409, 28410, 28411, 28412, 28413, 28414, 28415, 28416, 28417, 28418, 28419, 28420, 28421, 28422, 28423, 28424, 28425, 28426, 28427, 28428, 28429, 28430, 28431, 28432, 28433, 28434, 28435, 28436, 28437, 28438, 28439, 28440, 28441, 28442, 28443, 28444, 28445, 28446, 28447, 28448, 28449, 28450, 28451, 28452, 28453, 28454, 28455, 28456, 28457, 28458, 28459, 28460, 28461, 28462, 28463, 28464, 28465, 28466, 28467, 28468, 28469, 28470, 28471, 28472, 28473, 28474, 28475, 28476, 28477, 28478, 28479, 28480, 28481, 28482, 28483, 28484, 28485, 28486, 28487, 28488, 28489, 28490, 28491, 28492, 28493, 28494, 28495, 28496, 28497, 28498, 28499, 28500, 28501, 28502, 28503, 28504, 28505, 28506, 28507, 28508, 28509, 28510, 28511, 28512, 28513, 28514, 28515, 28516, 28517, 28518, 28519, 28520, 28521, 28522, 28523, 28524, 28525, 28526, 28527, 28528, 28529, 28530, 28531, 28532, 28533, 28534, 28535, 28536, 28537, 28538, 28539, 28540, 28541, 28542, 28543, 28544, 28545, 28546, 28547, 28548, 28549, 28550, 28551, 28552, 28553, 28554, 28555, 28556, 28557, 28558, 28559, 28560, 28561, 28562, 28563, 28564, 28565, 28566, 28567, 28568, 28569, 28570, 28571, 28572, 28573, 28574, 28575, 28576, 28577, 28578, 28579, 28580, 28581, 28582, 28583, 28584, 28585, 28586, 28587, 28588, 28589, 28590, 28591, 28592, 28593, 28594, 28595, 28596, 28597, 28598, 28599, 28600, 28601, 28602, 28603, 28604, 28605, 28606, 28607, 28608, 28609, 28610, 28611, 28612, 28613, 28614, 28615, 28616, 28617, 28618, 28619, 28620, 28621, 28622, 28623, 28624, 28625, 28626, 28627, 28628, 28629, 28630, 28631, 28632, 28633, 28634, 28635, 28636, 28637, 28638, 28639, 28640, 28641, 28642, 28643, 28644, 28645, 28646, 28647, 28648, 28649, 28650, 28651, 28652, 28653, 28654, 28655, 28656, 28657, 28658, 28659, 28660, 28661, 28662, 28663, 28664, 28665, 28666, 28667, 28668, 28669, 28670, 28671, 28672, 28673, 28674, 28675, 28676, 28677, 28678, 28679, 28680, 28681, 28682, 28683, 28684, 28685, 28686, 28687, 28688, 28689, 28690, 28691, 28692, 28693, 28694, 28695, 28696, 28697, 28698, 28699, 28700, 28701, 28702, 28703, 28704, 28705, 28706, 28707, 28708, 28709, 28710, 28711, 28712, 28713, 28714, 28715, 28716, 28717, 28718, 28719, 28720, 28721, 28722, 28723, 28724, 28725, 28726, 28727, 28728, 28729, 28730, 28731, 28732, 28733, 28734, 28735, 28736, 28737, 28738, 28739, 28740, 28741, 28742, 28743, 28744, 28745, 28746, 28747, 28748, 28749, 28750, 28751, 28752, 28753, 28754, 28755, 28756, 28757, 28758, 28759, 28760, 28761, 28762, 28763, 28764, 28765, 28766, 28767, 28768, 28769, 28770, 28771, 28772, 28773, 28774, 28775, 28776, 28777, 28778, 28779, 28780, 28781, 28782, 28783, 28784, 28785, 28786, 28787, 28788, 28789, 28790, 28791, 28792, 28793, 28794, 28795, 28796, 28797, 28798, 28799, 28800, 28801, 28802, 28803, 28804, 28805, 28806, 28807, 28808, 28809, 28810, 28811, 28812, 28813, 28814, 28815, 28816, 28817, 28818, 28819, 28820, 28821, 28822, 28823, 28824, 28825, 28826, 28827, 28828, 28829, 28830, 28831, 28832, 28833, 28834, 28835, 28836, 28837, 28838, 28839, 28840, 28841, 28842, 28843, 28844, 28845, 28846, 28847, 28848, 28849, 28850, 28851, 28852, 28853, 28854, 28855, 28856, 28857, 28858, 28859, 28860, 28861, 28862, 28863, 28864, 28865, 28866, 28867, 28868, 28869, 28870, 28871, 28872, 28873, 28874, 28875, 28876, 28877, 28878, 28879, 28880, 28881, 28882, 28883, 28884, 28885, 28886, 28887, 28888, 28889, 28890, 28891, 28892, 28893, 28894, 28895, 28896, 28897, 28898, 28899, 28900, 28901, 28902, 28903, 28904, 28905, 28906, 28907, 28908, 28909, 28910, 28911, 28912, 28913, 28914, 28915, 28916, 28917, 28918, 28919, 28920, 28921, 28922, 28923, 28924, 28925, 28926, 28927, 28928, 28929, 28930, 28931, 28932, 28933, 28934, 28935, 28936, 28937, 28938, 28939, 28940, 28941, 28942, 28943, 28944, 28945, 28946, 28947, 28948, 28949, 28950, 28951, 28952, 28953, 28954, 28955, 28956, 28957, 28958, 28959, 28960, 28961, 28962, 28963, 28964, 28965, 28966, 28967, 28968, 28969, 28970, 28971, 28972, 28973, 28974, 28975, 28976, 28977, 28978, 28979, 28980, 28981, 28982, 28983, 28984, 28985, 28986, 28987, 28988, 28989, 28990, 28991, 28992, 28993, 28994, 28995, 28996, 28997, 28998, 28999, 29e3, 29001, 29002, 29003, 29004, 29005, 29006, 29007, 29008, 29009, 29010, 29011, 29012, 29013, 29014, 29015, 29016, 29017, 29018, 29019, 29020, 29021, 29022, 29023, 29024, 29025, 29026, 29027, 29028, 29029, 29030, 29031, 29032, 29033, 29034, 29035, 29036, 29037, 29038, 29039, 29040, 29041, 29042, 29043, 29044, 29045, 29046, 29047, 29048, 29049, 29050, 29051, 29052, 29053, 29054, 29055, 29056, 29057, 29058, 29059, 29060, 29061, 29062, 29063, 29064, 29065, 29066, 29067, 29068, 29069, 29070, 29071, 29072, 29073, 29074, 29075, 29076, 29077, 29078, 29079, 29080, 29081, 29082, 29083, 29084, 29085, 29086, 29087, 29088, 29089, 29090, 29091, 29092, 29093, 29094, 29095, 29096, 29097, 29098, 29099, 29100, 29101, 29102, 29103, 29104, 29105, 29106, 29107, 29108, 29109, 29110, 29111, 29112, 29113, 29114, 29115, 29116, 29117, 29118, 29119, 29120, 29121, 29122, 29123, 29124, 29125, 29126, 29127, 29128, 29129, 29130, 29131, 29132, 29133, 29134, 29135, 29136, 29137, 29138, 29139, 29140, 29141, 29142, 29143, 29144, 29145, 29146, 29147, 29148, 29149, 29150, 29151, 29152, 29153, 29154, 29155, 29156, 29157, 29158, 29159, 29160, 29161, 29162, 29163, 29164, 29165, 29166, 29167, 29168, 29169, 29170, 29171, 29172, 29173, 29174, 29175, 29176, 29177, 29178, 29179, 29180, 29181, 29182, 29183, 29184, 29185, 29186, 29187, 29188, 29189, 29190, 29191, 29192, 29193, 29194, 29195, 29196, 29197, 29198, 29199, 29200, 29201, 29202, 29203, 29204, 29205, 29206, 29207, 29208, 29209, 29210, 29211, 29212, 29213, 29214, 29215, 29216, 29217, 29218, 29219, 29220, 29221, 29222, 29223, 29224, 29225, 29226, 29227, 29228, 29229, 29230, 29231, 29232, 29233, 29234, 29235, 29236, 29237, 29238, 29239, 29240, 29241, 29242, 29243, 29244, 29245, 29246, 29247, 29248, 29249, 29250, 29251, 29252, 29253, 29254, 29255, 29256, 29257, 29258, 29259, 29260, 29261, 29262, 29263, 29264, 29265, 29266, 29267, 29268, 29269, 29270, 29271, 29272, 29273, 29274, 29275, 29276, 29277, 29278, 29279, 29280, 29281, 29282, 29283, 29284, 29285, 29286, 29287, 29288, 29289, 29290, 29291, 29292, 29293, 29294, 29295, 29296, 29297, 29298, 29299, 29300, 29301, 29302, 29303, 29304, 29305, 29306, 29307, 29308, 29309, 29310, 29311, 29312, 29313, 29314, 29315, 29316, 29317, 29318, 29319, 29320, 29321, 29322, 29323, 29324, 29325, 29326, 29327, 29328, 29329, 29330, 29331, 29332, 29333, 29334, 29335, 29336, 29337, 29338, 29339, 29340, 29341, 29342, 29343, 29344, 29345, 29346, 29347, 29348, 29349, 29350, 29351, 29352, 29353, 29354, 29355, 29356, 29357, 29358, 29359, 29360, 29361, 29362, 29363, 29364, 29365, 29366, 29367, 29368, 29369, 29370, 29371, 29372, 29373, 29374, 29375, 29376, 29377, 29378, 29379, 29380, 29381, 29382, 29383, 29384, 29385, 29386, 29387, 29388, 29389, 29390, 29391, 29392, 29393, 29394, 29395, 29396, 29397, 29398, 29399, 29400, 29401, 29402, 29403, 29404, 29405, 29406, 29407, 29408, 29409, 29410, 29411, 29412, 29413, 29414, 29415, 29416, 29417, 29418, 29419, 29420, 29421, 29422, 29423, 29424, 29425, 29426, 29427, 29428, 29429, 29430, 29431, 29432, 29433, 29434, 29435, 29436, 29437, 29438, 29439, 29440, 29441, 29442, 29443, 29444, 29445, 29446, 29447, 29448, 29449, 29450, 29451, 29452, 29453, 29454, 29455, 29456, 29457, 29458, 29459, 29460, 29461, 29462, 29463, 29464, 29465, 29466, 29467, 29468, 29469, 29470, 29471, 29472, 29473, 29474, 29475, 29476, 29477, 29478, 29479, 29480, 29481, 29482, 29483, 29484, 29485, 29486, 29487, 29488, 29489, 29490, 29491, 29492, 29493, 29494, 29495, 29496, 29497, 29498, 29499, 29500, 29501, 29502, 29503, 29504, 29505, 29506, 29507, 29508, 29509, 29510, 29511, 29512, 29513, 29514, 29515, 29516, 29517, 29518, 29519, 29520, 29521, 29522, 29523, 29524, 29525, 29526, 29527, 29528, 29529, 29530, 29531, 29532, 29533, 29534, 29535, 29536, 29537, 29538, 29539, 29540, 29541, 29542, 29543, 29544, 29545, 29546, 29547, 29548, 29549, 29550, 29551, 29552, 29553, 29554, 29555, 29556, 29557, 29558, 29559, 29560, 29561, 29562, 29563, 29564, 29565, 29566, 29567, 29568, 29569, 29570, 29571, 29572, 29573, 29574, 29575, 29576, 29577, 29578, 29579, 29580, 29581, 29582, 29583, 29584, 29585, 29586, 29587, 29588, 29589, 29590, 29591, 29592, 29593, 29594, 29595, 29596, 29597, 29598, 29599, 29600, 29601, 29602, 29603, 29604, 29605, 29606, 29607, 29608, 29609, 29610, 29611, 29612, 29613, 29614, 29615, 29616, 29617, 29618, 29619, 29620, 29621, 29622, 29623, 29624, 29625, 29626, 29627, 29628, 29629, 29630, 29631, 29632, 29633, 29634, 29635, 29636, 29637, 29638, 29639, 29640, 29641, 29642, 29643, 29644, 29645, 29646, 29647, 29648, 29649, 29650, 29651, 29652, 29653, 29654, 29655, 29656, 29657, 29658, 29659, 29660, 29661, 29662, 29663, 29664, 29665, 29666, 29667, 29668, 29669, 29670, 29671, 29672, 29673, 29674, 29675, 29676, 29677, 29678, 29679, 29680, 29681, 29682, 29683, 29684, 29685, 29686, 29687, 29688, 29689, 29690, 29691, 29692, 29693, 29694, 29695, 29696, 29697, 29698, 29699, 29700, 29701, 29702, 29703, 29704, 29705, 29706, 29707, 29708, 29709, 29710, 29711, 29712, 29713, 29714, 29715, 29716, 29717, 29718, 29719, 29720, 29721, 29722, 29723, 29724, 29725, 29726, 29727, 29728, 29729, 29730, 29731, 29732, 29733, 29734, 29735, 29736, 29737, 29738, 29739, 29740, 29741, 29742, 29743, 29744, 29745, 29746, 29747, 29748, 29749, 29750, 29751, 29752, 29753, 29754, 29755, 29756, 29757, 29758, 29759, 29760, 29761, 29762, 29763, 29764, 29765, 29766, 29767, 29768, 29769, 29770, 29771, 29772, 29773, 29774, 29775, 29776, 29777, 29778, 29779, 29780, 29781, 29782, 29783, 29784, 29785, 29786, 29787, 29788, 29789, 29790, 29791, 29792, 29793, 29794, 29795, 29796, 29797, 29798, 29799, 29800, 29801, 29802, 29803, 29804, 29805, 29806, 29807, 29808, 29809, 29810, 29811, 29812, 29813, 29814, 29815, 29816, 29817, 29818, 29819, 29820, 29821, 29822, 29823, 29824, 29825, 29826, 29827, 29828, 29829, 29830, 29831, 29832, 29833, 29834, 29835, 29836, 29837, 29838, 29839, 29840, 29841, 29842, 29843, 29844, 29845, 29846, 29847, 29848, 29849, 29850, 29851, 29852, 29853, 29854, 29855, 29856, 29857, 29858, 29859, 29860, 29861, 29862, 29863, 29864, 29865, 29866, 29867, 29868, 29869, 29870, 29871, 29872, 29873, 29874, 29875, 29876, 29877, 29878, 29879, 29880, 29881, 29882, 29883, 29884, 29885, 29886, 29887, 29888, 29889, 29890, 29891, 29892, 29893, 29894, 29895, 29896, 29897, 29898, 29899, 29900, 29901, 29902, 29903, 29904, 29905, 29906, 29907, 29908, 29909, 29910, 29911, 29912, 29913, 29914, 29915, 29916, 29917, 29918, 29919, 29920, 29921, 29922, 29923, 29924, 29925, 29926, 29927, 29928, 29929, 29930, 29931, 29932, 29933, 29934, 29935, 29936, 29937, 29938, 29939, 29940, 29941, 29942, 29943, 29944, 29945, 29946, 29947, 29948, 29949, 29950, 29951, 29952, 29953, 29954, 29955, 29956, 29957, 29958, 29959, 29960, 29961, 29962, 29963, 29964, 29965, 29966, 29967, 29968, 29969, 29970, 29971, 29972, 29973, 29974, 29975, 29976, 29977, 29978, 29979, 29980, 29981, 29982, 29983, 29984, 29985, 29986, 29987, 29988, 29989, 29990, 29991, 29992, 29993, 29994, 29995, 29996, 29997, 29998, 29999, 3e4, 30001, 30002, 30003, 30004, 30005, 30006, 30007, 30008, 30009, 30010, 30011, 30012, 30013, 30014, 30015, 30016, 30017, 30018, 30019, 30020, 30021, 30022, 30023, 30024, 30025, 30026, 30027, 30028, 30029, 30030, 30031, 30032, 30033, 30034, 30035, 30036, 30037, 30038, 30039, 30040, 30041, 30042, 30043, 30044, 30045, 30046, 30047, 30048, 30049, 30050, 30051, 30052, 30053, 30054, 30055, 30056, 30057, 30058, 30059, 30060, 30061, 30062, 30063, 30064, 30065, 30066, 30067, 30068, 30069, 30070, 30071, 30072, 30073, 30074, 30075, 30076, 30077, 30078, 30079, 30080, 30081, 30082, 30083, 30084, 30085, 30086, 30087, 30088, 30089, 30090, 30091, 30092, 30093, 30094, 30095, 30096, 30097, 30098, 30099, 30100, 30101, 30102, 30103, 30104, 30105, 30106, 30107, 30108, 30109, 30110, 30111, 30112, 30113, 30114, 30115, 30116, 30117, 30118, 30119, 30120, 30121, 30122, 30123, 30124, 30125, 30126, 30127, 30128, 30129, 30130, 30131, 30132, 30133, 30134, 30135, 30136, 30137, 30138, 30139, 30140, 30141, 30142, 30143, 30144, 30145, 30146, 30147, 30148, 30149, 30150, 30151, 30152, 30153, 30154, 30155, 30156, 30157, 30158, 30159, 30160, 30161, 30162, 30163, 30164, 30165, 30166, 30167, 30168, 30169, 30170, 30171, 30172, 30173, 30174, 30175, 30176, 30177, 30178, 30179, 30180, 30181, 30182, 30183, 30184, 30185, 30186, 30187, 30188, 30189, 30190, 30191, 30192, 30193, 30194, 30195, 30196, 30197, 30198, 30199, 30200, 30201, 30202, 30203, 30204, 30205, 30206, 30207, 30208, 30209, 30210, 30211, 30212, 30213, 30214, 30215, 30216, 30217, 30218, 30219, 30220, 30221, 30222, 30223, 30224, 30225, 30226, 30227, 30228, 30229, 30230, 30231, 30232, 30233, 30234, 30235, 30236, 30237, 30238, 30239, 30240, 30241, 30242, 30243, 30244, 30245, 30246, 30247, 30248, 30249, 30250, 30251, 30252, 30253, 30254, 30255, 30256, 30257, 30258, 30259, 30260, 30261, 30262, 30263, 30264, 30265, 30266, 30267, 30268, 30269, 30270, 30271, 30272, 30273, 30274, 30275, 30276, 30277, 30278, 30279, 30280, 30281, 30282, 30283, 30284, 30285, 30286, 30287, 30288, 30289, 30290, 30291, 30292, 30293, 30294, 30295, 30296, 30297, 30298, 30299, 30300, 30301, 30302, 30303, 30304, 30305, 30306, 30307, 30308, 30309, 30310, 30311, 30312, 30313, 30314, 30315, 30316, 30317, 30318, 30319, 30320, 30321, 30322, 30323, 30324, 30325, 30326, 30327, 30328, 30329, 30330, 30331, 30332, 30333, 30334, 30335, 30336, 30337, 30338, 30339, 30340, 30341, 30342, 30343, 30344, 30345, 30346, 30347, 30348, 30349, 30350, 30351, 30352, 30353, 30354, 30355, 30356, 30357, 30358, 30359, 30360, 30361, 30362, 30363, 30364, 30365, 30366, 30367, 30368, 30369, 30370, 30371, 30372, 30373, 30374, 30375, 30376, 30377, 30378, 30379, 30380, 30381, 30382, 30383, 30384, 30385, 30386, 30387, 30388, 30389, 30390, 30391, 30392, 30393, 30394, 30395, 30396, 30397, 30398, 30399, 30400, 30401, 30402, 30403, 30404, 30405, 30406, 30407, 30408, 30409, 30410, 30411, 30412, 30413, 30414, 30415, 30416, 30417, 30418, 30419, 30420, 30421, 30422, 30423, 30424, 30425, 30426, 30427, 30428, 30429, 30430, 30431, 30432, 30433, 30434, 30435, 30436, 30437, 30438, 30439, 30440, 30441, 30442, 30443, 30444, 30445, 30446, 30447, 30448, 30449, 30450, 30451, 30452, 30453, 30454, 30455, 30456, 30457, 30458, 30459, 30460, 30461, 30462, 30463, 30464, 30465, 30466, 30467, 30468, 30469, 30470, 30471, 30472, 30473, 30474, 30475, 30476, 30477, 30478, 30479, 30480, 30481, 30482, 30483, 30484, 30485, 30486, 30487, 30488, 30489, 30490, 30491, 30492, 30493, 30494, 30495, 30496, 30497, 30498, 30499, 30500, 30501, 30502, 30503, 30504, 30505, 30506, 30507, 30508, 30509, 30510, 30511, 30512, 30513, 30514, 30515, 30516, 30517, 30518, 30519, 30520, 30521, 30522, 30523, 30524, 30525, 30526, 30527, 30528, 30529, 30530, 30531, 30532, 30533, 30534, 30535, 30536, 30537, 30538, 30539, 30540, 30541, 30542, 30543, 30544, 30545, 30546, 30547, 30548, 30549, 30550, 30551, 30552, 30553, 30554, 30555, 30556, 30557, 30558, 30559, 30560, 30561, 30562, 30563, 30564, 30565, 30566, 30567, 30568, 30569, 30570, 30571, 30572, 30573, 30574, 30575, 30576, 30577, 30578, 30579, 30580, 30581, 30582, 30583, 30584, 30585, 30586, 30587, 30588, 30589, 30590, 30591, 30592, 30593, 30594, 30595, 30596, 30597, 30598, 30599, 30600, 30601, 30602, 30603, 30604, 30605, 30606, 30607, 30608, 30609, 30610, 30611, 30612, 30613, 30614, 30615, 30616, 30617, 30618, 30619, 30620, 30621, 30622, 30623, 30624, 30625, 30626, 30627, 30628, 30629, 30630, 30631, 30632, 30633, 30634, 30635, 30636, 30637, 30638, 30639, 30640, 30641, 30642, 30643, 30644, 30645, 30646, 30647, 30648, 30649, 30650, 30651, 30652, 30653, 30654, 30655, 30656, 30657, 30658, 30659, 30660, 30661, 30662, 30663, 30664, 30665, 30666, 30667, 30668, 30669, 30670, 30671, 30672, 30673, 30674, 30675, 30676, 30677, 30678, 30679, 30680, 30681, 30682, 30683, 30684, 30685, 30686, 30687, 30688, 30689, 30690, 30691, 30692, 30693, 30694, 30695, 30696, 30697, 30698, 30699, 30700, 30701, 30702, 30703, 30704, 30705, 30706, 30707, 30708, 30709, 30710, 30711, 30712, 30713, 30714, 30715, 30716, 30717, 30718, 30719, 30720, 30721, 30722, 30723, 30724, 30725, 30726, 30727, 30728, 30729, 30730, 30731, 30732, 30733, 30734, 30735, 30736, 30737, 30738, 30739, 30740, 30741, 30742, 30743, 30744, 30745, 30746, 30747, 30748, 30749, 30750, 30751, 30752, 30753, 30754, 30755, 30756, 30757, 30758, 30759, 30760, 30761, 30762, 30763, 30764, 30765, 30766, 30767, 30768, 30769, 30770, 30771, 30772, 30773, 30774, 30775, 30776, 30777, 30778, 30779, 30780, 30781, 30782, 30783, 30784, 30785, 30786, 30787, 30788, 30789, 30790, 30791, 30792, 30793, 30794, 30795, 30796, 30797, 30798, 30799, 30800, 30801, 30802, 30803, 30804, 30805, 30806, 30807, 30808, 30809, 30810, 30811, 30812, 30813, 30814, 30815, 30816, 30817, 30818, 30819, 30820, 30821, 30822, 30823, 30824, 30825, 30826, 30827, 30828, 30829, 30830, 30831, 30832, 30833, 30834, 30835, 30836, 30837, 30838, 30839, 30840, 30841, 30842, 30843, 30844, 30845, 30846, 30847, 30848, 30849, 30850, 30851, 30852, 30853, 30854, 30855, 30856, 30857, 30858, 30859, 30860, 30861, 30862, 30863, 30864, 30865, 30866, 30867, 30868, 30869, 30870, 30871, 30872, 30873, 30874, 30875, 30876, 30877, 30878, 30879, 30880, 30881, 30882, 30883, 30884, 30885, 30886, 30887, 30888, 30889, 30890, 30891, 30892, 30893, 30894, 30895, 30896, 30897, 30898, 30899, 30900, 30901, 30902, 30903, 30904, 30905, 30906, 30907, 30908, 30909, 30910, 30911, 30912, 30913, 30914, 30915, 30916, 30917, 30918, 30919, 30920, 30921, 30922, 30923, 30924, 30925, 30926, 30927, 30928, 30929, 30930, 30931, 30932, 30933, 30934, 30935, 30936, 30937, 30938, 30939, 30940, 30941, 30942, 30943, 30944, 30945, 30946, 30947, 30948, 30949, 30950, 30951, 30952, 30953, 30954, 30955, 30956, 30957, 30958, 30959, 30960, 30961, 30962, 30963, 30964, 30965, 30966, 30967, 30968, 30969, 30970, 30971, 30972, 30973, 30974, 30975, 30976, 30977, 30978, 30979, 30980, 30981, 30982, 30983, 30984, 30985, 30986, 30987, 30988, 30989, 30990, 30991, 30992, 30993, 30994, 30995, 30996, 30997, 30998, 30999, 31e3, 31001, 31002, 31003, 31004, 31005, 31006, 31007, 31008, 31009, 31010, 31011, 31012, 31013, 31014, 31015, 31016, 31017, 31018, 31019, 31020, 31021, 31022, 31023, 31024, 31025, 31026, 31027, 31028, 31029, 31030, 31031, 31032, 31033, 31034, 31035, 31036, 31037, 31038, 31039, 31040, 31041, 31042, 31043, 31044, 31045, 31046, 31047, 31048, 31049, 31050, 31051, 31052, 31053, 31054, 31055, 31056, 31057, 31058, 31059, 31060, 31061, 31062, 31063, 31064, 31065, 31066, 31067, 31068, 31069, 31070, 31071, 31072, 31073, 31074, 31075, 31076, 31077, 31078, 31079, 31080, 31081, 31082, 31083, 31084, 31085, 31086, 31087, 31088, 31089, 31090, 31091, 31092, 31093, 31094, 31095, 31096, 31097, 31098, 31099, 31100, 31101, 31102, 31103, 31104, 31105, 31106, 31107, 31108, 31109, 31110, 31111, 31112, 31113, 31114, 31115, 31116, 31117, 31118, 31119, 31120, 31121, 31122, 31123, 31124, 31125, 31126, 31127, 31128, 31129, 31130, 31131, 31132, 31133, 31134, 31135, 31136, 31137, 31138, 31139, 31140, 31141, 31142, 31143, 31144, 31145, 31146, 31147, 31148, 31149, 31150, 31151, 31152, 31153, 31154, 31155, 31156, 31157, 31158, 31159, 31160, 31161, 31162, 31163, 31164, 31165, 31166, 31167, 31168, 31169, 31170, 31171, 31172, 31173, 31174, 31175, 31176, 31177, 31178, 31179, 31180, 31181, 31182, 31183, 31184, 31185, 31186, 31187, 31188, 31189, 31190, 31191, 31192, 31193, 31194, 31195, 31196, 31197, 31198, 31199, 31200, 31201, 31202, 31203, 31204, 31205, 31206, 31207, 31208, 31209, 31210, 31211, 31212, 31213, 31214, 31215, 31216, 31217, 31218, 31219, 31220, 31221, 31222, 31223, 31224, 31225, 31226, 31227, 31228, 31229, 31230, 31231, 31232, 31233, 31234, 31235, 31236, 31237, 31238, 31239, 31240, 31241, 31242, 31243, 31244, 31245, 31246, 31247, 31248, 31249, 31250, 31251, 31252, 31253, 31254, 31255, 31256, 31257, 31258, 31259, 31260, 31261, 31262, 31263, 31264, 31265, 31266, 31267, 31268, 31269, 31270, 31271, 31272, 31273, 31274, 31275, 31276, 31277, 31278, 31279, 31280, 31281, 31282, 31283, 31284, 31285, 31286, 31287, 31288, 31289, 31290, 31291, 31292, 31293, 31294, 31295, 31296, 31297, 31298, 31299, 31300, 31301, 31302, 31303, 31304, 31305, 31306, 31307, 31308, 31309, 31310, 31311, 31312, 31313, 31314, 31315, 31316, 31317, 31318, 31319, 31320, 31321, 31322, 31323, 31324, 31325, 31326, 31327, 31328, 31329, 31330, 31331, 31332, 31333, 31334, 31335, 31336, 31337, 31338, 31339, 31340, 31341, 31342, 31343, 31344, 31345, 31346, 31347, 31348, 31349, 31350, 31351, 31352, 31353, 31354, 31355, 31356, 31357, 31358, 31359, 31360, 31361, 31362, 31363, 31364, 31365, 31366, 31367, 31368, 31369, 31370, 31371, 31372, 31373, 31374, 31375, 31376, 31377, 31378, 31379, 31380, 31381, 31382, 31383, 31384, 31385, 31386, 31387, 31388, 31389, 31390, 31391, 31392, 31393, 31394, 31395, 31396, 31397, 31398, 31399, 31400, 31401, 31402, 31403, 31404, 31405, 31406, 31407, 31408, 31409, 31410, 31411, 31412, 31413, 31414, 31415, 31416, 31417, 31418, 31419, 31420, 31421, 31422, 31423, 31424, 31425, 31426, 31427, 31428, 31429, 31430, 31431, 31432, 31433, 31434, 31435, 31436, 31437, 31438, 31439, 31440, 31441, 31442, 31443, 31444, 31445, 31446, 31447, 31448, 31449, 31450, 31451, 31452, 31453, 31454, 31455, 31456, 31457, 31458, 31459, 31460, 31461, 31462, 31463, 31464, 31465, 31466, 31467, 31468, 31469, 31470, 31471, 31472, 31473, 31474, 31475, 31476, 31477, 31478, 31479, 31480, 31481, 31482, 31483, 31484, 31485, 31486, 31487, 31488, 31489, 31490, 31491, 31492, 31493, 31494, 31495, 31496, 31497, 31498, 31499, 31500, 31501, 31502, 31503, 31504, 31505, 31506, 31507, 31508, 31509, 31510, 31511, 31512, 31513, 31514, 31515, 31516, 31517, 31518, 31519, 31520, 31521, 31522, 31523, 31524, 31525, 31526, 31527, 31528, 31529, 31530, 31531, 31532, 31533, 31534, 31535, 31536, 31537, 31538, 31539, 31540, 31541, 31542, 31543, 31544, 31545, 31546, 31547, 31548, 31549, 31550, 31551, 31552, 31553, 31554, 31555, 31556, 31557, 31558, 31559, 31560, 31561, 31562, 31563, 31564, 31565, 31566, 31567, 31568, 31569, 31570, 31571, 31572, 31573, 31574, 31575, 31576, 31577, 31578, 31579, 31580, 31581, 31582, 31583, 31584, 31585, 31586, 31587, 31588, 31589, 31590, 31591, 31592, 31593, 31594, 31595, 31596, 31597, 31598, 31599, 31600, 31601, 31602, 31603, 31604, 31605, 31606, 31607, 31608, 31609, 31610, 31611, 31612, 31613, 31614, 31615, 31616, 31617, 31618, 31619, 31620, 31621, 31622, 31623, 31624, 31625, 31626, 31627, 31628, 31629, 31630, 31631, 31632, 31633, 31634, 31635, 31636, 31637, 31638, 31639, 31640, 31641, 31642, 31643, 31644, 31645, 31646, 31647, 31648, 31649, 31650, 31651, 31652, 31653, 31654, 31655, 31656, 31657, 31658, 31659, 31660, 31661, 31662, 31663, 31664, 31665, 31666, 31667, 31668, 31669, 31670, 31671, 31672, 31673, 31674, 31675, 31676, 31677, 31678, 31679, 31680, 31681, 31682, 31683, 31684, 31685, 31686, 31687, 31688, 31689, 31690, 31691, 31692, 31693, 31694, 31695, 31696, 31697, 31698, 31699, 31700, 31701, 31702, 31703, 31704, 31705, 31706, 31707, 31708, 31709, 31710, 31711, 31712, 31713, 31714, 31715, 31716, 31717, 31718, 31719, 31720, 31721, 31722, 31723, 31724, 31725, 31726, 31727, 31728, 31729, 31730, 31731, 31732, 31733, 31734, 31735, 31736, 31737, 31738, 31739, 31740, 31741, 31742, 31743, 31744, 31745, 31746, 31747, 31748, 31749, 31750, 31751, 31752, 31753, 31754, 31755, 31756, 31757, 31758, 31759, 31760, 31761, 31762, 31763, 31764, 31765, 31766, 31767, 31768, 31769, 31770, 31771, 31772, 31773, 31774, 31775, 31776, 31777, 31778, 31779, 31780, 31781, 31782, 31783, 31784, 31785, 31786, 31787, 31788, 31789, 31790, 31791, 31792, 31793, 31794, 31795, 31796, 31797, 31798, 31799, 31800, 31801, 31802, 31803, 31804, 31805, 31806, 31807, 31808, 31809, 31810, 31811, 31812, 31813, 31814, 31815, 31816, 31817, 31818, 31819, 31820, 31821, 31822, 31823, 31824, 31825, 31826, 31827, 31828, 31829, 31830, 31831, 31832, 31833, 31834, 31835, 31836, 31837, 31838, 31839, 31840, 31841, 31842, 31843, 31844, 31845, 31846, 31847, 31848, 31849, 31850, 31851, 31852, 31853, 31854, 31855, 31856, 31857, 31858, 31859, 31860, 31861, 31862, 31863, 31864, 31865, 31866, 31867, 31868, 31869, 31870, 31871, 31872, 31873, 31874, 31875, 31876, 31877, 31878, 31879, 31880, 31881, 31882, 31883, 31884, 31885, 31886, 31887, 31888, 31889, 31890, 31891, 31892, 31893, 31894, 31895, 31896, 31897, 31898, 31899, 31900, 31901, 31902, 31903, 31904, 31905, 31906, 31907, 31908, 31909, 31910, 31911, 31912, 31913, 31914, 31915, 31916, 31917, 31918, 31919, 31920, 31921, 31922, 31923, 31924, 31925, 31926, 31927, 31928, 31929, 31930, 31931, 31932, 31933, 31934, 31935, 31936, 31937, 31938, 31939, 31940, 31941, 31942, 31943, 31944, 31945, 31946, 31947, 31948, 31949, 31950, 31951, 31952, 31953, 31954, 31955, 31956, 31957, 31958, 31959, 31960, 31961, 31962, 31963, 31964, 31965, 31966, 31967, 31968, 31969, 31970, 31971, 31972, 31973, 31974, 31975, 31976, 31977, 31978, 31979, 31980, 31981, 31982, 31983, 31984, 31985, 31986, 31987, 31988, 31989, 31990, 31991, 31992, 31993, 31994, 31995, 31996, 31997, 31998, 31999, 32e3, 32001, 32002, 32003, 32004, 32005, 32006, 32007, 32008, 32009, 32010, 32011, 32012, 32013, 32014, 32015, 32016, 32017, 32018, 32019, 32020, 32021, 32022, 32023, 32024, 32025, 32026, 32027, 32028, 32029, 32030, 32031, 32032, 32033, 32034, 32035, 32036, 32037, 32038, 32039, 32040, 32041, 32042, 32043, 32044, 32045, 32046, 32047, 32048, 32049, 32050, 32051, 32052, 32053, 32054, 32055, 32056, 32057, 32058, 32059, 32060, 32061, 32062, 32063, 32064, 32065, 32066, 32067, 32068, 32069, 32070, 32071, 32072, 32073, 32074, 32075, 32076, 32077, 32078, 32079, 32080, 32081, 32082, 32083, 32084, 32085, 32086, 32087, 32088, 32089, 32090, 32091, 32092, 32093, 32094, 32095, 32096, 32097, 32098, 32099, 32100, 32101, 32102, 32103, 32104, 32105, 32106, 32107, 32108, 32109, 32110, 32111, 32112, 32113, 32114, 32115, 32116, 32117, 32118, 32119, 32120, 32121, 32122, 32123, 32124, 32125, 32126, 32127, 32128, 32129, 32130, 32131, 32132, 32133, 32134, 32135, 32136, 32137, 32138, 32139, 32140, 32141, 32142, 32143, 32144, 32145, 32146, 32147, 32148, 32149, 32150, 32151, 32152, 32153, 32154, 32155, 32156, 32157, 32158, 32159, 32160, 32161, 32162, 32163, 32164, 32165, 32166, 32167, 32168, 32169, 32170, 32171, 32172, 32173, 32174, 32175, 32176, 32177, 32178, 32179, 32180, 32181, 32182, 32183, 32184, 32185, 32186, 32187, 32188, 32189, 32190, 32191, 32192, 32193, 32194, 32195, 32196, 32197, 32198, 32199, 32200, 32201, 32202, 32203, 32204, 32205, 32206, 32207, 32208, 32209, 32210, 32211, 32212, 32213, 32214, 32215, 32216, 32217, 32218, 32219, 32220, 32221, 32222, 32223, 32224, 32225, 32226, 32227, 32228, 32229, 32230, 32231, 32232, 32233, 32234, 32235, 32236, 32237, 32238, 32239, 32240, 32241, 32242, 32243, 32244, 32245, 32246, 32247, 32248, 32249, 32250, 32251, 32252, 32253, 32254, 32255, 32256, 32257, 32258, 32259, 32260, 32261, 32262, 32263, 32264, 32265, 32266, 32267, 32268, 32269, 32270, 32271, 32272, 32273, 32274, 32275, 32276, 32277, 32278, 32279, 32280, 32281, 32282, 32283, 32284, 32285, 32286, 32287, 32288, 32289, 32290, 32291, 32292, 32293, 32294, 32295, 32296, 32297, 32298, 32299, 32300, 32301, 32302, 32303, 32304, 32305, 32306, 32307, 32308, 32309, 32310, 32311, 32312, 32313, 32314, 32315, 32316, 32317, 32318, 32319, 32320, 32321, 32322, 32323, 32324, 32325, 32326, 32327, 32328, 32329, 32330, 32331, 32332, 32333, 32334, 32335, 32336, 32337, 32338, 32339, 32340, 32341, 32342, 32343, 32344, 32345, 32346, 32347, 32348, 32349, 32350, 32351, 32352, 32353, 32354, 32355, 32356, 32357, 32358, 32359, 32360, 32361, 32362, 32363, 32364, 32365, 32366, 32367, 32368, 32369, 32370, 32371, 32372, 32373, 32374, 32375, 32376, 32377, 32378, 32379, 32380, 32381, 32382, 32383, 32384, 32385, 32386, 32387, 32388, 32389, 32390, 32391, 32392, 32393, 32394, 32395, 32396, 32397, 32398, 32399, 32400, 32401, 32402, 32403, 32404, 32405, 32406, 32407, 32408, 32409, 32410, 32411, 32412, 32413, 32414, 32415, 32416, 32417, 32418, 32419, 32420, 32421, 32422, 32423, 32424, 32425, 32426, 32427, 32428, 32429, 32430, 32431, 32432, 32433, 32434, 32435, 32436, 32437, 32438, 32439, 32440, 32441, 32442, 32443, 32444, 32445, 32446, 32447, 32448, 32449, 32450, 32451, 32452, 32453, 32454, 32455, 32456, 32457, 32458, 32459, 32460, 32461, 32462, 32463, 32464, 32465, 32466, 32467, 32468, 32469, 32470, 32471, 32472, 32473, 32474, 32475, 32476, 32477, 32478, 32479, 32480, 32481, 32482, 32483, 32484, 32485, 32486, 32487, 32488, 32489, 32490, 32491, 32492, 32493, 32494, 32495, 32496, 32497, 32498, 32499, 32500, 32501, 32502, 32503, 32504, 32505, 32506, 32507, 32508, 32509, 32510, 32511, 32512, 32513, 32514, 32515, 32516, 32517, 32518, 32519, 32520, 32521, 32522, 32523, 32524, 32525, 32526, 32527, 32528, 32529, 32530, 32531, 32532, 32533, 32534, 32535, 32536, 32537, 32538, 32539, 32540, 32541, 32542, 32543, 32544, 32545, 32546, 32547, 32548, 32549, 32550, 32551, 32552, 32553, 32554, 32555, 32556, 32557, 32558, 32559, 32560, 32561, 32562, 32563, 32564, 32565, 32566, 32567, 32568, 32569, 32570, 32571, 32572, 32573, 32574, 32575, 32576, 32577, 32578, 32579, 32580, 32581, 32582, 32583, 32584, 32585, 32586, 32587, 32588, 32589, 32590, 32591, 32592, 32593, 32594, 32595, 32596, 32597, 32598, 32599, 32600, 32601, 32602, 32603, 32604, 32605, 32606, 32607, 32608, 32609, 32610, 32611, 32612, 32613, 32614, 32615, 32616, 32617, 32618, 32619, 32620, 32621, 32622, 32623, 32624, 32625, 32626, 32627, 32628, 32629, 32630, 32631, 32632, 32633, 32634, 32635, 32636, 32637, 32638, 32639, 32640, 32641, 32642, 32643, 32644, 32645, 32646, 32647, 32648, 32649, 32650, 32651, 32652, 32653, 32654, 32655, 32656, 32657, 32658, 32659, 32660, 32661, 32662, 32663, 32664, 32665, 32666, 32667, 32668, 32669, 32670, 32671, 32672, 32673, 32674, 32675, 32676, 32677, 32678, 32679, 32680, 32681, 32682, 32683, 32684, 32685, 32686, 32687, 32688, 32689, 32690, 32691, 32692, 32693, 32694, 32695, 32696, 32697, 32698, 32699, 32700, 32701, 32702, 32703, 32704, 32705, 32706, 32707, 32708, 32709, 32710, 32711, 32712, 32713, 32714, 32715, 32716, 32717, 32718, 32719, 32720, 32721, 32722, 32723, 32724, 32725, 32726, 32727, 32728, 32729, 32730, 32731, 32732, 32733, 32734, 32735, 32736, 32737, 32738, 32739, 32740, 32741, 32742, 32743, 32744, 32745, 32746, 32747, 32748, 32749, 32750, 32751, 32752, 32753, 32754, 32755, 32756, 32757, 32758, 32759, 32760, 32761, 32762, 32763, 32764, 32765, 32766, 32767, 32768, 32769, 32770, 32771, 32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781, 32782, 32783, 32784, 32785, 32786, 32787, 32788, 32789, 32790, 32791, 32792, 32793, 32794, 32795, 32796, 32797, 32798, 32799, 32800, 32801, 32802, 32803, 32804, 32805, 32806, 32807, 32808, 32809, 32810, 32811, 32812, 32813, 32814, 32815, 32816, 32817, 32818, 32819, 32820, 32821, 32822, 32823, 32824, 32825, 32826, 32827, 32828, 32829, 32830, 32831, 32832, 32833, 32834, 32835, 32836, 32837, 32838, 32839, 32840, 32841, 32842, 32843, 32844, 32845, 32846, 32847, 32848, 32849, 32850, 32851, 32852, 32853, 32854, 32855, 32856, 32857, 32858, 32859, 32860, 32861, 32862, 32863, 32864, 32865, 32866, 32867, 32868, 32869, 32870, 32871, 32872, 32873, 32874, 32875, 32876, 32877, 32878, 32879, 32880, 32881, 32882, 32883, 32884, 32885, 32886, 32887, 32888, 32889, 32890, 32891, 32892, 32893, 32894, 32895, 32896, 32897, 32898, 32899, 32900, 32901, 32902, 32903, 32904, 32905, 32906, 32907, 32908, 32909, 32910, 32911, 32912, 32913, 32914, 32915, 32916, 32917, 32918, 32919, 32920, 32921, 32922, 32923, 32924, 32925, 32926, 32927, 32928, 32929, 32930, 32931, 32932, 32933, 32934, 32935, 32936, 32937, 32938, 32939, 32940, 32941, 32942, 32943, 32944, 32945, 32946, 32947, 32948, 32949, 32950, 32951, 32952, 32953, 32954, 32955, 32956, 32957, 32958, 32959, 32960, 32961, 32962, 32963, 32964, 32965, 32966, 32967, 32968, 32969, 32970, 32971, 32972, 32973, 32974, 32975, 32976, 32977, 32978, 32979, 32980, 32981, 32982, 32983, 32984, 32985, 32986, 32987, 32988, 32989, 32990, 32991, 32992, 32993, 32994, 32995, 32996, 32997, 32998, 32999, 33e3, 33001, 33002, 33003, 33004, 33005, 33006, 33007, 33008, 33009, 33010, 33011, 33012, 33013, 33014, 33015, 33016, 33017, 33018, 33019, 33020, 33021, 33022, 33023, 33024, 33025, 33026, 33027, 33028, 33029, 33030, 33031, 33032, 33033, 33034, 33035, 33036, 33037, 33038, 33039, 33040, 33041, 33042, 33043, 33044, 33045, 33046, 33047, 33048, 33049, 33050, 33051, 33052, 33053, 33054, 33055, 33056, 33057, 33058, 33059, 33060, 33061, 33062, 33063, 33064, 33065, 33066, 33067, 33068, 33069, 33070, 33071, 33072, 33073, 33074, 33075, 33076, 33077, 33078, 33079, 33080, 33081, 33082, 33083, 33084, 33085, 33086, 33087, 33088, 33089, 33090, 33091, 33092, 33093, 33094, 33095, 33096, 33097, 33098, 33099, 33100, 33101, 33102, 33103, 33104, 33105, 33106, 33107, 33108, 33109, 33110, 33111, 33112, 33113, 33114, 33115, 33116, 33117, 33118, 33119, 33120, 33121, 33122, 33123, 33124, 33125, 33126, 33127, 33128, 33129, 33130, 33131, 33132, 33133, 33134, 33135, 33136, 33137, 33138, 33139, 33140, 33141, 33142, 33143, 33144, 33145, 33146, 33147, 33148, 33149, 33150, 33151, 33152, 33153, 33154, 33155, 33156, 33157, 33158, 33159, 33160, 33161, 33162, 33163, 33164, 33165, 33166, 33167, 33168, 33169, 33170, 33171, 33172, 33173, 33174, 33175, 33176, 33177, 33178, 33179, 33180, 33181, 33182, 33183, 33184, 33185, 33186, 33187, 33188, 33189, 33190, 33191, 33192, 33193, 33194, 33195, 33196, 33197, 33198, 33199, 33200, 33201, 33202, 33203, 33204, 33205, 33206, 33207, 33208, 33209, 33210, 33211, 33212, 33213, 33214, 33215, 33216, 33217, 33218, 33219, 33220, 33221, 33222, 33223, 33224, 33225, 33226, 33227, 33228, 33229, 33230, 33231, 33232, 33233, 33234, 33235, 33236, 33237, 33238, 33239, 33240, 33241, 33242, 33243, 33244, 33245, 33246, 33247, 33248, 33249, 33250, 33251, 33252, 33253, 33254, 33255, 33256, 33257, 33258, 33259, 33260, 33261, 33262, 33263, 33264, 33265, 33266, 33267, 33268, 33269, 33270, 33271, 33272, 33273, 33274, 33275, 33276, 33277, 33278, 33279, 33280, 33281, 33282, 33283, 33284, 33285, 33286, 33287, 33288, 33289, 33290, 33291, 33292, 33293, 33294, 33295, 33296, 33297, 33298, 33299, 33300, 33301, 33302, 33303, 33304, 33305, 33306, 33307, 33308, 33309, 33310, 33311, 33312, 33313, 33314, 33315, 33316, 33317, 33318, 33319, 33320, 33321, 33322, 33323, 33324, 33325, 33326, 33327, 33328, 33329, 33330, 33331, 33332, 33333, 33334, 33335, 33336, 33337, 33338, 33339, 33340, 33341, 33342, 33343, 33344, 33345, 33346, 33347, 33348, 33349, 33350, 33351, 33352, 33353, 33354, 33355, 33356, 33357, 33358, 33359, 33360, 33361, 33362, 33363, 33364, 33365, 33366, 33367, 33368, 33369, 33370, 33371, 33372, 33373, 33374, 33375, 33376, 33377, 33378, 33379, 33380, 33381, 33382, 33383, 33384, 33385, 33386, 33387, 33388, 33389, 33390, 33391, 33392, 33393, 33394, 33395, 33396, 33397, 33398, 33399, 33400, 33401, 33402, 33403, 33404, 33405, 33406, 33407, 33408, 33409, 33410, 33411, 33412, 33413, 33414, 33415, 33416, 33417, 33418, 33419, 33420, 33421, 33422, 33423, 33424, 33425, 33426, 33427, 33428, 33429, 33430, 33431, 33432, 33433, 33434, 33435, 33436, 33437, 33438, 33439, 33440, 33441, 33442, 33443, 33444, 33445, 33446, 33447, 33448, 33449, 33450, 33451, 33452, 33453, 33454, 33455, 33456, 33457, 33458, 33459, 33460, 33461, 33462, 33463, 33464, 33465, 33466, 33467, 33468, 33469, 33470, 33471, 33472, 33473, 33474, 33475, 33476, 33477, 33478, 33479, 33480, 33481, 33482, 33483, 33484, 33485, 33486, 33487, 33488, 33489, 33490, 33491, 33492, 33493, 33494, 33495, 33496, 33497, 33498, 33499, 33500, 33501, 33502, 33503, 33504, 33505, 33506, 33507, 33508, 33509, 33510, 33511, 33512, 33513, 33514, 33515, 33516, 33517, 33518, 33519, 33520, 33521, 33522, 33523, 33524, 33525, 33526, 33527, 33528, 33529, 33530, 33531, 33532, 33533, 33534, 33535, 33536, 33537, 33538, 33539, 33540, 33541, 33542, 33543, 33544, 33545, 33546, 33547, 33548, 33549, 33550, 33551, 33552, 33553, 33554, 33555, 33556, 33557, 33558, 33559, 33560, 33561, 33562, 33563, 33564, 33565, 33566, 33567, 33568, 33569, 33570, 33571, 33572, 33573, 33574, 33575, 33576, 33577, 33578, 33579, 33580, 33581, 33582, 33583, 33584, 33585, 33586, 33587, 33588, 33589, 33590, 33591, 33592, 33593, 33594, 33595, 33596, 33597, 33598, 33599, 33600, 33601, 33602, 33603, 33604, 33605, 33606, 33607, 33608, 33609, 33610, 33611, 33612, 33613, 33614, 33615, 33616, 33617, 33618, 33619, 33620, 33621, 33622, 33623, 33624, 33625, 33626, 33627, 33628, 33629, 33630, 33631, 33632, 33633, 33634, 33635, 33636, 33637, 33638, 33639, 33640, 33641, 33642, 33643, 33644, 33645, 33646, 33647, 33648, 33649, 33650, 33651, 33652, 33653, 33654, 33655, 33656, 33657, 33658, 33659, 33660, 33661, 33662, 33663, 33664, 33665, 33666, 33667, 33668, 33669, 33670, 33671, 33672, 33673, 33674, 33675, 33676, 33677, 33678, 33679, 33680, 33681, 33682, 33683, 33684, 33685, 33686, 33687, 33688, 33689, 33690, 33691, 33692, 33693, 33694, 33695, 33696, 33697, 33698, 33699, 33700, 33701, 33702, 33703, 33704, 33705, 33706, 33707, 33708, 33709, 33710, 33711, 33712, 33713, 33714, 33715, 33716, 33717, 33718, 33719, 33720, 33721, 33722, 33723, 33724, 33725, 33726, 33727, 33728, 33729, 33730, 33731, 33732, 33733, 33734, 33735, 33736, 33737, 33738, 33739, 33740, 33741, 33742, 33743, 33744, 33745, 33746, 33747, 33748, 33749, 33750, 33751, 33752, 33753, 33754, 33755, 33756, 33757, 33758, 33759, 33760, 33761, 33762, 33763, 33764, 33765, 33766, 33767, 33768, 33769, 33770, 33771, 33772, 33773, 33774, 33775, 33776, 33777, 33778, 33779, 33780, 33781, 33782, 33783, 33784, 33785, 33786, 33787, 33788, 33789, 33790, 33791, 33792, 33793, 33794, 33795, 33796, 33797, 33798, 33799, 33800, 33801, 33802, 33803, 33804, 33805, 33806, 33807, 33808, 33809, 33810, 33811, 33812, 33813, 33814, 33815, 33816, 33817, 33818, 33819, 33820, 33821, 33822, 33823, 33824, 33825, 33826, 33827, 33828, 33829, 33830, 33831, 33832, 33833, 33834, 33835, 33836, 33837, 33838, 33839, 33840, 33841, 33842, 33843, 33844, 33845, 33846, 33847, 33848, 33849, 33850, 33851, 33852, 33853, 33854, 33855, 33856, 33857, 33858, 33859, 33860, 33861, 33862, 33863, 33864, 33865, 33866, 33867, 33868, 33869, 33870, 33871, 33872, 33873, 33874, 33875, 33876, 33877, 33878, 33879, 33880, 33881, 33882, 33883, 33884, 33885, 33886, 33887, 33888, 33889, 33890, 33891, 33892, 33893, 33894, 33895, 33896, 33897, 33898, 33899, 33900, 33901, 33902, 33903, 33904, 33905, 33906, 33907, 33908, 33909, 33910, 33911, 33912, 33913, 33914, 33915, 33916, 33917, 33918, 33919, 33920, 33921, 33922, 33923, 33924, 33925, 33926, 33927, 33928, 33929, 33930, 33931, 33932, 33933, 33934, 33935, 33936, 33937, 33938, 33939, 33940, 33941, 33942, 33943, 33944, 33945, 33946, 33947, 33948, 33949, 33950, 33951, 33952, 33953, 33954, 33955, 33956, 33957, 33958, 33959, 33960, 33961, 33962, 33963, 33964, 33965, 33966, 33967, 33968, 33969, 33970, 33971, 33972, 33973, 33974, 33975, 33976, 33977, 33978, 33979, 33980, 33981, 33982, 33983, 33984, 33985, 33986, 33987, 33988, 33989, 33990, 33991, 33992, 33993, 33994, 33995, 33996, 33997, 33998, 33999, 34e3, 34001, 34002, 34003, 34004, 34005, 34006, 34007, 34008, 34009, 34010, 34011, 34012, 34013, 34014, 34015, 34016, 34017, 34018, 34019, 34020, 34021, 34022, 34023, 34024, 34025, 34026, 34027, 34028, 34029, 34030, 34031, 34032, 34033, 34034, 34035, 34036, 34037, 34038, 34039, 34040, 34041, 34042, 34043, 34044, 34045, 34046, 34047, 34048, 34049, 34050, 34051, 34052, 34053, 34054, 34055, 34056, 34057, 34058, 34059, 34060, 34061, 34062, 34063, 34064, 34065, 34066, 34067, 34068, 34069, 34070, 34071, 34072, 34073, 34074, 34075, 34076, 34077, 34078, 34079, 34080, 34081, 34082, 34083, 34084, 34085, 34086, 34087, 34088, 34089, 34090, 34091, 34092, 34093, 34094, 34095, 34096, 34097, 34098, 34099, 34100, 34101, 34102, 34103, 34104, 34105, 34106, 34107, 34108, 34109, 34110, 34111, 34112, 34113, 34114, 34115, 34116, 34117, 34118, 34119, 34120, 34121, 34122, 34123, 34124, 34125, 34126, 34127, 34128, 34129, 34130, 34131, 34132, 34133, 34134, 34135, 34136, 34137, 34138, 34139, 34140, 34141, 34142, 34143, 34144, 34145, 34146, 34147, 34148, 34149, 34150, 34151, 34152, 34153, 34154, 34155, 34156, 34157, 34158, 34159, 34160, 34161, 34162, 34163, 34164, 34165, 34166, 34167, 34168, 34169, 34170, 34171, 34172, 34173, 34174, 34175, 34176, 34177, 34178, 34179, 34180, 34181, 34182, 34183, 34184, 34185, 34186, 34187, 34188, 34189, 34190, 34191, 34192, 34193, 34194, 34195, 34196, 34197, 34198, 34199, 34200, 34201, 34202, 34203, 34204, 34205, 34206, 34207, 34208, 34209, 34210, 34211, 34212, 34213, 34214, 34215, 34216, 34217, 34218, 34219, 34220, 34221, 34222, 34223, 34224, 34225, 34226, 34227, 34228, 34229, 34230, 34231, 34232, 34233, 34234, 34235, 34236, 34237, 34238, 34239, 34240, 34241, 34242, 34243, 34244, 34245, 34246, 34247, 34248, 34249, 34250, 34251, 34252, 34253, 34254, 34255, 34256, 34257, 34258, 34259, 34260, 34261, 34262, 34263, 34264, 34265, 34266, 34267, 34268, 34269, 34270, 34271, 34272, 34273, 34274, 34275, 34276, 34277, 34278, 34279, 34280, 34281, 34282, 34283, 34284, 34285, 34286, 34287, 34288, 34289, 34290, 34291, 34292, 34293, 34294, 34295, 34296, 34297, 34298, 34299, 34300, 34301, 34302, 34303, 34304, 34305, 34306, 34307, 34308, 34309, 34310, 34311, 34312, 34313, 34314, 34315, 34316, 34317, 34318, 34319, 34320, 34321, 34322, 34323, 34324, 34325, 34326, 34327, 34328, 34329, 34330, 34331, 34332, 34333, 34334, 34335, 34336, 34337, 34338, 34339, 34340, 34341, 34342, 34343, 34344, 34345, 34346, 34347, 34348, 34349, 34350, 34351, 34352, 34353, 34354, 34355, 34356, 34357, 34358, 34359, 34360, 34361, 34362, 34363, 34364, 34365, 34366, 34367, 34368, 34369, 34370, 34371, 34372, 34373, 34374, 34375, 34376, 34377, 34378, 34379, 34380, 34381, 34382, 34383, 34384, 34385, 34386, 34387, 34388, 34389, 34390, 34391, 34392, 34393, 34394, 34395, 34396, 34397, 34398, 34399, 34400, 34401, 34402, 34403, 34404, 34405, 34406, 34407, 34408, 34409, 34410, 34411, 34412, 34413, 34414, 34415, 34416, 34417, 34418, 34419, 34420, 34421, 34422, 34423, 34424, 34425, 34426, 34427, 34428, 34429, 34430, 34431, 34432, 34433, 34434, 34435, 34436, 34437, 34438, 34439, 34440, 34441, 34442, 34443, 34444, 34445, 34446, 34447, 34448, 34449, 34450, 34451, 34452, 34453, 34454, 34455, 34456, 34457, 34458, 34459, 34460, 34461, 34462, 34463, 34464, 34465, 34466, 34467, 34468, 34469, 34470, 34471, 34472, 34473, 34474, 34475, 34476, 34477, 34478, 34479, 34480, 34481, 34482, 34483, 34484, 34485, 34486, 34487, 34488, 34489, 34490, 34491, 34492, 34493, 34494, 34495, 34496, 34497, 34498, 34499, 34500, 34501, 34502, 34503, 34504, 34505, 34506, 34507, 34508, 34509, 34510, 34511, 34512, 34513, 34514, 34515, 34516, 34517, 34518, 34519, 34520, 34521, 34522, 34523, 34524, 34525, 34526, 34527, 34528, 34529, 34530, 34531, 34532, 34533, 34534, 34535, 34536, 34537, 34538, 34539, 34540, 34541, 34542, 34543, 34544, 34545, 34546, 34547, 34548, 34549, 34550, 34551, 34552, 34553, 34554, 34555, 34556, 34557, 34558, 34559, 34560, 34561, 34562, 34563, 34564, 34565, 34566, 34567, 34568, 34569, 34570, 34571, 34572, 34573, 34574, 34575, 34576, 34577, 34578, 34579, 34580, 34581, 34582, 34583, 34584, 34585, 34586, 34587, 34588, 34589, 34590, 34591, 34592, 34593, 34594, 34595, 34596, 34597, 34598, 34599, 34600, 34601, 34602, 34603, 34604, 34605, 34606, 34607, 34608, 34609, 34610, 34611, 34612, 34613, 34614, 34615, 34616, 34617, 34618, 34619, 34620, 34621, 34622, 34623, 34624, 34625, 34626, 34627, 34628, 34629, 34630, 34631, 34632, 34633, 34634, 34635, 34636, 34637, 34638, 34639, 34640, 34641, 34642, 34643, 34644, 34645, 34646, 34647, 34648, 34649, 34650, 34651, 34652, 34653, 34654, 34655, 34656, 34657, 34658, 34659, 34660, 34661, 34662, 34663, 34664, 34665, 34666, 34667, 34668, 34669, 34670, 34671, 34672, 34673, 34674, 34675, 34676, 34677, 34678, 34679, 34680, 34681, 34682, 34683, 34684, 34685, 34686, 34687, 34688, 34689, 34690, 34691, 34692, 34693, 34694, 34695, 34696, 34697, 34698, 34699, 34700, 34701, 34702, 34703, 34704, 34705, 34706, 34707, 34708, 34709, 34710, 34711, 34712, 34713, 34714, 34715, 34716, 34717, 34718, 34719, 34720, 34721, 34722, 34723, 34724, 34725, 34726, 34727, 34728, 34729, 34730, 34731, 34732, 34733, 34734, 34735, 34736, 34737, 34738, 34739, 34740, 34741, 34742, 34743, 34744, 34745, 34746, 34747, 34748, 34749, 34750, 34751, 34752, 34753, 34754, 34755, 34756, 34757, 34758, 34759, 34760, 34761, 34762, 34763, 34764, 34765, 34766, 34767, 34768, 34769, 34770, 34771, 34772, 34773, 34774, 34775, 34776, 34777, 34778, 34779, 34780, 34781, 34782, 34783, 34784, 34785, 34786, 34787, 34788, 34789, 34790, 34791, 34792, 34793, 34794, 34795, 34796, 34797, 34798, 34799, 34800, 34801, 34802, 34803, 34804, 34805, 34806, 34807, 34808, 34809, 34810, 34811, 34812, 34813, 34814, 34815, 34816, 34817, 34818, 34819, 34820, 34821, 34822, 34823, 34824, 34825, 34826, 34827, 34828, 34829, 34830, 34831, 34832, 34833, 34834, 34835, 34836, 34837, 34838, 34839, 34840, 34841, 34842, 34843, 34844, 34845, 34846, 34847, 34848, 34849, 34850, 34851, 34852, 34853, 34854, 34855, 34856, 34857, 34858, 34859, 34860, 34861, 34862, 34863, 34864, 34865, 34866, 34867, 34868, 34869, 34870, 34871, 34872, 34873, 34874, 34875, 34876, 34877, 34878, 34879, 34880, 34881, 34882, 34883, 34884, 34885, 34886, 34887, 34888, 34889, 34890, 34891, 34892, 34893, 34894, 34895, 34896, 34897, 34898, 34899, 34900, 34901, 34902, 34903, 34904, 34905, 34906, 34907, 34908, 34909, 34910, 34911, 34912, 34913, 34914, 34915, 34916, 34917, 34918, 34919, 34920, 34921, 34922, 34923, 34924, 34925, 34926, 34927, 34928, 34929, 34930, 34931, 34932, 34933, 34934, 34935, 34936, 34937, 34938, 34939, 34940, 34941, 34942, 34943, 34944, 34945, 34946, 34947, 34948, 34949, 34950, 34951, 34952, 34953, 34954, 34955, 34956, 34957, 34958, 34959, 34960, 34961, 34962, 34963, 34964, 34965, 34966, 34967, 34968, 34969, 34970, 34971, 34972, 34973, 34974, 34975, 34976, 34977, 34978, 34979, 34980, 34981, 34982, 34983, 34984, 34985, 34986, 34987, 34988, 34989, 34990, 34991, 34992, 34993, 34994, 34995, 34996, 34997, 34998, 34999, 35e3, 35001, 35002, 35003, 35004, 35005, 35006, 35007, 35008, 35009, 35010, 35011, 35012, 35013, 35014, 35015, 35016, 35017, 35018, 35019, 35020, 35021, 35022, 35023, 35024, 35025, 35026, 35027, 35028, 35029, 35030, 35031, 35032, 35033, 35034, 35035, 35036, 35037, 35038, 35039, 35040, 35041, 35042, 35043, 35044, 35045, 35046, 35047, 35048, 35049, 35050, 35051, 35052, 35053, 35054, 35055, 35056, 35057, 35058, 35059, 35060, 35061, 35062, 35063, 35064, 35065, 35066, 35067, 35068, 35069, 35070, 35071, 35072, 35073, 35074, 35075, 35076, 35077, 35078, 35079, 35080, 35081, 35082, 35083, 35084, 35085, 35086, 35087, 35088, 35089, 35090, 35091, 35092, 35093, 35094, 35095, 35096, 35097, 35098, 35099, 35100, 35101, 35102, 35103, 35104, 35105, 35106, 35107, 35108, 35109, 35110, 35111, 35112, 35113, 35114, 35115, 35116, 35117, 35118, 35119, 35120, 35121, 35122, 35123, 35124, 35125, 35126, 35127, 35128, 35129, 35130, 35131, 35132, 35133, 35134, 35135, 35136, 35137, 35138, 35139, 35140, 35141, 35142, 35143, 35144, 35145, 35146, 35147, 35148, 35149, 35150, 35151, 35152, 35153, 35154, 35155, 35156, 35157, 35158, 35159, 35160, 35161, 35162, 35163, 35164, 35165, 35166, 35167, 35168, 35169, 35170, 35171, 35172, 35173, 35174, 35175, 35176, 35177, 35178, 35179, 35180, 35181, 35182, 35183, 35184, 35185, 35186, 35187, 35188, 35189, 35190, 35191, 35192, 35193, 35194, 35195, 35196, 35197, 35198, 35199, 35200, 35201, 35202, 35203, 35204, 35205, 35206, 35207, 35208, 35209, 35210, 35211, 35212, 35213, 35214, 35215, 35216, 35217, 35218, 35219, 35220, 35221, 35222, 35223, 35224, 35225, 35226, 35227, 35228, 35229, 35230, 35231, 35232, 35233, 35234, 35235, 35236, 35237, 35238, 35239, 35240, 35241, 35242, 35243, 35244, 35245, 35246, 35247, 35248, 35249, 35250, 35251, 35252, 35253, 35254, 35255, 35256, 35257, 35258, 35259, 35260, 35261, 35262, 35263, 35264, 35265, 35266, 35267, 35268, 35269, 35270, 35271, 35272, 35273, 35274, 35275, 35276, 35277, 35278, 35279, 35280, 35281, 35282, 35283, 35284, 35285, 35286, 35287, 35288, 35289, 35290, 35291, 35292, 35293, 35294, 35295, 35296, 35297, 35298, 35299, 35300, 35301, 35302, 35303, 35304, 35305, 35306, 35307, 35308, 35309, 35310, 35311, 35312, 35313, 35314, 35315, 35316, 35317, 35318, 35319, 35320, 35321, 35322, 35323, 35324, 35325, 35326, 35327, 35328, 35329, 35330, 35331, 35332, 35333, 35334, 35335, 35336, 35337, 35338, 35339, 35340, 35341, 35342, 35343, 35344, 35345, 35346, 35347, 35348, 35349, 35350, 35351, 35352, 35353, 35354, 35355, 35356, 35357, 35358, 35359, 35360, 35361, 35362, 35363, 35364, 35365, 35366, 35367, 35368, 35369, 35370, 35371, 35372, 35373, 35374, 35375, 35376, 35377, 35378, 35379, 35380, 35381, 35382, 35383, 35384, 35385, 35386, 35387, 35388, 35389, 35390, 35391, 35392, 35393, 35394, 35395, 35396, 35397, 35398, 35399, 35400, 35401, 35402, 35403, 35404, 35405, 35406, 35407, 35408, 35409, 35410, 35411, 35412, 35413, 35414, 35415, 35416, 35417, 35418, 35419, 35420, 35421, 35422, 35423, 35424, 35425, 35426, 35427, 35428, 35429, 35430, 35431, 35432, 35433, 35434, 35435, 35436, 35437, 35438, 35439, 35440, 35441, 35442, 35443, 35444, 35445, 35446, 35447, 35448, 35449, 35450, 35451, 35452, 35453, 35454, 35455, 35456, 35457, 35458, 35459, 35460, 35461, 35462, 35463, 35464, 35465, 35466, 35467, 35468, 35469, 35470, 35471, 35472, 35473, 35474, 35475, 35476, 35477, 35478, 35479, 35480, 35481, 35482, 35483, 35484, 35485, 35486, 35487, 35488, 35489, 35490, 35491, 35492, 35493, 35494, 35495, 35496, 35497, 35498, 35499, 35500, 35501, 35502, 35503, 35504, 35505, 35506, 35507, 35508, 35509, 35510, 35511, 35512, 35513, 35514, 35515, 35516, 35517, 35518, 35519, 35520, 35521, 35522, 35523, 35524, 35525, 35526, 35527, 35528, 35529, 35530, 35531, 35532, 35533, 35534, 35535, 35536, 35537, 35538, 35539, 35540, 35541, 35542, 35543, 35544, 35545, 35546, 35547, 35548, 35549, 35550, 35551, 35552, 35553, 35554, 35555, 35556, 35557, 35558, 35559, 35560, 35561, 35562, 35563, 35564, 35565, 35566, 35567, 35568, 35569, 35570, 35571, 35572, 35573, 35574, 35575, 35576, 35577, 35578, 35579, 35580, 35581, 35582, 35583, 35584, 35585, 35586, 35587, 35588, 35589, 35590, 35591, 35592, 35593, 35594, 35595, 35596, 35597, 35598, 35599, 35600, 35601, 35602, 35603, 35604, 35605, 35606, 35607, 35608, 35609, 35610, 35611, 35612, 35613, 35614, 35615, 35616, 35617, 35618, 35619, 35620, 35621, 35622, 35623, 35624, 35625, 35626, 35627, 35628, 35629, 35630, 35631, 35632, 35633, 35634, 35635, 35636, 35637, 35638, 35639, 35640, 35641, 35642, 35643, 35644, 35645, 35646, 35647, 35648, 35649, 35650, 35651, 35652, 35653, 35654, 35655, 35656, 35657, 35658, 35659, 35660, 35661, 35662, 35663, 35664, 35665, 35666, 35667, 35668, 35669, 35670, 35671, 35672, 35673, 35674, 35675, 35676, 35677, 35678, 35679, 35680, 35681, 35682, 35683, 35684, 35685, 35686, 35687, 35688, 35689, 35690, 35691, 35692, 35693, 35694, 35695, 35696, 35697, 35698, 35699, 35700, 35701, 35702, 35703, 35704, 35705, 35706, 35707, 35708, 35709, 35710, 35711, 35712, 35713, 35714, 35715, 35716, 35717, 35718, 35719, 35720, 35721, 35722, 35723, 35724, 35725, 35726, 35727, 35728, 35729, 35730, 35731, 35732, 35733, 35734, 35735, 35736, 35737, 35738, 35739, 35740, 35741, 35742, 35743, 35744, 35745, 35746, 35747, 35748, 35749, 35750, 35751, 35752, 35753, 35754, 35755, 35756, 35757, 35758, 35759, 35760, 35761, 35762, 35763, 35764, 35765, 35766, 35767, 35768, 35769, 35770, 35771, 35772, 35773, 35774, 35775, 35776, 35777, 35778, 35779, 35780, 35781, 35782, 35783, 35784, 35785, 35786, 35787, 35788, 35789, 35790, 35791, 35792, 35793, 35794, 35795, 35796, 35797, 35798, 35799, 35800, 35801, 35802, 35803, 35804, 35805, 35806, 35807, 35808, 35809, 35810, 35811, 35812, 35813, 35814, 35815, 35816, 35817, 35818, 35819, 35820, 35821, 35822, 35823, 35824, 35825, 35826, 35827, 35828, 35829, 35830, 35831, 35832, 35833, 35834, 35835, 35836, 35837, 35838, 35839, 35840, 35841, 35842, 35843, 35844, 35845, 35846, 35847, 35848, 35849, 35850, 35851, 35852, 35853, 35854, 35855, 35856, 35857, 35858, 35859, 35860, 35861, 35862, 35863, 35864, 35865, 35866, 35867, 35868, 35869, 35870, 35871, 35872, 35873, 35874, 35875, 35876, 35877, 35878, 35879, 35880, 35881, 35882, 35883, 35884, 35885, 35886, 35887, 35888, 35889, 35890, 35891, 35892, 35893, 35894, 35895, 35896, 35897, 35898, 35899, 35900, 35901, 35902, 35903, 35904, 35905, 35906, 35907, 35908, 35909, 35910, 35911, 35912, 35913, 35914, 35915, 35916, 35917, 35918, 35919, 35920, 35921, 35922, 35923, 35924, 35925, 35926, 35927, 35928, 35929, 35930, 35931, 35932, 35933, 35934, 35935, 35936, 35937, 35938, 35939, 35940, 35941, 35942, 35943, 35944, 35945, 35946, 35947, 35948, 35949, 35950, 35951, 35952, 35953, 35954, 35955, 35956, 35957, 35958, 35959, 35960, 35961, 35962, 35963, 35964, 35965, 35966, 35967, 35968, 35969, 35970, 35971, 35972, 35973, 35974, 35975, 35976, 35977, 35978, 35979, 35980, 35981, 35982, 35983, 35984, 35985, 35986, 35987, 35988, 35989, 35990, 35991, 35992, 35993, 35994, 35995, 35996, 35997, 35998, 35999, 36e3, 36001, 36002, 36003, 36004, 36005, 36006, 36007, 36008, 36009, 36010, 36011, 36012, 36013, 36014, 36015, 36016, 36017, 36018, 36019, 36020, 36021, 36022, 36023, 36024, 36025, 36026, 36027, 36028, 36029, 36030, 36031, 36032, 36033, 36034, 36035, 36036, 36037, 36038, 36039, 36040, 36041, 36042, 36043, 36044, 36045, 36046, 36047, 36048, 36049, 36050, 36051, 36052, 36053, 36054, 36055, 36056, 36057, 36058, 36059, 36060, 36061, 36062, 36063, 36064, 36065, 36066, 36067, 36068, 36069, 36070, 36071, 36072, 36073, 36074, 36075, 36076, 36077, 36078, 36079, 36080, 36081, 36082, 36083, 36084, 36085, 36086, 36087, 36088, 36089, 36090, 36091, 36092, 36093, 36094, 36095, 36096, 36097, 36098, 36099, 36100, 36101, 36102, 36103, 36104, 36105, 36106, 36107, 36108, 36109, 36110, 36111, 36112, 36113, 36114, 36115, 36116, 36117, 36118, 36119, 36120, 36121, 36122, 36123, 36124, 36125, 36126, 36127, 36128, 36129, 36130, 36131, 36132, 36133, 36134, 36135, 36136, 36137, 36138, 36139, 36140, 36141, 36142, 36143, 36144, 36145, 36146, 36147, 36148, 36149, 36150, 36151, 36152, 36153, 36154, 36155, 36156, 36157, 36158, 36159, 36160, 36161, 36162, 36163, 36164, 36165, 36166, 36167, 36168, 36169, 36170, 36171, 36172, 36173, 36174, 36175, 36176, 36177, 36178, 36179, 36180, 36181, 36182, 36183, 36184, 36185, 36186, 36187, 36188, 36189, 36190, 36191, 36192, 36193, 36194, 36195, 36196, 36197, 36198, 36199, 36200, 36201, 36202, 36203, 36204, 36205, 36206, 36207, 36208, 36209, 36210, 36211, 36212, 36213, 36214, 36215, 36216, 36217, 36218, 36219, 36220, 36221, 36222, 36223, 36224, 36225, 36226, 36227, 36228, 36229, 36230, 36231, 36232, 36233, 36234, 36235, 36236, 36237, 36238, 36239, 36240, 36241, 36242, 36243, 36244, 36245, 36246, 36247, 36248, 36249, 36250, 36251, 36252, 36253, 36254, 36255, 36256, 36257, 36258, 36259, 36260, 36261, 36262, 36263, 36264, 36265, 36266, 36267, 36268, 36269, 36270, 36271, 36272, 36273, 36274, 36275, 36276, 36277, 36278, 36279, 36280, 36281, 36282, 36283, 36284, 36285, 36286, 36287, 36288, 36289, 36290, 36291, 36292, 36293, 36294, 36295, 36296, 36297, 36298, 36299, 36300, 36301, 36302, 36303, 36304, 36305, 36306, 36307, 36308, 36309, 36310, 36311, 36312, 36313, 36314, 36315, 36316, 36317, 36318, 36319, 36320, 36321, 36322, 36323, 36324, 36325, 36326, 36327, 36328, 36329, 36330, 36331, 36332, 36333, 36334, 36335, 36336, 36337, 36338, 36339, 36340, 36341, 36342, 36343, 36344, 36345, 36346, 36347, 36348, 36349, 36350, 36351, 36352, 36353, 36354, 36355, 36356, 36357, 36358, 36359, 36360, 36361, 36362, 36363, 36364, 36365, 36366, 36367, 36368, 36369, 36370, 36371, 36372, 36373, 36374, 36375, 36376, 36377, 36378, 36379, 36380, 36381, 36382, 36383, 36384, 36385, 36386, 36387, 36388, 36389, 36390, 36391, 36392, 36393, 36394, 36395, 36396, 36397, 36398, 36399, 36400, 36401, 36402, 36403, 36404, 36405, 36406, 36407, 36408, 36409, 36410, 36411, 36412, 36413, 36414, 36415, 36416, 36417, 36418, 36419, 36420, 36421, 36422, 36423, 36424, 36425, 36426, 36427, 36428, 36429, 36430, 36431, 36432, 36433, 36434, 36435, 36436, 36437, 36438, 36439, 36440, 36441, 36442, 36443, 36444, 36445, 36446, 36447, 36448, 36449, 36450, 36451, 36452, 36453, 36454, 36455, 36456, 36457, 36458, 36459, 36460, 36461, 36462, 36463, 36464, 36465, 36466, 36467, 36468, 36469, 36470, 36471, 36472, 36473, 36474, 36475, 36476, 36477, 36478, 36479, 36480, 36481, 36482, 36483, 36484, 36485, 36486, 36487, 36488, 36489, 36490, 36491, 36492, 36493, 36494, 36495, 36496, 36497, 36498, 36499, 36500, 36501, 36502, 36503, 36504, 36505, 36506, 36507, 36508, 36509, 36510, 36511, 36512, 36513, 36514, 36515, 36516, 36517, 36518, 36519, 36520, 36521, 36522, 36523, 36524, 36525, 36526, 36527, 36528, 36529, 36530, 36531, 36532, 36533, 36534, 36535, 36536, 36537, 36538, 36539, 36540, 36541, 36542, 36543, 36544, 36545, 36546, 36547, 36548, 36549, 36550, 36551, 36552, 36553, 36554, 36555, 36556, 36557, 36558, 36559, 36560, 36561, 36562, 36563, 36564, 36565, 36566, 36567, 36568, 36569, 36570, 36571, 36572, 36573, 36574, 36575, 36576, 36577, 36578, 36579, 36580, 36581, 36582, 36583, 36584, 36585, 36586, 36587, 36588, 36589, 36590, 36591, 36592, 36593, 36594, 36595, 36596, 36597, 36598, 36599, 36600, 36601, 36602, 36603, 36604, 36605, 36606, 36607, 36608, 36609, 36610, 36611, 36612, 36613, 36614, 36615, 36616, 36617, 36618, 36619, 36620, 36621, 36622, 36623, 36624, 36625, 36626, 36627, 36628, 36629, 36630, 36631, 36632, 36633, 36634, 36635, 36636, 36637, 36638, 36639, 36640, 36641, 36642, 36643, 36644, 36645, 36646, 36647, 36648, 36649, 36650, 36651, 36652, 36653, 36654, 36655, 36656, 36657, 36658, 36659, 36660, 36661, 36662, 36663, 36664, 36665, 36666, 36667, 36668, 36669, 36670, 36671, 36672, 36673, 36674, 36675, 36676, 36677, 36678, 36679, 36680, 36681, 36682, 36683, 36684, 36685, 36686, 36687, 36688, 36689, 36690, 36691, 36692, 36693, 36694, 36695, 36696, 36697, 36698, 36699, 36700, 36701, 36702, 36703, 36704, 36705, 36706, 36707, 36708, 36709, 36710, 36711, 36712, 36713, 36714, 36715, 36716, 36717, 36718, 36719, 36720, 36721, 36722, 36723, 36724, 36725, 36726, 36727, 36728, 36729, 36730, 36731, 36732, 36733, 36734, 36735, 36736, 36737, 36738, 36739, 36740, 36741, 36742, 36743, 36744, 36745, 36746, 36747, 36748, 36749, 36750, 36751, 36752, 36753, 36754, 36755, 36756, 36757, 36758, 36759, 36760, 36761, 36762, 36763, 36764, 36765, 36766, 36767, 36768, 36769, 36770, 36771, 36772, 36773, 36774, 36775, 36776, 36777, 36778, 36779, 36780, 36781, 36782, 36783, 36784, 36785, 36786, 36787, 36788, 36789, 36790, 36791, 36792, 36793, 36794, 36795, 36796, 36797, 36798, 36799, 36800, 36801, 36802, 36803, 36804, 36805, 36806, 36807, 36808, 36809, 36810, 36811, 36812, 36813, 36814, 36815, 36816, 36817, 36818, 36819, 36820, 36821, 36822, 36823, 36824, 36825, 36826, 36827, 36828, 36829, 36830, 36831, 36832, 36833, 36834, 36835, 36836, 36837, 36838, 36839, 36840, 36841, 36842, 36843, 36844, 36845, 36846, 36847, 36848, 36849, 36850, 36851, 36852, 36853, 36854, 36855, 36856, 36857, 36858, 36859, 36860, 36861, 36862, 36863, 36864, 36865, 36866, 36867, 36868, 36869, 36870, 36871, 36872, 36873, 36874, 36875, 36876, 36877, 36878, 36879, 36880, 36881, 36882, 36883, 36884, 36885, 36886, 36887, 36888, 36889, 36890, 36891, 36892, 36893, 36894, 36895, 36896, 36897, 36898, 36899, 36900, 36901, 36902, 36903, 36904, 36905, 36906, 36907, 36908, 36909, 36910, 36911, 36912, 36913, 36914, 36915, 36916, 36917, 36918, 36919, 36920, 36921, 36922, 36923, 36924, 36925, 36926, 36927, 36928, 36929, 36930, 36931, 36932, 36933, 36934, 36935, 36936, 36937, 36938, 36939, 36940, 36941, 36942, 36943, 36944, 36945, 36946, 36947, 36948, 36949, 36950, 36951, 36952, 36953, 36954, 36955, 36956, 36957, 36958, 36959, 36960, 36961, 36962, 36963, 36964, 36965, 36966, 36967, 36968, 36969, 36970, 36971, 36972, 36973, 36974, 36975, 36976, 36977, 36978, 36979, 36980, 36981, 36982, 36983, 36984, 36985, 36986, 36987, 36988, 36989, 36990, 36991, 36992, 36993, 36994, 36995, 36996, 36997, 36998, 36999, 37e3, 37001, 37002, 37003, 37004, 37005, 37006, 37007, 37008, 37009, 37010, 37011, 37012, 37013, 37014, 37015, 37016, 37017, 37018, 37019, 37020, 37021, 37022, 37023, 37024, 37025, 37026, 37027, 37028, 37029, 37030, 37031, 37032, 37033, 37034, 37035, 37036, 37037, 37038, 37039, 37040, 37041, 37042, 37043, 37044, 37045, 37046, 37047, 37048, 37049, 37050, 37051, 37052, 37053, 37054, 37055, 37056, 37057, 37058, 37059, 37060, 37061, 37062, 37063, 37064, 37065, 37066, 37067, 37068, 37069, 37070, 37071, 37072, 37073, 37074, 37075, 37076, 37077, 37078, 37079, 37080, 37081, 37082, 37083, 37084, 37085, 37086, 37087, 37088, 37089, 37090, 37091, 37092, 37093, 37094, 37095, 37096, 37097, 37098, 37099, 37100, 37101, 37102, 37103, 37104, 37105, 37106, 37107, 37108, 37109, 37110, 37111, 37112, 37113, 37114, 37115, 37116, 37117, 37118, 37119, 37120, 37121, 37122, 37123, 37124, 37125, 37126, 37127, 37128, 37129, 37130, 37131, 37132, 37133, 37134, 37135, 37136, 37137, 37138, 37139, 37140, 37141, 37142, 37143, 37144, 37145, 37146, 37147, 37148, 37149, 37150, 37151, 37152, 37153, 37154, 37155, 37156, 37157, 37158, 37159, 37160, 37161, 37162, 37163, 37164, 37165, 37166, 37167, 37168, 37169, 37170, 37171, 37172, 37173, 37174, 37175, 37176, 37177, 37178, 37179, 37180, 37181, 37182, 37183, 37184, 37185, 37186, 37187, 37188, 37189, 37190, 37191, 37192, 37193, 37194, 37195, 37196, 37197, 37198, 37199, 37200, 37201, 37202, 37203, 37204, 37205, 37206, 37207, 37208, 37209, 37210, 37211, 37212, 37213, 37214, 37215, 37216, 37217, 37218, 37219, 37220, 37221, 37222, 37223, 37224, 37225, 37226, 37227, 37228, 37229, 37230, 37231, 37232, 37233, 37234, 37235, 37236, 37237, 37238, 37239, 37240, 37241, 37242, 37243, 37244, 37245, 37246, 37247, 37248, 37249, 37250, 37251, 37252, 37253, 37254, 37255, 37256, 37257, 37258, 37259, 37260, 37261, 37262, 37263, 37264, 37265, 37266, 37267, 37268, 37269, 37270, 37271, 37272, 37273, 37274, 37275, 37276, 37277, 37278, 37279, 37280, 37281, 37282, 37283, 37284, 37285, 37286, 37287, 37288, 37289, 37290, 37291, 37292, 37293, 37294, 37295, 37296, 37297, 37298, 37299, 37300, 37301, 37302, 37303, 37304, 37305, 37306, 37307, 37308, 37309, 37310, 37311, 37312, 37313, 37314, 37315, 37316, 37317, 37318, 37319, 37320, 37321, 37322, 37323, 37324, 37325, 37326, 37327, 37328, 37329, 37330, 37331, 37332, 37333, 37334, 37335, 37336, 37337, 37338, 37339, 37340, 37341, 37342, 37343, 37344, 37345, 37346, 37347, 37348, 37349, 37350, 37351, 37352, 37353, 37354, 37355, 37356, 37357, 37358, 37359, 37360, 37361, 37362, 37363, 37364, 37365, 37366, 37367, 37368, 37369, 37370, 37371, 37372, 37373, 37374, 37375, 37376, 37377, 37378, 37379, 37380, 37381, 37382, 37383, 37384, 37385, 37386, 37387, 37388, 37389, 37390, 37391, 37392, 37393, 37394, 37395, 37396, 37397, 37398, 37399, 37400, 37401, 37402, 37403, 37404, 37405, 37406, 37407, 37408, 37409, 37410, 37411, 37412, 37413, 37414, 37415, 37416, 37417, 37418, 37419, 37420, 37421, 37422, 37423, 37424, 37425, 37426, 37427, 37428, 37429, 37430, 37431, 37432, 37433, 37434, 37435, 37436, 37437, 37438, 37439, 37440, 37441, 37442, 37443, 37444, 37445, 37446, 37447, 37448, 37449, 37450, 37451, 37452, 37453, 37454, 37455, 37456, 37457, 37458, 37459, 37460, 37461, 37462, 37463, 37464, 37465, 37466, 37467, 37468, 37469, 37470, 37471, 37472, 37473, 37474, 37475, 37476, 37477, 37478, 37479, 37480, 37481, 37482, 37483, 37484, 37485, 37486, 37487, 37488, 37489, 37490, 37491, 37492, 37493, 37494, 37495, 37496, 37497, 37498, 37499, 37500, 37501, 37502, 37503, 37504, 37505, 37506, 37507, 37508, 37509, 37510, 37511, 37512, 37513, 37514, 37515, 37516, 37517, 37518, 37519, 37520, 37521, 37522, 37523, 37524, 37525, 37526, 37527, 37528, 37529, 37530, 37531, 37532, 37533, 37534, 37535, 37536, 37537, 37538, 37539, 37540, 37541, 37542, 37543, 37544, 37545, 37546, 37547, 37548, 37549, 37550, 37551, 37552, 37553, 37554, 37555, 37556, 37557, 37558, 37559, 37560, 37561, 37562, 37563, 37564, 37565, 37566, 37567, 37568, 37569, 37570, 37571, 37572, 37573, 37574, 37575, 37576, 37577, 37578, 37579, 37580, 37581, 37582, 37583, 37584, 37585, 37586, 37587, 37588, 37589, 37590, 37591, 37592, 37593, 37594, 37595, 37596, 37597, 37598, 37599, 37600, 37601, 37602, 37603, 37604, 37605, 37606, 37607, 37608, 37609, 37610, 37611, 37612, 37613, 37614, 37615, 37616, 37617, 37618, 37619, 37620, 37621, 37622, 37623, 37624, 37625, 37626, 37627, 37628, 37629, 37630, 37631, 37632, 37633, 37634, 37635, 37636, 37637, 37638, 37639, 37640, 37641, 37642, 37643, 37644, 37645, 37646, 37647, 37648, 37649, 37650, 37651, 37652, 37653, 37654, 37655, 37656, 37657, 37658, 37659, 37660, 37661, 37662, 37663, 37664, 37665, 37666, 37667, 37668, 37669, 37670, 37671, 37672, 37673, 37674, 37675, 37676, 37677, 37678, 37679, 37680, 37681, 37682, 37683, 37684, 37685, 37686, 37687, 37688, 37689, 37690, 37691, 37692, 37693, 37694, 37695, 37696, 37697, 37698, 37699, 37700, 37701, 37702, 37703, 37704, 37705, 37706, 37707, 37708, 37709, 37710, 37711, 37712, 37713, 37714, 37715, 37716, 37717, 37718, 37719, 37720, 37721, 37722, 37723, 37724, 37725, 37726, 37727, 37728, 37729, 37730, 37731, 37732, 37733, 37734, 37735, 37736, 37737, 37738, 37739, 37740, 37741, 37742, 37743, 37744, 37745, 37746, 37747, 37748, 37749, 37750, 37751, 37752, 37753, 37754, 37755, 37756, 37757, 37758, 37759, 37760, 37761, 37762, 37763, 37764, 37765, 37766, 37767, 37768, 37769, 37770, 37771, 37772, 37773, 37774, 37775, 37776, 37777, 37778, 37779, 37780, 37781, 37782, 37783, 37784, 37785, 37786, 37787, 37788, 37789, 37790, 37791, 37792, 37793, 37794, 37795, 37796, 37797, 37798, 37799, 37800, 37801, 37802, 37803, 37804, 37805, 37806, 37807, 37808, 37809, 37810, 37811, 37812, 37813, 37814, 37815, 37816, 37817, 37818, 37819, 37820, 37821, 37822, 37823, 37824, 37825, 37826, 37827, 37828, 37829, 37830, 37831, 37832, 37833, 37834, 37835, 37836, 37837, 37838, 37839, 37840, 37841, 37842, 37843, 37844, 37845, 37846, 37847, 37848, 37849, 37850, 37851, 37852, 37853, 37854, 37855, 37856, 37857, 37858, 37859, 37860, 37861, 37862, 37863, 37864, 37865, 37866, 37867, 37868, 37869, 37870, 37871, 37872, 37873, 37874, 37875, 37876, 37877, 37878, 37879, 37880, 37881, 37882, 37883, 37884, 37885, 37886, 37887, 37888, 37889, 37890, 37891, 37892, 37893, 37894, 37895, 37896, 37897, 37898, 37899, 37900, 37901, 37902, 37903, 37904, 37905, 37906, 37907, 37908, 37909, 37910, 37911, 37912, 37913, 37914, 37915, 37916, 37917, 37918, 37919, 37920, 37921, 37922, 37923, 37924, 37925, 37926, 37927, 37928, 37929, 37930, 37931, 37932, 37933, 37934, 37935, 37936, 37937, 37938, 37939, 37940, 37941, 37942, 37943, 37944, 37945, 37946, 37947, 37948, 37949, 37950, 37951, 37952, 37953, 37954, 37955, 37956, 37957, 37958, 37959, 37960, 37961, 37962, 37963, 37964, 37965, 37966, 37967, 37968, 37969, 37970, 37971, 37972, 37973, 37974, 37975, 37976, 37977, 37978, 37979, 37980, 37981, 37982, 37983, 37984, 37985, 37986, 37987, 37988, 37989, 37990, 37991, 37992, 37993, 37994, 37995, 37996, 37997, 37998, 37999, 38e3, 38001, 38002, 38003, 38004, 38005, 38006, 38007, 38008, 38009, 38010, 38011, 38012, 38013, 38014, 38015, 38016, 38017, 38018, 38019, 38020, 38021, 38022, 38023, 38024, 38025, 38026, 38027, 38028, 38029, 38030, 38031, 38032, 38033, 38034, 38035, 38036, 38037, 38038, 38039, 38040, 38041, 38042, 38043, 38044, 38045, 38046, 38047, 38048, 38049, 38050, 38051, 38052, 38053, 38054, 38055, 38056, 38057, 38058, 38059, 38060, 38061, 38062, 38063, 38064, 38065, 38066, 38067, 38068, 38069, 38070, 38071, 38072, 38073, 38074, 38075, 38076, 38077, 38078, 38079, 38080, 38081, 38082, 38083, 38084, 38085, 38086, 38087, 38088, 38089, 38090, 38091, 38092, 38093, 38094, 38095, 38096, 38097, 38098, 38099, 38100, 38101, 38102, 38103, 38104, 38105, 38106, 38107, 38108, 38109, 38110, 38111, 38112, 38113, 38114, 38115, 38116, 38117, 38118, 38119, 38120, 38121, 38122, 38123, 38124, 38125, 38126, 38127, 38128, 38129, 38130, 38131, 38132, 38133, 38134, 38135, 38136, 38137, 38138, 38139, 38140, 38141, 38142, 38143, 38144, 38145, 38146, 38147, 38148, 38149, 38150, 38151, 38152, 38153, 38154, 38155, 38156, 38157, 38158, 38159, 38160, 38161, 38162, 38163, 38164, 38165, 38166, 38167, 38168, 38169, 38170, 38171, 38172, 38173, 38174, 38175, 38176, 38177, 38178, 38179, 38180, 38181, 38182, 38183, 38184, 38185, 38186, 38187, 38188, 38189, 38190, 38191, 38192, 38193, 38194, 38195, 38196, 38197, 38198, 38199, 38200, 38201, 38202, 38203, 38204, 38205, 38206, 38207, 38208, 38209, 38210, 38211, 38212, 38213, 38214, 38215, 38216, 38217, 38218, 38219, 38220, 38221, 38222, 38223, 38224, 38225, 38226, 38227, 38228, 38229, 38230, 38231, 38232, 38233, 38234, 38235, 38236, 38237, 38238, 38239, 38240, 38241, 38242, 38243, 38244, 38245, 38246, 38247, 38248, 38249, 38250, 38251, 38252, 38253, 38254, 38255, 38256, 38257, 38258, 38259, 38260, 38261, 38262, 38263, 38264, 38265, 38266, 38267, 38268, 38269, 38270, 38271, 38272, 38273, 38274, 38275, 38276, 38277, 38278, 38279, 38280, 38281, 38282, 38283, 38284, 38285, 38286, 38287, 38288, 38289, 38290, 38291, 38292, 38293, 38294, 38295, 38296, 38297, 38298, 38299, 38300, 38301, 38302, 38303, 38304, 38305, 38306, 38307, 38308, 38309, 38310, 38311, 38312, 38313, 38314, 38315, 38316, 38317, 38318, 38319, 38320, 38321, 38322, 38323, 38324, 38325, 38326, 38327, 38328, 38329, 38330, 38331, 38332, 38333, 38334, 38335, 38336, 38337, 38338, 38339, 38340, 38341, 38342, 38343, 38344, 38345, 38346, 38347, 38348, 38349, 38350, 38351, 38352, 38353, 38354, 38355, 38356, 38357, 38358, 38359, 38360, 38361, 38362, 38363, 38364, 38365, 38366, 38367, 38368, 38369, 38370, 38371, 38372, 38373, 38374, 38375, 38376, 38377, 38378, 38379, 38380, 38381, 38382, 38383, 38384, 38385, 38386, 38387, 38388, 38389, 38390, 38391, 38392, 38393, 38394, 38395, 38396, 38397, 38398, 38399, 38400, 38401, 38402, 38403, 38404, 38405, 38406, 38407, 38408, 38409, 38410, 38411, 38412, 38413, 38414, 38415, 38416, 38417, 38418, 38419, 38420, 38421, 38422, 38423, 38424, 38425, 38426, 38427, 38428, 38429, 38430, 38431, 38432, 38433, 38434, 38435, 38436, 38437, 38438, 38439, 38440, 38441, 38442, 38443, 38444, 38445, 38446, 38447, 38448, 38449, 38450, 38451, 38452, 38453, 38454, 38455, 38456, 38457, 38458, 38459, 38460, 38461, 38462, 38463, 38464, 38465, 38466, 38467, 38468, 38469, 38470, 38471, 38472, 38473, 38474, 38475, 38476, 38477, 38478, 38479, 38480, 38481, 38482, 38483, 38484, 38485, 38486, 38487, 38488, 38489, 38490, 38491, 38492, 38493, 38494, 38495, 38496, 38497, 38498, 38499, 38500, 38501, 38502, 38503, 38504, 38505, 38506, 38507, 38508, 38509, 38510, 38511, 38512, 38513, 38514, 38515, 38516, 38517, 38518, 38519, 38520, 38521, 38522, 38523, 38524, 38525, 38526, 38527, 38528, 38529, 38530, 38531, 38532, 38533, 38534, 38535, 38536, 38537, 38538, 38539, 38540, 38541, 38542, 38543, 38544, 38545, 38546, 38547, 38548, 38549, 38550, 38551, 38552, 38553, 38554, 38555, 38556, 38557, 38558, 38559, 38560, 38561, 38562, 38563, 38564, 38565, 38566, 38567, 38568, 38569, 38570, 38571, 38572, 38573, 38574, 38575, 38576, 38577, 38578, 38579, 38580, 38581, 38582, 38583, 38584, 38585, 38586, 38587, 38588, 38589, 38590, 38591, 38592, 38593, 38594, 38595, 38596, 38597, 38598, 38599, 38600, 38601, 38602, 38603, 38604, 38605, 38606, 38607, 38608, 38609, 38610, 38611, 38612, 38613, 38614, 38615, 38616, 38617, 38618, 38619, 38620, 38621, 38622, 38623, 38624, 38625, 38626, 38627, 38628, 38629, 38630, 38631, 38632, 38633, 38634, 38635, 38636, 38637, 38638, 38639, 38640, 38641, 38642, 38643, 38644, 38645, 38646, 38647, 38648, 38649, 38650, 38651, 38652, 38653, 38654, 38655, 38656, 38657, 38658, 38659, 38660, 38661, 38662, 38663, 38664, 38665, 38666, 38667, 38668, 38669, 38670, 38671, 38672, 38673, 38674, 38675, 38676, 38677, 38678, 38679, 38680, 38681, 38682, 38683, 38684, 38685, 38686, 38687, 38688, 38689, 38690, 38691, 38692, 38693, 38694, 38695, 38696, 38697, 38698, 38699, 38700, 38701, 38702, 38703, 38704, 38705, 38706, 38707, 38708, 38709, 38710, 38711, 38712, 38713, 38714, 38715, 38716, 38717, 38718, 38719, 38720, 38721, 38722, 38723, 38724, 38725, 38726, 38727, 38728, 38729, 38730, 38731, 38732, 38733, 38734, 38735, 38736, 38737, 38738, 38739, 38740, 38741, 38742, 38743, 38744, 38745, 38746, 38747, 38748, 38749, 38750, 38751, 38752, 38753, 38754, 38755, 38756, 38757, 38758, 38759, 38760, 38761, 38762, 38763, 38764, 38765, 38766, 38767, 38768, 38769, 38770, 38771, 38772, 38773, 38774, 38775, 38776, 38777, 38778, 38779, 38780, 38781, 38782, 38783, 38784, 38785, 38786, 38787, 38788, 38789, 38790, 38791, 38792, 38793, 38794, 38795, 38796, 38797, 38798, 38799, 38800, 38801, 38802, 38803, 38804, 38805, 38806, 38807, 38808, 38809, 38810, 38811, 38812, 38813, 38814, 38815, 38816, 38817, 38818, 38819, 38820, 38821, 38822, 38823, 38824, 38825, 38826, 38827, 38828, 38829, 38830, 38831, 38832, 38833, 38834, 38835, 38836, 38837, 38838, 38839, 38840, 38841, 38842, 38843, 38844, 38845, 38846, 38847, 38848, 38849, 38850, 38851, 38852, 38853, 38854, 38855, 38856, 38857, 38858, 38859, 38860, 38861, 38862, 38863, 38864, 38865, 38866, 38867, 38868, 38869, 38870, 38871, 38872, 38873, 38874, 38875, 38876, 38877, 38878, 38879, 38880, 38881, 38882, 38883, 38884, 38885, 38886, 38887, 38888, 38889, 38890, 38891, 38892, 38893, 38894, 38895, 38896, 38897, 38898, 38899, 38900, 38901, 38902, 38903, 38904, 38905, 38906, 38907, 38908, 38909, 38910, 38911, 38912, 38913, 38914, 38915, 38916, 38917, 38918, 38919, 38920, 38921, 38922, 38923, 38924, 38925, 38926, 38927, 38928, 38929, 38930, 38931, 38932, 38933, 38934, 38935, 38936, 38937, 38938, 38939, 38940, 38941, 38942, 38943, 38944, 38945, 38946, 38947, 38948, 38949, 38950, 38951, 38952, 38953, 38954, 38955, 38956, 38957, 38958, 38959, 38960, 38961, 38962, 38963, 38964, 38965, 38966, 38967, 38968, 38969, 38970, 38971, 38972, 38973, 38974, 38975, 38976, 38977, 38978, 38979, 38980, 38981, 38982, 38983, 38984, 38985, 38986, 38987, 38988, 38989, 38990, 38991, 38992, 38993, 38994, 38995, 38996, 38997, 38998, 38999, 39e3, 39001, 39002, 39003, 39004, 39005, 39006, 39007, 39008, 39009, 39010, 39011, 39012, 39013, 39014, 39015, 39016, 39017, 39018, 39019, 39020, 39021, 39022, 39023, 39024, 39025, 39026, 39027, 39028, 39029, 39030, 39031, 39032, 39033, 39034, 39035, 39036, 39037, 39038, 39039, 39040, 39041, 39042, 39043, 39044, 39045, 39046, 39047, 39048, 39049, 39050, 39051, 39052, 39053, 39054, 39055, 39056, 39057, 39058, 39059, 39060, 39061, 39062, 39063, 39064, 39065, 39066, 39067, 39068, 39069, 39070, 39071, 39072, 39073, 39074, 39075, 39076, 39077, 39078, 39079, 39080, 39081, 39082, 39083, 39084, 39085, 39086, 39087, 39088, 39089, 39090, 39091, 39092, 39093, 39094, 39095, 39096, 39097, 39098, 39099, 39100, 39101, 39102, 39103, 39104, 39105, 39106, 39107, 39108, 39109, 39110, 39111, 39112, 39113, 39114, 39115, 39116, 39117, 39118, 39119, 39120, 39121, 39122, 39123, 39124, 39125, 39126, 39127, 39128, 39129, 39130, 39131, 39132, 39133, 39134, 39135, 39136, 39137, 39138, 39139, 39140, 39141, 39142, 39143, 39144, 39145, 39146, 39147, 39148, 39149, 39150, 39151, 39152, 39153, 39154, 39155, 39156, 39157, 39158, 39159, 39160, 39161, 39162, 39163, 39164, 39165, 39166, 39167, 39168, 39169, 39170, 39171, 39172, 39173, 39174, 39175, 39176, 39177, 39178, 39179, 39180, 39181, 39182, 39183, 39184, 39185, 39186, 39187, 39188, 39189, 39190, 39191, 39192, 39193, 39194, 39195, 39196, 39197, 39198, 39199, 39200, 39201, 39202, 39203, 39204, 39205, 39206, 39207, 39208, 39209, 39210, 39211, 39212, 39213, 39214, 39215, 39216, 39217, 39218, 39219, 39220, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39232, 39233, 39234, 39235, 39236, 39237, 39238, 39239, 39240, 39241, 39242, 39243, 39244, 39245, 39246, 39247, 39248, 39249, 39250, 39251, 39252, 39253, 39254, 39255, 39256, 39257, 39258, 39259, 39260, 39261, 39262, 39263, 39264, 39265, 39266, 39267, 39268, 39269, 39270, 39271, 39272, 39273, 39274, 39275, 39276, 39277, 39278, 39279, 39280, 39281, 39282, 39283, 39284, 39285, 39286, 39287, 39288, 39289, 39290, 39291, 39292, 39293, 39294, 39295, 39296, 39297, 39298, 39299, 39300, 39301, 39302, 39303, 39304, 39305, 39306, 39307, 39308, 39309, 39310, 39311, 39312, 39313, 39314, 39315, 39316, 39317, 39318, 39319, 39320, 39321, 39322, 39323, 39324, 39325, 39326, 39327, 39328, 39329, 39330, 39331, 39332, 39333, 39334, 39335, 39336, 39337, 39338, 39339, 39340, 39341, 39342, 39343, 39344, 39345, 39346, 39347, 39348, 39349, 39350, 39351, 39352, 39353, 39354, 39355, 39356, 39357, 39358, 39359, 39360, 39361, 39362, 39363, 39364, 39365, 39366, 39367, 39368, 39369, 39370, 39371, 39372, 39373, 39374, 39375, 39376, 39377, 39378, 39379, 39380, 39381, 39382, 39383, 39384, 39385, 39386, 39387, 39388, 39389, 39390, 39391, 39392, 39393, 39394, 39395, 39396, 39397, 39398, 39399, 39400, 39401, 39402, 39403, 39404, 39405, 39406, 39407, 39408, 39409, 39410, 39411, 39412, 39413, 39414, 39415, 39416, 39417, 39418, 39419, 39420, 39421, 39422, 39423, 39424, 39425, 39426, 39427, 39428, 39429, 39430, 39431, 39432, 39433, 39434, 39435, 39436, 39437, 39438, 39439, 39440, 39441, 39442, 39443, 39444, 39445, 39446, 39447, 39448, 39449, 39450, 39451, 39452, 39453, 39454, 39455, 39456, 39457, 39458, 39459, 39460, 39461, 39462, 39463, 39464, 39465, 39466, 39467, 39468, 39469, 39470, 39471, 39472, 39473, 39474, 39475, 39476, 39477, 39478, 39479, 39480, 39481, 39482, 39483, 39484, 39485, 39486, 39487, 39488, 39489, 39490, 39491, 39492, 39493, 39494, 39495, 39496, 39497, 39498, 39499, 39500, 39501, 39502, 39503, 39504, 39505, 39506, 39507, 39508, 39509, 39510, 39511, 39512, 39513, 39514, 39515, 39516, 39517, 39518, 39519, 39520, 39521, 39522, 39523, 39524, 39525, 39526, 39527, 39528, 39529, 39530, 39531, 39532, 39533, 39534, 39535, 39536, 39537, 39538, 39539, 39540, 39541, 39542, 39543, 39544, 39545, 39546, 39547, 39548, 39549, 39550, 39551, 39552, 39553, 39554, 39555, 39556, 39557, 39558, 39559, 39560, 39561, 39562, 39563, 39564, 39565, 39566, 39567, 39568, 39569, 39570, 39571, 39572, 39573, 39574, 39575, 39576, 39577, 39578, 39579, 39580, 39581, 39582, 39583, 39584, 39585, 39586, 39587, 39588, 39589, 39590, 39591, 39592, 39593, 39594, 39595, 39596, 39597, 39598, 39599, 39600, 39601, 39602, 39603, 39604, 39605, 39606, 39607, 39608, 39609, 39610, 39611, 39612, 39613, 39614, 39615, 39616, 39617, 39618, 39619, 39620, 39621, 39622, 39623, 39624, 39625, 39626, 39627, 39628, 39629, 39630, 39631, 39632, 39633, 39634, 39635, 39636, 39637, 39638, 39639, 39640, 39641, 39642, 39643, 39644, 39645, 39646, 39647, 39648, 39649, 39650, 39651, 39652, 39653, 39654, 39655, 39656, 39657, 39658, 39659, 39660, 39661, 39662, 39663, 39664, 39665, 39666, 39667, 39668, 39669, 39670, 39671, 39672, 39673, 39674, 39675, 39676, 39677, 39678, 39679, 39680, 39681, 39682, 39683, 39684, 39685, 39686, 39687, 39688, 39689, 39690, 39691, 39692, 39693, 39694, 39695, 39696, 39697, 39698, 39699, 39700, 39701, 39702, 39703, 39704, 39705, 39706, 39707, 39708, 39709, 39710, 39711, 39712, 39713, 39714, 39715, 39716, 39717, 39718, 39719, 39720, 39721, 39722, 39723, 39724, 39725, 39726, 39727, 39728, 39729, 39730, 39731, 39732, 39733, 39734, 39735, 39736, 39737, 39738, 39739, 39740, 39741, 39742, 39743, 39744, 39745, 39746, 39747, 39748, 39749, 39750, 39751, 39752, 39753, 39754, 39755, 39756, 39757, 39758, 39759, 39760, 39761, 39762, 39763, 39764, 39765, 39766, 39767, 39768, 39769, 39770, 39771, 39772, 39773, 39774, 39775, 39776, 39777, 39778, 39779, 39780, 39781, 39782, 39783, 39784, 39785, 39786, 39787, 39788, 39789, 39790, 39791, 39792, 39793, 39794, 39795, 39796, 39797, 39798, 39799, 39800, 39801, 39802, 39803, 39804, 39805, 39806, 39807, 39808, 39809, 39810, 39811, 39812, 39813, 39814, 39815, 39816, 39817, 39818, 39819, 39820, 39821, 39822, 39823, 39824, 39825, 39826, 39827, 39828, 39829, 39830, 39831, 39832, 39833, 39834, 39835, 39836, 39837, 39838, 39839, 39840, 39841, 39842, 39843, 39844, 39845, 39846, 39847, 39848, 39849, 39850, 39851, 39852, 39853, 39854, 39855, 39856, 39857, 39858, 39859, 39860, 39861, 39862, 39863, 39864, 39865, 39866, 39867, 39868, 39869, 39870, 39871, 39872, 39873, 39874, 39875, 39876, 39877, 39878, 39879, 39880, 39881, 39882, 39883, 39884, 39885, 39886, 39887, 39888, 39889, 39890, 39891, 39892, 39893, 39894, 39895, 39896, 39897, 39898, 39899, 39900, 39901, 39902, 39903, 39904, 39905, 39906, 39907, 39908, 39909, 39910, 39911, 39912, 39913, 39914, 39915, 39916, 39917, 39918, 39919, 39920, 39921, 39922, 39923, 39924, 39925, 39926, 39927, 39928, 39929, 39930, 39931, 39932, 39933, 39934, 39935, 39936, 39937, 39938, 39939, 39940, 39941, 39942, 39943, 39944, 39945, 39946, 39947, 39948, 39949, 39950, 39951, 39952, 39953, 39954, 39955, 39956, 39957, 39958, 39959, 39960, 39961, 39962, 39963, 39964, 39965, 39966, 39967, 39968, 39969, 39970, 39971, 39972, 39973, 39974, 39975, 39976, 39977, 39978, 39979, 39980, 39981, 39982, 39983, 39984, 39985, 39986, 39987, 39988, 39989, 39990, 39991, 39992, 39993, 39994, 39995, 39996, 39997, 39998, 39999, 4e4, 40001, 40002, 40003, 40004, 40005, 40006, 40007, 40008, 40009, 40010, 40011, 40012, 40013, 40014, 40015, 40016, 40017, 40018, 40019, 40020, 40021, 40022, 40023, 40024, 40025, 40026, 40027, 40028, 40029, 40030, 40031, 40032, 40033, 40034, 40035, 40036, 40037, 40038, 40039, 40040, 40041, 40042, 40043, 40044, 40045, 40046, 40047, 40048, 40049, 40050, 40051, 40052, 40053, 40054, 40055, 40056, 40057, 40058, 40059, 40060, 40061, 40062, 40063, 40064, 40065, 40066, 40067, 40068, 40069, 40070, 40071, 40072, 40073, 40074, 40075, 40076, 40077, 40078, 40079, 40080, 40081, 40082, 40083, 40084, 40085, 40086, 40087, 40088, 40089, 40090, 40091, 40092, 40093, 40094, 40095, 40096, 40097, 40098, 40099, 40100, 40101, 40102, 40103, 40104, 40105, 40106, 40107, 40108, 40109, 40110, 40111, 40112, 40113, 40114, 40115, 40116, 40117, 40118, 40119, 40120, 40121, 40122, 40123, 40124, 40125, 40126, 40127, 40128, 40129, 40130, 40131, 40132, 40133, 40134, 40135, 40136, 40137, 40138, 40139, 40140, 40141, 40142, 40143, 40144, 40145, 40146, 40147, 40148, 40149, 40150, 40151, 40152, 40153, 40154, 40155, 40156, 40157, 40158, 40159, 40160, 40161, 40162, 40163, 40164, 40165, 40166, 40167, 40168, 40169, 40170, 40171, 40172, 40173, 40174, 40175, 40176, 40177, 40178, 40179, 40180, 40181, 40182, 40183, 40184, 40185, 40186, 40187, 40188, 40189, 40190, 40191, 40192, 40193, 40194, 40195, 40196, 40197, 40198, 40199, 40200, 40201, 40202, 40203, 40204, 40205, 40206, 40207, 40208, 40209, 40210, 40211, 40212, 40213, 40214, 40215, 40216, 40217, 40218, 40219, 40220, 40221, 40222, 40223, 40224, 40225, 40226, 40227, 40228, 40229, 40230, 40231, 40232, 40233, 40234, 40235, 40236, 40237, 40238, 40239, 40240, 40241, 40242, 40243, 40244, 40245, 40246, 40247, 40248, 40249, 40250, 40251, 40252, 40253, 40254, 40255, 40256, 40257, 40258, 40259, 40260, 40261, 40262, 40263, 40264, 40265, 40266, 40267, 40268, 40269, 40270, 40271, 40272, 40273, 40274, 40275, 40276, 40277, 40278, 40279, 40280, 40281, 40282, 40283, 40284, 40285, 40286, 40287, 40288, 40289, 40290, 40291, 40292, 40293, 40294, 40295, 40296, 40297, 40298, 40299, 40300, 40301, 40302, 40303, 40304, 40305, 40306, 40307, 40308, 40309, 40310, 40311, 40312, 40313, 40314, 40315, 40316, 40317, 40318, 40319, 40320, 40321, 40322, 40323, 40324, 40325, 40326, 40327, 40328, 40329, 40330, 40331, 40332, 40333, 40334, 40335, 40336, 40337, 40338, 40339, 40340, 40341, 40342, 40343, 40344, 40345, 40346, 40347, 40348, 40349, 40350, 40351, 40352, 40353, 40354, 40355, 40356, 40357, 40358, 40359, 40360, 40361, 40362, 40363, 40364, 40365, 40366, 40367, 40368, 40369, 40370, 40371, 40372, 40373, 40374, 40375, 40376, 40377, 40378, 40379, 40380, 40381, 40382, 40383, 40384, 40385, 40386, 40387, 40388, 40389, 40390, 40391, 40392, 40393, 40394, 40395, 40396, 40397, 40398, 40399, 40400, 40401, 40402, 40403, 40404, 40405, 40406, 40407, 40408, 40409, 40410, 40411, 40412, 40413, 40414, 40415, 40416, 40417, 40418, 40419, 40420, 40421, 40422, 40423, 40424, 40425, 40426, 40427, 40428, 40429, 40430, 40431, 40432, 40433, 40434, 40435, 40436, 40437, 40438, 40439, 40440, 40441, 40442, 40443, 40444, 40445, 40446, 40447, 40448, 40449, 40450, 40451, 40452, 40453, 40454, 40455, 40456, 40457, 40458, 40459, 40460, 40461, 40462, 40463, 40464, 40465, 40466, 40467, 40468, 40469, 40470, 40471, 40472, 40473, 40474, 40475, 40476, 40477, 40478, 40479, 40480, 40481, 40482, 40483, 40484, 40485, 40486, 40487, 40488, 40489, 40490, 40491, 40492, 40493, 40494, 40495, 40496, 40497, 40498, 40499, 40500, 40501, 40502, 40503, 40504, 40505, 40506, 40507, 40508, 40509, 40510, 40511, 40512, 40513, 40514, 40515, 40516, 40517, 40518, 40519, 40520, 40521, 40522, 40523, 40524, 40525, 40526, 40527, 40528, 40529, 40530, 40531, 40532, 40533, 40534, 40535, 40536, 40537, 40538, 40539, 40540, 40541, 40542, 40543, 40544, 40545, 40546, 40547, 40548, 40549, 40550, 40551, 40552, 40553, 40554, 40555, 40556, 40557, 40558, 40559, 40560, 40561, 40562, 40563, 40564, 40565, 40566, 40567, 40568, 40569, 40570, 40571, 40572, 40573, 40574, 40575, 40576, 40577, 40578, 40579, 40580, 40581, 40582, 40583, 40584, 40585, 40586, 40587, 40588, 40589, 40590, 40591, 40592, 40593, 40594, 40595, 40596, 40597, 40598, 40599, 40600, 40601, 40602, 40603, 40604, 40605, 40606, 40607, 40608, 40609, 40610, 40611, 40612, 40613, 40614, 40615, 40616, 40617, 40618, 40619, 40620, 40621, 40622, 40623, 40624, 40625, 40626, 40627, 40628, 40629, 40630, 40631, 40632, 40633, 40634, 40635, 40636, 40637, 40638, 40639, 40640, 40641, 40642, 40643, 40644, 40645, 40646, 40647, 40648, 40649, 40650, 40651, 40652, 40653, 40654, 40655, 40656, 40657, 40658, 40659, 40660, 40661, 40662, 40663, 40664, 40665, 40666, 40667, 40668, 40669, 40670, 40671, 40672, 40673, 40674, 40675, 40676, 40677, 40678, 40679, 40680, 40681, 40682, 40683, 40684, 40685, 40686, 40687, 40688, 40689, 40690, 40691, 40692, 40693, 40694, 40695, 40696, 40697, 40698, 40699, 40700, 40701, 40702, 40703, 40704, 40705, 40706, 40707, 40708, 40709, 40710, 40711, 40712, 40713, 40714, 40715, 40716, 40717, 40718, 40719, 40720, 40721, 40722, 40723, 40724, 40725, 40726, 40727, 40728, 40729, 40730, 40731, 40732, 40733, 40734, 40735, 40736, 40737, 40738, 40739, 40740, 40741, 40742, 40743, 40744, 40745, 40746, 40747, 40748, 40749, 40750, 40751, 40752, 40753, 40754, 40755, 40756, 40757, 40758, 40759, 40760, 40761, 40762, 40763, 40764, 40765, 40766, 40767, 40768, 40769, 40770, 40771, 40772, 40773, 40774, 40775, 40776, 40777, 40778, 40779, 40780, 40781, 40782, 40783, 40784, 40785, 40786, 40787, 40788, 40789, 40790, 40791, 40792, 40793, 40794, 40795, 40796, 40797, 40798, 40799, 40800, 40801, 40802, 40803, 40804, 40805, 40806, 40807, 40808, 40809, 40810, 40811, 40812, 40813, 40814, 40815, 40816, 40817, 40818, 40819, 40820, 40821, 40822, 40823, 40824, 40825, 40826, 40827, 40828, 40829, 40830, 40831, 40832, 40833, 40834, 40835, 40836, 40837, 40838, 40839, 40840, 40841, 40842, 40843, 40844, 40845, 40846, 40847, 40848, 40849, 40850, 40851, 40852, 40853, 40854, 40855, 40856, 40857, 40858, 40859, 40860, 40861, 40862, 40863, 40864, 40865, 40866, 40867, 40868, 40869, 65292, 65292 ];
      return StringConvert;
    }();
    exports.StringConvert = StringConvert;
    cc._RF.pop();
  }, {
    "./ByteArray": "ByteArray"
  } ],
  TSCommon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18fb9Ob7ktLQpctpEesZFjs", "TSCommon");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StringConvert_1 = require("./common/StringConvert");
    var ByteArray_1 = require("./common/ByteArray");
    var EgretEvent_1 = require("./event/EgretEvent");
    var EventDispatcher_1 = require("./event/EventDispatcher");
    var MyTimer_1 = require("./common/MyTimer");
    var TSCommon = function() {
      function TSCommon() {}
      TSCommon.parseByte = function(c) {
        var s0 = "0";
        var digiStart = s0.charCodeAt(0);
        var sa = "a";
        var aStart = sa.charCodeAt(0);
        var sA = "A";
        var AStart = sA.charCodeAt(0);
        var cCharCode = c.charCodeAt[0];
        if (cCharCode > sA) return 10 + cCharCode - AStart;
        if (cCharCode > sa) return 10 + cCharCode - aStart;
        if (cCharCode > s0) return cCharCode - digiStart;
        return 0;
      };
      TSCommon.HexToData = function(hex) {
        var ba = new ByteArray_1.ByteArray();
        for (var i = 0; i < hex.length - 1; i += 2) {
          var b1 = TSCommon.parseByte(hex.charAt(i));
          var b2 = TSCommon.parseByte(hex.charAt(i + 1));
          ba.writeByte(16 * b1 + b2);
        }
        return ba.buffer;
      };
      TSCommon.writeStringWithLength = function(byteArray, str, len) {
        var s = new String(str);
        for (var i = 0; i < len; i++) i < s.length ? byteArray.writeByte(s.charCodeAt(i)) : byteArray.writeByte(0);
      };
      TSCommon.readGbkString = function(ba, len) {
        var cc = new Array();
        for (var i = 0; i < len; i++) {
          var c = ba.readUnsignedByte();
          cc.push(c);
        }
        return StringConvert_1.StringConvert.getUtf8(cc);
      };
      TSCommon.writeUtf8String = function(ba, s, len) {
        var cc = StringConvert_1.StringConvert.getGBK(s);
        if (len > 0) while (cc.length > len - 1) cc.pop(); else len = cc.length + 1;
        for (var key in cc) ba.writeByte(cc[key]);
        for (var i = 0; i < len - cc.length; i++) ba.writeByte(0);
        return len;
      };
      TSCommon.log = function(msg) {
        console.log(TSCommon.getTime() + ":" + msg);
      };
      TSCommon.getTickCount = function() {
        return new Date().getTime();
      };
      TSCommon.getTime = function() {
        var time = new Date();
        return time.getHours() + ":" + time.getMinutes() + ":" + time.getSeconds() + " " + time.getMilliseconds();
      };
      TSCommon.createEventDispatcher = function() {
        null == this.dispatcher && (this.dispatcher = new EventDispatcher_1.EventDispatcher());
      };
      TSCommon.addEvent = function(type, listener, thisObject) {
        this.createEventDispatcher();
        this.dispatcher.addEventListener(type, listener, thisObject);
      };
      TSCommon.removeEvent = function(type, listener, thisObject) {
        this.createEventDispatcher();
        this.dispatcher.removeEventListener(type, listener, thisObject);
      };
      TSCommon.dispatchEvent = function(type, data) {
        this.createEventDispatcher();
        this.dispatcher.dispatchEvent(new EgretEvent_1.EgretEvent(type, false, false, data));
      };
      TSCommon.performWithDelay = function(target, callback, delay) {
        MyTimer_1.MyTimer.startTimer(target, callback, delay);
      };
      TSCommon.onPayFailed = "onPayFailed";
      TSCommon.onPaySucceeded = "onPaySucceeded";
      TSCommon.onPayFinished = "onPayFinished";
      TSCommon.onNewPayment = "onNewPayment";
      TSCommon.onGoldChanged = "onGoldChanged";
      TSCommon.onDiamondChanged = "onDiamondChanged";
      TSCommon.onFragChanged = "onFragChanged";
      TSCommon.onGeWXtUserInfoLogin = "onGeWXtUserInfoLogin";
      return TSCommon;
    }();
    exports.TSCommon = TSCommon;
    cc._RF.pop();
  }, {
    "./common/ByteArray": "ByteArray",
    "./common/MyTimer": "MyTimer",
    "./common/StringConvert": "StringConvert",
    "./event/EgretEvent": "EgretEvent",
    "./event/EventDispatcher": "EventDispatcher"
  } ],
  TableManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3033B+Kl5Gf58nFv+Pno2g", "TableManager");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Table_1 = require("../Table");
    var TableManager = function() {
      function TableManager(tableCount, chairCount) {
        this._chairCount = chairCount;
        this._tableCount = tableCount;
        this._tables = new Array();
        for (var i = 0; i < tableCount; i++) this._tables[i] = new Table_1.Table(chairCount, i);
      }
      TableManager.prototype.getTableCount = function() {
        return this._tableCount;
      };
      TableManager.prototype.getChairCount = function() {
        return this._chairCount;
      };
      TableManager.prototype.getTableList = function() {
        return this._tables;
      };
      TableManager.prototype.getTable = function(tableID) {
        if (tableID < 0 || tableID >= this._tableCount) return null;
        return this._tables[tableID];
      };
      return TableManager;
    }();
    exports.TableManager = TableManager;
    cc._RF.pop();
  }, {
    "../Table": "Table"
  } ],
  Table: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b9d6X9B1pOt7lH8pHF1GSb", "Table");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Chair_1 = require("./Chair");
    var Table = function() {
      function Table(chairCount, tableID) {
        this._chairCount = chairCount;
        this._tableID = tableID;
        this._isLocked = false;
        this._isPlaying = false;
        this._chairs = new Array();
        for (var i = 0; i < chairCount; i++) this._chairs[i] = new Chair_1.Chair();
      }
      Table.prototype.getChair = function(chairID) {
        if (chairID < 0 || chairID >= this._chairCount) return null;
        return this._chairs[chairID];
      };
      Table.prototype.getEmptyChairCount = function() {
        var count = 0;
        for (var key in this._chairs) this._chairs[key].isEmpty() && count++;
        return count;
      };
      Table.prototype.getPlayerCount = function() {
        return this._chairCount - this.getEmptyChairCount();
      };
      Table.prototype.setTableBuffer = function(buf) {
        this._tableBuffer = buf;
      };
      Table.prototype.getTableBuffer = function() {
        return this._tableBuffer;
      };
      Table.prototype.dump = function() {
        for (var i = 0; i < this._chairCount; i++) {
          var chair = this._chairs[i];
          console.log("chair " + i + " " + chair.isEmpty() ? "empty" : "taken");
        }
      };
      Table.TABLE_PLAYING = 2;
      Table.TABLE_LOCKED = 1;
      return Table;
    }();
    exports.Table = Table;
    cc._RF.pop();
  }, {
    "./Chair": "Chair"
  } ],
  TimerEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b1e83tuaJNUJozNrCiNtwj", "TimerEvent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EgretEvent_1 = require("./EgretEvent");
    var TimerEvent = function(_super) {
      __extends(TimerEvent, _super);
      function TimerEvent(type, bubbles, cancelable) {
        return _super.call(this, type, bubbles, cancelable) || this;
      }
      TimerEvent.prototype.updateAfterEvent = function() {};
      TimerEvent.dispatchTimerEvent = function(target, type, bubbles, cancelable) {
        var event = EgretEvent_1.EgretEvent.create(TimerEvent, type, bubbles, cancelable);
        var result = target.dispatchEvent(event);
        EgretEvent_1.EgretEvent.release(event);
        return result;
      };
      TimerEvent.TIMER = "timer";
      TimerEvent.TIMER_COMPLETE = "timerComplete";
      return TimerEvent;
    }(EgretEvent_1.EgretEvent);
    exports.TimerEvent = TimerEvent;
    cc._RF.pop();
  }, {
    "./EgretEvent": "EgretEvent"
  } ],
  ToastUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0e1ac4MCJBkZK2a6/kTNVA", "ToastUI");
    "use strict";
    var ToastUI = cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this._RUN_TIMER = 2;
        this._contentLabelWidth = 0;
        this._contentLabelHeight = 0;
        this.LABEL_MAX_WIDTH = 300;
        this.strMsg = "";
      },
      properties: {
        _fillSp: {
          default: null,
          type: cc.Sprite
        },
        _contentLabel: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        var winSize = cc.director.getWinSize();
        var self = this;
        var nodeSp = new cc.Node("nodeSp");
        this.node.addChild(nodeSp);
        this._fillSp = nodeSp.addComponent(cc.Sprite);
        this._fillSp.type = cc.Sprite.Type.SLICED;
        this._fillSp.node.setPosition(winSize.width / 2, winSize.height / 2);
        var nodeContentLabel = new cc.Node("nodeContentLabel");
        this.nodeContentLabel = nodeContentLabel;
        this._contentLabel = nodeContentLabel.addComponent(cc.Label);
        nodeSp.addChild(nodeContentLabel);
        this._contentLabel.string = this.strMsg;
        self._fillSp.node.setOpacity(0);
        cc.loader.loadRes("hallRes/toast", cc.SpriteFrame, function(err, spriteFrame) {
          if (!err) {
            self._fillSp.spriteFrame = spriteFrame;
            self.setFillSlice();
          }
        });
        self._fillSp.node.runAction(cc.fadeIn(.5));
        this.schedule(function() {
          this.node.destroy();
        }, 0, 0, this._RUN_TIMER);
      },
      setMsg: function setMsg(strMsg) {
        this.strMsg = strMsg;
        if (this._contentLabel) {
          this._contentLabel.string = this.strMsg;
          this.setFillSlice();
        }
      },
      calContentLabelSize: function calContentLabelSize() {
        if (this._contentLabel) {
          this._contentLabelWidth = this._contentLabel.node.width;
          this._contentLabelHeight = this._contentLabel.node.height;
        }
      },
      setFillSlice: function setFillSlice() {
        this.calContentLabelSize();
        this._fillSp && (this._fillSp.node.width = this._contentLabelWidth);
      },
      start: function start() {},
      update: function update(dt) {},
      onDestroy: function onDestroy() {}
    });
    cc.ToastUI = module.exports = ToastUI;
    cc._RF.pop();
  }, {} ],
  Tools: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7ec1euu3RFNJKBtA7V+y3FX", "Tools");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var Tools = {
      extends: cc.Component
    };
    Tools.isEmptyObject = function(obj) {
      if ("object" != ("undefined" === typeof obj ? "undefined" : _typeof(obj))) {
        cc.log("obj is not object !!!");
        return true;
      }
      for (var key in obj) return false;
      return true;
    }, Tools.cutString = function(str, maxWidth, fontSize, parent) {
      var splitStr = str.split("");
      var node = new cc.Node();
      parent.addChild(node);
      var label = node.addComponent(cc.Label);
      label.fontSize = fontSize;
      label.string = "...";
      var lastStrWidth = node.width;
      var i = 0;
      var isOverMaxWidth = false;
      var countLength = 0;
      var resultStr = "";
      while (i < splitStr.length && !isOverMaxWidth) {
        label.string = splitStr[i];
        if (lastStrWidth + countLength + node.width < maxWidth) {
          countLength += node.width;
          resultStr += splitStr[i];
        } else isOverMaxWidth = true;
        i += 1;
      }
      isOverMaxWidth && (resultStr += "...");
      node.destroy();
      return resultStr;
    }, Tools.getFormatNumber = function(preNum) {
      var result = "";
      var preNum = "" + preNum;
      var newstr = preNum.split("").reverse().join("");
      while (newstr.length > 3) {
        result += newstr.substring(0, 3) + "，";
        newstr = newstr.substring(3);
      }
      result += newstr;
      result = result.split("").reverse().join("");
      return result;
    };
    cc.Class(Tools);
    module.exports = Tools;
    cc._RF.pop();
  }, {} ],
  UpgradeLevelLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ee4dusDVBEF6CK4oQIseAU", "UpgradeLevelLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var _WeixinManager = require("../../weixin/WeixinManager");
    var GameLibSink = require("GameLibSink");
    var GameDefs = require("GameDefs");
    var Resources = require("Resources");
    var HallResources = require("HallResources");
    cc.Class({
      extends: cc.Component,
      properties: {
        bg_action: {
          default: null,
          type: cc.Node
        },
        rewardCup_action: {
          default: null,
          type: cc.Node
        },
        rewardLevel_action: {
          default: null,
          type: cc.Node
        },
        reward_cup: {
          default: null,
          type: cc.Node
        },
        match_level: {
          default: null,
          type: cc.Node
        },
        share_toggle: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.getChildByName("bg") && this.node.getChildByName("bg").setContentSize(windowSize);
      },
      init: function init(newLevel, nNewScore, myselfWinOrLoseScore, onEnd) {
        this.m_totalTime = 25;
        this.m_nNewLevel = newLevel;
        this.m_nNewScore = nNewScore;
        this.m_myselfWinOrLoseScore = myselfWinOrLoseScore;
        this.m_onEnd = onEnd;
      },
      playJinBiAct: function playJinBiAct() {
        var self = this;
        Resources.playCommonEffect("jinbiyu.mp3");
        var whosTurnNode = this.node.getChildByName("jinbiyu_act");
        var strAniName = "jinbiyu";
        whosTurnNode.active = true;
        var dragonDisplay = whosTurnNode.getComponent(dragonBones.ArmatureDisplay);
        dragonDisplay.playAnimation(strAniName, 1);
        var callback = function callback() {
          dragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, callback, self);
        };
        dragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, callback, this);
      },
      onEnable: function onEnable() {
        this.show();
        this.playJinBiAct();
        this.reward_cup.active = false;
        this.match_level.active = false;
        this.rewardCup_action.active = false;
        this.rewardLevel_action.active = false;
        var bgDragonDisplay = this.bg_action.getComponent(dragonBones.ArmatureDisplay);
        bgDragonDisplay.playAnimation("beijingguang");
        var data = HallResources.getInstance().getRankAndStarByScore(this.m_nNewScore);
        var levelID = data.cup;
        var preScore = this.m_nNewScore - this.m_myselfWinOrLoseScore;
        var preData = HallResources.getInstance().getRankAndStarByScore(preScore);
        var preLevelID = data.cup;
        if (preLevelID != levelID) {
          this.rewardCup_action.active = false;
          this.rewardLevel_action.active = true;
          var levelDragonDisplay = this.rewardLevel_action.getComponent(dragonBones.ArmatureDisplay);
          1 == levelID ? console.log("基础段位是青铜段位， 段位计算错误") : 2 == levelID ? levelDragonDisplay.playAnimation("1_shengbaiyin") : 3 == levelID ? levelDragonDisplay.playAnimation("2_shenghuangjin") : 4 == levelID ? levelDragonDisplay.playAnimation("3_shengbojin") : 5 == levelID ? levelDragonDisplay.playAnimation("4_shengzuanshi") : 6 == levelID ? levelDragonDisplay.playAnimation("5_shengwangzhe") : console.log("段位计算超出段位范围");
          levelDragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, this.showUpgradeResult, this);
          this.m_levelDragonDisplay = levelDragonDisplay;
        } else {
          this.rewardCup_action.active = true;
          this.rewardLevel_action.active = false;
          var levelDragonDisplay = this.rewardCup_action.getComponent(dragonBones.ArmatureDisplay);
          1 == levelID ? levelDragonDisplay.playAnimation("Animation1_qingtong") : 2 == levelID ? levelDragonDisplay.playAnimation("Animation2_baiyin") : 3 == levelID ? levelDragonDisplay.playAnimation("Animation3_huangjin") : 4 == levelID ? levelDragonDisplay.playAnimation("Animation4_bojin") : 5 == levelID ? levelDragonDisplay.playAnimation("Animation5_zuanshi") : 6 == levelID ? levelDragonDisplay.playAnimation("Animation6_wangzhe") : console.log("段位计算超出段位范围");
          levelDragonDisplay.addEventListener(dragonBones.EventObject.COMPLETE, this.showUpgradeResult, this);
          this.m_levelDragonDisplay = levelDragonDisplay;
        }
      },
      show: function show() {
        var self = this;
        this.m_waitCallback = function() {
          self.m_totalTime -= 1;
          if (22 == self.m_totalTime) {
            self.node.getChildByName("game_back").active = true;
            self.node.getChildByName("resume_next_btn").active = true;
          }
        }.bind(this);
        this.schedule(this.m_waitCallback, 1, this.m_totalTime, 0);
      },
      onDisable: function onDisable() {
        this.m_onEnd && this.m_onEnd();
        this.m_levelDragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.showUpgradeResult, this);
      },
      showUpgradeResult: function showUpgradeResult() {
        this.reward_cup.active = true;
        this.match_level.active = true;
        this.rewardCup_action.active = false;
        this.rewardLevel_action.active = false;
        this.setMatchCup();
        this.setMatchLevel();
        this.m_levelDragonDisplay.removeEventListener(dragonBones.EventObject.COMPLETE, this.showUpgradeResult, this);
      },
      setMatchCup: function setMatchCup() {
        var data = HallResources.getInstance().getRankAndStarByScore(this.m_nNewScore);
        var self = this;
        cc.loader.loadRes("texture/hallRes/qualifyingCup/cup" + data.cup, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.reward_cup.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        });
      },
      setMatchLevel: function setMatchLevel() {
        var data = HallResources.getInstance().getRankAndStarByScore(this.m_nNewScore);
        var nextName = data.rankName;
        this.match_level.getComponent(cc.Label).string = nextName;
      },
      onShareCheckClicked: function onShareCheckClicked(event) {
        this.share_toggle.getComponent(cc.Toggle).isChecked ? this.m_share = true : this.m_share = false;
        this.node.getChildByName("getReward_btn").getComponent(cc.Button).interactable = this.m_share;
      },
      onGetRewardClicked: function onGetRewardClicked() {
        var self = this;
        if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
          self.getReward();
          wx.shareAppMessage({
            title: "距离一个亿的小目标又进了一步！",
            imageUrl: HallResources.upgradeShareImgUrl
          });
        }
      },
      getReward: function getReward() {
        var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
        var self = this;
        var callback = function callback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            console.log("段位晋升 ---------jsonObject --------------");
            console.log(jsonObject);
            var nRetCode = parseInt(jsonObject.RetCode);
            1 == nRetCode ? Resources.showRewardTips("+" + jsonObject.AwardAmount, true, true) : 11 == nRetCode ? Resources.showRewardTips("密码错误", true, true, true) : 12 == nRetCode ? Resources.showRewardTips("未满足条件", true, true, true) : 13 == nRetCode ? Resources.showRewardTips("重复领取", true, true, true) : console.log("获取段位晋升奖励失败");
            self.node.active = false;
          }
        };
        require("HallWebRequest").getInstance().getUpgradeRewardOnResult(this.m_nNewLevel, myOpenId, callback);
      },
      onGameBackClicked: function onGameBackClicked() {
        this.m_onEnd = null;
        G.goldGameReady = null;
        G.matchGameReady = null;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      },
      onResumeNextClicked: function onResumeNextClicked() {
        this.m_onEnd = null;
        G.matchGameReady = true;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../weixin/WeixinManager": "WeixinManager",
    GameDefs: "GameDefs",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources"
  } ],
  UserInfoLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8f82qBw3xL7Z0cCw2yK83Q", "UserInfoLayer");
    "use strict";
    var _WeixinManager = require("../hall/weixin/WeixinManager");
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var UserInfoLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        headIcon: {
          default: null,
          type: cc.Sprite
        },
        nameText: {
          default: null,
          type: cc.Label
        },
        id: {
          default: null,
          type: cc.Label
        },
        totalMatch: {
          default: null,
          type: cc.Label
        },
        highestWinningStreak: {
          default: null,
          type: cc.Label
        },
        winningrate: {
          default: null,
          type: cc.Label
        },
        playerId: {
          default: null,
          type: cc.Label
        },
        playerName: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        var self = this;
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        this.playerId.string = "ID：" + publicUserInfo.userDBID;
        this.playerName.string = "昵称：" + publicUserInfo.nickName;
        var weixinUserInfo = _WeixinManager.WeixinManager.getInstance().userInfo;
        if (weixinUserInfo && weixinUserInfo.avatarUrl) {
          var imgurl = weixinUserInfo.avatarUrl + "?aaa=aa.jpg";
          cc.loader.load(imgurl, function(err, texture) {
            self.headIcon.spriteFrame = new cc.SpriteFrame(texture);
          });
        }
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        if (cc.rectContainsPoint(rect, locationInNode)) ; else {
          event.stopPropagation();
          this.closeAndChangeScaleAction();
        }
      },
      start: function start() {},
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      },
      initData: function initData(totalCount, continueWinCount, winRate) {
        this.totalMatch.string = totalCount;
        this.highestWinningStreak.string = continueWinCount;
        this.winningrate.string = winRate + "%";
      },
      clickShowRankBtn: function clickShowRankBtn() {
        this.node.active = false;
        this.node.parent.getComponent("HallPlatformInfo").onClicShrinkBtn();
      }
    });
    module.exports = UserInfoLayer;
    cc._RF.pop();
  }, {
    "../hall/weixin/WeixinManager": "WeixinManager",
    HallControl: "HallControl",
    HallResources: "HallResources",
    TSCommon: "TSCommon"
  } ],
  UserInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46208KvlTNDl6xx6yG/ZLZT", "UserInfo");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("../common/ByteArray");
    var ScoreParser_1 = require("./room/ScoreParser");
    var gamelibcommon_1 = require("./gamelibcommon");
    var UserInfo = function() {
      function UserInfo() {
        this._faceID = 0;
        this._userDBID = 0;
        this._userLevel = 0;
        this._groupID = 0;
        this._name = "";
        this._maxim = "";
        this._age = 0;
        this._sex = 1;
        this._fame = 0;
        this._fameLevel = 0;
        this._bankValue = 0;
        this._tableID = 65535;
        this._chairID = 255;
        this._status = 0;
        this._userIndex = 0;
        this._userRountIC = 0;
        this._scoreBuf = new ByteArray_1.ByteArray();
        this._scoreBufLen = 0;
        this.m_cbFaceChagneIndex = 0;
        this.m_cbVipLevel = 0;
        this._location = "";
        this._netLag = 0;
      }
      UserInfo.prototype.getUserID = function() {
        return this._userIndex;
      };
      UserInfo.prototype.getUserChair = function() {
        return this._chairID;
      };
      UserInfo.prototype.getUserDBID = function() {
        return this._userDBID;
      };
      UserInfo.prototype.getUserName = function() {
        return this._name;
      };
      UserInfo.prototype.getUserTableID = function() {
        return this._tableID;
      };
      UserInfo.prototype.getUserStatus = function() {
        return this._status;
      };
      UserInfo.prototype.getFace = function() {
        return this._faceID;
      };
      UserInfo.prototype.isPlayer = function() {
        return this._status >= gamelibcommon_1.gamelibcommon.USER_SIT_TABLE && this._status < gamelibcommon_1.gamelibcommon.USER_WATCH_GAME;
      };
      UserInfo.prototype.isValidPlayer = function() {
        return this.isPlayer();
      };
      UserInfo.prototype.getGold = function() {
        return this.getScoreField(gamelibcommon_1.gamelibcommon.enScore_Gold);
      };
      UserInfo.prototype.getScore = function() {
        return this.getScoreField(gamelibcommon_1.gamelibcommon.enScore_Score);
      };
      UserInfo.prototype.getBean = function() {
        return this.getScoreField(gamelibcommon_1.gamelibcommon.enScore_Bean);
      };
      UserInfo.prototype.getSex = function() {
        return this._sex;
      };
      UserInfo.prototype.getScoreField = function(field) {
        return ScoreParser_1.ScoreParser.getInstance().getScoreFieldInt(this._scoreBuf, field);
      };
      UserInfo.prototype.getAge = function() {
        return this._age;
      };
      UserInfo.prototype.getGameTitleScore = function() {
        return this._fame;
      };
      UserInfo.prototype.getBankAmount = function() {
        return this._bankValue;
      };
      UserInfo.prototype.getLocation = function() {
        return this._location;
      };
      UserInfo.prototype.getMaxim = function() {
        return this._maxim;
      };
      UserInfo.prototype.getNetLag = function() {
        return this._netLag;
      };
      return UserInfo;
    }();
    exports.UserInfo = UserInfo;
    cc._RF.pop();
  }, {
    "../common/ByteArray": "ByteArray",
    "./gamelibcommon": "gamelibcommon",
    "./room/ScoreParser": "ScoreParser"
  } ],
  UserManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b4f36PrVR5F65SkFI5FYD5O", "UserManager");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UserManager = function() {
      function UserManager() {
        this.m_dwMyUserID = 4294967295;
        this.m_dwMyDBID = 4294967295;
        this.m_userList = new Array();
      }
      UserManager.prototype.getUserCount = function() {
        return this.m_userList.length;
      };
      UserManager.prototype.setMyUserID = function(myUserID) {
        this.m_dwMyUserID = myUserID;
      };
      UserManager.prototype.getMyUserID = function() {
        return this.m_dwMyUserID;
      };
      UserManager.prototype.setMyDBID = function(myDBID) {
        this.m_dwMyDBID = myDBID;
      };
      UserManager.prototype.getMyDBID = function() {
        return this.m_dwMyDBID;
      };
      UserManager.prototype.addUser = function(user) {
        this.m_userList.push(user);
      };
      UserManager.prototype.removeUser = function(dwUserID) {
        dwUserID %= 65536;
        for (var i = 0; i < this.m_userList.length; i++) if (dwUserID == this.m_userList[i].getUserID()) {
          this.m_userList.splice(i, 1);
          return;
        }
      };
      UserManager.prototype.getUser = function(dwUserID) {
        dwUserID %= 65536;
        for (var i = 0; i < this.m_userList.length; i++) if (dwUserID == this.m_userList[i].getUserID()) return this.m_userList[i];
        return null;
      };
      UserManager.prototype.getMyInfo = function() {
        return this.getUser(this.m_dwMyUserID);
      };
      UserManager.prototype.clearAllUser = function() {
        this.m_userList.splice(0);
      };
      UserManager.prototype.getUserByDBID = function(dwDBID) {
        for (var i = 0; i < this.m_userList.length; i++) if (dwDBID == this.m_userList[i].getUserDBID()) return this.m_userList[i];
        return null;
      };
      UserManager.prototype.updateGameUser = function(user) {
        for (var i = 0; i < this.m_userList.length; i++) if (user.getUserID() == this.m_userList[i].getUserID()) {
          this.m_userList[i] = user;
          return true;
        }
        return false;
      };
      UserManager.prototype.updateUserScore = function(wUserID, bufScore) {
        wUserID %= 65536;
        for (var i = 0; i < this.m_userList.length; i++) if (wUserID == this.m_userList[i].getUserID()) {
          this.m_userList[i]._scoreBuf = bufScore;
          this.m_userList[i]._scoreBufLen = bufScore.length;
          return true;
        }
        return false;
      };
      UserManager.prototype.updateUserFame = function(wUserID, nFameLevel, nFameScore, cbVIPLevel) {
        wUserID %= 65536;
        for (var i = 0; i < this.m_userList.length; i++) if (wUserID == this.m_userList[i].getUserID()) {
          this.m_userList[i]._fame = nFameScore;
          this.m_userList[i]._fameLevel = nFameLevel;
          this.m_userList[i].m_cbVipLevel = cbVIPLevel;
          return true;
        }
        return false;
      };
      UserManager.prototype.getUserByTableChair = function(wTableID, cbChair) {
        for (var i = 0; i < this.m_userList.length; i++) if (this.m_userList[i]._tableID == wTableID && this.m_userList[i]._chairID == cbChair && this.m_userList[i].isPlayer()) return this.m_userList[i];
        return null;
      };
      UserManager.prototype.findUserByTableIndex = function(wTableID) {
        var list = new Array();
        for (var i = 0; i < this.m_userList.length; i++) this.m_userList[i]._tableID == wTableID && list.push(this.m_userList[i]);
        return list;
      };
      return UserManager;
    }();
    exports.UserManager = UserManager;
    cc._RF.pop();
  }, {} ],
  WebRequest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "053cersWYNJkpfbGMRis4L6", "WebRequest");
    "use strict";
    var WebRequest = cc.Class({
      _callBack: null,
      getData: function getData(url, data, callback, post) {
        this._callBack = callback;
        var self = this;
        var xhr = cc.loader.getXMLHttpRequest();
        [ "loadstart", "abort", "error", "load", "loadend", "timeout" ].forEach(function(eventname) {
          xhr["on" + eventname] = function() {
            "abort" != eventname && "error" != eventname && "timeout" != eventname || null != self._callBack && self._callBack(false, "");
          };
        });
        xhr.onreadystatechange = function() {
          4 === xhr.readyState && xhr.status >= 200 && xhr.status < 300 && null != self._callBack && self._callBack(true, xhr.response);
        };
        xhr.timeout = 5e3;
        if (null == post || false == post) {
          "" == data || null == data ? xhr.open("GET", url, true) : xhr.open("GET", url + "?" + data, true);
          cc.sys.isNative && xhr.setRequestHeader("Accept-Encoding", "gzip,deflate");
          xhr.send();
        } else {
          xhr.open("POST", url);
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          xhr.send(data);
        }
      }
    });
    module.exports = WebRequest;
    cc._RF.pop();
  }, {} ],
  WeixinManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ca59SmhwZNObSWEIA6R7d4", "WeixinManager");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Domain_1 = require("../Domain");
    var WebRequest = require("../common/WebRequest");
    var TSCommon_1 = require("../TSCommon");
    var HallUtils = require("../HallUtils");
    var HallResources = require("../HallResources");
    var AladinSDK = require("../../aladinSDK");
    var WeixinUserInfo = function() {
      function WeixinUserInfo() {
        this.unionid = "test";
        this.nickname = "test";
      }
      return WeixinUserInfo;
    }();
    exports.WeixinUserInfo = WeixinUserInfo;
    var WeixinManager = function() {
      function WeixinManager() {
        this.userInfo = null;
        this.openid = null;
        this.uinionid = null;
        this.js_code = null;
        this.init();
      }
      WeixinManager.getInstance = function() {
        null == this._instance && (this._instance = new WeixinManager());
        return this._instance;
      };
      WeixinManager.prototype.init = function() {};
      WeixinManager.prototype.getSignPackage = function() {
        var _this = this;
        var signUrl = Domain_1.Domain.WEIXIN_URL + "/genWeixinSign.aspx?appid=" + Domain_1.Domain.WEIXIN_APPID + "&url=" + location.href.split("#")[0];
        var webRequest = new WebRequest();
        webRequest.getData(signUrl, "", function(succeeded, data) {
          _this.signPackage = JSON.parse(data);
          _this.getWeiXinConfig();
        }, false);
      };
      WeixinManager.prototype.getWeiXinConfig = function() {
        var bodyConfig = new BodyConfig();
        bodyConfig.debug = true;
        bodyConfig.appId = Domain_1.Domain.WEIXIN_APPID;
        bodyConfig.timestamp = this.signPackage.timestamp;
        bodyConfig.nonceStr = this.signPackage.nonceStr;
        bodyConfig.signature = this.signPackage.signature;
        bodyConfig.jsApiList = [ "checkJsApi", "onMenuShareTimeline", "onMenuShareAppMessage", "onMenuShareQQ", "onMenuShareWeibo", "hideMenuItems", "showMenuItems", "hideAllNonBaseMenuItem", "showAllNonBaseMenuItem", "translateVoice", "startRecord", "stopRecord", "playVoice", "pauseVoice", "stopVoice", "uploadVoice", "downloadVoice", "chooseImage", "previewImage", "uploadImage", "downloadImage", "getNetworkType", "openLocation", "getLocation", "hideOptionMenu", "showOptionMenu", "closeWindow", "scanQRCode", "chooseWXPay", "openProductSpecificView", "addCard", "chooseCard", "openCard" ];
        wx.config(bodyConfig);
      };
      WeixinManager.prototype.shareAppMessage = function(title, desc, link, imgUrl) {
        wx.onMenuShareAppMessage({
          title: title,
          desc: desc,
          link: link,
          imgUrl: imgUrl,
          type: "",
          dataUrl: "",
          success: function() {},
          cancel: function() {},
          trigger: function() {},
          fail: function() {}
        });
      };
      WeixinManager.prototype.shareTimeline = function(title, link, imgUrl) {
        wx.onMenuShareTimeline({
          title: title,
          link: link,
          imgUrl: imgUrl,
          success: function() {},
          cancel: function() {},
          trigger: function() {},
          fail: function() {}
        });
      };
      WeixinManager.prototype.shareQQ = function(title, desc, link, imgUrl) {
        wx.onMenuShareQQ({
          title: title,
          desc: desc,
          link: link,
          imgUrl: imgUrl,
          type: "",
          dataUrl: "",
          success: function() {},
          cancel: function() {},
          trigger: function() {},
          fail: function() {},
          complete: function() {}
        });
      };
      WeixinManager.prototype.pay = function(productID, price) {
        var genorderURL = Domain_1.Domain.PAY_GENORDER_URL + "?appid=" + Domain_1.Domain.WEIXIN_APPID + "&userid=" + PublicUserInfo.userDBID + "&gameid=0&partnerID=10101&price=" + price + "&productid=" + productID;
        var webRequest = new WebRequest();
        webRequest.getData(genorderURL, "", function(succeeded, data) {
          var pay = JSON.parse(data);
          if (1 != pay.retult) {
            TSCommon_1.TSCommon.dispatchEvent(TSCommon_1.TSCommon.onPayFailed, "生成订单失败");
            return;
          }
          wx.chooseWXPay({
            timestamp: pay.timestamp,
            nonceStr: pay.nonceStr,
            package: "prepay_id=" + pay.prepayid,
            signType: "SHA1",
            paySign: pay.signature,
            success: function(res) {
              TSCommon_1.TSCommon.dispatchEvent(TSCommon_1.TSCommon.onPaySucceeded, "");
            }
          });
        }, false);
      };
      WeixinManager.prototype.weixinLoginByWeb = function() {
        webWeixinLogin("wx9077e9fe86b5ae1b", "http://weixin.ss2007.com/weixinauth.aspx");
      };
      WeixinManager.prototype.checkLogin = function(doLogin) {
        var ua = navigator.userAgent.toLowerCase();
        TSCommon_1.TSCommon.log(ua);
        var isweixin = false;
        ua.indexOf("micromessenger") > 0 && (isweixin = true);
        if (HallUtils.judeIsPhoneWXGameBrowser()) {
          this.wxGameLogin();
          return;
        }
        var params = window.location.href;
        var paramBegin = params.indexOf("?");
        var paramJson;
        if (paramBegin > 0) {
          params = params.slice(paramBegin + 1);
          var p = params.split("&");
          for (var key in p) {
            var param1 = p[key].split("=");
            "param" == param1[0] && (paramJson = decodeURI(param1[1]));
          }
          console.log("paramJson = " + paramJson);
          WeixinManager.getInstance().userInfo = JSON.parse(paramJson);
          WeixinManager.getInstance().userInfo.avatarUrl = WeixinManager.getInstance().userInfo.headimgurl;
          if (!doLogin) return true;
        }
        TSCommon_1.TSCommon.log("encodeURI = " + encodeURI(location.href.split("#")[0]));
        if (!doLogin) return false;
        if (null == WeixinManager.getInstance().userInfo) {
          window.location.href = isweixin ? Domain_1.Domain.WEIXIN_URL + "/OAuth/weixinlogin.aspx?redirect_uri=" + encodeURI(location.href.split("#")[0]) : "https://open.weixin.qq.com/connect/qrconnect?appid=" + Domain_1.Domain.WEIXIN_WEB_APPID + "&redirect_uri=http%3A%2F%2Fweixin.ss2007.com%2FOAuthWeb%2Fweixinauth.aspx&response_type=code&scope=snsapi_login&state=" + encodeURI(location.href.split("#")[0]) + "#wechat_redirect";
          return false;
        }
        return true;
      };
      WeixinManager.prototype.wxBuyDiamond = function(useCount) {
        var self = this;
        wx.requestMidasPayment({
          mode: "game",
          env: Domain_1.Domain.ENV,
          offerId: "1450017594",
          platform: "android",
          currencyType: Domain_1.Domain.CURRENCYTYPE,
          buyQuantity: 10 * useCount,
          zoneId: "1",
          success: function(res) {
            console.log("购买成功");
            TSCommon_1.TSCommon.dispatchEvent(HallResources.onRefreshPlayerDiamondCount, this);
            console.log(res);
          },
          fail: function(res) {
            console.log("购买失败");
            console.log(res);
          },
          complete: function(res) {
            console.log("购买完成");
            TSCommon_1.TSCommon.dispatchEvent(HallResources.onRefreshPlayerDiamondCount, this);
            console.log(res);
          }
        });
      };
      WeixinManager.prototype.wxGameLogin = function() {
        var self = this;
        AladinSDK.report(AladinSDK.ReportTypes.LOGIN, "");
        wx.login({
          success: function(res) {
            AladinSDK.report(AladinSDK.ReportTypes.AUTH, "");
            console.log(res);
            var code = res.code;
            self.js_code = code;
            var webRequest = new WebRequest();
            var getOpenIdUrl = Domain_1.Domain.WebRoot + "CodeToAccessToken.aspx?js_code=" + code;
            webRequest.getData(getOpenIdUrl, "", function(isSucceed, data) {
              if (true == isSucceed) {
                var jsonObject = JSON.parse(data);
                console.log("获得openid为：" + jsonObject.openid);
                AladinSDK.report(AladinSDK.ReportTypes.OPEN_ID, jsonObject.openid);
                WeixinManager.getInstance().userInfo = new WeixinUserInfo();
                self.openid = jsonObject.openid;
                self.uinionid = jsonObject.uinionid;
                wx.getUserInfo({
                  openIdList: [ WeixinManager.getInstance().userInfo.openid ],
                  lang: "zh_CN",
                  withCredentials: true,
                  fail: function(res) {
                    console.log("获取微信授权失败");
                    console.log("获取微信授权失败 res==" + res.data);
                    wx.authorize({
                      scope: "scope.userInfo",
                      success: function(res) {
                        wx.getUserInfo({
                          openIdList: [ WeixinManager.getInstance().userInfo.openid ],
                          lang: "zh_CN",
                          fail: function(res) {},
                          success: function(res) {
                            var rawData = res.rawData;
                            WeixinManager.getInstance().userInfo = res.userInfo;
                            WeixinManager.getInstance().userInfo.openid = self.openid;
                            WeixinManager.getInstance().userInfo.unionid = self.uinionid;
                            WeixinManager.getInstance().userInfo.gender = res.userInfo.gender;
                            TSCommon_1.TSCommon.log("wxUserinfo rawData=" + rawData);
                            TSCommon_1.TSCommon.dispatchEvent(TSCommon_1.TSCommon.onGeWXtUserInfoLogin, "");
                          }
                        });
                      }
                    });
                  },
                  success: function(res) {
                    var rawData = res.rawData;
                    WeixinManager.getInstance().userInfo = res.userInfo;
                    WeixinManager.getInstance().userInfo.openid = self.openid;
                    WeixinManager.getInstance().userInfo.unionid = self.uinionid;
                    WeixinManager.getInstance().userInfo.gender = res.userInfo.gender;
                    TSCommon_1.TSCommon.log("wxUserinfo rawData=" + rawData);
                    TSCommon_1.TSCommon.dispatchEvent(TSCommon_1.TSCommon.onGeWXtUserInfoLogin, "");
                  }
                });
              }
            });
          }
        });
      };
      return WeixinManager;
    }();
    exports.WeixinManager = WeixinManager;
    cc._RF.pop();
  }, {
    "../../aladinSDK": "aladinSDK",
    "../Domain": "Domain",
    "../HallResources": "HallResources",
    "../HallUtils": "HallUtils",
    "../TSCommon": "TSCommon",
    "../common/WebRequest": "WebRequest"
  } ],
  XmlToJson: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7a877xFpeBA6JRKQckYLFEE", "XmlToJson");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var XmlToJson = cc.Class({
      parseXmlToJson: function parseXmlToJson(xmlStr) {
        var obj = {};
        if (1 == xml.nodeType) {
          if (xml.attributes.length > 0) {
            obj["@attributes"] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
              var attribute = xml.attributes.item(j);
              obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
            }
          }
        } else 3 == xml.nodeType && (obj = xml.nodeValue);
        if (xml.hasChildNodes()) for (var i = 0; i < xml.childNodes.length; i++) {
          var item = xml.childNodes.item(i);
          var nodeName = item.nodeName;
          if ("undefined" == typeof obj[nodeName]) obj[nodeName] = xmlToJson(item); else {
            if ("undefined" == typeof obj[nodeName].length) {
              var old = obj[nodeName];
              obj[nodeName] = [];
              obj[nodeName].push(old);
            }
            obj[nodeName].push(xmlToJson(item));
          }
        }
        return obj;
      }
    });
    XmlToJson.prototype.setXml = function(xml) {
      if (xml && "string" == typeof xml) {
        this.xml = document.createElement("div");
        this.xml.innerHTML = xml;
        this.xml = this.xml.getElementsByTagName("*")[0];
      } else "object" == ("undefined" === typeof xml ? "undefined" : _typeof(xml)) && (this.xml = xml);
    };
    XmlToJson.prototype.getXml = function() {
      return this.xml;
    };
    XmlToJson.prototype.parse = function(xml) {
      this.setXml(xml);
      return this.convert(this.xml);
    };
    XmlToJson.prototype.convert = function(xml) {
      if (1 != xml.nodeType) return null;
      var obj = {};
      obj.xtype = xml.nodeName.toLowerCase();
      var nodeValue = (xml.textContent || "").replace(/(\r|\n)/g, "").replace(/^\s+|\s+$/g, "");
      nodeValue && 1 == xml.childNodes.length && (obj.text = nodeValue);
      if (xml.attributes.length > 0) for (var j = 0; j < xml.attributes.length; j++) {
        var attribute = xml.attributes.item(j);
        obj[attribute.nodeName] = attribute.nodeValue;
      }
      if (xml.childNodes.length > 0) {
        var items = [];
        for (var i = 0; i < xml.childNodes.length; i++) {
          var node = xml.childNodes.item(i);
          var item = this.convert(node);
          item && items.push(item);
        }
        items.length > 0 && (obj.items = items);
      }
      return obj;
    };
    cc._RF.pop();
  }, {} ],
  XueLiuGameOverLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9daa7AQqMRAHr8r0FBcg6Dc", "XueLiuGameOverLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameDefs = require("GameDefs");
    var Resources = require("Resources");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultListBg: {
          default: null,
          type: cc.Sprite
        },
        resultList: {
          default: null,
          type: cc.ScrollView
        },
        playerPrefab: {
          default: null,
          type: cc.Prefab
        },
        showPlayerNode: {
          default: null,
          type: cc.Node
        },
        backBtn: {
          default: null,
          type: cc.Button
        },
        backToDeskBtn: {
          default: null,
          type: cc.Button
        },
        nextBtn: {
          default: null,
          type: cc.Button
        },
        continueBtn: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        this.isPrivateRoom = false;
      },
      onDestroy: function onDestroy() {
        this.stopLeftTimer();
      },
      onEnable: function onEnable() {
        this.startLeftTimer();
        var HallResources = require("HallResources");
        HallResources.recordPlayerLogToServer(HallResources.recordList.count_page);
      },
      init: function init(stWinStruct, players, playersName, playerAvatorUrls, myChair, showDetailResult, nCost, playerPoChan, bolIsPrivateRoom) {
        this.m_showDetailResult = showDetailResult;
        this.m_stWinStruct = stWinStruct;
        this.m_playersInfo = players;
        this.m_stPlayerName = playersName;
        this.m_playerAvators = playerAvatorUrls;
        this.m_myChair = myChair;
        this.m_leftTimerStop = false;
        this.m_leftTime = 60;
        this.m_nCost = nCost;
        this.m_nPoChan = playerPoChan;
        this.m_bolIsPrivateRoom = bolIsPrivateRoom;
        this.initData();
      },
      getLeftLeaveTime: function getLeftLeaveTime() {
        return this.m_leftTime;
      },
      startLeftTimer: function startLeftTimer() {
        var leftTimerNode = this.node.getChildByName("ready_btn").getChildByName("leave_timer");
        leftTimerNode.active = true;
        leftTimerNode.getComponent(cc.Label).string = "(" + this.m_leftTime + ")";
        var self = this;
        var callback = function callback() {
          if (self.m_leftTimerStop) return;
          self.m_leftTime -= 1;
          var label = leftTimerNode.getComponent(cc.Label);
          label.string = "(" + self.m_leftTime + ")";
          if (self.m_leftTime > 0) _TSCommon.TSCommon.performWithDelay(self, callback, 1); else {
            leftTimerNode.getComponent(cc.Label).string = "";
            leftTimerNode.active = false;
            G.goldGameReady = null;
            require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
          }
        };
        _TSCommon.TSCommon.performWithDelay(this, callback, 1);
      },
      stopLeftTimer: function stopLeftTimer() {
        this.m_leftTimerStop = true;
      },
      setContinueBtn: function setContinueBtn(func) {
        this.continueBtn.node.active = true;
        this.backToDeskBtn.node.active = true;
        this.continueBtn.node.setPosition(0, -600);
        var action4 = cc.moveBy(.3, 0, 300);
        this.continueBtn.node.runAction(action4);
        this.backToDeskBtn.node.setPosition(560, -628);
        var action5 = cc.moveBy(.3, 0, 300);
        this.backToDeskBtn.node.runAction(action5);
        this.nextBtn.node.active = false;
        this.backBtn.node.active = false;
        this.continueBtnFunc = func;
      },
      clickContinueBtn: function clickContinueBtn() {
        this.continueBtnFunc();
      },
      onLeaveGameClicked: function onLeaveGameClicked() {
        var leftTimerNode = this.node.getChildByName("ready_btn").getChildByName("leave_timer");
        this.stopLeftTimer();
        leftTimerNode.active = false;
        G.goldGameReady = null;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      },
      onDetailResultClicked: function onDetailResultClicked() {
        this.m_showDetailResult && this.m_showDetailResult();
      },
      setBackToDeskBtn: function setBackToDeskBtn(func) {
        this.backToDesk = func;
      },
      clickBackToDeskBtn: function clickBackToDeskBtn() {
        this.backToDesk();
      },
      setIsPrivateRoom: function setIsPrivateRoom(bol) {
        this.isPrivateRoom = bol;
      },
      getIsPrivateRoom: function getIsPrivateRoom() {
        return this.isPrivateRoom;
      },
      onReadyClicked: function onReadyClicked() {
        if (this.getIsPrivateRoom()) {
          G.matchGameReady = true;
          require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
          return;
        }
        this.node.active = false;
        var GameCfg = require("GameCfg");
        _TSCommon.TSCommon.dispatchEvent(GameCfg.GAME_RESTART, {
          isReady: true
        });
      },
      initData: function initData() {
        this.showPlayerNode.removeAllChildren();
        var maxScore = this.m_stWinStruct.nFinalScore[0];
        var maxScoreIndex = 0;
        for (var i = 1; i < GameDefs.PLAYER_COUNT; i++) if (maxScore < this.m_stWinStruct.nFinalScore[i]) {
          maxScore = this.m_stWinStruct.nFinalScore[i];
          maxScoreIndex = i;
        }
        for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) {
          var playerResultItem = cc.instantiate(this.playerPrefab);
          playerResultItem.parent = this.showPlayerNode;
          var score = 0;
          score = this.m_bolIsPrivateRoom ? this.m_stWinStruct.nFinalScore[i] : this.m_stWinStruct.nFinalScore[i] + this.m_nCost;
          console.log("这个玩家的最终分数：" + score);
          playerResultItem.getComponent("XueLiuPlayerResultItem").initData(this.m_stPlayerName[i], this.m_playerAvators[i], score, maxScoreIndex == i, i, this.m_myChair, this.m_nPoChan[i], this.m_bolIsPrivateRoom, this.m_stWinStruct.nSrcScore[i]);
          playerResultItem.setPosition(290 * i - 70, 300);
          var delay = cc.delayTime(.2 * i);
          var action = cc.moveBy(.3, 0, -300);
          var sequence = cc.sequence(delay, action);
          playerResultItem.runAction(sequence);
        }
        this.resultList.getComponent("XueLiuGameOverScrollList").initData(this.m_stWinStruct.cbWriteScoreTimes[this.m_myChair], this.m_stWinStruct.stSingleScore[this.m_myChair], this.m_myChair);
        this.resultListBg.node.setPosition(0, -432);
        var action1 = cc.moveBy(.3, 0, 300);
        this.resultListBg.node.runAction(action1);
        this.backBtn.node.setPosition(-292, -602);
        var action2 = cc.moveBy(.3, 0, 300);
        this.backBtn.node.runAction(action2);
        this.nextBtn.node.setPosition(292, -602);
        var action3 = cc.moveBy(.3, 0, 300);
        this.nextBtn.node.runAction(action3);
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs",
    GameLibSink: "GameLibSink",
    HallResources: "HallResources",
    Resources: "Resources"
  } ],
  XueLiuGameOverScrollList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef33dvQ4+tIAp8FBX07gqMt", "XueLiuGameOverScrollList");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var _WeixinManager = require("../../weixin/WeixinManager");
    var XueLiuGameOverScrollList = cc.Class({
      extends: cc.Component,
      properties: {
        resultItem: cc.Prefab
      },
      onLoad: function onLoad() {
        this.m_coinList = new Array();
        this.maxHeight = 0;
      },
      start: function start() {},
      initData: function initData(cbWriteScoreTimes, stSingleScoreItem, myChair) {
        console.log("展示滑动列表内容");
        console.log(cbWriteScoreTimes);
        console.log(stSingleScoreItem);
        var self = this;
        this.content = this.node.getComponent(cc.ScrollView).content;
        self.maxHeight = this.content.height;
        this.content.removeAllChildren();
        for (var i = 0; i < cbWriteScoreTimes; i++) {
          var item = cc.instantiate(this.resultItem);
          item.parent = this.content;
          item.getComponent("XueLiuHuTypeItem").initData(stSingleScoreItem[i], myChair);
          var y = -25 - i * (item.height + 5);
          item.setPosition(0, y);
        }
        var newHeight = 40 + (this.resultItem.data.height + 5) * cbWriteScoreTimes;
        this.content.height = newHeight;
      }
    });
    module.exports = XueLiuGameOverScrollList;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../weixin/WeixinManager": "WeixinManager"
  } ],
  XueLiuGameResultLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4af1bVemK5CA4fb/E+Ar6gO", "XueLiuGameResultLayer");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameLibSink = require("GameLibSink");
    var GameDefs = require("GameDefs");
    var Resources = require("Resources");
    cc.Class({
      extends: cc.Component,
      properties: {
        PengGangPrefab: {
          default: null,
          type: cc.Prefab
        },
        START_TAG: 1e3
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this, true);
        var windowSize = cc.view.getVisibleSize();
        this.node.getChildByName("bg").setContentSize(windowSize);
      },
      onDestroy: function onDestroy() {
        this.stopLeaveTimer();
      },
      onTouch: function onTouch(event) {},
      setWinStructInfo: function setWinStructInfo(stWinStruct, playersInfo, stPlayerName, playerAvators, eatParisSpriteFrame, cardSpriteFrame, roomInfo, leftTime) {
        this.m_stWinStruct = stWinStruct;
        this.m_playersInfo = playersInfo;
        this.m_stPlayerName = stPlayerName;
        this.m_playerAvators = playerAvators;
        this.m_spriteFrame = eatParisSpriteFrame;
        this.m_cardSpriteFrame = cardSpriteFrame;
        this.m_roomInfo = roomInfo;
        this.m_leftTime = leftTime;
        this.m_leaveTimerStop = false;
      },
      loadUI: function loadUI() {
        this.addAvatarAndName();
        var items = this.node.getChildByName("items");
        for (var i = 0; i < 4; i++) i >= this.m_roomInfo.nPlayerCount && (items.children[i].active = false);
        for (var i = 0; i < this.m_roomInfo.nPlayerCount; i++) {
          var scoreLabel = items.children[i].getChildByName("player_score");
          scoreLabel.getComponent(cc.Label).isSystemFontUsed = false;
          this.m_stWinStruct.nScore[i] >= 0 ? scoreLabel.getComponent(cc.Label).string = "+" + this.m_stWinStruct.nScore[i] : scoreLabel.getComponent(cc.Label).string = this.m_stWinStruct.nScore[i];
        }
        var self = this;
        cc.loader.loadRes("texture/game/gameOver/lose", cc.Atlas, function(error, font) {
          for (var i = 0; i < self.m_roomInfo.nPlayerCount; i++) {
            var scoreLabel = items.children[i].getChildByName("player_score");
            self.m_stWinStruct.nScore[i] < 0 && (scoreLabel.getComponent(cc.Label).font = font);
          }
        });
        cc.loader.loadRes("texture/game/gameOver/win", cc.Atlas, function(error, font) {
          for (var i = 0; i < self.m_roomInfo.nPlayerCount; i++) {
            var scoreLabel = items.children[i].getChildByName("player_score");
            self.m_stWinStruct.nScore[i] >= 0 && (scoreLabel.getComponent(cc.Label).font = font);
          }
        });
        this.addPairsEatAndPeng();
        this.addHuPaiInfo();
        this.getIsShare();
        this.startLeaveTimer();
      },
      getSpriteFrameNameByValue: function getSpriteFrameNameByValue(value) {
        return Resources.get_frameName("hh_li_", value);
      },
      addAvatarAndName: function addAvatarAndName() {
        var items = this.node.getChildByName("items");
        for (var i = 0; i < this.m_roomInfo.nPlayerCount; i++) {
          var nameLabel = items.children[i].getChildByName("player_name");
          nameLabel.getComponent(cc.Label).string = this.m_stPlayerName[i];
        }
        var self = this;
        var addAvatorFace = function addAvatorFace(index) {
          if (index >= self.m_roomInfo.nPlayerCount) return;
          var imgurl = self.m_playerAvators[index];
          imgurl ? cc.loader.load({
            url: imgurl,
            type: "jpg"
          }, function(err, texture) {
            err || (items.children[index].getChildByName("face_icon").getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
            addAvatorFace(index + 1);
          }) : addAvatorFace(index + 1);
        };
        addAvatorFace(0);
      },
      addPairsEatAndPeng: function addPairsEatAndPeng() {
        var items = this.node.getChildByName("items");
        var startX = -370;
        var startY = 0;
        var distanceX = 100;
        var isHuArray = [ 0, 0, 0, 0 ];
        for (var i = 0; i < 4; i++) i == this.m_stWinStruct.cbWinChair && (isHuArray[i] = 1);
        for (var i = 0; i < 4; i++) {
          for (var j = 0; j < items.children[i].getChildByName("holds").childrenCount; j++) items.children[i].getChildByName("holds").children[j].active = false;
          for (var j = 0; j < GameDefs.MAX_WEAVE; j++) items.children[i].getChildByTag(this.START_TAG + 10 * i + j) && items.children[i].removeChildByTag(this.START_TAG + 10 * i + j);
        }
        for (var i = 0; i < 4; i++) {
          for (var j = 0; j < this.m_playersInfo[i].nWeaveCount; j++) {
            var weaveItem = this.m_playersInfo[i].showCardSuits[j];
            var pairsItem = cc.instantiate(this.PengGangPrefab);
            var RangeCardLayer = pairsItem.getComponent("RangeCardLayer");
            RangeCardLayer.init(weaveItem.cbWeaveKind, weaveItem.cbCardData, 1, this.m_spriteFrame);
            pairsItem.x = startX + j * distanceX;
            pairsItem.y = startY - 10;
            pairsItem.active = true;
            pairsItem.setScale(.6);
            items.children[i].addChild(pairsItem, 1, this.START_TAG + 10 * i + j);
          }
          for (var j = 0; j < this.m_playersInfo[i].cbHoldCardCount; j++) {
            items.children[i].getChildByName("holds").children[j].active = true;
            var frameName = this.getSpriteFrameNameByValue(this.m_playersInfo[i].cbHoldCards[j]);
            items.children[i].getChildByName("holds").children[j].getComponent(cc.Sprite).spriteFrame = this.m_cardSpriteFrame.getSpriteFrame(frameName);
            items.children[i].getChildByName("holds").children[j].x = startX + this.m_playersInfo[i].nWeaveCount * distanceX - distanceX / 2 + 45 * j;
            items.children[i].getChildByName("holds").children[j].y = 0;
            1 == isHuArray[i] && j == this.m_playersInfo[i].cbHoldCardCount - 1 && (items.children[i].getChildByName("holds").children[j].x += 45);
          }
        }
      },
      addHuPaiInfo: function addHuPaiInfo() {
        var items = this.node.getChildByName("items");
        for (var i = 0; i < 4; i++) for (var j = 0; j < cbWriteScoreTimes; j++) {
          var stSinleScore = stWinStruct.stSingleScore[i][j];
          var huMsg = "";
          for (var k = 0; k < stSinleScore.cbHuTypeCount; k++) if (23 != stSinleScore.cbHuType[k] && 24 != stSinleScore.cbHuType[k]) {
            k > 0 && (huMsg += ",");
            huMsg += GameDefs.HUTYPE_STRING[stSinleScore.cbHuType[k] - 1];
          }
          items.children[i].getChildByName("game_hu_type").getComponent(cc.Label).string = huMsg;
        }
        for (var i = 0; i < GameDefs.PLAYER_COUNT; i++) {
          var gangNum = 0;
          if (gangNum <= 0) items.children[i].getChildByName("gangfan_label").active = false; else {
            items.children[i].getChildByName("gangfan_label").active = true;
            for (var j = 0; j < items.children[i].getChildByName("gangcards").childrenCount; j++) items.children[i].getChildByName("gangcards").children[j].active = j < gangNum;
          }
        }
      },
      addCardWall: function addCardWall() {
        var MAX_LINE_NUM = 23;
        var scale = .6;
        var wallScrollView = this.node.getChildByName("mj_lefts");
        var viewSize = wallScrollView.getChildByName("view").getContentSize();
        var contentNode = wallScrollView.getChildByName("view").getChildByName("content");
        if (3 == this.m_roomInfo.nPlayerCount && !this.m_fixY) {
          wallScrollView.y += 100;
          this.m_fixY = true;
        }
        contentNode.removeAllChildren();
        var startX = -590;
        var startY = -43;
        for (var i = 0; i < this.m_stWinStruct.cbWall.length; i++) {
          var leftMjNode = new cc.Node();
          leftMjNode.active = true;
          var sprite = leftMjNode.addComponent(cc.Sprite);
          var frameName = this.getSpriteFrameNameByValue(this.m_stWinStruct.cbWall[i]);
          var frame = this.m_cardSpriteFrame.getSpriteFrame(frameName);
          sprite.spriteFrame = frame;
          leftMjNode.setScale(scale);
          leftMjNode.x = startX + i % 26 * 79 * scale;
          leftMjNode.y = startY - Math.floor(i / 26) * leftMjNode.getContentSize().height * scale - 10;
          contentNode.addChild(leftMjNode);
        }
        wallScrollView.getComponent(cc.ScrollView).scrollToTop(.05);
      },
      startLeaveTimer: function startLeaveTimer() {
        var leavetimerNode = this.node.getChildByName("leave_timer");
        leavetimerNode.getComponent(cc.Label).string = this.m_leftTime;
        var self = this;
        var callback = function callback() {
          if (self.m_leaveTimerStop) return;
          self.m_leftTime -= 1;
          leavetimerNode.getComponent(cc.Label).string = self.m_leftTime;
          self.m_leftTime > 0 ? _TSCommon.TSCommon.performWithDelay(self, callback, 1) : require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
        };
        _TSCommon.TSCommon.performWithDelay(this, callback, 1);
      },
      stopLeaveTimer: function stopLeaveTimer() {
        this.m_leaveTimerStop = true;
      },
      onLeaveGame: function onLeaveGame(event) {
        var DeskScene = this.node.parent.getComponent("DeskScene");
        G.matchGameReady = false;
        require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
      },
      getIsShare: function getIsShare() {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&apptype=1";
        var self = this;
        var httpCallback = function httpCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data).table[0];
            if (1 == parseInt(jsonObject.IsShareAward)) {
              var sharBtn = self.node.getChildByName("share_btn");
              sharBtn.getChildByName("share_tips").active = false;
            }
          }
        };
        require("HallWebRequest").getInstance().httpRequest("WxDailyShareAwardGetInfo.aspx", szData, httpCallback);
      },
      onShareGame: function onShareGame(event) {
        if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
          var self = this;
          var HallResources = require("HallResources");
          "mqqbrowser" != cc.sys.browserType && "wechatgame" != cc.sys.browserType || wx.shareAppMessage({
            title: "无敌是多么的寂寞，你怎么还不来挑战我？",
            imageUrl: HallResources.resultShareImgUrl,
            success: function success(res) {
              console.log("转发成功!!!");
              self.onShareFinish();
            },
            fail: function fail(res) {
              console.log("转发失败!!!");
            }
          });
        }
      },
      onShareFinish: function onShareFinish() {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var szData = "UserID=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&apptype=1";
        var self = this;
        var httpCallback = function httpCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            if (1 == parseInt(jsonObject.RetCode)) {
              Resources.showRewardTips("+" + jsonObject.AwardAmount, true);
              self.node.parent.getComponent("DeskScene").getGameLib().refreshGold();
              var sharBtn = self.node.getChildByName("share_btn");
              sharBtn.getChildByName("share_tips").active = false;
            }
          }
        };
        require("HallWebRequest").getInstance().httpRequest("WxDailyShareAwardGetAward.aspx", szData, httpCallback);
      },
      onStartGame: function onStartGame(event) {
        var DeskScene = this.node.parent.getComponent("DeskScene");
        if (DeskScene && DeskScene.getIsPrivateRoom()) {
          G.matchGameReady = true;
          G.goldGameReady = null;
          require("GameLibSink").getInstance().getGameLib().leaveGameRoom();
        } else {
          G.matchGameReady = false;
          this.node.active = false;
          var GameCfg = require("GameCfg");
          _TSCommon.TSCommon.dispatchEvent(GameCfg.GAME_RESTART, {
            isReady: true
          });
        }
      }
    });
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    GameDefs: "GameDefs",
    GameLibSink: "GameLibSink",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources"
  } ],
  XueLiuHuTypeItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3df88uaMChDfpNR37KiseZx", "XueLiuHuTypeItem");
    "use strict";
    var GameDefs = require("GameDefs");
    cc.Class({
      extends: cc.Component,
      properties: {
        huName: {
          default: null,
          type: cc.Label
        },
        hformDirection: {
          default: null,
          type: cc.Label
        },
        beishu: {
          default: null,
          type: cc.Label
        },
        huScore: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {},
      getDirectionName: function getDirectionName(a, b) {
        var pos = a - b;
        var showWinDir = "对家";
        -2 == pos || 2 == pos ? showWinDir = "对家" : -1 == pos || 3 == pos ? showWinDir = "下家" : -3 != pos && 1 != pos || (showWinDir = "上家");
        return showWinDir;
      },
      initData: function initData(stSinleScore, myChair) {
        this.beishu.string = Math.pow(2, stSinleScore.cbFan) + "倍";
        6 != stSinleScore.cbScoreType && 5 != stSinleScore.cbScoreType || (this.beishu.string = "");
        stSinleScore.nScore > 0 ? this.huScore.string = "+" + stSinleScore.nScore : this.huScore.string = stSinleScore.nScore;
        var strType = GameDefs.SCORE_TYPE_STRING[stSinleScore.cbScoreType];
        myChair == stSinleScore.cbFangpaoChair && stSinleScore.nScore < 0 && (strType = GameDefs.OTHER_SCORE_TYPE_STRING[stSinleScore.cbScoreType]);
        var showWinDir = "";
        myChair == stSinleScore.cbWinChair && (showWinDir = 1 == stSinleScore.cbScoreType || 2 == stSinleScore.cbScoreType || 4 == stSinleScore.cbScoreType ? "三家" : this.getDirectionName(stSinleScore.cbFangpaoChair, stSinleScore.cbWinChair));
        myChair == stSinleScore.cbFangpaoChair && myChair != stSinleScore.cbWinChair && (showWinDir = this.getDirectionName(stSinleScore.cbFangpaoChair, stSinleScore.cbWinChair));
        if (2 == stSinleScore.cbScoreType) if (stSinleScore.nScore > 0) showWinDir = "三家"; else {
          showWinDir = this.getDirectionName(myChair, stSinleScore.cbWinChair);
          strType = GameDefs.OTHER_SCORE_TYPE_STRING[stSinleScore.cbScoreType];
        } else 5 != stSinleScore.cbScoreType && 6 != stSinleScore.cbScoreType || (showWinDir = stSinleScore.nScore < 0 ? "三家" : this.getDirectionName(stSinleScore.cbFangpaoChair, myChair));
        this.hformDirection.string = showWinDir;
        var huMsg = "";
        if (stSinleScore.cbHuTypeCount > 0) {
          huMsg = "(";
          for (var i = 0; i < stSinleScore.cbHuTypeCount; i++) if (23 != stSinleScore.cbHuType[i] && 24 != stSinleScore.cbHuType[i]) {
            i > 0 && (huMsg += ",");
            huMsg += GameDefs.HUTYPE_STRING[stSinleScore.cbHuType[i] - 1];
          }
          stSinleScore.cbGen > 0 && (huMsg = huMsg + "," + stSinleScore.cbGen + "根");
          huMsg += ")";
        }
        this.huName.string = strType + huMsg;
      }
    });
    cc._RF.pop();
  }, {
    GameDefs: "GameDefs"
  } ],
  XueLiuPlayerResultItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8bdbhdSlZGp4B0owPEK5+q", "XueLiuPlayerResultItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        playerName: {
          default: null,
          type: cc.Label
        },
        headIcon: {
          default: null,
          type: cc.Sprite
        },
        frameBg: {
          default: null,
          type: cc.Sprite
        },
        winCount: {
          default: null,
          type: cc.Label
        },
        loseCount: {
          default: null,
          type: cc.Label
        },
        bigWinPlayer: {
          default: null,
          type: cc.Sprite
        },
        poChan: {
          default: null,
          type: cc.Sprite
        },
        goldSp: {
          default: null,
          type: cc.Sprite
        },
        protected: {
          default: null,
          type: cc.Sprite
        },
        levelup: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {},
      initData: function initData(name, headUrl, finalScore, bolBigWinScore, index, myIndex, nPoChan, bolIsPrivateRoom, nSrcScore) {
        var self = this;
        var pos = myIndex - index;
        this.goldSp.node.active = !bolIsPrivateRoom;
        var posName = "【对家】";
        0 == pos ? posName = "【三家】" + name : -2 == pos || 2 == pos ? posName = "【对家】" + name : -1 == pos || 3 == pos ? posName = "【下家】" + name : -3 != pos && 1 != pos || (posName = "【上家】" + name);
        var frameData = "texture/game/gameOver/loseFrame";
        index == myIndex && (frameData = "texture/game/gameOver/myFrame");
        this.playerName.string = posName;
        cc.loader.loadRes(frameData, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.frameBg.spriteFrame = spriteFrame);
        });
        this.bigWinPlayer.node.active = bolBigWinScore;
        var showScore = 0;
        showScore = bolIsPrivateRoom ? nSrcScore : finalScore;
        if (showScore > 0) {
          this.winCount.string = showScore;
          this.winCount.node.active = true;
          console.log("晋升之后，原始分数：" + nSrcScore + "后来分数：" + finalScore);
          bolIsPrivateRoom && finalScore < nSrcScore && (this.levelup.node.active = true);
        } else {
          this.loseCount.string = showScore;
          this.loseCount.node.active = true;
          console.log("保分之后，原始分数：" + nSrcScore + "后来分数：" + finalScore);
          finalScore > nSrcScore && (this.protected.node.active = true);
        }
        var imgurl = headUrl;
        imgurl && cc.loader.load({
          url: imgurl,
          type: "jpg"
        }, function(err, texture) {
          err || (self.headIcon.spriteFrame = new cc.SpriteFrame(texture));
        });
        1 == nPoChan && (this.poChan.node.active = true);
      }
    });
    cc._RF.pop();
  }, {} ],
  aladinSDK: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "777efDeNqNGM7bo8dyausNp", "aladinSDK");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Data = function() {
      function Data() {}
      Data.conf = {
        sdk_version: "1.3.8",
        appid: "",
        base_url: "https://mprogram.boomegg.cn/sprogram/ads/c/ad/",
        reportUrl: "https://distribute-stats.boomegg.cn",
        more_width: 144,
        more_height: 144,
        interval: 1e4,
        banner_interval: 6e4,
        allowShare: 0,
        init_suc: false,
        is_report: true,
        windowWidth: 0,
        windowHeight: 0,
        changelog: "",
        changelogArr: [],
        default_params: {},
        gdt_pos_left: 0,
        gdt_pos_top: 0,
        gdt_pos_width: 300,
        gdt_pos_height: 100,
        coverleft: false,
        coverright: false,
        covertop: false,
        coverbottom: false,
        cb: null,
        openId: "",
        extraAppId: "",
        gdt: ""
      };
      Data.switches = {
        isShowMore: false,
        isShowBanner: false,
        isShowGDT: false
      };
      return Data;
    }();
    var Report = function() {
      function Report() {}
      Report.initReportParam = function() {
        Report._handleAdSource();
        var language = "";
        var equipment = "";
        var channel = "";
        var systerm = "";
        var wx_version = "";
        var res = wx.getSystemInfoSync();
        language = res.language;
        equipment = res.platform;
        channel = res.model;
        systerm = res.system;
        wx_version = res.version;
        Report.commStr.report_prefix1 = "t_event|distribute_all|";
        Report.commStr.report_prefix2 = equipment + "|" + channel + "|" + Report.commStr.version + "|" + systerm + "||||" + language + "||" + wx_version + "|" + Data.conf.appid + "|" + Report.adStr.Ads + " |" + Report.adStr.AdsPos + "|" + Report.adStr.Layers + "|0|";
      };
      Report._handleAdSource = function() {
        var opts = wx.getLaunchOptionsSync();
        var appId = "", Ads = "", AdsPos = "";
        var query = opts.query;
        if (query.scene) {
          var scene = query.scene;
          if (scene) {
            var sceneArray = decodeURIComponent(scene).split(",");
            appId = sceneArray[0];
            Ads = sceneArray[1];
            AdsPos = sceneArray[2];
          }
        } else if (query.tgt && query.Ads && query.AdsPos) {
          appId = query.tgt;
          Ads = query.Ads;
          AdsPos = query.AdsPos;
        } else if (opts.referrerInfo && opts.referrerInfo.extraData) {
          var extraData = opts.referrerInfo.extraData;
          appId = extraData.tgt;
          Ads = extraData.Ads;
          AdsPos = extraData.AdsPos;
        }
        Ads && AdsPos && appId && wx.navigateToMiniProgram({
          appId: appId,
          path: "pages/index/index",
          extraData: {
            tgt: appId,
            Ads: Ads,
            AdsPos: AdsPos
          },
          success: function success(res) {},
          complete: function complete(res) {
            wx.hideLoading();
          }
        });
        Report.adStr.Ads = Ads;
        Report.adStr.AdsPos = AdsPos;
        Report.adStr.SourceAppId = appId;
      };
      Report.reportWithAppId = function(appId, get_type, data) {
        void 0 === data && (data = "");
        Data.conf.appid = appId;
        Report.initReportParam();
        Report._report(get_type, data);
      };
      Report.report = function(get_type, data) {
        void 0 === data && (data = "");
        if (!Data.conf.init_suc || !Data.conf.is_report) return;
        Report._report(get_type, data);
      };
      Report._report = function(get_type, data) {
        void 0 === data && (data = "");
        var arr = get_type.split("_");
        var report_value = 0;
        if (arr.length < 2) {
          wx.showToast({
            title: "参数传递错误",
            icon: "none"
          });
          return;
        }
        get_type == Report.ReportTypes.OPEN_ID ? Data.conf.openId = data : Data.conf.extraAppId = data;
        if (get_type == Report.ReportTypes.PAY_MENT) {
          if ("number" != typeof data) {
            wx.showToast({
              title: "参数传递错误，int类型",
              icon: "none",
              duration: 3e3
            });
            return;
          }
          report_value = data;
        }
        var type = arr[0];
        var sub_type = arr[1];
        var str = Report.commStr.report_prefix1 + Report._getCurrentDate() + "|" + Report._getTimeStapm() + "|" + Report.commStr.report_prefix2 + Data.conf.openId + "|" + type + "|" + sub_type + "|" + report_value + "|" + Data.conf.extraAppId;
        Report.raw_report(str);
      };
      Report._getCurrentDate = function() {
        var date = new Date();
        var seperator1 = "-";
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var strDate = date.getDate();
        month >= 1 && month <= 9 && (month = "0" + month);
        strDate >= 0 && strDate <= 9 && (strDate = "0" + strDate);
        var currentdate = Number(year + month + strDate);
        return currentdate;
      };
      Report._getTimeStapm = function() {
        return Date.parse(new Date().toString()) / 1e3;
      };
      Report.raw_report = function(data_req) {
        var baseCode = Report._base64encode(data_req);
        wx.request({
          url: Data.conf.reportUrl + "/report",
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          data: {
            info: baseCode
          },
          method: "post",
          success: function success(res) {},
          fail: function fail(res) {},
          complete: function complete(res) {}
        });
      };
      Report._base64encode = function(str) {
        var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var out, i, len;
        var c1, c2, c3;
        len = str.length;
        i = 0;
        out = "";
        while (i < len) {
          c1 = 255 & str.charCodeAt(i++);
          if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt((3 & c1) << 4);
            out += "==";
            break;
          }
          c2 = str.charCodeAt(i++);
          if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt((3 & c1) << 4 | (240 & c2) >> 4);
            out += base64EncodeChars.charAt((15 & c2) << 2);
            out += "=";
            break;
          }
          c3 = str.charCodeAt(i++);
          out += base64EncodeChars.charAt(c1 >> 2);
          out += base64EncodeChars.charAt((3 & c1) << 4 | (240 & c2) >> 4);
          out += base64EncodeChars.charAt((15 & c2) << 2 | (192 & c3) >> 6);
          out += base64EncodeChars.charAt(63 & c3);
        }
        return out;
      };
      Report.ReportTypes = {
        SHOW: "1_1",
        LOGIN: "1_2",
        OPEN_ID: "1_3",
        AUTH: "1_4",
        PAY_MENT: "6_1",
        MORE_FOLD: "2_1",
        MORE_CLICK: "2_2",
        MORE_LONG_CLICK: "2_3"
      };
      Report.commStr = {
        report_prefix1: "",
        report_prefix2: "",
        version: ""
      };
      Report.adStr = {
        Ads: "",
        AdsPos: "",
        SourceAppId: "",
        Layers: 0
      };
      return Report;
    }();
    var SDK = function() {
      function SDK() {}
      SDK.init = function(appId, version, params, cb, report) {
        void 0 === report && (report = true);
        var default_params = {
          gdt_left: -1,
          gdt_top: -1,
          gdt_bottom: 0,
          gdt_right: -1,
          gdt_widht: 300
        };
        Data.conf.cb = cb;
        Data.conf.is_report = report;
        Report.commStr.version = version;
        if (params) {
          default_params.gdt_left = void 0 != params.gdt_left ? params.gdt_left : default_params.gdt_left;
          default_params.gdt_top = void 0 != params.gdt_top ? params.gdt_top : default_params.gdt_top;
          default_params.gdt_bottom = void 0 != params.gdt_bottom ? params.gdt_bottom : default_params.gdt_bottom;
          default_params.gdt_right = void 0 != params.gdt_right ? params.gdt_right : default_params.gdt_right;
          default_params.gdt_widht = void 0 != params.gdt_widht ? params.gdt_widht : default_params.gdt_widht;
        }
        var getSystemInfoSync = wx.getSystemInfoSync();
        Data.conf.windowWidth = getSystemInfoSync.windowWidth;
        Data.conf.windowHeight = getSystemInfoSync.windowHeight;
        Data.conf.default_params = default_params;
        SDK.setGDT_pos(default_params, default_params.gdt_widht, 108 * default_params.gdt_widht / 375);
        if (SDK.data.isInited) return;
        Data.conf.appid = appId;
        SDK.data.isInited = true;
        EngineCode.initNodes();
        SDK.initData();
        Data.conf.init_suc = true;
        Report.initReportParam();
        Report.report(Report.ReportTypes.SHOW);
      };
      SDK.setGDT_pos = function(default_params, width, height) {
        var gdt_pos_left = 0;
        var gdt_pos_top = 0;
        var gdt_pos_width = default_params.gdt_widht;
        gdt_pos_top = -1 == default_params.gdt_top ? Data.conf.windowHeight - height - default_params.gdt_bottom - 10 : default_params.gdt_top;
        if (-1 == default_params.gdt_right && -1 == default_params.gdt_left) gdt_pos_left = (Data.conf.windowWidth - width) / 2; else if (-1 == default_params.gdt_right && -1 != default_params.gdt_left) {
          Data.conf.coverleft = true;
          gdt_pos_left = default_params.gdt_left;
        } else {
          Data.conf.coverright = true;
          gdt_pos_left = Data.conf.windowWidth - width + default_params.gdt_right;
        }
        Data.conf.gdt_pos_left = gdt_pos_left;
        Data.conf.gdt_pos_top = gdt_pos_top;
        Data.conf.gdt_pos_width = gdt_pos_width;
      };
      SDK.initData = function() {
        wx.request({
          url: Data.conf.base_url + "moregame",
          header: {
            "content-type": "application/x-www-form-urlencoded"
          },
          data: {
            id: Data.conf.appid
          },
          method: "get",
          success: function success(response) {
            if (!response.data) {
              console.log("提示：未配置数据，请联系对接人");
              return;
            }
            SDK.parseData(response);
          }
        });
      };
      SDK.parseData = function(data) {
        if (data.data) {
          var d = data.data.data;
          Data.conf.allowShare = data.data.open;
          d.redirect && wx.navigateToMiniProgram({
            appId: d.redirect,
            path: "pages/index/index",
            success: function success(res) {},
            complete: function complete(res) {}
          });
          if (d.changelog) {
            Data.conf.changelog = d.changelog;
            var arr = [];
            d.changelog.indexOf("$$") ? Data.conf.changelogArr = d.changelog.split("$$") : Data.conf.changelogArr.push(d.changelog);
          }
          d.interval && (Data.conf.interval = d.interval);
          d.banner_interval && (Data.conf.banner_interval = d.banner_interval);
          if (d.sdk_version && d.sdk_version != Data.conf.sdk_version) {
            var new_versionArr = d.sdk_version.split(".");
            var local_versionArr = Data.conf.sdk_version.split(".");
            var big_local = parseInt(local_versionArr[0]);
            var middle_local = parseInt(local_versionArr[1]);
            var small_local = parseInt(local_versionArr[2]);
            var big_new = parseInt(new_versionArr[0]);
            var middle_new = parseInt(new_versionArr[1]);
            var small_new = parseInt(new_versionArr[2]);
            if (big_local <= big_new && middle_local <= middle_new && small_local < small_new) {
              console.log("%c 请升级SDK版本：", "color:red;font-size:26px;font-weight:bold;");
              console.log("%c 当前版本号：" + Data.conf.sdk_version, "color:#000;font-size:15px;");
              console.log("%c 最新版本号：" + d.sdk_version, "color:#000;font-size:15px;");
              console.log("%c 修改内容 ：", "color:#000;font-size:17px;");
              Data.conf.changelogArr.forEach(function(item) {
                console.log("%c     " + item, "color:#000;font-size:15px;");
              });
              console.log("%c 最新版本下载地址：http://ad-static.boomegg.cn/sdk/cocos/" + d.sdk_version + ".zip", "color:#333;font-size:22px;font-weight:bold;");
            }
          }
          if (d.icon && d.icon.length > 0) {
            SDK.data.more_list = d.icon;
            Data.switches.isShowMore = true;
          }
          if (d.gdt) {
            Data.conf.gdt = d.gdt;
            Data.switches.isShowGDT = true;
          }
          if (d.bottom && d.bottom.length > 0) {
            SDK.data.banner_list = d.bottom;
            Data.switches.isShowGDT || (Data.switches.isShowBanner = true);
          }
          if (0 == d.bottom.length && 0 == d.icon.length && "" == d.gdt) {
            console.log("提示：未配置数据，请联系管理员");
            return;
          }
          d.bottom.length > 0 && d.bottom.every(function(val, index) {
            if (!val.allow && "" == val.preview) {
              console.log("提示：配置错误，banner未配置preview或者未不允许跳转，请联系管理员");
              return false;
            }
          });
          d.icon.length > 0 && d.icon.every(function(val, index) {
            if (!val.allow && "" == val.preview) {
              console.log("提示：配置错误，icon未配置preview或者未不允许跳转，请联系管理员");
              return false;
            }
          });
          Carousel.Init();
        } else console.log("get data error ...");
        Data.conf.cb && Data.conf.cb();
      };
      SDK._getImgType = function(img_url) {
        var url_component = img_url.split("/");
        return url_component[url_component.length - 1].split("?")[0].split(".")[1];
      };
      SDK._preview = function(url, reportAppId) {
        Report.report(Report.ReportTypes.MORE_CLICK);
        wx.previewImage({
          urls: [ url ],
          success: function success() {
            Report.report(Report.ReportTypes.MORE_FOLD, reportAppId);
          }
        });
      };
      SDK._toMiniProgram = function(type, appId, targetAppId, params) {
        wx.showLoading({
          title: "正在跳转"
        });
        Report.report(Report.ReportTypes.MORE_CLICK, targetAppId);
        var typeName = 1 == type ? "aladin_icon" : "aladin_banr";
        var data = null;
        data = params ? {
          tgt: targetAppId,
          Ads: typeName,
          params: params,
          AdsPos: Data.conf.appid
        } : {
          tgt: targetAppId,
          Ads: typeName,
          AdsPos: Data.conf.appid
        };
        wx.navigateToMiniProgram({
          appId: appId,
          path: "pages/index/index",
          extraData: data,
          success: function success(res) {
            Report.report(Report.ReportTypes.MORE_FOLD, targetAppId);
          },
          complete: function complete(res) {
            wx.hideLoading();
          }
        });
      };
      SDK.data = {
        isInited: false,
        more_list: [],
        banner_list: [],
        fn: null
      };
      return SDK;
    }();
    var GDT = function() {
      function GDT() {}
      GDT.Run = function() {
        GDT.Next();
      };
      GDT.Next = function() {
        GDT.data.adid && GDT.data.adid.destroy();
        EngineCode.cache.banner__node.active && (EngineCode.cache.banner__node.active = false);
        GDT.data.adid = wx.createBannerAd({
          adUnitId: Data.conf.gdt,
          style: {
            left: Data.conf.gdt_pos_left,
            width: Data.conf.gdt_pos_width,
            top: Data.conf.gdt_pos_top
          }
        });
        GDT.data.adid.onError(function(err) {
          if (1004 == err.errCode && !EngineCode.cache.banner__node.active && SDK.data.banner_list.length > 0) {
            EngineCode.cache.banner__node.active = true;
            Carousel.Next(Carousel.TYPES.BANNER);
          }
        });
        if (GDT.data.adid) {
          GDT.data.adid.onResize(function() {
            var gdt_pos_left = 0;
            var gdt_pos_top = 0;
            var gdt_pos_width = 300;
            var coverright = Data.conf.coverright;
            var coverleft = Data.conf.coverleft;
            var covertop = Data.conf.covertop;
            var coverbottom = Data.conf.coverbottom;
            if (GDT.data.adid) {
              var realWidth = GDT.data.adid.style.realWidth;
              var realHeight = GDT.data.adid.style.realHeight;
              gdt_pos_top = covertop ? Data.conf.default_params["gdt_top"] : Data.conf.windowHeight - realHeight - Data.conf.default_params["gdt_bottom"] - 10;
              gdt_pos_left = coverright || coverleft ? !coverright && coverleft ? Data.conf.default_params["gdt_left"] : Data.conf.windowWidth - realWidth + Data.conf.default_params["gdt_right"] : (Data.conf.windowWidth - realWidth) / 2;
              GDT.data.adid.style.left = gdt_pos_left;
              GDT.data.adid.style.top = Data.conf.gdt_pos_top;
            }
          });
          GDT.data.adid.show();
        }
        GDT.data.timer = setTimeout(GDT.Next, Data.conf.banner_interval);
      };
      GDT.StopTimer = function() {
        if (GDT.data.timer) {
          clearTimeout(GDT.data.timer);
          GDT.data.timer = 0;
        }
      };
      GDT.Hide = function() {
        try {
          GDT.data.adid.destroy();
        } catch (error) {}
        if (GDT.data.adid) {
          GDT.data.adid = 0;
          GDT.StopTimer();
        }
      };
      GDT.data = {
        adid: 0,
        timer: 0
      };
      return GDT;
    }();
    var EngineCode = function() {
      function EngineCode() {}
      EngineCode.show = function(type) {
        if (type != Carousel.TYPES.MORE || EngineCode.cache.more__node.active) if (type != Carousel.TYPES.BANNER || EngineCode.cache.banner__node.active) type == Carousel.TYPES.GDT && (GDT.data.adid || GDT.Run()); else {
          EngineCode.cache.banner__node.active = true;
          Carousel.Run(type);
        } else {
          EngineCode.cache.more__node.active = true;
          Carousel.Run(type);
        }
      };
      EngineCode.HideMore = function() {
        EngineCode.hide(Carousel.TYPES.MORE);
      };
      EngineCode.HideBanner = function() {
        EngineCode.hide(Carousel.TYPES.BANNER);
      };
      EngineCode.ShowMore = function() {
        EngineCode.show(Carousel.TYPES.MORE);
      };
      EngineCode.ShowBanner = function(type, params) {
        void 0 === type && (type = "BANNER");
        void 0 === params && (params = {});
        if (Data.switches.isShowGDT) {
          type = Carousel.TYPES.GDT;
          var default_params = {
            gdt_left: -1,
            gdt_top: -1,
            gdt_bottom: 0,
            gdt_right: -1,
            gdt_widht: 300
          };
          Data.conf.default_params = default_params;
          if (params) {
            default_params.gdt_left = params.gdt_left || default_params.gdt_left;
            default_params.gdt_top = params.gdt_top || default_params.gdt_top;
            default_params.gdt_bottom = params.gdt_bottom || default_params.gdt_bottom;
            default_params.gdt_right = params.gdt_right || default_params.gdt_right;
            default_params.gdt_widht = params.gdt_widht || default_params.gdt_widht;
          }
          SDK.setGDT_pos(default_params, default_params.gdt_widht, 108 * default_params.gdt_widht / 375);
        } else type = Carousel.TYPES.BANNER;
        EngineCode.show(type);
      };
      EngineCode.hide = function(type) {
        Carousel.StopNextTimer(type);
        if (type == Carousel.TYPES.MORE) {
          EngineCode.cache.more__node.active = false;
          Carousel.ClearAniTimer();
        } else if (type == Carousel.TYPES.BANNER) {
          EngineCode.cache.banner__node.active = false;
          GDT.Hide();
        }
      };
      EngineCode.getMoreNode = function() {
        EngineCode.cache.mask || EngineCode.initNodes();
        return EngineCode.cache.mask;
      };
      EngineCode.getBannerNode = function() {
        EngineCode.cache.banner__node || EngineCode.initNodes();
        return EngineCode.cache.banner__node;
      };
      EngineCode.initNodes = function() {
        var more__node = new cc.Node();
        var more_node = more__node.addComponent(cc.Sprite);
        more__node.width = Data.conf.more_width;
        more__node.height = Data.conf.more_height;
        more__node.name = "more_game";
        more__node.anchorX = 0;
        more__node.anchorY = 0;
        more__node.on("touchend", Carousel.MoreClick);
        var mask__node = new cc.Node();
        mask__node.addComponent(cc.Mask);
        mask__node.setContentSize(cc.size(144, 144));
        mask__node.type = cc.Mask.Type.RECT;
        mask__node.anchorX = 0;
        mask__node.anchorY = 0;
        mask__node.name = "mask_node";
        mask__node.addChild(more__node);
        EngineCode.cache.more_node = more_node;
        EngineCode.cache.more__node = more__node;
        EngineCode.cache.mask = mask__node;
        var banner__node = new cc.Node();
        var banner_node = banner__node.addComponent(cc.Sprite);
        banner__node.name = "banner_node";
        banner__node.on("touchend", Carousel.BannerClick);
        banner__node.scaleX = .5;
        banner__node.scaleY = .5;
        banner__node.anchorX = .5;
        banner__node.anchorY = 0;
        var widget_banner = banner__node.getComponent(cc.Widget);
        widget_banner || (widget_banner = banner__node.addComponent(cc.Widget));
        widget_banner.isAlignBottom = true;
        widget_banner.bottom = 10;
        EngineCode.cache.banner_node = banner_node;
        EngineCode.cache.banner__node = banner__node;
      };
      EngineCode._DownloadTexture = function(img_url, download_suc_cb, download_fail_cb) {
        var imgTypy = img_url.substr(img_url.length - 3, 3);
        cc.loader.load({
          url: img_url,
          type: imgTypy
        }, function(err, texture) {
          if (err) {
            console.log("error");
            return console.error(err);
          }
          download_suc_cb(texture);
        });
      };
      EngineCode.RenderTexture = function(type, img_url) {
        type == Carousel.TYPES.MORE ? EngineCode._DownloadTexture(img_url, EngineCode.DownloadMoreSuc, EngineCode.DownloadMoreFail) : type == Carousel.TYPES.BANNER && EngineCode._DownloadTexture(img_url, EngineCode.DownloadBannerSuc, EngineCode.DownloadBannerFail);
      };
      EngineCode.DownloadMoreSuc = function(t) {
        if (!t) return;
        EngineCode.cache.texture_height = t.height;
        EngineCode.cache.texture_width = t.width;
        var _sp = EngineCode.cache.more_node;
        var sp = EngineCode.cache.more__node;
        if (!t || !t.width || !t.height) return;
        if (!sp || !cc.isValid(sp) || !sp.width) return;
        sp.width = t.width;
        sp.height = t.height;
        sp.x = 0;
        sp.y = 0;
        _sp.spriteFrame = new cc.SpriteFrame(t);
        Carousel.StartNextTimer(Carousel.TYPES.MORE);
        Carousel.ClearAniTimer();
        t.width > 1.5 * Data.conf.more_width && (Carousel.data.timer.more_ani_timer = setInterval(EngineCode.Animation, 60));
      };
      EngineCode.DownloadMoreFail = function(t) {
        Carousel.Next(Carousel.TYPES.MORE);
      };
      EngineCode.DownloadBannerSuc = function(t) {
        var _sp = EngineCode.cache.banner_node;
        var sp = EngineCode.cache.banner_node;
        sp.width = t.width;
        sp.height = t.height;
        var win_widht = cc.view._designResolutionSize.width;
        var win_height = cc.view._designResolutionSize.height;
        sp.x = (win_widht - sp.width) / 2;
        sp.y = win_height - sp.height - 10;
        _sp.spriteFrame = new cc.SpriteFrame(t);
        sp.active = true;
        Carousel.StopNextTimer(Carousel.TYPES.BANNER);
        Carousel.StartNextTimer(Carousel.TYPES.BANNER);
      };
      EngineCode.DownloadBannerFail = function() {
        Carousel.Next(Carousel.TYPES.BANNER);
      };
      EngineCode.Animation = function() {
        var x = EngineCode.cache.more__node.x - Data.conf.more_width;
        if (EngineCode.cache.texture_width + x >= Data.conf.more_width) EngineCode.cache.more__node.x = x; else {
          Carousel.ClearAniTimer();
          Carousel.data.timer.more_ani_finish_timer = setTimeout(EngineCode.AniFinish, 600);
        }
      };
      EngineCode.AniFinish = function() {
        EngineCode.cache.more__node.x = 0;
        Carousel.data.timer.more_ani_timer = setInterval(EngineCode.Animation, 60);
      };
      EngineCode.cache = {
        more_container: null,
        more_node: null,
        mask: null,
        mask_node: null,
        banner_node: null,
        banner__node: null,
        more__node: null,
        texture_width: 144,
        texture_height: 144
      };
      return EngineCode;
    }();
    var Carousel = function() {
      function Carousel() {}
      Carousel.Init = function() {
        Data.switches.isShowMore ? Carousel.Run(Carousel.TYPES.MORE) : EngineCode.hide(Carousel.TYPES.MORE);
        Data.switches.isShowBanner ? Carousel.Run(Carousel.TYPES.BANNER) : EngineCode.hide(Carousel.TYPES.BANNER);
        Data.switches.isShowGDT && GDT.Run();
      };
      Carousel.Next = function(type) {
        if (type == Carousel.TYPES.BANNER) {
          var next = (Carousel.data.current.banner + 1) % SDK.data.banner_list.length;
          if (Carousel.data.current.banner == next) return;
          Carousel.data.current.banner = next;
        } else {
          var next = (Carousel.data.current.more + 1) % SDK.data.more_list.length;
          if (Carousel.data.current.more == next) return;
          Carousel.data.current.more = next;
        }
        Carousel.Run(type);
      };
      Carousel.Run = function(type) {
        var list = type == Carousel.TYPES.BANNER ? SDK.data.banner_list : SDK.data.more_list;
        var index = type == Carousel.TYPES.BANNER ? Carousel.data.current.banner : Carousel.data.current.more;
        list && list.length > 0 && EngineCode.RenderTexture(type, list[index]["icon"]);
      };
      Carousel.StartNextTimer = function(type) {
        var interval = 1 == type ? Data.conf.interval : Data.conf.banner_interval;
        var timer = setTimeout(function() {
          Carousel.Next(type);
        }, interval);
        type == Carousel.TYPES.BANNER ? Carousel.data.timer.next_banner_timer = timer : Carousel.data.timer.next_more_timer = timer;
      };
      Carousel.StopNextTimer = function(type) {
        if (type == Carousel.TYPES.MORE && Carousel.data.timer.next_more_timer) {
          clearTimeout(Carousel.data.timer.next_more_timer);
          Carousel.data.timer.next_more_timer = 0;
        } else if (type == Carousel.TYPES.BANNER && Carousel.data.timer.next_banner_timer) {
          clearTimeout(Carousel.data.timer.next_banner_timer);
          Carousel.data.timer.next_banner_timer = 0;
        }
      };
      Carousel.ClearAniTimer = function() {
        if (Carousel.data.timer.more_ani_timer) {
          clearInterval(Carousel.data.timer.more_ani_timer);
          Carousel.data.timer.more_ani_timer = 0;
        }
        if (Carousel.data.timer.more_ani_finish_timer) {
          clearTimeout(Carousel.data.timer.more_ani_finish_timer);
          Carousel.data.timer.more_ani_finish_timer = 0;
        }
      };
      Carousel.MoreClick = function() {
        var checkEvent = SDK.data.more_list[Carousel.data.current.more];
        checkEvent.allow ? SDK._toMiniProgram(Carousel.TYPES.MORE, checkEvent.appId, checkEvent.objAppId, checkEvent.params) : SDK._preview(checkEvent.preview, checkEvent.objAppId);
        Carousel.StopNextTimer(Carousel.TYPES.MORE);
        Carousel.ClearAniTimer();
        Carousel.Next(Carousel.TYPES.MORE);
      };
      Carousel.BannerClick = function() {
        var checkEvent = SDK.data.banner_list[Carousel.data.current.banner];
        checkEvent.allow ? SDK._toMiniProgram(Carousel.TYPES.BANNER, checkEvent.appId, checkEvent.objAppId, checkEvent.params) : SDK._preview(checkEvent.preview, checkEvent.objAppId);
        Carousel.StopNextTimer(Carousel.TYPES.BANNER);
        Carousel.Next(Carousel.TYPES.BANNER);
      };
      Carousel.TYPES = {
        MORE: 1,
        BANNER: 2,
        GDT: 3
      };
      Carousel.data = {
        current: {
          more: 0,
          banner: 0
        },
        timer: {
          more_ani_timer: 0,
          more_ani_finish_timer: 0,
          next_more_timer: 0,
          next_banner_timer: 0
        }
      };
      return Carousel;
    }();
    var AladinSDK = function() {
      function AladinSDK() {}
      AladinSDK.reportTypes = Report.ReportTypes;
      AladinSDK.ReportTypes = Report.ReportTypes;
      AladinSDK.init = function(appId, version, params, cb, report) {
        void 0 === params && (params = null);
        void 0 === cb && (cb = null);
        void 0 === report && (report = true);
        SDK.init(appId, version, params, cb, report);
      };
      AladinSDK.getOpen = function() {
        return Data.conf.allowShare;
      };
      AladinSDK.Report = function(get_type, data) {
        void 0 === data && (data = "");
        Report.report(get_type, data);
      };
      AladinSDK.report = function(get_type, data) {
        void 0 === data && (data = "");
        Report.report(get_type, data);
      };
      AladinSDK.reportWithAppId = function(appId, get_type, data) {
        void 0 === data && (data = "");
        Report.reportWithAppId(appId, get_type, data);
      };
      AladinSDK.getMoreNode = function() {
        return EngineCode.getMoreNode();
      };
      AladinSDK.getBannerNode = function() {
        return EngineCode.getBannerNode();
      };
      AladinSDK.HideMore = function() {
        EngineCode.HideMore();
      };
      AladinSDK.HideBanner = function() {
        EngineCode.HideBanner();
      };
      AladinSDK.ShowMore = function() {
        EngineCode.ShowMore();
      };
      AladinSDK.ShowBanner = function() {
        EngineCode.ShowBanner();
      };
      return AladinSDK;
    }();
    exports.default = AladinSDK;
    module.exports = exports["default"];
    cc._RF.pop();
  }, {} ],
  collectLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "953feEYTgVGcKsQN788aBum", "collectLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var Resources = require("Resources");
    var collectLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        toCollectBtn: {
          default: null,
          type: cc.Button
        },
        getRewardBtn: {
          default: null,
          type: cc.Button
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.newCallFunc = null;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      clickFeaturesBtn: function clickFeaturesBtn() {
        this.newCallFunc();
        this.clickCloseBtn();
      },
      initData: function initData(bolIsIphoneX, backFunc, bolShowGetReward) {
        var self = this;
        this.toCollectBtn.node.active = !bolShowGetReward;
        this.getRewardBtn.node.active = bolShowGetReward;
        if (bolIsIphoneX) {
          if (!cc.sys.isNative && cc.sys.isMobile) {
            var canvasFit = this.node.parent.getComponent(cc.Canvas);
            canvasFit.fitHeight = true;
            canvasFit.fitWidth = false;
          }
          cc.loader.loadRes("texture/activityRes/collectGame/collectBg_iphoneX", cc.SpriteFrame, function(error, spriteframe) {
            var bgSp = self.node.getChildByName("collectBg").getComponent(cc.Sprite);
            error || (bgSp.spriteFrame = spriteframe);
          });
        }
        this.newCallFunc = backFunc;
      },
      start: function start() {},
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      }
    });
    module.exports = collectLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    Resources: "Resources",
    TSCommon: "TSCommon"
  } ],
  commonTipsLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35c35KBeDBKlqATaLrM+7ds", "commonTipsLayer");
    "use strict";
    var commonTipsLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        titleIcon: {
          default: null,
          type: cc.Sprite
        },
        tipsText: {
          default: null,
          type: cc.Label
        },
        showGameLoad: {
          default: null,
          type: cc.Sprite
        },
        coinIcon: {
          default: null,
          type: cc.Sprite
        },
        coinText: {
          default: null,
          type: cc.Label
        },
        commonTipsBtn1: {
          default: null,
          type: cc.Button
        },
        commonTipsBtn2: {
          default: null,
          type: cc.Button
        },
        commonTipsBtn3: {
          default: null,
          type: cc.Button
        },
        otherNode: {
          default: null,
          type: cc.Node
        },
        otherText1: {
          default: null,
          type: cc.Label
        },
        otherText2: {
          default: null,
          type: cc.Label
        },
        otherText3: {
          default: null,
          type: cc.Label
        },
        arrowSp: {
          default: null,
          type: cc.Sprite
        },
        womenSp: {
          default: null,
          type: cc.Sprite
        },
        cloudSp: {
          default: null,
          type: cc.Sprite
        },
        cloudLabel: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.commonTipsBtn1.node.on("click", this.btnCallback1, this);
        this.commonTipsBtn2.node.on("click", this.btnCallback2, this);
        this.commonTipsBtn3.node.on("click", this.btnCallback3, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || (this.node.active = false);
      },
      start: function start() {},
      btnCallback1: function btnCallback1() {
        this.button1Func();
      },
      btnCallback2: function btnCallback2() {
        this.button2Func();
      },
      btnCallback3: function btnCallback3() {
        this.button3Func();
      },
      clickCloseBtn: function clickCloseBtn() {
        require("HallResources").getInstance().playCloseEffect();
        this.node.active = false;
      },
      showGameLoadTips: function showGameLoadTips() {
        this.showGameLoad.node.active = true;
        this.arrowSp.node.active = true;
      },
      initData: function initData(data) {
        var self = this;
        self.tipsText.string = data.msg;
        data.showIconLabel ? self.coinText.string = data.showIconLabel : self.coinText.string = "";
        cc.loader.loadRes(data.titleIcon, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.titleIcon.spriteFrame = spriteFrame);
        });
        data.showIcon ? cc.loader.loadRes(data.showIcon, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.coinIcon.spriteFrame = spriteFrame);
        }) : self.coinIcon.active = false;
        data.buttonIcon1 ? cc.loader.loadRes(data.buttonIcon1, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.commonTipsBtn1.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        }) : self.commonTipsBtn1.node.active = false;
        if (data.buttonIcon2) {
          self.commonTipsBtn2.node.active = true;
          cc.loader.loadRes(data.buttonIcon2, cc.SpriteFrame, function(err, spriteFrame) {
            err || (self.commonTipsBtn2.getComponent(cc.Sprite).spriteFrame = spriteFrame);
          });
        }
        if (data.buttonIcon3) {
          self.commonTipsBtn3.node.active = true;
          cc.loader.loadRes(data.buttonIcon3, cc.SpriteFrame, function(err, spriteFrame) {
            err || (self.commonTipsBtn3.getComponent(cc.Sprite).spriteFrame = spriteFrame);
          });
        }
        if (data.otherText1) {
          self.otherText1.string = data.otherText1;
          data.movePos && (self.otherText1.node.x = self.otherText1.node.x + data.movePos);
        }
        if (data.otherText2) {
          self.otherNode.active = true;
          self.otherText2.string = data.otherText2;
          data.movePos && (self.otherText2.node.x = self.otherText2.node.x + data.movePos);
        }
        if (data.otherText3) {
          self.otherText3.string = data.otherText3;
          data.movePos && (self.otherText3.node.x = self.otherText3.node.x + data.movePos);
        }
        data.button1Func && (self.button1Func = data.button1Func);
        data.button2Func && (self.button2Func = data.button2Func);
        data.button3Func && (self.button3Func = data.button3Func);
        if (data.womenThink) {
          self.womenSp.node.active = true;
          self.cloudSp.node.active = true;
          self.cloudLabel.string = data.womenThink;
          self.tipsText.node.active = false;
        }
      }
    });
    module.exports = commonTipsLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources"
  } ],
  dailyGetButtonItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82a04NSTw1DsadTbweUyMHE", "dailyGetButtonItem");
    "use strict";
    var dailyGetButtonItem = cc.Class({
      extends: cc.Component,
      properties: {
        btnBG: {
          default: null,
          type: cc.Button
        },
        dayIcon: {
          default: null,
          type: cc.Sprite
        },
        dayCount: {
          default: null,
          type: cc.Label
        },
        coinIcon: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {
        this.btnBG.node.on("click", this.callback, this);
        this.initUI();
      },
      initUI: function initUI() {
        var effectNode = this.node.getChildByName("get_daily_reward_btn").getChildByName("same_effect_sp");
        var rotate = cc.rotateBy(4, 360);
        var repeatForever = cc.repeatForever(rotate);
        effectNode.runAction(repeatForever);
      },
      callback: function callback() {
        var self = this;
        self.callbackFunc();
      },
      initData: function initData(data, callback) {
        var self = this;
        self.callbackFunc = callback;
        this.dayCount.string = data.amount;
        cc.loader.loadRes("texture/activityRes/dailyLogin/days" + data.days, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.dayIcon.spriteFrame = spriteFrame);
        });
        cc.loader.loadRes("texture/activityRes/dailyLogin/" + data.icon, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.coinIcon.spriteFrame = spriteFrame);
        });
      }
    });
    module.exports = dailyGetButtonItem;
    cc._RF.pop();
  }, {} ],
  dailyHasGetItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0f662bfVb9JkaKKXmDquYVW", "dailyHasGetItem");
    "use strict";
    var dailyHasGetItem = cc.Class({
      extends: cc.Component,
      properties: {
        dayIcon: {
          default: null,
          type: cc.Sprite
        },
        dayCount: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {},
      initData: function initData(data) {
        var self = this;
        this.dayCount.string = data.amount;
        cc.loader.loadRes("texture/activityRes/dailyLogin/days" + data.days, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.dayIcon.spriteFrame = spriteFrame);
        });
      }
    });
    module.exports = dailyHasGetItem;
    cc._RF.pop();
  }, {} ],
  dailyLoginLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1abb5sQKT1C0ZberSziB6dD", "dailyLoginLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var Resources = require("Resources");
    var dailyLoginLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        hasGetPrefab: {
          default: null,
          type: cc.Prefab
        },
        todayBtnPrefab: {
          default: null,
          type: cc.Prefab
        },
        tomorrowPrefab: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      initData: function initData(data, bolClick) {
        this.bg.getChildByName("list").removeAllChildren();
        var todayDay = 0;
        for (var i = 0; i < data.length; i++) if (0 == data[i].hassign) {
          todayDay = i;
          break;
        }
        for (var i = 0; i < todayDay; i++) {
          var item = cc.instantiate(this.hasGetPrefab);
          item.parent = this.bg.getChildByName("list");
          item.getComponent("dailyHasGetItem").initData(data[i]);
          var x = 138 * i - 410;
          var y = -30;
          item.setPosition(x, y);
        }
        if (0 == bolClick) todayDay -= 1; else {
          var item = cc.instantiate(this.todayBtnPrefab);
          item.parent = this.bg.getChildByName("list");
          item.getComponent("dailyGetButtonItem").initData(data[i], this.clickGetRewardBtn);
          var x = 230 + 138 * todayDay;
          var y = 270;
          item.setPosition(x, y);
        }
        for (var i = todayDay + 1; i < data.length; i++) {
          var item = cc.instantiate(this.tomorrowPrefab);
          item.parent = this.bg.getChildByName("list");
          item.getComponent("dailyTomorrowItem").initData(data[i]);
          var x = 138 * i - 410;
          var y = -30;
          item.setPosition(x, y);
        }
      },
      start: function start() {},
      clickGetRewardBtn: function clickGetRewardBtn() {
        var self = this;
        var callBackFunc = function callBackFunc(bolSuccess, data) {
          if (bolSuccess) {
            require("HallResources").getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------DailySignInfo.aspx返回数据----------------------------");
            console.log(jsonObject);
            var backData = jsonObject.table[0];
            var allData = [];
            allData.moneytype = backData.MoneyType;
            allData.retcode = backData.RetCode;
            allData.wantamount = backData.WantAmount;
            if (1 == allData.retcode) {
              HallResources.getInstance().playButtonEffect();
              self.node.parent.parent.parent.getComponent("dailyLoginLayer").closeAndChangeScaleAction();
              var goldData = require("HallControl").getInstance().getPublicUserInfo().nGold;
              require("HallControl").getInstance().getPublicUserInfo().nGold = parseInt(allData.wantamount) + parseInt(goldData);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onGoldOrDiamondChanged, true);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onClearDailyLoginRedPoint, true);
              var sendData = [];
              sendData.moneytype = 7;
              sendData.wantamount = allData.wantamount;
              self.node.parent.parent.parent.parent.getComponent("HallPlatformInfo").openGetReward(sendData);
            } else 11 == allData.retcode ? console.log("身份验证不通过") : 12 == allData.retcode ? console.log("今天已经签到过") : 13 == allData.retcode && console.log("签到错误");
          }
        };
        require("HallWebRequest").getInstance().sendDailyCheck(callBackFunc);
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      }
    });
    module.exports = dailyLoginLayer;
    cc._RF.pop();
  }, {
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources",
    TSCommon: "TSCommon"
  } ],
  dailyTomorrowItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42de5RCXP1O9rqiW8pOHtFt", "dailyTomorrowItem");
    "use strict";
    var dailyTomorrowItem = cc.Class({
      extends: cc.Component,
      properties: {
        dayIcon: {
          default: null,
          type: cc.Sprite
        },
        dayCount: {
          default: null,
          type: cc.Label
        },
        coinIcon: {
          default: null,
          type: cc.Sprite
        }
      },
      onLoad: function onLoad() {},
      start: function start() {},
      initData: function initData(data) {
        var self = this;
        this.dayCount.string = data.amount;
        cc.loader.loadRes("texture/activityRes/dailyLogin/days" + data.days, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.dayIcon.spriteFrame = spriteFrame);
        });
        cc.loader.loadRes("texture/activityRes/dailyLogin/" + data.icon, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.coinIcon.spriteFrame = spriteFrame);
        });
      }
    });
    module.exports = dailyTomorrowItem;
    cc._RF.pop();
  }, {} ],
  freeDiamondLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8361aOUCVG9o3fxiTqnW/z", "freeDiamondLayer");
    "use strict";
    var _WeixinManager = require("../../../hall/weixin/WeixinManager");
    var _TSCommon = require("../../TSCommon");
    var HallResources = require("HallResources");
    var freeDiamondLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        shareTimes: {
          default: null,
          type: cc.Label
        },
        shareAllTimes: {
          default: null,
          type: cc.Label
        },
        shareGetDiamond: {
          default: null,
          type: cc.Label
        },
        shareMax: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.inviteCount = 0;
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      initData: function initData(totalTimes, curTimes, awardAmount) {
        this.canShare = totalTimes == curTimes;
        this.awardAmount = awardAmount;
        this.shareTimes.string = curTimes;
        this.shareAllTimes.string = "/" + totalTimes;
        this.shareGetDiamond.string = "*" + awardAmount;
        curTimes == totalTimes && (this.shareMax.node.active = true);
      },
      onClickShareToGroup: function onClickShareToGroup() {
        var self = this;
        this.closeAndChangeScaleAction();
        if (this.canShare) _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "分享次数已经达到上限" ]); else {
          var callBackFunc = function callBackFunc() {
            var func = function func(bolSuccess, data) {
              if (bolSuccess) {
                HallResources.getInstance().removeLoading();
                var jsonObject = JSON.parse(data);
                console.log("-----------------WxShareDiamondAwardGetAward.aspx返回数据----------------------------");
                console.log(jsonObject);
                var RetCode = jsonObject.RetCode;
                var myBalance = jsonObject.myBalance;
                if (1 == RetCode) {
                  self.node.parent.getComponent("HallPlatformInfo").diamondCount.string = myBalance;
                  require("HallControl").getInstance().getPublicUserInfo().nDiamond = myBalance;
                  myBalance > 0 && _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "+1", "texture/commonRes/money/diamondCoin" ]);
                }
              }
            };
            var myOpenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
            require("HallWebRequest").getInstance().getWxShareDiamondAwardGetAward(myOpenId, func);
          };
          "mqqbrowser" != cc.sys.browserType && "wechatgame" != cc.sys.browserType || wx.shareAppMessage({
            title: "血流换三张，本群谁能与我一战！",
            imageUrl: HallResources.groupShareImgUrl
          });
          _TSCommon.TSCommon.performWithDelay(this, callBackFunc, .5);
        }
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      }
    });
    module.exports = freeDiamondLayer;
    cc._RF.pop();
  }, {
    "../../../hall/weixin/WeixinManager": "WeixinManager",
    "../../TSCommon": "TSCommon",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest"
  } ],
  gameRuleLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1be6cLg2QxLiZvttAprDAj5", "gameRuleLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var gameRuleLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        game_toggle1: {
          default: null,
          type: cc.Toggle
        },
        game_toggle2: {
          default: null,
          type: cc.Toggle
        },
        game_help_scrollView: {
          default: null,
          type: cc.ScrollView
        },
        yjly_toggle: {
          default: null,
          type: cc.Toggle
        },
        cxz_toggle: {
          default: null,
          type: cc.Toggle
        },
        helpAtlas: {
          default: null,
          type: cc.SpriteAtlas
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        var self = this;
        cc.loader.loadRes("texture/game/help/xueliu_rule1", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.m_yjlyRuleFrame = spriteFrame);
        });
        cc.loader.loadRes("texture/game/help/xuezhan_rule1", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.m_cxzRule = spriteFrame);
        });
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.yjly_toggle.node.on("toggle", this.showYJLY, this);
        this.cxz_toggle.node.on("toggle", this.showCXZ, this);
        self.showYJLY();
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      showYJLY: function showYJLY() {
        this.yjly_toggle.isChecked = true;
        this.cxz_toggle.isChecked = false;
        this.game_toggle1.isChecked ? this.showMessage(0, 1) : this.showRule(0, 1);
      },
      showCXZ: function showCXZ() {
        this.yjly_toggle.isChecked = false;
        this.cxz_toggle.isChecked = true;
        this.game_toggle1.isChecked ? this.showMessage(0, 2) : this.showRule(0, 2);
      },
      showMessage: function showMessage(event, data) {
        this.game_toggle1.isChecked = true;
        this.game_toggle2.isChecked = false;
        var scrollview = this.game_help_scrollView.node.getComponent(cc.ScrollView);
        var content = scrollview.content;
        var item = content.children[0];
        var listFrameName = "";
        listFrameName = 1 == data ? "xueliu_double" : 2 == data ? "xuezhan_double" : this.yjly_toggle.isChecked ? "xueliu_double" : "xuezhan_double";
        var spriteFrame = this.helpAtlas.getSpriteFrame(listFrameName);
        spriteFrame && (item.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        var rect = spriteFrame.getRect();
        content.setContentSize(cc.size(rect.width, rect.height + 30));
        scrollview.scrollToTop(0);
      },
      showRule: function showRule(event, data) {
        this.game_toggle1.isChecked = false;
        this.game_toggle2.isChecked = true;
        var scrollview = this.game_help_scrollView.node.getComponent(cc.ScrollView);
        var content = scrollview.content;
        var item = content.children[0];
        var self = this;
        var spriteFrame;
        spriteFrame = 1 == data ? self.m_yjlyRuleFrame : 2 == data ? self.m_cxzRule : this.yjly_toggle.isChecked ? self.m_yjlyRuleFrame : self.m_cxzRule;
        spriteFrame && (item.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        var rect = spriteFrame.getRect();
        content.setContentSize(cc.size(rect.width, rect.height + 50));
        scrollview.scrollToTop(0);
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      onCloseClicked: function onCloseClicked() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      }
    });
    module.exports = gameRuleLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    TSCommon: "TSCommon"
  } ],
  gameSetting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bbb651psrZIpatnIPRByOlO", "gameSetting");
    "use strict";
    var _TSCommon = require("../../TSCommon");
    var GameCfg = require("GameCfg");
    var setting = {
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        music_open: {
          default: null,
          type: cc.Node
        },
        music_close: {
          default: null,
          type: cc.Node
        },
        effect_open: {
          default: null,
          type: cc.Node
        },
        effect_close: {
          default: null,
          type: cc.Node
        },
        shock_open: {
          default: null,
          type: cc.Node
        },
        shock_close: {
          default: null,
          type: cc.Node
        },
        deskBgTableView: {
          default: null,
          type: cc.Node
        },
        settingAtlas: {
          default: null,
          type: cc.SpriteAtlas
        }
      },
      start: function start() {},
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        var windowSize = cc.view.getVisibleSize();
      },
      onEnable: function onEnable() {
        var index = cc.sys.localStorage.getItem("deskBg", index) || 0;
        var bgPageView = this.bg.getChildByName("deskBg_select_scrollView").getComponent(cc.PageView);
        bgPageView.removeAllPages();
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var tableInfo = publicUserInfo.tableBoardInfo;
        var selectIndex = 0;
        for (var i = 0; i < tableInfo.length; i++) {
          var bgNode = new cc.Node();
          var bgSprite = bgNode.addComponent(cc.Sprite);
          var frameName = "bg" + (parseInt(tableInfo[i].TableBoardNo) + 1);
          bgSprite.spriteFrame = this.settingAtlas.getSpriteFrame(frameName);
          1 == parseInt(tableInfo[i].IsUsed) && (selectIndex = i);
          bgPageView.addPage(bgNode);
        }
        bgPageView.scrollToPage(selectIndex, .1);
        this.bg.getChildByName("deskBg_mask").active = false;
        this.bg.getChildByName("get_deskbg_btn").active = false;
        var bgMusicOpen = parseInt(cc.sys.localStorage.getItem("bgMusic") || 0);
        if (bgMusicOpen) {
          this.music_open.active = true;
          this.music_close.active = false;
        } else {
          this.music_open.active = false;
          this.music_close.active = true;
        }
        var voiceEffectOpen = parseInt(cc.sys.localStorage.getItem("voiceEffect") || 0);
        if (voiceEffectOpen) {
          this.effect_open.active = true;
          this.effect_close.active = false;
        } else {
          this.effect_open.active = false;
          this.effect_close.active = true;
        }
      },
      onTouch: function onTouch(event) {
        cc.log("onTouch");
        var point = event.touch.getLocation();
        var convertPoint = this.bg.convertToNodeSpace(point);
        var size = this.bg.getContentSize();
        var rect = cc.rect(0, 0, size.width, size.height);
        cc.rectContainsPoint(rect, convertPoint) || this.hide();
      },
      hide: function hide() {
        this.closeAndChangeScaleAction();
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var HallResources = require("HallResources");
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      onCloseClicked: function onCloseClicked() {
        require("HallResources").getInstance().playCloseEffect();
        this.hide();
      },
      onPageChanged: function onPageChanged(event) {
        var index = event.getCurrentPageIndex();
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var tableInfo = publicUserInfo.tableBoardInfo;
        this.bg.getChildByName("deskBg_mask").active = 1 != parseInt(tableInfo[index].IsGet);
        this.bg.getChildByName("get_deskbg_btn").active = 1 != parseInt(tableInfo[index].IsGet);
        var self = this;
        var szData = "UserID=" + publicUserInfo.userDBID + "&EPassword=" + publicUserInfo.encryptPassword + "&TableBoardNo=" + index + "&apptype=1";
        var httpCallback = function httpCallback(success, data) {
          require("HallResources").getInstance().removeLoading();
          if (success) {
            var jsonObject = JSON.parse(data);
            var retCode = jsonObject.RetCode;
            if (1 == parseInt(retCode)) {
              _TSCommon.TSCommon.dispatchEvent(GameCfg.changeDeskBg, index);
              self.changeDeskBg(index);
            }
          }
        };
        require("HallWebRequest").getInstance().httpRequest("SetUserTableBoard.aspx", szData, httpCallback);
      },
      onGetMoreDeskBgBtnClicked: function onGetMoreDeskBgBtnClicked(event) {
        var scene = cc.director.getScene();
        if ("XueLiuGameScene" == scene.name) require("Resources").ShowToast("您正在游戏中,无法进行此操作,请先返回大厅!"); else {
          var HallResources = require("HallResources");
          _TSCommon.TSCommon.dispatchEvent(HallResources.onGetMoreDeskBg, null);
          this.node.active = false;
        }
      },
      closeMusic: function closeMusic() {
        var HallResources = require("HallResources");
        this.music_open.active = false;
        this.music_close.active = true;
        cc.sys.localStorage.setItem("bgMusic", 0);
        _TSCommon.TSCommon.dispatchEvent(GameCfg.closeBgMusic, null);
        _TSCommon.TSCommon.dispatchEvent(HallResources.closeBgMusic, null);
      },
      openMusic: function openMusic() {
        var HallResources = require("HallResources");
        this.music_open.active = true;
        this.music_close.active = false;
        cc.sys.localStorage.setItem("bgMusic", 1);
        _TSCommon.TSCommon.dispatchEvent(GameCfg.openBgMusic, null);
        _TSCommon.TSCommon.dispatchEvent(HallResources.openBgMusic, null);
      },
      closeEffect: function closeEffect() {
        cc.sys.localStorage.setItem("voiceEffect", 0);
        this.effect_open.active = false;
        this.effect_close.active = true;
      },
      openEffect: function openEffect() {
        cc.sys.localStorage.setItem("voiceEffect", 1);
        this.effect_open.active = true;
        this.effect_close.active = false;
      },
      openShock: function openShock() {
        this.shock_open.active = false;
        this.shock_close.active = true;
      },
      closeShock: function closeShock() {
        this.shock_open.active = true;
        this.shock_close.active = false;
      },
      changeDeskBg: function changeDeskBg(index) {
        var publicUserInfo = require("HallControl").getInstance().getPublicUserInfo();
        var tableInfo = publicUserInfo.tableBoardInfo;
        for (var i = 0; i < tableInfo.length; i++) parseInt(tableInfo[i].TableBoardNo) == index ? tableInfo[i].IsUsed = 1 : tableInfo[i].IsUsed = 0;
        cc.sys.localStorage.setItem("deskBg", index);
      },
      changeMajiang: function changeMajiang() {}
    };
    cc.Class(setting);
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    GameCfg: "GameCfg",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest",
    Resources: "Resources"
  } ],
  gamelibcommon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5a93MvyaVFIah3gSdaxEwX", "gamelibcommon");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var gamelibcommon = function() {
      function gamelibcommon() {}
      gamelibcommon.isSitTable = function(status) {
        return status >= gamelibcommon.USER_SIT_TABLE && status < gamelibcommon.USER_WATCH_GAME;
      };
      gamelibcommon.PLATFORM_CHINAGAMES = 0;
      gamelibcommon.PLATFORM_ZHONGCHUAN = 1;
      gamelibcommon.PLATFORM_YUEDONG = 2;
      gamelibcommon.NAME_LEN = 32;
      gamelibcommon.PASS_LEN = 16;
      gamelibcommon.EMAIL_LEN = 32;
      gamelibcommon.PROVINCE_LEN = 16;
      gamelibcommon.CITY_LEN = 16;
      gamelibcommon.AREA_LEN = 16;
      gamelibcommon.GAME_ROOT_LEN = 32;
      gamelibcommon.GAME_TYPE_LEN = 16;
      gamelibcommon.GAME_KIND_LEN = 16;
      gamelibcommon.GAME_STATION_LEN = 32;
      gamelibcommon.GAME_SUBSTATION_LEN = 64;
      gamelibcommon.GAME_ROOM_LEN = 32;
      gamelibcommon.GAME_MODULE_LEN = 16;
      gamelibcommon.URL_LEN = 256;
      gamelibcommon.SERVER_LEN = 256;
      gamelibcommon.AVATAR_URL = 128;
      gamelibcommon.FIELE_NAME = 16;
      gamelibcommon.SCORE_BUF = 64;
      gamelibcommon.ORDER_LEN = 16;
      gamelibcommon.RESERVE_LEN = 32;
      gamelibcommon.PHONE_LEN = 16;
      gamelibcommon.PROP_LEAVEWORD_LEN = 50;
      gamelibcommon.ACADEMY_GRADE_NAME_LEN = 16;
      gamelibcommon.CLOSE_GAME_CLIENT_MSG_LEN = 256;
      gamelibcommon.REG_RESULT_LEN = 256;
      gamelibcommon.VNET_LEN = 128;
      gamelibcommon.VNET_VALIDATE_URL_LEN = 1024;
      gamelibcommon.VNET_VALIDATE_URL_KEYWORD = 64;
      gamelibcommon.VNET_CMD_LEN = 256;
      gamelibcommon.ENCRYPT_PASS_LEN = 64;
      gamelibcommon.MAX_USER_ID = 2e3;
      gamelibcommon.MAX_CHAIR = 6;
      gamelibcommon.MAX_SCORE_BUF_LEN = 20;
      gamelibcommon.MAX_RESERVE_LEN = 32;
      gamelibcommon.GLORY_NAME_LEN = 32;
      gamelibcommon.GAMEID_TENTRIX = 0;
      gamelibcommon.GAMEID_24POINTS = 1;
      gamelibcommon.GAMEID_I_GO = 2;
      gamelibcommon.GAMEID_CCHESS = 3;
      gamelibcommon.GAMEID_GOBANG = 4;
      gamelibcommon.GAMEID_JUNQI = 5;
      gamelibcommon.GAMEID_CHESS = 6;
      gamelibcommon.GAMEID_ANQI = 7;
      gamelibcommon.GAMEID_UPGRADE = 8;
      gamelibcommon.GAMEID_RED_HEARTS = 9;
      gamelibcommon.GAMEID_RUNOUT = 10;
      gamelibcommon.GAMEID_BRIDGE = 11;
      gamelibcommon.GAMEID_MJ = 12;
      gamelibcommon.GAMEID_DIG = 13;
      gamelibcommon.GAMEID_DOUBLE = 14;
      gamelibcommon.GAMEID_LANDLORD = 15;
      gamelibcommon.GAMEID_SHOWHAND = 16;
      gamelibcommon.GAMEID_21P = 17;
      gamelibcommon.GAMEID_DRAGON = 18;
      gamelibcommon.GAMDID_CLAMP = 19;
      gamelibcommon.GAMEID_TESTGAME = 20;
      gamelibcommon.GAMEID_LANLORD2P = 21;
      gamelibcommon.GAMEID_DALU = 22;
      gamelibcommon.GAMEID_FRIEND = 23;
      gamelibcommon.GAMEID_CATTLE = 24;
      gamelibcommon.GAMEID_BOULT = 25;
      gamelibcommon.GAMEID_ANIMAL = 26;
      gamelibcommon.GAMEID_GOJI = 27;
      gamelibcommon.GAMEID_TESTGAME2 = 28;
      gamelibcommon.GAMEID_TESTGAME3 = 29;
      gamelibcommon.GAMEID_TESTGAME4 = 30;
      gamelibcommon.GAMEID_TESTGAME5 = 31;
      gamelibcommon.GAMEID_TANK = 32;
      gamelibcommon.GAMEID_BILLIARDS = 33;
      gamelibcommon.GAMEID_BC_MJ = 34;
      gamelibcommon.GAMEID_SANDAHA = 35;
      gamelibcommon.GAMEID_CASINOSDH = 36;
      gamelibcommon.GAMEID_BCLANDLORD = 37;
      gamelibcommon.GAMEID_BCDIG = 38;
      gamelibcommon.GAMEID_BJL = 39;
      gamelibcommon.GAMEID_3DBILLIARDS = 40;
      gamelibcommon.GAMEID_NEW_BILLIARDS = 41;
      gamelibcommon.GAMEID_NEWSHOWHAND = 42;
      gamelibcommon.GAMEID_WAKENG = 43;
      gamelibcommon.GAMEID_BAOHUANG = 44;
      gamelibcommon.GAMEID_MJGUANGDONG = 45;
      gamelibcommon.GAMEID_BCMJGUANGDONG = 46;
      gamelibcommon.GAMEID_NCMJ = 47;
      gamelibcommon.GAMEID_MJCHANGSHA = 48;
      gamelibcommon.GAMEID_NEW21P = 49;
      gamelibcommon.GAMEID_CQLANDLORD = 50;
      gamelibcommon.GAMEID_BIGPOOL = 51;
      gamelibcommon.GAMEID_POOL3D16 = 52;
      gamelibcommon.GAMEID_CHAODIPI = 53;
      gamelibcommon.GAMEID_GOLDFLOWER = 54;
      gamelibcommon.GAMEID_BOMBERMAN = 55;
      gamelibcommon.GAMEID_BULLETIN = 56;
      gamelibcommon.GAMEID_BULLETIN1 = 57;
      gamelibcommon.GAMEID_FIVECARDS = 58;
      gamelibcommon.GAMEID_PLANE = 59;
      gamelibcommon.GAMEID_ACADEMY_CCHESS = 60;
      gamelibcommon.GAMEID_ACADEMY_CHESS = 61;
      gamelibcommon.GAMEID_ACADEMY_GO = 62;
      gamelibcommon.GAMEID_ACADEMY_GOBANG = 63;
      gamelibcommon.GAMEID_BULLETIN2 = 64;
      gamelibcommon.GAMEID_NEWMJGUANGDONG = 65;
      gamelibcommon.GAMEID_CHUZZLE = 66;
      gamelibcommon.GAMEID_BALLOON = 67;
      gamelibcommon.GAMEID_GDMJTDH = 68;
      gamelibcommon.GAMEID_NEWGOBANG = 69;
      gamelibcommon.GAMEID_SCORE240 = 70;
      gamelibcommon.GAMEID_SUPER_LANDLORD = 71;
      gamelibcommon.GAMEID_SUPER_MAHJONG = 72;
      gamelibcommon.GAMEID_MATCH_LANLORD = 73;
      gamelibcommon.GAMEID_MATCH_UPGRADE = 74;
      gamelibcommon.GAMEID_MATCH_CCHESS = 75;
      gamelibcommon.GAMEID_MATCH_JUNQI = 76;
      gamelibcommon.GAMEID_ONESANDAHA = 77;
      gamelibcommon.GAMEID_NEWJUNQI = 78;
      gamelibcommon.GAMEID_BJWAKENG = 79;
      gamelibcommon.GAMEID_PAOHUZI = 80;
      gamelibcommon.GAMEID_SANGEN = 81;
      gamelibcommon.GAMEID_NEWUPGRADE = 82;
      gamelibcommon.GAMEID_LORDEXP = 83;
      gamelibcommon.GAMEID_SUPGRADE = 84;
      gamelibcommon.GAMEID_SGDMJ = 85;
      gamelibcommon.GAMEID_SUPERDIG = 86;
      gamelibcommon.GAMEID_DARKCHESS = 87;
      gamelibcommon.TOTAL_GAME_KIND_NUM = 88;
      gamelibcommon.MAX_GAME_KIND_NUM = 256;
      gamelibcommon.INVALID_USER_ID = 65535;
      gamelibcommon.DESCRIBE_LEN = 128;
      gamelibcommon.GROUP_LEN = 32;
      gamelibcommon.SX_BOY = 1;
      gamelibcommon.SX_GIRL = 0;
      gamelibcommon.INVALI_OFF = 65535;
      gamelibcommon.INVALI_TABLE_ID = 65535;
      gamelibcommon.INVALI_CHAIR_ID = 255;
      gamelibcommon.INVALI_USER_INDEX = 65535;
      gamelibcommon.FC_NORMAL = 0;
      gamelibcommon.FC_FRIEND = 1;
      gamelibcommon.FC_DETEST = 2;
      gamelibcommon.USER_NO_STATUS = 0;
      gamelibcommon.USER_FREE_STATUS = 1;
      gamelibcommon.USER_WAIT_SIT = 2;
      gamelibcommon.USER_SIT_TABLE = 3;
      gamelibcommon.USER_READY_STATUS = 4;
      gamelibcommon.USER_PLAY_GAME = 5;
      gamelibcommon.USER_OFF_LINE = 6;
      gamelibcommon.USER_WATCH_GAME = 7;
      gamelibcommon.LOOKON_ENABLE_FRIEND = 1;
      gamelibcommon.LOOKON_ENABLE_ENEMY = 2;
      gamelibcommon.LOOKON_ENABLE_GROUP = 4;
      gamelibcommon.LOOKON_ENABLE_BBRFRIEND = 8;
      gamelibcommon.LOOKON_ENABLE_SAMEAREA = 16;
      gamelibcommon.LOOKON_ENABLE_SAMESEX = 32;
      gamelibcommon.LOOKON_ENABLE_OPPOSITESEX = 64;
      gamelibcommon.LOOKON_ENABLE_ALL = 128;
      gamelibcommon.LOOKON_DISABLE_FRIEND = 256;
      gamelibcommon.LOOKON_DISABLE_ENEMY = 512;
      gamelibcommon.LOOKON_DISABLE_GROUP = 1024;
      gamelibcommon.LOOKON_DISABLE_BBRFRIEND = 2048;
      gamelibcommon.LOOKON_DISABLE_SAMEAREA = 4096;
      gamelibcommon.LOOKON_DISABLE_SAMESEX = 8192;
      gamelibcommon.LOOKON_DISABLE_OPPOSITESEX = 16384;
      gamelibcommon.LOOKON_DISABLE_ALL = 32768;
      gamelibcommon.friendNone = 0;
      gamelibcommon.friendFriend = 1;
      gamelibcommon.friendEnemy = 2;
      gamelibcommon.PRIVATE_ROOM_NONE = 0;
      gamelibcommon.PRIVATE_ROOM_CREATE = 1;
      gamelibcommon.PRIVATE_ROOM_ENTER = 2;
      gamelibcommon.enScore_Score = 0;
      gamelibcommon.enScore_Win = 1;
      gamelibcommon.enScore_Loss = 2;
      gamelibcommon.enScore_Draw = 3;
      gamelibcommon.enScore_Flee = 4;
      gamelibcommon.enScore_SetCount = 5;
      gamelibcommon.enScore_Bean = 6;
      gamelibcommon.enScore_BeanTax = 7;
      gamelibcommon.enScore_Guess = 8;
      gamelibcommon.enScore_Custom = 16;
      gamelibcommon.enScore_Gold = 17;
      gamelibcommon.enScore_Tax = 18;
      gamelibcommon.enScore_Ranking = 19;
      gamelibcommon.CONNECT_OK_RES = 0;
      gamelibcommon.CONNECT_ERROR_RES = 1;
      gamelibcommon.SEND_DATA_OK_RES = 2;
      gamelibcommon.SEND_DATA_ERROR_RES = 3;
      gamelibcommon.RECV_DATA_OK_RES = 4;
      gamelibcommon.RECV_DATA_ERROR_RES = 5;
      gamelibcommon.DISCONNECT_RES = 6;
      return gamelibcommon;
    }();
    exports.gamelibcommon = gamelibcommon;
    cc._RF.pop();
  }, {} ],
  getRewardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78230ekY+VE+IW3aYhAfp0t", "getRewardLayer");
    "use strict";
    var getRewardLayer = cc.Class({
      extends: cc.Component,
      properties: {
        getRewardIcon: {
          default: null,
          type: cc.Sprite
        },
        getRewardLabel: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        this.initUI();
      },
      initUI: function initUI() {
        var effectNode = this.node.getChildByName("reward_frame_sp").getChildByName("reward_light_sp");
        var rotate = cc.rotateBy(4, 360);
        var repeatForever = cc.repeatForever(rotate);
        effectNode.runAction(repeatForever);
      },
      initData: function initData(data) {
        var self = this;
        var resPath = "";
        var addCount = "";
        if (7 == data.moneytype) {
          resPath = "texture/activityRes/dailyLogin/jinbi_3";
          addCount = "金币+" + data.wantamount;
        }
        this.getRewardLabel.string = addCount;
        cc.loader.loadRes(resPath, cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.getRewardIcon.spriteFrame = spriteFrame);
        });
      },
      start: function start() {},
      clickGetRewardBtn: function clickGetRewardBtn() {
        self.node.active = false;
      },
      clickCloseBtn: function clickCloseBtn() {
        require("HallResources").getInstance().playCloseEffect();
        this.node.active = false;
      }
    });
    module.exports = getRewardLayer;
    cc._RF.pop();
  }, {
    HallResources: "HallResources"
  } ],
  helpLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97274zlcidHeKX6aE/RJ6sx", "helpLayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        game_toggle1: {
          default: null,
          type: cc.Toggle
        },
        game_toggle2: {
          default: null,
          type: cc.Toggle
        },
        game_help_scrollView: {
          default: null,
          type: cc.ScrollView
        },
        game_list_scrollView: {
          default: null,
          type: cc.ScrollView
        },
        helpAtlas: {
          default: null,
          type: cc.SpriteAtlas
        }
      },
      onLoad: function onLoad() {
        var self = this;
        cc.loader.loadRes("texture/game/help/xueliu_rule1", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.m_xueliuRuleFrame = spriteFrame);
        });
        cc.loader.loadRes("texture/game/help/xuezhan_rule1", cc.SpriteFrame, function(err, spriteFrame) {
          err || (self.m_xuezhanRule = spriteFrame);
        });
        var windowSize = cc.view.getVisibleSize();
        this.node.getChildByName("shadow_bg").setContentSize(windowSize);
      },
      onEnable: function onEnable() {
        this.initUI();
      },
      initUI: function initUI() {
        var DeskScene = this.node.parent.getComponent("DeskScene");
        var isXueZhan = false;
        DeskScene && DeskScene.IsXueZhan() && (isXueZhan = true);
        var iconFrameName;
        var listFrameName;
        if (isXueZhan) {
          iconFrameName = "xuezhan_icon_press";
          listFrameName = "xuezhan_double";
        } else {
          iconFrameName = "xueliu_icon_press";
          listFrameName = "xueliu_double";
        }
        var gameListScrollview = this.game_list_scrollView.node.getComponent(cc.ScrollView);
        var listContent = gameListScrollview.content;
        var listItem = listContent.children[0];
        var spriteFrame = this.helpAtlas.getSpriteFrame(iconFrameName);
        spriteFrame && (listItem.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        var scrollview = this.game_help_scrollView.node.getComponent(cc.ScrollView);
        var content = scrollview.content;
        var item = content.children[0];
        var spriteFrame = this.helpAtlas.getSpriteFrame(listFrameName);
        spriteFrame && (item.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        var rect = spriteFrame.getRect();
        content.setContentSize(cc.size(rect.width, rect.height + 60));
        scrollview.scrollToTop(0);
      },
      onGameIntroClicked: function onGameIntroClicked(event) {
        this.game_toggle1.getComponent(cc.Toggle).isChecked = true;
        this.game_toggle2.getComponent(cc.Toggle).isChecked = false;
        var scrollview = this.game_help_scrollView.node.getComponent(cc.ScrollView);
        var content = scrollview.content;
        var item = content.children[0];
        var DeskScene = this.node.parent.getComponent("DeskScene");
        var listFrameName;
        listFrameName = DeskScene && DeskScene.IsXueZhan() ? "xuezhan_double" : "xueliu_double";
        var spriteFrame = this.helpAtlas.getSpriteFrame(listFrameName);
        item.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        var rect = spriteFrame.getRect();
        content.setContentSize(cc.size(rect.width, rect.height + 100));
        scrollview.scrollToTop(0);
      },
      onGameRuleClicked: function onGameRuleClicked(event) {
        this.game_toggle1.getComponent(cc.Toggle).isChecked = false;
        this.game_toggle2.getComponent(cc.Toggle).isChecked = true;
        var scrollview = this.game_help_scrollView.node.getComponent(cc.ScrollView);
        var content = scrollview.content;
        var item = content.children[0];
        var DeskScene = this.node.parent.getComponent("DeskScene");
        var spriteFrame;
        spriteFrame = DeskScene && DeskScene.IsXueZhan() ? this.m_xuezhanRule : this.m_xueliuRuleFrame;
        spriteFrame && (item.getComponent(cc.Sprite).spriteFrame = spriteFrame);
        var rect = spriteFrame.getRect();
        content.setContentSize(cc.size(rect.width, rect.height + 100));
        scrollview.scrollToTop(0);
      },
      onCloseClicked: function onCloseClicked() {
        require("HallResources").getInstance().playCloseEffect();
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    HallResources: "HallResources"
  } ],
  inviteFriendItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "884a2PKejFL2aMkIyph1cWZ", "inviteFriendItem");
    "use strict";
    var inviteFriendItem = cc.Class({
      extends: cc.Component,
      properties: {
        inviteFriendBtn: {
          default: null,
          type: cc.Button
        },
        inviteFriendIconBtn: {
          default: null,
          type: cc.Button
        },
        inviteFriendSp: {
          default: null,
          type: cc.Sprite
        },
        inviteSuccessGold: {
          default: null,
          type: cc.Label
        }
      },
      onLoad: function onLoad() {
        this.inviteFriendBtn.node.on("click", this.callback, this);
      },
      callback: function callback() {
        this.callbackFunc();
      },
      initData: function initData(data) {
        var self = this;
        if (data.imgurl) {
          self.inviteFriendIconBtn.node.active = true;
          cc.loader.load(data.imgurl, function(err, texture) {
            self.inviteFriendSp.spriteFrame = new cc.SpriteFrame(texture);
          });
        } else self.callbackFunc = data.callbackFunc;
        self.inviteSuccessGold.string = data.gold + "金币";
      },
      start: function start() {}
    });
    module.exports = inviteFriendItem;
    cc._RF.pop();
  }, {} ],
  inviteFriendLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9f78hX0B1Fy5956Uy3YmEG", "inviteFriendLayer");
    "use strict";
    var _WeixinManager = require("../../../hall/weixin/WeixinManager");
    var _TSCommon = require("../../TSCommon");
    var HallResources = require("HallResources");
    var inviteFriendLayer = cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          default: null,
          type: cc.Node
        },
        getRewardBtn: {
          default: null,
          type: cc.Button
        },
        getRewardGrayBtn: {
          default: null,
          type: cc.Button
        },
        inviteBtnPrefab: {
          default: null,
          type: cc.Prefab
        },
        startTime: {
          default: null,
          type: cc.Label
        },
        endTime: {
          default: null,
          type: cc.Label
        },
        hasGet: {
          default: null,
          type: cc.Node
        }
      },
      onLoad: function onLoad() {
        var windowSize = cc.view.getVisibleSize();
        this.node.width = windowSize.width;
        this.node.height = windowSize.height;
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        this.inviteCount = 0;
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      initData: function initData(data) {
        this.startTime.string = data.startTime;
        this.endTime.string = data.endTime;
      },
      initFriendData: function initFriendData(data) {
        var self = this;
        this.imageUrl = data.img;
        var tbData = [];
        tbData[0] = [];
        tbData[1] = [];
        tbData[2] = [];
        tbData[0].x = -330;
        tbData[0].y = 40;
        tbData[1].x = -145;
        tbData[1].y = -20;
        tbData[2].x = 25;
        tbData[2].y = 80;
        var bGetGift = false;
        var openIdFriendList = "";
        self.openIdFriendData = [];
        self.myOpenId = "";
        for (var i = 0; i < data.length; i++) {
          if ("undefined" == data[i].InviteeOpenID || null == data[i].InviteeOpenID || "" == data[i].InviteeOpenID) tbData[i].callbackFunc = function() {
            console.log("点击第" + i + "个");
            self.shareToFriend();
          }; else {
            self.myOpenId = data[i].InviterOpenID;
            openIdFriendList = "" == openIdFriendList ? data[i].InviteeOpenID : openIdFriendList + "," + data[i].InviteeOpenID;
            bGetGift = bGetGift || 0 == data[i].IsInviterGift;
            0 == data[i].IsInviterGift && self.openIdFriendData.push(data[i].InviteeOpenID);
          }
          tbData[i].gold = data[i].InviterGiftAmount;
        }
        self.data = data;
        self.tbData = tbData;
        var fun = function fun(bolSuccess, data) {
          if (bolSuccess && bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxUserInfoGet.aspx返回数据----------------------------");
            console.log(jsonObject);
            for (var i = 0; i < jsonObject.table.length; i++) {
              var headUrl = jsonObject.table[i].WxFaceUrl + "?aaa=aa.jpg";
              self.tbData[i].imgurl = headUrl;
            }
          }
          for (var i = 0; i < self.data.length; i++) {
            var invitePrefab = cc.instantiate(self.inviteBtnPrefab);
            invitePrefab.parent = self.bg;
            invitePrefab.getComponent("inviteFriendItem").initData(self.tbData[i]);
            invitePrefab.setPosition(self.tbData[i].x, self.tbData[i].y);
          }
        };
        console.log("被邀请者的id列表" + openIdFriendList);
        require("HallWebRequest").getInstance().getWxUserInfo(openIdFriendList, fun);
        if (bGetGift) {
          self.getRewardGrayBtn.node.active = false;
          self.getRewardBtn.node.active = true;
        }
      },
      start: function start() {},
      clickGetRewardBtn: function clickGetRewardBtn() {
        require("HallControl").getInstance().requestTableInfo();
        var self = this;
        var callFunc = function callFunc(bolSuccess, data) {
          if (bolSuccess && bolSuccess) {
            HallResources.getInstance().removeLoading();
            var jsonObject = JSON.parse(data);
            console.log("-----------------WxUserInfoGet.aspx返回数据----------------------------");
            console.log(jsonObject);
            if (1 == jsonObject.RetCode) {
              self.openIdFriendData.shift();
              if (0 == self.openIdFriendData.length) {
                self.getRewardGrayBtn.node.active = true;
                self.getRewardBtn.node.active = false;
              }
              var goldData = require("HallControl").getInstance().getPublicUserInfo().nGold;
              require("HallControl").getInstance().getPublicUserInfo().nGold = parseInt(jsonObject.AwardAmount) + parseInt(goldData);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onGoldOrDiamondChanged, true);
              _TSCommon.TSCommon.dispatchEvent(HallResources.onShowFlyMessage, [ "+" + jsonObject.AwardAmount, "texture/hallRes/roomInfo/gold" ]);
            } else 11 == jsonObject.RetCode ? console.log("没有邀请关系") : 12 == jsonObject.RetCode ? console.log("重复领取") : 13 == jsonObject.RetCode && console.log("领奖账户不存在");
          }
        };
        self.openIdFriendData.length > 0 && require("HallWebRequest").getInstance().getWxInviteAwardGetAward(self.myOpenId, self.openIdFriendData[0], callFunc);
      },
      shareToFriend: function shareToFriend() {
        if ("mqqbrowser" == cc.sys.browserType || "wechatgame" == cc.sys.browserType) {
          var myopenId = _WeixinManager.WeixinManager.getInstance().userInfo.openid;
          wx.shareAppMessage({
            query: "inviteOpenId=" + myopenId,
            title: "带你装逼带你飞，要跟我一起来赚钱吗？",
            imageUrl: HallResources.shareImgUrl,
            success: function success(res) {
              console.log("转发成功!!!");
            },
            fail: function fail(res) {
              console.log("转发失败!!!");
            }
          });
        }
      },
      clickSummonFriendsBtn: function clickSummonFriendsBtn() {
        wx.shareAppMessage({
          query: "inviteOpenId=" + myopenId,
          title: "带你装逼带你飞，要跟我一起来赚钱吗？",
          imageUrl: HallResources.shareImgUrl,
          success: function success(res) {
            console.log("转发成功!!!");
            wx.showToast({
              title: "转发成功"
            });
          },
          fail: function fail(res) {
            console.log("转发失败!!!");
          }
        });
      },
      clickCloseBtn: function clickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      setHasGetDesk: function setHasGetDesk(bol) {
        this.hasGet.active = bol;
      }
    });
    module.exports = inviteFriendLayer;
    cc._RF.pop();
  }, {
    "../../../hall/weixin/WeixinManager": "WeixinManager",
    "../../TSCommon": "TSCommon",
    HallControl: "HallControl",
    HallResources: "HallResources",
    HallWebRequest: "HallWebRequest"
  } ],
  kefuLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e01d0pIiJ9Hyo9XMbWUDVYE", "kefuLayer");
    "use strict";
    var _TSCommon = require("TSCommon");
    var HallResources = require("HallResources");
    var NativeManager = require("NativeManager");
    cc.Class({
      extends: cc.Component,
      properties: {
        weixinLabel1: {
          default: null,
          type: cc.Label
        },
        weixinLabel2: {
          default: null,
          type: cc.Label
        },
        weixinLabel3: {
          default: null,
          type: cc.Label
        },
        bg: {
          default: null,
          type: cc.Node
        }
      },
      start: function start() {},
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouch, this);
        var color = cc.color(253, 255, 78, 255);
        this.weixinLabel1.node.color = color;
        this.weixinLabel2.node.color = color;
        this.weixinLabel3.node.color = color;
      },
      onTouch: function onTouch(event) {
        var poisition = event.touch.getLocation();
        var locationInNode = this.bg.convertToNodeSpace(poisition);
        var s = this.bg.getContentSize();
        var rect = cc.rect(0, 0, s.width, s.height);
        cc.rectContainsPoint(rect, locationInNode) || this.closeAndChangeScaleAction();
      },
      closeAndChangeScaleAction: function closeAndChangeScaleAction() {
        var self = this;
        var action1 = cc.scaleTo(.2, .3, .3);
        var action2 = cc.fadeOut(.01);
        var action3 = cc.callFunc(function() {
          self.node.active = false;
        });
        var sequence = cc.sequence(action1, action2, action3);
        this.bg.runAction(sequence);
      },
      onClickCloseBtn: function onClickCloseBtn() {
        HallResources.getInstance().playCloseEffect();
        this.closeAndChangeScaleAction();
      },
      onClickCopyBtn1: function onClickCopyBtn1() {
        var isCopy = NativeManager.getInstance().copyToClipBoard(this.weixinLabel1.string);
      },
      onClickCopyBtn2: function onClickCopyBtn2() {
        var isCopy = NativeManager.getInstance().copyToClipBoard(this.weixinLabel2.string);
      },
      onClickCopyBtn3: function onClickCopyBtn3() {
        var isCopy = NativeManager.getInstance().copyToClipBoard(this.weixinLabel3.string);
      }
    });
    cc._RF.pop();
  }, {
    HallResources: "HallResources",
    NativeManager: "NativeManager",
    TSCommon: "TSCommon"
  } ],
  sendCMD: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1c5d4UBRZPqK5EnXSvx0nD", "sendCMD");
    "use strict";
    var _ByteArray = require("../common/ByteArray");
    var GameDefs = require("GameDefs");
    var ezhhSendCMD = {};
    ezhhSendCMD.sendCMD_PO_RESTART = function() {
      var gameLib = require("GameLibSink").getInstance().getGameLib();
      gameLib.sendReadyCmd();
      cc.log("准备命令发送完毕");
    }, ezhhSendCMD.sendCMD_PO_PASS = function() {
      var gameLib = require("GameLibSink").getInstance().getGameLib();
      gameLib.sendGameCmd(GameDefs.MJ_CMD_PASS, null);
    }, ezhhSendCMD.sendCMD_PO_OUTCARD = function(mjValue) {
      var ba = new _ByteArray.ByteArray();
      ba.writeByte(mjValue);
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_OUT, ba);
    }, ezhhSendCMD.sendCMD_PO_EAT = function(nEatCmd) {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(nEatCmd, null);
    }, ezhhSendCMD.sendCMD_PO_PENG = function() {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_PENG, null);
    }, ezhhSendCMD.sendCMD_PO_Exchange = function(vList) {
      var ba = new _ByteArray.ByteArray();
      ba.writeByte(vList[0]);
      ba.writeByte(vList[1]);
      ba.writeByte(vList[2]);
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_Exchange, ba);
    }, ezhhSendCMD.sendCMD_PO_DingQue = function(nType) {
      var ba = new _ByteArray.ByteArray();
      ba.writeByte(nType);
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_DingQue, ba);
    }, ezhhSendCMD.sendCMD_PO_GANG = function(nCard, nType) {
      var ba = new _ByteArray.ByteArray();
      ba.writeByte(nType);
      ba.writeByte(0);
      ba.writeByte(nCard);
      ba.writeByte(nCard);
      ba.writeByte(nCard);
      ba.writeByte(nCard);
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_GANG, ba);
    }, ezhhSendCMD.sendCMD_PO_HU = function() {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_HU, null);
    }, ezhhSendCMD.sendCMD_PO_ROBOTPLAYSTART = function() {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_AutoOut, null);
    }, ezhhSendCMD.sendCMD_PO_ROBOTPLAYCANCEL = function() {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_Cancel_AutoOut, null);
    };
    ezhhSendCMD.sendCMD_PO_XUEFEI = function(nXuefei) {
      var ba = new _ByteArray.ByteArray();
      ba.writeInt(nXuefei);
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_Set_XueFei, ba);
    };
    ezhhSendCMD.sendCMD_PO_RENSHU = function() {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_RenShu, null);
    };
    ezhhSendCMD.sendCMD_PO_LIKAI = function() {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_LiKai, null);
    };
    ezhhSendCMD.MJ_CMD_SHOW_CHEAT = function(cheat) {
      var ba = new _ByteArray.ByteArray();
      ba.writeInt(cheat);
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_Show_Cheat, ba);
    };
    ezhhSendCMD.MJ_CMD_CLIENT_CHEAT = function() {
      require("GameLibSink").getInstance().getGameLib().sendGameCmd(GameDefs.MJ_CMD_Client_Cheat, null);
    };
    module.exports = ezhhSendCMD;
    cc._RF.pop();
  }, {
    "../common/ByteArray": "ByteArray",
    GameDefs: "GameDefs",
    GameLibSink: "GameLibSink"
  } ],
  tagClientInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a4638doFe1FYrSdOe+lLziT", "tagClientInfo");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../TSCommon");
    var tagClientInfo = function() {
      function tagClientInfo() {
        this.dwComputerID = [ 1, 2, 3 ];
        this.dwSystemVer = [ 1, 2 ];
        this.szComputerName = "h5_client";
      }
      tagClientInfo.prototype.serialize = function(byteArray) {
        for (var i = 0; i < 3; i++) byteArray.writeInt(this.dwComputerID[i]);
        for (var i = 0; i < 2; i++) byteArray.writeInt(this.dwSystemVer[i]);
        TSCommon_1.TSCommon.writeStringWithLength(byteArray, this.szComputerName, 12);
      };
      return tagClientInfo;
    }();
    exports.tagClientInfo = tagClientInfo;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon"
  } ],
  tagConnectInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd40dNuJEFBEa/CbpYuZhJs", "tagConnectInfo");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tagConnectInfo = function() {
      function tagConnectInfo() {
        this.wSize = 16;
        this.dwGameInstallVer = 1;
        this.dwGameBuildVer = 1;
        this.dwConnectDelay = 1;
      }
      tagConnectInfo.prototype.serialize = function(byteArray) {
        byteArray.writeShort(this.wSize);
        byteArray.writeInt(this.dwGameInstallVer);
        byteArray.writeInt(this.dwGameBuildVer);
        byteArray.writeInt(this.dwConnectDelay);
      };
      return tagConnectInfo;
    }();
    exports.tagConnectInfo = tagConnectInfo;
    cc._RF.pop();
  }, {} ],
  tagGameKind: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "758f78IutpC4J5MSYuoURhr", "tagGameKind");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../../TSCommon");
    var tagGameKind = function() {
      function tagGameKind() {}
      tagGameKind.getLen = function() {
        return 48;
      };
      tagGameKind.prototype.deserialize = function(ba) {
        this.dwMaxVersion = ba.readUnsignedInt();
        this.dwOnLineCount = ba.readUnsignedInt();
        this.dwTypeID = ba.readUnsignedInt();
        this.dwKindID = ba.readUnsignedInt();
        this.szKindName = TSCommon_1.TSCommon.readGbkString(ba, 16);
        this.szProcessName = TSCommon_1.TSCommon.readGbkString(ba, 16);
      };
      return tagGameKind;
    }();
    exports.tagGameKind = tagGameKind;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon"
  } ],
  tagGameServerEx: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7ae017BgGxPPZN1/RtQfgVL", "tagGameServerEx");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../TSCommon");
    var tagGameServerEx = function() {
      function tagGameServerEx() {}
      tagGameServerEx.getLen = function() {
        return tagGameServerEx.getBasicLen() + 15;
      };
      tagGameServerEx.prototype.deserialize = function(ba) {
        this.dwServerIP = ba.readUnsignedInt();
        this.dwServerID = ba.readUnsignedInt();
        this.dwKindID = ba.readUnsignedInt();
        this.dwStationID = ba.readUnsignedInt();
        this.wOnLineCount = ba.readUnsignedShort();
        this.wMaxOnLineCount = ba.readUnsignedShort();
        this.uServerPort = ba.readUnsignedInt();
        this.szGameRoomName = TSCommon_1.TSCommon.readGbkString(ba, 32);
      };
      tagGameServerEx.prototype.deserializeEx = function(ba) {
        this.deserialize(ba);
        this.dwRuleID = ba.readUnsignedInt();
        this.dwMinGold = ba.readUnsignedInt();
        this.dwMaxGold = ba.readUnsignedInt();
        this.cbMinVipNeed = ba.readByte();
        this.cbPrivateRoom = ba.readByte();
        this.cbMinCreateTableVIP = ba.readByte();
      };
      tagGameServerEx.prototype.deserializeExtraInfo = function(ba) {
        this.nTableGold = ba.readUnsignedInt();
        this.nBaseGold = ba.readUnsignedInt();
      };
      tagGameServerEx.getBasicLen = function() {
        return 56;
      };
      tagGameServerEx.getExtraInfoLen = function() {
        return 12;
      };
      return tagGameServerEx;
    }();
    exports.tagGameServerEx = tagGameServerEx;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon"
  } ],
  tagGameStationEx: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "706bf3Wa/tB/agpos3prJ95", "tagGameStationEx");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TSCommon_1 = require("../TSCommon");
    var tagGameStationEx = function() {
      function tagGameStationEx() {}
      tagGameStationEx.getLen = function() {
        return 40;
      };
      tagGameStationEx.prototype.deserialize = function(ba) {
        this.dwParentID = ba.readInt();
        this.dwStationID = ba.readInt();
        this.szStationName = TSCommon_1.TSCommon.readGbkString(ba, 32);
      };
      return tagGameStationEx;
    }();
    exports.tagGameStationEx = tagGameStationEx;
    cc._RF.pop();
  }, {
    "../TSCommon": "TSCommon"
  } ],
  tagUserInfoBroad: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5782ekgqI1GeKRsRVp62G+X", "tagUserInfoBroad");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ByteArray_1 = require("../../common/ByteArray");
    var TSCommon_1 = require("../../TSCommon");
    var GameCmds_1 = require("./GameCmds");
    var tagUserInfoBroad = function() {
      function tagUserInfoBroad() {
        this.szScores = new ByteArray_1.ByteArray();
      }
      tagUserInfoBroad.prototype.deserialize = function(buf) {
        this.wSize = buf.readShort();
        this.lUserDBID = buf.readInt();
        this.wUserIndex = buf.readShort();
        this.wRoundCount = buf.readShort();
        this.wFaceID = buf.readShort();
        this.wNetTimelag = buf.readShort();
        this.wTableID = buf.readShort();
        this.dwGroupID = buf.readUnsignedInt();
        this.dwUserLevel = buf.readUnsignedInt();
        this.cbChairID = buf.readByte();
        this.cbUserStatus = buf.readByte();
        this.cbSex = buf.readByte();
        this.cbNameLen = buf.readByte();
        this.cbGroupLen = buf.readByte();
        this.cbVIPLevel = buf.readByte();
        this.cbScoreLen = buf.readByte();
        this.dwMemberClass = buf.readUnsignedInt();
        this.dwMemberLevel = buf.readUnsignedInt();
        this.dwFame = buf.readUnsignedInt();
        this.dwFameLevel = buf.readUnsignedInt();
        this.wShowID = buf.readShort();
        this.szLocation = "";
        this.szName = TSCommon_1.TSCommon.readGbkString(buf, this.cbNameLen);
        this.szGroup = "";
        buf.readBytes(this.szScores, 0, this.cbScoreLen);
        var nFieldsLen = buf.length - buf.position;
        if (nFieldsLen <= 0) return;
        var szFields = new ByteArray_1.ByteArray();
        buf.readBytes(szFields, 0, nFieldsLen);
        var nFieldOff = 0;
        while (nFieldOff < nFieldsLen) {
          var cbFdType = szFields.readUnsignedByte();
          nFieldOff += 1;
          var cbFdLen = szFields.readUnsignedByte();
          nFieldOff += 1;
          if (cbFdLen <= 2) continue;
          cbFdLen -= 2;
          if (cbFdLen + nFieldOff > nFieldsLen) break;
          var fdData = new ByteArray_1.ByteArray();
          szFields.readBytes(fdData, 0, cbFdLen);
          nFieldOff += cbFdLen;
          switch (cbFdType) {
           case GameCmds_1.GameCmds.FIELD_FACECHANGEINDEX:
            this.cbFaceChangeIndex = fdData.readUnsignedByte();
            break;

           case GameCmds_1.GameCmds.FIELD_LOCATION:
            this.szLocation = TSCommon_1.TSCommon.readGbkString(fdData, cbFdLen);
            break;

           case GameCmds_1.GameCmds.FIELD_USER_DESCRIBE:
            this.szDescribe = TSCommon_1.TSCommon.readGbkString(fdData, cbFdLen);
          }
        }
      };
      return tagUserInfoBroad;
    }();
    exports.tagUserInfoBroad = tagUserInfoBroad;
    cc._RF.pop();
  }, {
    "../../TSCommon": "TSCommon",
    "../../common/ByteArray": "ByteArray",
    "./GameCmds": "GameCmds"
  } ],
  tagVersionInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e51d4uyaypMobBWmoqwzct4", "tagVersionInfo");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tagVersionInfo = function() {
      function tagVersionInfo() {
        this.dwInstallVer = 2015;
        this.dwBuildVer = 1;
        this.dwSubBuildVer = 1;
      }
      tagVersionInfo.prototype.serialize = function(byteArray) {
        byteArray.writeInt(this.dwInstallVer);
        byteArray.writeInt(this.dwBuildVer);
        byteArray.writeInt(this.dwSubBuildVer);
      };
      return tagVersionInfo;
    }();
    exports.tagVersionInfo = tagVersionInfo;
    cc._RF.pop();
  }, {} ]
}, {}, [ "aladinSDK", "Domain", "GameInfo", "GameMatchLayer", "Global", "HallClickNode", "HallControl", "HallPlatformInfo", "HallResources", "HallUtils", "HallWebRequest", "Loading", "PublicUserInfo", "TSCommon", "UserInfoLayer", "XmlToJson", "collectLayer", "commonTipsLayer", "ConsecutiveVictoriesItem", "ConsecutiveVictoriesLayer", "ConsecutiveVictoriesRewardLayer", "dailyGetButtonItem", "dailyHasGetItem", "dailyLoginLayer", "dailyTomorrowItem", "freeDiamondLayer", "getRewardLayer", "inviteFriendItem", "inviteFriendLayer", "MoreGameLayer", "ByteArray", "MyTimer", "NativeManager", "StringConvert", "WebRequest", "CCButton", "Dialog", "LoadingUI", "ToastUI", "EgretEvent", "EventBin", "EventDispatcher", "EventPhase", "IEventDispatcher", "IOErrorEvent", "TimerEvent", "ChangeCardAction", "ClientFrameSink", "GameDefs", "GameEntrance", "GameJudge", "GameLibSink", "MjResourceMgr", "PersonInfoPreView", "PropertyAnimationLayer", "Resources", "Tools", "Chatting", "DeskScene", "EatOrGangSelectLayer", "GameButtonLayer", "HuCardLayer", "ListenCardLayer", "MoreSettingLayer", "OutCardLayer", "PersonalInfoFrame", "Player", "PlayerCardLayer", "RangeCardLayer", "ContinueWinLayer", "MatchGameOverLayer", "ProtectScoreLayer", "UpgradeLevelLayer", "XueLiuGameOverLayer", "XueLiuGameOverScrollList", "XueLiuGameResultLayer", "XueLiuHuTypeItem", "XueLiuPlayerResultItem", "helpLayer", "GameCfg", "MoreGameList", "MoreGameListItem", "MoreGameListLayer", "RoomTypeList", "sendCMD", "gameSetting", "CDefaultGameLibSink", "CGameLib", "CMD_CM_SysteMessage", "Chair", "IClientFrameSink", "IGameLibSink", "Table", "UserInfo", "ClientFrame", "FrameCmds", "GAME_DATA", "gamelibcommon", "CMD_GP_GetGameInfo", "CMD_GP_LogonSuccess_Ex2", "GameIDList", "GamePlace", "GameServerList", "PlazaCmds", "tagGameKind", "CMD_GR_BroadCast_UserStatus", "CMD_GR_Logon_ByVnet", "GameCmds", "GameRoom", "HtmlChat", "ScoreParser", "TableManager", "UserManager", "tagUserInfoBroad", "tagClientInfo", "tagConnectInfo", "tagGameServerEx", "tagGameStationEx", "tagVersionInfo", "kefuLayer", "MallLayer", "MallScrollList", "MallScrollListItem", "CupScrollList", "HallQualifying", "NewSeasonLayer", "NewSeasonRankItem", "NowRankLevelItem", "OtherRankLevelItem", "SeasonLayer", "RankGroupLayer", "RankLayer", "gameRuleLayer", "WeixinManager", "LoginButtonMenu" ]);
//# sourceMappingURL=project.dev.js.map
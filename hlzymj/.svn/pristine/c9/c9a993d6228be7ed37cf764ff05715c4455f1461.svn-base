{"version":3,"sources":["Table.ts"],"names":[],"mappings":";;;;;AACA,iCAA8B;AAC9B;IAUI,eAAY,UAAkB,EAAE,OAAe;QAC3C,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,EAAS,CAAC;QAClC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,aAAK,EAAE,CAAC;SACjC;IACL,CAAC;IAEM,wBAAQ,GAAf,UAAgB,OAAe;QAC3B,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,WAAW;YAC1C,OAAO,IAAI,CAAC;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAEM,kCAAkB,GAAzB;QACI,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE;YAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE;gBAC3B,KAAK,EAAE,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,8BAAc,GAArB;QACI,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACxD,CAAC;IAEM,8BAAc,GAArB,UAAsB,GAAc;QAChC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;IAC5B,CAAC;IAEM,8BAAc,GAArB;QACI,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAEM,oBAAI,GAAX;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,KAAK,GAAU,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;SACzE;IACL,CAAC;IApDa,mBAAa,GAAW,CAAC,CAAC;IAC1B,kBAAY,GAAW,CAAC,CAAC;IAoD3C,YAAC;CAtDD,AAsDC,IAAA;AAtDY,sBAAK","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\hall\\gamelib","sourcesContent":["ï»¿import {ByteArray} from \"../common/ByteArray\";\r\nimport {Chair} from \"./Chair\";\r\nexport class Table {\r\n    public static TABLE_PLAYING: number = 2;\r\n    public static TABLE_LOCKED: number = 1;\r\n\r\n    public _chairCount: number;\r\n    public _tableID: number;\r\n    public _isPlaying: boolean;\r\n    public _isLocked: boolean;\r\n    public _chairs: Chair[];\r\n    public _tableBuffer: ByteArray;\r\n    constructor(chairCount: number, tableID: number) {\r\n        this._chairCount = chairCount;\r\n        this._tableID = tableID;\r\n        this._isLocked = false;\r\n        this._isPlaying = false;\r\n        this._chairs = new Array<Chair>();\r\n        for (var i: number = 0; i < chairCount; i++) {\r\n            this._chairs[i] = new Chair();\r\n        }\r\n    }\r\n\r\n    public getChair(chairID: number): Chair {\r\n        if (chairID < 0 || chairID >= this._chairCount)\r\n            return null;\r\n        return this._chairs[chairID];\r\n    }\r\n\r\n    public getEmptyChairCount(): number {\r\n        var count = 0;\r\n        for (var key in this._chairs) {\r\n            if (this._chairs[key].isEmpty())\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    public getPlayerCount(): number {\r\n        return this._chairCount - this.getEmptyChairCount();\r\n    }\r\n\r\n    public setTableBuffer(buf: ByteArray) {\r\n        this._tableBuffer = buf;\r\n    }\r\n\r\n    public getTableBuffer() {\r\n        return this._tableBuffer;\r\n    }\r\n\r\n    public dump() {\r\n        for (var i = 0; i < this._chairCount; i++) {\r\n            var chair: Chair = this._chairs[i];\r\n            console.log(\"chair \" + i + \" \" + chair.isEmpty() ? \"empty\" : \"taken\");\r\n        }\r\n    }\r\n}"]}
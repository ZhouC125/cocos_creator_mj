{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\hall/assets\\scripts\\hall\\TSCommon.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\hall","sourcesContent":["ï»¿import { StringConvert } from \"./common/StringConvert\";\r\nimport { ByteArray } from \"./common/ByteArray\";\r\nimport { EgretEvent } from \"./event/EgretEvent\";\r\nimport { EventDispatcher } from \"./event/EventDispatcher\";\r\nimport { MyTimer } from \"./common/MyTimer\";\r\n\r\nexport class TSCommon {\r\n    private static dispatcher: EventDispatcher;\r\n\r\n    public static onPayFailed: string = \"onPayFailed\";\r\n    public static onPaySucceeded: string = \"onPaySucceeded\";\r\n    public static onPayFinished: string = \"onPayFinished\";\r\n    public static onNewPayment: string = \"onNewPayment\";\r\n    public static onGoldChanged: string = \"onGoldChanged\";\r\n    public static onDiamondChanged: string = \"onDiamondChanged\";\r\n    public static onFragChanged: string = \"onFragChanged\";\r\n\r\n    public static onGeWXtUserInfoLogin: string = \"onGeWXtUserInfoLogin\";\r\n\r\n    private static parseByte(c: string): number {\r\n        var s0 = \"0\";\r\n        var digiStart: number = s0.charCodeAt(0);\r\n        var sa = \"a\";\r\n        var aStart: number = sa.charCodeAt(0);\r\n        var sA = \"A\";\r\n        var AStart: number = sA.charCodeAt(0);\r\n        var cCharCode = c.charCodeAt[0];\r\n        if (cCharCode > sA)\r\n            return 10 + cCharCode - AStart;\r\n        if (cCharCode > sa)\r\n            return 10 + cCharCode - aStart;\r\n        if (cCharCode > s0)\r\n            return cCharCode - digiStart;\r\n        return 0;\r\n    }\r\n\r\n    public static HexToData(hex: string): ArrayBuffer {\r\n        var ba: ByteArray = new ByteArray();\r\n        for (var i: number = 0; i < hex.length - 1; i += 2) {\r\n            var b1 = TSCommon.parseByte(hex.charAt(i));\r\n            var b2 = TSCommon.parseByte(hex.charAt(i + 1));\r\n            ba.writeByte(b1 * 0x10 + b2);\r\n        }\r\n        return ba.buffer;\r\n        //return ba;\r\n    }\r\n\r\n    public static writeStringWithLength(byteArray: ByteArray, str: string, len: number) {\r\n        var s: String = new String(str);\r\n        for (var i: number = 0; i < len; i++) {\r\n            if (i < s.length)\r\n                byteArray.writeByte(s.charCodeAt(i));\r\n            else\r\n                byteArray.writeByte(0);\r\n        }\r\n    }\r\n\r\n    public static readGbkString(ba: ByteArray, len: number): string {\r\n        var cc: number[] = new Array<number>();\r\n        for (var i: number = 0; i < len; i++) {\r\n            var c = ba.readUnsignedByte()\r\n            cc.push(c);\r\n        }\r\n        return StringConvert.getUtf8(cc);\r\n    }\r\n\r\n    public static writeUtf8String(ba: ByteArray, s: string, len: number) {\r\n        var cc: number[] = StringConvert.getGBK(s);\r\n        if (len > 0) {\r\n            while (cc.length > len - 1) {\r\n                cc.pop();\r\n            }\r\n        }\r\n        else\r\n            len = cc.length + 1;\r\n        for (var key in cc) {\r\n            ba.writeByte(cc[key]);\r\n        }\r\n        for (var i: number = 0; i < len - cc.length; i++) {\r\n            ba.writeByte(0);\r\n        }\r\n        return len\r\n    }\r\n\r\n    public static log(msg: string) {\r\n        console.log(TSCommon.getTime() + \":\" + msg);\r\n    }\r\n\r\n    public static getTickCount() {\r\n        return new Date().getTime();\r\n    }\r\n\r\n    public static getTime() {\r\n        var time = new Date();\r\n        return time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds() + \" \" + time.getMilliseconds();\r\n    }\r\n\r\n\r\n    private static createEventDispatcher() {\r\n        if (this.dispatcher == null)\r\n            this.dispatcher = new EventDispatcher();\r\n    }\r\n\r\n    public static addEvent(type: string, listener: Function, thisObject: any) {\r\n        this.createEventDispatcher();\r\n        this.dispatcher.addEventListener(type, listener, thisObject);\r\n    }\r\n\r\n    public static removeEvent(type: string, listener: Function, thisObject: any) {\r\n        this.createEventDispatcher();\r\n        this.dispatcher.removeEventListener(type, listener, thisObject);\r\n    }\r\n\r\n    public static dispatchEvent(type: string, data?: any) {\r\n        this.createEventDispatcher();\r\n        this.dispatcher.dispatchEvent(new EgretEvent(type, false, false, data));\r\n    }\r\n\r\n    public static performWithDelay(target: any, callback: Function, delay: number) {\r\n        MyTimer.startTimer(target, callback, delay);\r\n    }\r\n}"]}
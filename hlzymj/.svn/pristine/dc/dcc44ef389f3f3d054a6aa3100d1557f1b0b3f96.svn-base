{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\scripts\\hall\\event/assets\\scripts\\hall\\event\\EventDispatcher.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\hall\\event","sourcesContent":["import { IEventDispatcher } from \"./IEventDispatcher\";\nimport { EventBin } from \"./EventBin\";\nimport { EgretEvent } from \"./EgretEvent\";\n//////////////////////////////////////////////////////////////////////////////////////\n//\n//  Copyright (c) 2014-present, Egret Technology.\n//  All rights reserved.\n//  Redistribution and use in source and binary forms, with or without\n//  modification, are permitted provided that the following conditions are met:\n//\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Egret nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n//\n//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,\n//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n/**\n * @private\n */\nconst enum Keys {\n    eventTarget,\n    eventsMap,\n    captureEventsMap,\n    notifyLevel\n}\n\n\nvar ONCE_EVENT_LIST: EventBin[] = [];\n\n/**\n * @language en_US\n * The EventDispatcher class is the base class for all classes that dispatchEvent events. The EventDispatcher class implements\n * the IEventDispatcher interface and is the base class for the DisplayObject class. The EventDispatcher class allows\n * any object on the display list to be an event target and as such, to use the methods of the IEventDispatcher interface.\n * EgretEvent targets are an important part of the Egret event model. The event target serves as the focal point for how events\n * flow through the display list hierarchy. When an event such as a touch tap, Egret dispatches an event object into the\n * event flow from the root of the display list. The event object then makes its way through the display list until it\n * reaches the event target, at which point it begins its return trip through the display list. This round-trip journey\n * to the event target is conceptually divided into three phases: <br/>\n * the capture phase comprises the journey from the root to the last node before the event target's node, the target\n * phase comprises only the event target node, and the bubbling phase comprises any subsequent nodes encountered on\n * the return trip to the root of the display list. In general, the easiest way for a user-defined class to gain event\n * dispatching capabilities is to extend EventDispatcher. If this is impossible (that is, if the class is already extending\n * another class), you can instead implement the IEventDispatcher interface, create an EventDispatcher member, and write simple\n * hooks to route calls into the aggregated EventDispatcher.\n * @see egret.IEventDispatcher\n * @version Egret 2.4\n * @platform Web,Native\n * @includeExample egret/events/EventDispatcher.ts\n */\n/**\n * @language zh_CN\n * EventDispatcher 是 Egret 的事件派发器类，负责进行事件的发送和侦听。\n * 事件目标是事件如何通过显示列表层次结构这一问题的焦点。当发生鼠标单击、触摸或按键等事件时，\n * 框架会将事件对象调度到从显示列表根开始的事件流中。然后该事件对象在显示列表中前进，直到到达事件目标，\n * 然后从这一点开始其在显示列表中的回程。在概念上，到事件目标的此往返行程被划分为三个阶段：\n * 捕获阶段包括从根到事件目标节点之前的最后一个节点的行程，目标阶段仅包括事件目标节点，冒泡阶段包括回程上遇到的任何后续节点到显示列表的根。\n * 通常，使用户定义的类能够调度事件的最简单方法是扩展 EventDispatcher。如果无法扩展（即，如果该类已经扩展了另一个类），则可以实现\n * IEventDispatcher 接口，创建 EventDispatcher 成员，并编写一些简单的映射，将调用连接到聚合的 EventDispatcher 中。\n * @see egret.IEventDispatcher\n * @version Egret 2.4\n * @platform Web,Native\n * @includeExample egret/events/EventDispatcher.ts\n */\nexport class EventDispatcher implements IEventDispatcher {\n\n    /**\n     * @language en_US\n     * create an instance of the EventDispatcher class.\n     * @param target The target object for events dispatched to the EventDispatcher object. This parameter is used when\n     * the EventDispatcher instance is aggregated by a class that implements IEventDispatcher; it is necessary so that the\n     * containing object can be the target for events. Do not use this parameter in simple cases in which a class extends EventDispatcher.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 创建一个 EventDispatcher 类的实例\n     * @param target 此 EventDispatcher 所抛出事件对象的 target 指向。此参数主要用于一个实现了 IEventDispatcher 接口的自定义类，\n     * 以便抛出的事件对象的 target 属性可以指向自定义类自身。请勿在直接继承 EventDispatcher 的情况下使用此参数。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public constructor(target: IEventDispatcher = null) {\n        this.$EventDispatcher = {\n            0: target ? target : this,\n            1: {},\n            2: {},\n            3: 0\n        };\n    }\n\n    /**\n     * @private\n     */\n    $EventDispatcher: Object;\n\n    /**\n     * @private\n     *\n     * @param useCapture\n     */\n    $getEventMap(useCapture?: boolean) {\n        var values = this.$EventDispatcher;\n        var eventMap: any = useCapture ? values[Keys.captureEventsMap] : values[Keys.eventsMap];\n        return eventMap;\n    }\n\n    /**\n     * @inheritDoc\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public addEventListener(type: string, listener: Function, thisObject: any, useCapture?: boolean, priority?: number): void {\n        this.$addListener(type, listener, thisObject, useCapture, priority);\n    }\n\n    /**\n     * @inheritDoc\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public once(type: string, listener: Function, thisObject: any, useCapture?: boolean, priority?: number): void {\n        this.$addListener(type, listener, thisObject, useCapture, priority, true);\n    }\n\n    /**\n     * @private\n     */\n    $addListener(type: string, listener: Function, thisObject: any, useCapture?: boolean, priority?: number, dispatchOnce?: boolean): void {\n        var values = this.$EventDispatcher;\n        var eventMap: any = useCapture ? values[Keys.captureEventsMap] : values[Keys.eventsMap];\n        var list: EventBin[] = eventMap[type];\n        if (!list) {\n            list = eventMap[type] = [];\n        }\n        else if (values[Keys.notifyLevel] !== 0) {\n            eventMap[type] = list = list.concat();\n        }\n\n        this.$insertEventBin(list, type, listener, thisObject, useCapture, priority, dispatchOnce);\n    }\n\n    $insertEventBin(list: Array<any>, type: string, listener: Function, thisObject: any, useCapture?: boolean, priority?: number, dispatchOnce?: boolean): boolean {\n        priority = +priority | 0;\n        var insertIndex = -1;\n        var length = list.length;\n        for (var i = 0; i < length; i++) {\n            var bin = list[i];\n            if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {\n                return false;\n            }\n            if (insertIndex == -1 && bin.priority < priority) {\n                insertIndex = i;\n            }\n        }\n        var eventBin: EventBin = {\n            type: type, listener: listener, thisObject: thisObject, priority: priority,\n            target: this, useCapture: useCapture, dispatchOnce: !!dispatchOnce\n        };\n        if (insertIndex !== -1) {\n            list.splice(insertIndex, 0, eventBin);\n        }\n        else {\n            list.push(eventBin);\n        }\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public removeEventListener(type: string, listener: Function, thisObject: any, useCapture?: boolean): void {\n\n        var values = this.$EventDispatcher;\n        var eventMap: Object = useCapture ? values[Keys.captureEventsMap] : values[Keys.eventsMap];\n        var list: EventBin[] = eventMap[type];\n        if (!list) {\n            return;\n        }\n        if (values[Keys.notifyLevel] !== 0) {\n            eventMap[type] = list = list.concat();\n        }\n\n        this.$removeEventBin(list, listener, thisObject);\n\n        if (list.length == 0) {\n            eventMap[type] = null;\n        }\n    }\n\n    $removeEventBin(list: Array<any>, listener: Function, thisObject: any): boolean {\n        var length = list.length;\n        for (var i = 0; i < length; i++) {\n            var bin = list[i];\n            if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {\n                list.splice(i, 1);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public hasEventListener(type: string): boolean {\n        var values = this.$EventDispatcher;\n        return !!(values[Keys.eventsMap][type] || values[Keys.captureEventsMap][type]);\n    }\n\n    /**\n     * @inheritDoc\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public willTrigger(type: string): boolean {\n        return this.hasEventListener(type);\n    }\n\n\n    /**\n     * @inheritDoc\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public dispatchEvent(event: EgretEvent): boolean {\n        event.$currentTarget = this.$EventDispatcher[Keys.eventTarget];\n        event.$setTarget(event.$currentTarget);\n        return this.$notifyListener(event, false);\n    }\n\n    /**\n     * @private\n     */\n    $notifyListener(event: EgretEvent, capturePhase: boolean): boolean {\n        var values = this.$EventDispatcher;\n        var eventMap: Object = capturePhase ? values[Keys.captureEventsMap] : values[Keys.eventsMap];\n        var list: EventBin[] = eventMap[event.$type];\n        if (!list) {\n            return true;\n        }\n        var length = list.length;\n        if (length == 0) {\n            return true;\n        }\n        var onceList = ONCE_EVENT_LIST;\n        //做个标记，防止外部修改原始数组导致遍历错误。这里不直接调用list.concat()因为dispatch()方法调用通常比on()等方法频繁。\n        values[Keys.notifyLevel]++;\n        for (var i = 0; i < length; i++) {\n            var eventBin = list[i];\n            eventBin.listener.call(eventBin.thisObject, event);\n            if (eventBin.dispatchOnce) {\n                onceList.push(eventBin);\n            }\n            if (event.$isPropagationImmediateStopped) {\n                break;\n            }\n        }\n        values[Keys.notifyLevel]--;\n        while (onceList.length) {\n            eventBin = onceList.pop();\n            eventBin.target.removeEventListener(eventBin.type, eventBin.listener, eventBin.thisObject, eventBin.useCapture);\n        }\n        return !event.$isDefaultPrevented;\n    }\n\n    /**\n     * @language en_US\n     * Distribute a specified event parameters.\n     * @param type The type of the event. EgretEvent listeners can access this information through the inherited type property.\n     * @param bubbles Determines whether the EgretEvent object bubbles. EgretEvent listeners can access this information through\n     * the inherited bubbles property.\n     * @param data {any} data\n     * @param cancelable Determines whether the EgretEvent object can be canceled. The default values is false.\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    /**\n     * @language zh_CN\n     * 派发一个指定参数的事件。\n     * @param type {string} 事件类型\n     * @param bubbles {boolean} 确定 EgretEvent 对象是否参与事件流的冒泡阶段。默认值为 false。\n     * @param data {any} 事件data\n     * @param cancelable {boolean} 确定是否可以取消 EgretEvent 对象。默认值为 false。\n     * @version Egret 2.4\n     * @platform Web,Native\n     */\n    public dispatchEventWith(type: string, bubbles?: boolean, data?: any, cancelable?: boolean): boolean {\n        if (bubbles || this.hasEventListener(type)) {\n            var event: EgretEvent = EgretEvent.create(EgretEvent, type, bubbles, cancelable);\n            event.data = data;\n            var result = this.dispatchEvent(event);\n            EgretEvent.release(event);\n            return result;\n        }\n        return true;\n    }\n}\n\n\n\n"]}